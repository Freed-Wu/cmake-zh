# manual
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 00:02+0800\n"
"PO-Revision-Date: 2023-06-01 20:35+0800\n"
"Last-Translator: Wu Zhenyu <wuzhenyu@ustc.edu>\n"
"Language-Team: Wu Zhenyu <wuzhenyu@ustc.edu>\n"
"Language: zh-CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.12.1\n"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:4
msgid "ccmake(1)"
msgstr "ccmake(1)"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:9
msgid "Synopsis"
msgstr "概要"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:14
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:17
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:40
#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:14
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:33
msgid "Description"
msgstr "描述"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:16
msgid ""
"The :program:`ccmake` executable is the CMake curses interface.  Project "
"configuration settings may be specified interactively through this GUI.  "
"Brief instructions are provided at the bottom of the terminal when the "
"program is running."
msgstr ""
":program:`ccmake` 可执行文件是 CMake curses 接口。可以通过此 GUI "
"以交互方式指定项目配置设置。程序运行时，终端底部会提供简要说明。"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:21
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:23
msgid ""
"CMake is a cross-platform build system generator.  Projects specify their "
"build process with platform-independent CMake listfiles included in each "
"directory of a source tree with the name ``CMakeLists.txt``. Users build a"
" project by using CMake to generate a build system for a native tool on "
"their platform."
msgstr ""
"CMake 是一个跨平台构建系统生成器。项目使用独立于平台的 CMake "
"列表文件指定其构建过程，该列表文件包含在名为“CMakeLists.txt”的源代码树的每个目录中。用户通过使用 CMake "
"为他们平台上的原生工具生成构建系统来构建项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:28
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:30
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:202
#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:41
msgid "Options"
msgstr "选项"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:3
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:36
msgid "Path to root directory of the CMake project to build."
msgstr "要构建的 CMake 项目的根目录路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:40
msgid ""
"Path to directory which CMake will use as the root of build directory."
msgstr "CMake 将用作构建目录根目录的目录路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:9
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:42
msgid "If the directory doesn't already exist CMake will make it."
msgstr "如果该目录不存在，CMake 会创建它。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:13
msgid "Pre-load a script to populate the cache."
msgstr "预加载脚本以填充缓存。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:15
msgid ""
"When CMake is first run in an empty build tree, it creates a "
"``CMakeCache.txt`` file and populates it with customizable settings for "
"the project.  This option may be used to specify a file from which to load"
" cache entries before the first pass through the project's CMake "
"listfiles.  The loaded entries take priority over the project's default "
"values.  The given file should be a CMake script containing :command:`set`"
" commands that use the ``CACHE`` option, not a cache-format file."
msgstr ""
"当 CMake "
"首次在一个空的构建树中运行时，它会创建一个“CMakeCache.txt”文件并使用项目的可自定义设置填充它。此选项可用于指定在第一次通过项目的 "
"CMake 列表文件之前加载缓存条目的文件。加载的条目优先于项目的默认值。给定的文件应该是一个 CMake 脚本，其中包含使用 ``CACHE`` "
"选项的 :command:`set` 命令，而不是缓存格式文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:24
msgid ""
"References to :variable:`CMAKE_SOURCE_DIR` and "
":variable:`CMAKE_BINARY_DIR` within the script evaluate to the top-level "
"source and build tree."
msgstr ""
"脚本中对 :variable:`CMAKE_SOURCE_DIR` 和 :variable:`CMAKE_BINARY_DIR` "
"的引用评估为顶级源代码和构建树。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:29
msgid "Create or update a CMake ``CACHE`` entry."
msgstr "创建或更新 CMake ``CACHE`` 条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:31
msgid ""
"When CMake is first run in an empty build tree, it creates a "
"``CMakeCache.txt`` file and populates it with customizable settings for "
"the project.  This option may be used to specify a setting that takes "
"priority over the project's default value.  The option may be repeated for"
" as many ``CACHE`` entries as desired."
msgstr ""
"当 CMake "
"首次在一个空的构建树中运行时，它会创建一个“CMakeCache.txt”文件并使用项目的可自定义设置填充它。此选项可用于指定优先于项目默认值的设置。可以根据需要为尽可能多的“CACHE”条目重复该选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:37
msgid ""
"If the ``:<type>`` portion is given it must be one of the types specified "
"by the :command:`set` command documentation for its ``CACHE`` signature. "
"If the ``:<type>`` portion is omitted the entry will be created with no "
"type if it does not exist with a type already.  If a command in the "
"project sets the type to ``PATH`` or ``FILEPATH`` then the ``<value>`` "
"will be converted to an absolute path."
msgstr ""
"如果给出了 ``:<type>`` 部分，它必须是 :command:`set` 命令文档为其 ``CACHE`` 签名指定的类型之一。如果省略 "
"``:<type>`` "
"部分，如果条目不存在，则将创建没有类型的条目。如果项目中的命令将类型设置为“PATH”或“FILEPATH”，则“<value>”将转换为绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:45
msgid ""
"This option may also be given as a single argument: "
"``-D<var>:<type>=<value>`` or ``-D<var>=<value>``."
msgstr "此选项也可以作为单个参数给出：``-D<var>:<type>=<value>`` 或``-D<var>=<value>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:48
msgid ""
"It's important to note that the order of ``-C`` and ``-D`` arguments is "
"significant. They will be carried out in the order they are listed, with "
"the last argument taking precedence over the previous ones. For example, "
"if you specify ``-DCMAKE_BUILD_TYPE=Debug``, followed by a ``-C`` argument"
" with a file that calls:"
msgstr ""
"重要的是要注意“-C”和“-D”参数的顺序很重要。它们将按照列出的顺序执行，最后一个参数优先于前面的参数。例如，如果您指定“-DCMAKE_BUILD_TYPE=Debug”，后跟一个“-C”参数和一个调用的文件："

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:58
msgid ""
"then the ``-C`` argument will take precedence, and ``CMAKE_BUILD_TYPE`` "
"will be set to ``Release``. However, if the ``-D`` argument comes after "
"the ``-C`` argument, it will be set to ``Debug``."
msgstr ""
"那么 ``-C`` 参数将优先，``CMAKE_BUILD_TYPE`` 将设置为 ``Release``。但是，如果 ``-D`` 参数出现在 "
"``-C`` 参数之后，它将被设置为 ``Debug``。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:62
msgid ""
"If a ``set(... CACHE ...)`` call in the ``-C`` file does not use "
"``FORCE``, and a ``-D`` argument sets the same variable, the ``-D`` "
"argument will take precedence regardless of order because of the nature of"
" non-``FORCE`` ``set(... CACHE ...)`` calls."
msgstr ""
"如果 ``-C`` 文件中的 ``set(... CACHE ...)`` 调用不使用 ``FORCE``，而 ``-D`` "
"参数设置相同的变量，则由于非``FORCE`` ``set(... CACHE ...)`` 调用的性质，无论顺序如何，``-D`` 参数都将优先。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:69
msgid "Remove matching entries from CMake ``CACHE``."
msgstr "从 CMake ``CACHE`` 中删除匹配条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:71
msgid ""
"This option may be used to remove one or more variables from the "
"``CMakeCache.txt`` file, globbing expressions using ``*`` and ``?`` are "
"supported.  The option may be repeated for as many ``CACHE`` entries as "
"desired."
msgstr ""
"此选项可用于从“CMakeCache.txt”文件中删除一个或多个变量，支持使用“*”和“?”的通配表达式。可以根据需要为尽可能多的“CACHE”条目重复该选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:76
msgid "Use with care, you can make your ``CMakeCache.txt`` non-working."
msgstr "小心使用，你可以让你的 ``CMakeCache.txt`` 不工作。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:80
msgid "Specify a build system generator."
msgstr "指定构建系统生成器。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:82
msgid ""
"CMake may support multiple native build systems on certain platforms.  A "
"generator is responsible for generating a particular build system.  "
"Possible generator names are specified in the :manual:`cmake-"
"generators(7)` manual."
msgstr ""
"CMake 可能在某些平台上支持多个本机构建系统。生成器负责生成特定的构建系统。可能的生成器名称在 :manual:`cmake-"
"generators(7)` 手册中指定。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:87
msgid ""
"If not specified, CMake checks the :envvar:`CMAKE_GENERATOR` environment "
"variable and otherwise falls back to a builtin default selection."
msgstr "如果未指定，CMake 会检查 :envvar:`CMAKE_GENERATOR` 环境变量，否则会回退到内置默认选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:92
msgid "Toolset specification for the generator, if supported."
msgstr "生成器的工具集规范（如果支持）。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:94
msgid ""
"Some CMake generators support a toolset specification to tell the native "
"build system how to choose a compiler.  See the "
":variable:`CMAKE_GENERATOR_TOOLSET` variable for details."
msgstr ""
"一些 CMake "
"生成器支持工具集规范来告诉本机构建系统如何选择编译器。有关详细信息，请参阅 :variable:`CMAKE_GENERATOR_TOOLSET` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:100
msgid "Specify platform name if supported by generator."
msgstr "如果生成器支持，请指定平台名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:102
msgid ""
"Some CMake generators support a platform name to be given to the native "
"build system to choose a compiler or SDK.  See the "
":variable:`CMAKE_GENERATOR_PLATFORM` variable for details."
msgstr ""
"一些 CMake 生成器支持将平台名称提供给本机构建系统以选择编译器或 "
"SDK。有关详细信息，请参阅 :variable:`CMAKE_GENERATOR_PLATFORM` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:108
msgid ""
"Specify the cross compiling toolchain file, equivalent to setting "
":variable:`CMAKE_TOOLCHAIN_FILE` variable."
msgstr "指定交叉编译工具链文件，相当于设置 :variable:`CMAKE_TOOLCHAIN_FILE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:113
msgid ""
"Specify the installation directory, used by the "
":variable:`CMAKE_INSTALL_PREFIX` variable. Must be an absolute path."
msgstr "指定安装目录，由 :variable:`CMAKE_INSTALL_PREFIX` 变量使用。必须是绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:118
msgid "Suppress developer warnings."
msgstr "禁止开发人员警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:120
msgid ""
"Suppress warnings that are meant for the author of the ``CMakeLists.txt`` "
"files. By default this will also turn off deprecation warnings."
msgstr "抑制针对 CMakeLists.txt 文件作者的警告。默认情况下，这也会关闭弃用警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:126
msgid "Enable developer warnings."
msgstr "启用开发人员警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:128
msgid ""
"Enable warnings that are meant for the author of the ``CMakeLists.txt`` "
"files. By default this will also turn on deprecation warnings."
msgstr "启用针对 CMakeLists.txt 文件作者的警告。默认情况下，这也会打开弃用警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:133
msgid "Enable deprecated functionality warnings."
msgstr "启用弃用的功能警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:135
msgid ""
"Enable warnings for usage of deprecated functionality, that are meant for "
"the author of the ``CMakeLists.txt`` files."
msgstr "为使用已弃用的功能启用警告，这是针对 ``CMakeLists.txt`` 文件的作者。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:140
msgid "Suppress deprecated functionality warnings."
msgstr "禁止弃用的功能警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:142
msgid ""
"Suppress warnings for usage of deprecated functionality, that are meant "
"for the author of the ``CMakeLists.txt`` files."
msgstr "禁止使用已弃用功能的警告，这些警告是针对“CMakeLists.txt”文件的作者的。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:147
msgid ""
"Treat CMake warnings as errors. ``<what>`` must be one of the following:"
msgstr "将 CMake 警告视为错误。 ``<what>`` 必须是以下之一："

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:153
#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:167
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:305
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:336
msgid "``dev``"
msgstr "``开发``"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:150
msgid "Make developer warnings errors."
msgstr "使开发人员警告错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:152
msgid ""
"Make warnings that are meant for the author of the ``CMakeLists.txt`` "
"files errors. By default this will also turn on deprecated warnings as "
"errors."
msgstr "为 CMakeLists.txt 文件错误的作者发出警告。默认情况下，这也会将不推荐使用的警告作为错误打开。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:158
#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:170
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:312
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:343
msgid "``deprecated``"
msgstr "``已弃用``"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:156
msgid "Make deprecated macro and function warnings errors."
msgstr "使不推荐使用的宏和函数警告错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:158
msgid ""
"Make warnings for usage of deprecated macros and functions, that are meant"
" for the author of the ``CMakeLists.txt`` files, errors."
msgstr "对不推荐使用的宏和函数的使用发出警告，这是针对 ``CMakeLists.txt`` 文件的作者，错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:163
msgid ""
"Do not treat CMake warnings as errors. ``<what>`` must be one of the "
"following:"
msgstr "不要将 CMake 警告视为错误。 ``<what>`` 必须是以下之一："

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:166
msgid ""
"Make warnings that are meant for the author of the ``CMakeLists.txt`` "
"files not errors. By default this will also turn off deprecated warnings "
"as errors."
msgstr "发出针对 ``CMakeLists.txt`` 文件而非错误的作者的警告。默认情况下，这也会将不推荐使用的警告作为错误关闭。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_BUILD.txt:170
msgid ""
"Make warnings for usage of deprecated macros and functions, that are meant"
" for the author of the ``CMakeLists.txt`` files, not errors."
msgstr "对不推荐使用的宏和函数的使用发出警告，这是针对 ``CMakeLists.txt`` 文件的作者，而不是错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:5
msgid "Show program name/version banner and exit. |file|"
msgstr "显示程序名称/版本横幅并退出。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:10
msgid "Print usage information and exit."
msgstr "打印使用信息并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:12
msgid "Usage describes the basic command line interface and its options."
msgstr "用法描述了基本的命令行界面及其选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:16
msgid "Print all help manuals and exit."
msgstr "打印所有帮助手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:18
msgid "All manuals are printed in a human-readable text format. |file|"
msgstr "所有手册均以人类可读的文本格式印刷。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:23
msgid "Print one help manual and exit."
msgstr "打印一份帮助手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:25
msgid ""
"The specified manual is printed in a human-readable text format. |file|"
msgstr "指定的手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:30
msgid "List help manuals available and exit."
msgstr "列出可用的帮助手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:32
msgid ""
"The list contains all manuals for which help may be obtained by using the "
"``--help-manual`` option followed by a manual name. |file|"
msgstr "该列表包含所有可以通过使用“--help-manual”选项后跟手册名称来获取帮助的手册。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:38
msgid "Print help for one command and exit."
msgstr "打印一个命令的帮助并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:40
msgid ""
"The :manual:`cmake-commands(7)` manual entry for ``<cmd>`` is printed in a"
" human-readable text format. |file|"
msgstr "``<cmd>`` 的 :manual:`cmake-commands(7)` 手册条目以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:46
msgid "List commands with help available and exit."
msgstr "列出具有可用帮助的命令并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:48
msgid ""
"The list contains all commands for which help may be obtained by using the"
" ``--help-command`` option followed by a command name. |file|"
msgstr "该列表包含所有可以通过使用“--help-command”选项后跟命令名称来获取帮助的命令。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:54
msgid "Print cmake-commands manual and exit."
msgstr "打印 cmake-commands 手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:56
msgid ""
"The :manual:`cmake-commands(7)` manual is printed in a human-readable text"
" format. |file|"
msgstr ":manual:`cmake-commands(7)` 手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:62
msgid "Print help for one module and exit."
msgstr "打印一个模块的帮助并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:64
msgid ""
"The :manual:`cmake-modules(7)` manual entry for ``<mod>`` is printed in a "
"human-readable text format. |file|"
msgstr "``<mod>`` 的 :manual:`cmake-modules(7)` 手册条目以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:70
msgid "List modules with help available and exit."
msgstr "列出具有可用帮助的模块并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:72
msgid ""
"The list contains all modules for which help may be obtained by using the "
"``--help-module`` option followed by a module name. |file|"
msgstr "该列表包含所有可以通过使用“--help-module”选项后跟模块名称来获取帮助的模块。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:78
msgid "Print cmake-modules manual and exit."
msgstr "打印 cmake-modules 手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:80
msgid ""
"The :manual:`cmake-modules(7)` manual is printed in a human-readable text "
"format. |file|"
msgstr ":manual:`cmake-modules(7)` 手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:86
msgid "Print help for one policy and exit."
msgstr "打印一项政策的帮助并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:88
msgid ""
"The :manual:`cmake-policies(7)` manual entry for ``<cmp>`` is printed in a"
" human-readable text format. |file|"
msgstr "``<cmp>`` 的 :manual:`cmake-policies(7)` 手册条目以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:94
msgid "List policies with help available and exit."
msgstr "列出具有可用帮助的策略并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:96
msgid ""
"The list contains all policies for which help may be obtained by using the"
" ``--help-policy`` option followed by a policy name. |file|"
msgstr "该列表包含所有可以通过使用“--help-policy”选项后跟策略名称来获取帮助的策略。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:102
msgid "Print cmake-policies manual and exit."
msgstr "打印 cmake-policies 手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:104
msgid ""
"The :manual:`cmake-policies(7)` manual is printed in a human-readable text"
" format. |file|"
msgstr ":manual:`cmake-policies(7)` 手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:110
msgid "Print help for one property and exit."
msgstr "打印一个属性的帮助并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:112
msgid ""
"The :manual:`cmake-properties(7)` manual entries for ``<prop>`` are "
"printed in a human-readable text format. |file|"
msgstr "``<prop>`` 的 :manual:`cmake-properties(7)` 手册条目以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:118
msgid "List properties with help available and exit."
msgstr "列出具有可用帮助的属性并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:120
msgid ""
"The list contains all properties for which help may be obtained by using "
"the ``--help-property`` option followed by a property name. |file|"
msgstr "该列表包含所有可以通过使用“--help-property”选项后跟属性名称来获取帮助的属性。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:126
msgid "Print cmake-properties manual and exit."
msgstr "打印 cmake-properties 手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:128
msgid ""
"The :manual:`cmake-properties(7)` manual is printed in a human-readable "
"text format. |file|"
msgstr ":manual:`cmake-properties(7)` 手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:134
msgid "Print help for one variable and exit."
msgstr "打印一个变量的帮助并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:136
msgid ""
"The :manual:`cmake-variables(7)` manual entry for ``<var>`` is printed in "
"a human-readable text format. |file|"
msgstr "``<var>`` 的 :manual:`cmake-variables(7)` 手册条目以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:142
msgid "List variables with help available and exit."
msgstr "列出可用帮助的变量并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:144
msgid ""
"The list contains all variables for which help may be obtained by using "
"the ``--help-variable`` option followed by a variable name. |file|"
msgstr "该列表包含所有变量，可以通过使用“--help-variable”选项后跟变量名来获得帮助。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:150
msgid "Print cmake-variables manual and exit."
msgstr "打印 cmake-variables 手册并退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/OPTIONS_HELP.txt:152
msgid ""
"The :manual:`cmake-variables(7)` manual is printed in a human-readable "
"text format. |file|"
msgstr ":manual:`cmake-variables(7)` 手册以人类可读的文本格式打印。 |文件|"

#: ../../cmake-prefix/src/cmake/Help/manual/ccmake.1.rst:37
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:56
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1337
#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:133
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1820
msgid "See Also"
msgstr "也可以看看"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:1
msgid "The following resources are available to get help using CMake:"
msgstr "以下资源可用于获取使用 CMake 的帮助："

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:6
msgid "Home Page"
msgstr "主页"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:4
msgid "https://cmake.org"
msgstr "https://cmake.org"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:6
msgid "The primary starting point for learning about CMake."
msgstr "学习 CMake 的主要起点。"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:12
msgid "Online Documentation and Community Resources"
msgstr "在线文档和社区资源"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:9
msgid "https://cmake.org/documentation"
msgstr "https://cmake.org/文档"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:11
msgid ""
"Links to available documentation and community resources may be found on "
"this web page."
msgstr "可在此网页上找到指向可用文档和社区资源的链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:17
msgid "Discourse Forum"
msgstr "话语论坛"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:15
msgid "https://discourse.cmake.org"
msgstr "https://discourse.cmake.org"

#: ../../cmake-prefix/src/cmake/Help/manual/LINKS.txt:17
msgid "The Discourse Forum hosts discussion and questions about CMake."
msgstr "Discourse Forum 主持关于 CMake 的讨论和问题。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:4
msgid "cmake-buildsystem(7)"
msgstr "cmake 构建系统(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:9
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/cpack-generators.7.rst:7
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:6
msgid "Contents"
msgstr "内容"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:13
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:11
msgid "Introduction"
msgstr "介绍"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:13
msgid ""
"A CMake-based buildsystem is organized as a set of high-level logical "
"targets.  Each target corresponds to an executable or library, or is a "
"custom target containing custom commands.  Dependencies between the "
"targets are expressed in the buildsystem to determine the build order and "
"the rules for regeneration in response to change."
msgstr ""
"基于 CMake "
"的构建系统被组织为一组高级逻辑目标。每个目标对应一个可执行文件或库，或者是包含自定义命令的自定义目标。目标之间的依赖关系在构建系统中表达，以确定构建顺序和响应变化的再生规则。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:20
msgid "Binary Targets"
msgstr "二进制目标"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:22
msgid ""
"Executables and libraries are defined using the :command:`add_executable` "
"and :command:`add_library` commands.  The resulting binary files have "
"appropriate :prop_tgt:`PREFIX`, :prop_tgt:`SUFFIX` and extensions for the "
"platform targeted. Dependencies between binary targets are expressed using"
" the :command:`target_link_libraries` command:"
msgstr ""
"可执行文件和库是使用 :command:`add_executable` 和 :command:`add_library` "
"命令定义的。生成的二进制文件具有适合目标平台的 :prop_tgt:`PREFIX`、 :prop_tgt:`SUFFIX` 和扩展名。使用 "
"target_link_libraries 命令表示二进制目标之间的依赖关系："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:34
msgid ""
"``archive`` is defined as a ``STATIC`` library -- an archive containing "
"objects compiled from ``archive.cpp``, ``zip.cpp``, and ``lzma.cpp``.  "
"``zipapp`` is defined as an executable formed by compiling and linking "
"``zipapp.cpp``. When linking the ``zipapp`` executable, the ``archive`` "
"static library is linked in."
msgstr ""
"``archive`` 被定义为 ``STATIC`` 库——包含从 ``archive.cpp``、``zip.cpp`` 和 "
"``lzma.cpp`` 编译的对象的存档。 ``zipapp`` 被定义为通过编译和链接``zipapp.cpp`` 形成的可执行文件。当链接 "
"``zipapp`` 可执行文件时，``archive`` 静态库被链接进来。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:41
msgid "Binary Executables"
msgstr "二进制可执行文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:43
msgid "The :command:`add_executable` command defines an executable target:"
msgstr ":command:`add_executable` 命令定义了一个可执行目标："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:49
msgid ""
"Commands such as :command:`add_custom_command`, which generates rules to "
"be run at build time can transparently use an :prop_tgt:`EXECUTABLE "
"<TYPE>` target as a ``COMMAND`` executable.  The buildsystem rules will "
"ensure that the executable is built before attempting to run the command."
msgstr ""
"诸如:command:`add_custom_command` 之类的命令生成要在构建时运行的规则，可以透明地使用 "
":prop_tgt:`EXECUTABLE <TYPE>` 目标作为 ``COMMAND`` "
"可执行文件。构建系统规则将确保在尝试运行命令之前构建可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:55
msgid "Binary Library Types"
msgstr "二进制库类型"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:60
msgid "Normal Libraries"
msgstr "普通图书馆"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:62
msgid ""
"By default, the :command:`add_library` command defines a ``STATIC`` "
"library, unless a type is specified.  A type may be specified when using "
"the command:"
msgstr ""
"默认情况下， :command:`add_library` 命令定义一个 ``STATIC`` 库，除非指定了类型。使用命令时可以指定类型："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:73
msgid ""
"The :variable:`BUILD_SHARED_LIBS` variable may be enabled to change the "
"behavior of :command:`add_library` to build shared libraries by default."
msgstr ""
":variable:`BUILD_SHARED_LIBS` 变量可以启用以更改 :command:`add_library` "
"的行为以默认构建共享库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:76
msgid ""
"In the context of the buildsystem definition as a whole, it is largely "
"irrelevant whether particular libraries are ``SHARED`` or ``STATIC`` -- "
"the commands, dependency specifications and other APIs work similarly "
"regardless of the library type.  The ``MODULE`` library type is dissimilar"
" in that it is generally not linked to -- it is not used in the right-"
"hand-side of the :command:`target_link_libraries` command. It is a type "
"which is loaded as a plugin using runtime techniques. If the library does "
"not export any unmanaged symbols (e.g. Windows resource DLL, C++/CLI DLL),"
" it is required that the library not be a ``SHARED`` library because CMake"
" expects ``SHARED`` libraries to export at least one symbol."
msgstr ""
"在整个构建系统定义的上下文中，特定库是“SHARED”还是“STATIC”在很大程度上是无关紧要的——无论库类型如何，命令、依赖规范和其他 API "
"的工作方式都是相似的。 ``MODULE`` 库类型的不同之处在于它通常不链接到 -- 它不在 "
":command:`target_link_libraries` "
"命令的右侧使用。它是一种使用运行时技术作为插件加载的类型。如果库不导出任何非托管符号（例如 Windows 资源 DLL、C++/CLI "
"DLL），则要求库不是 ``SHARED`` 库，因为 CMake 期望 ``SHARED`` 库至少导出一个象征。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:95
msgid "Apple Frameworks"
msgstr "苹果框架"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:97
msgid ""
"A ``SHARED`` library may be marked with the :prop_tgt:`FRAMEWORK` target "
"property to create an macOS or iOS Framework Bundle. A library with the "
"``FRAMEWORK`` target property should also set the "
":prop_tgt:`FRAMEWORK_VERSION` target property.  This property is typically"
" set to the value of \"A\" by macOS conventions. The "
"``MACOSX_FRAMEWORK_IDENTIFIER`` sets the ``CFBundleIdentifier`` key and it"
" uniquely identifies the bundle."
msgstr ""
"``SHARED`` 库可以用 :prop_tgt:`FRAMEWORK` 目标属性标记，以创建 macOS 或 iOS Framework "
"Bundle。具有 ``FRAMEWORK`` 目标属性的库还应设置 :prop_tgt:`FRAMEWORK_VERSION` 目标属性。根据 "
"macOS 约定，此属性通常设置为值“A”。 ``MACOSX_FRAMEWORK_IDENTIFIER`` 设置 "
"``CFBundleIdentifier`` 键，它唯一地标识包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:117
msgid "Object Libraries"
msgstr "对象库"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:119
msgid ""
"The ``OBJECT`` library type defines a non-archival collection of object "
"files resulting from compiling the given source files.  The object files "
"collection may be used as source inputs to other targets by using the "
"syntax :genex:`$<TARGET_OBJECTS:name>`.  This is a :manual:`generator "
"expression <cmake-generator-expressions(7)>` that can be used to supply "
"the ``OBJECT`` library content to other targets:"
msgstr ""
"``OBJECT`` 库类型定义了由编译给定源文件产生的目标文件的非归档集合。通过使用语法 "
":genex:`$<TARGET_OBJECTS:name>`，目标文件集合可以用作其他目标的源输入。这是一个 :manual:`generator"
" expression <cmake-generator-expressions(7)>` 可用于将 ``OBJECT`` 库内容提供给其他目标："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:134
msgid ""
"The link (or archiving) step of those other targets will use the object "
"files collection in addition to those from their own sources."
msgstr "这些其他目标的链接（或存档）步骤将使用目标文件集合以及来自它们自己的源的目标文件集合。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:137
msgid "Alternatively, object libraries may be linked into other targets:"
msgstr "或者，对象库可以链接到其他目标："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:149
msgid ""
"The link (or archiving) step of those other targets will use the object "
"files from ``OBJECT`` libraries that are *directly* linked.  Additionally,"
" usage requirements of the ``OBJECT`` libraries will be honored when "
"compiling sources in those other targets.  Furthermore, those usage "
"requirements will propagate transitively to dependents of those other "
"targets."
msgstr ""
"这些其他目标的链接（或归档）步骤将使用来自“直接”链接的“OBJECT”库的目标文件。此外，在这些其他目标中编译源代码时，将遵守 "
"``OBJECT`` 库的使用要求。此外，这些使用要求将传递给那些其他目标的依赖者。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:155
msgid ""
"Object libraries may not be used as the ``TARGET`` in a use of the "
":command:`add_custom_command(TARGET)` command signature.  However, the "
"list of objects can be used by :command:`add_custom_command(OUTPUT)` or "
":command:`file(GENERATE)` by using ``$<TARGET_OBJECTS:objlib>``."
msgstr ""
"在使用 :command:`add_custom_command(TARGET)` 命令签名时，对象库不能用作 "
"``TARGET``。但是，对象列表可以由 :command:`add_custom_command(OUTPUT)` 或 "
":command:`file(GENERATE)` 通过使用 ``$<TARGET_OBJECTS:objlib>`` 使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:161
msgid "Build Specification and Usage Requirements"
msgstr "构建规范和使用要求"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:163
msgid ""
"The :command:`target_include_directories`, "
":command:`target_compile_definitions` and "
":command:`target_compile_options` commands specify the build "
"specifications and the usage requirements of binary targets.  The commands"
" populate the :prop_tgt:`INCLUDE_DIRECTORIES`, "
":prop_tgt:`COMPILE_DEFINITIONS` and :prop_tgt:`COMPILE_OPTIONS` target "
"properties respectively, and/or the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties."
msgstr ""
":command:`target_include_directories`、 :command:`target_compile_definitions`"
" 和 :command:`target_compile_options` 命令指定构建规范和二进制目标的使用要求。这些命令分别填充 "
":prop_tgt:`INCLUDE_DIRECTORIES`、 :prop_tgt:`COMPILE_DEFINITIONS` 和 "
":prop_tgt:`COMPILE_OPTIONS` 目标属性，和/或 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`、 :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`"
" 和 :prop_t GT：` INTERFACE_COMPILE_OPTIONS` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:171
msgid ""
"Each of the commands has a ``PRIVATE``, ``PUBLIC`` and ``INTERFACE`` mode."
"  The ``PRIVATE`` mode populates only the non-``INTERFACE_`` variant of "
"the target property and the ``INTERFACE`` mode populates only the "
"``INTERFACE_`` variants. The ``PUBLIC`` mode populates both variants of "
"the respective target property. Each command may be invoked with multiple "
"uses of each keyword:"
msgstr ""
"每个命令都有一个 ``PRIVATE``、``PUBLIC`` 和 ``INTERFACE`` 模式。 ``PRIVATE`` "
"模式仅填充目标属性的非``INTERFACE_`` 变体，``INTERFACE`` 模式仅填充``INTERFACE_`` 变体。 "
"``PUBLIC`` 模式填充相应目标属性的两个变体。每个命令都可以通过多次使用每个关键字来调用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:184
msgid ""
"Note that usage requirements are not designed as a way to make downstreams"
" use particular :prop_tgt:`COMPILE_OPTIONS` or "
":prop_tgt:`COMPILE_DEFINITIONS` etc for convenience only.  The contents of"
" the properties must be **requirements**, not merely recommendations or "
"convenience."
msgstr ""
"请注意，使用要求并不是为了让下游使用特定的 :prop_tgt:`COMPILE_OPTIONS` 或 "
":prop_tgt:`COMPILE_DEFINITIONS` 等仅为方便起见而设计的。属性的内容必须是**要求**，而不仅仅是推荐或方便。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:190
msgid ""
"See the :ref:`Creating Relocatable Packages` section of the "
":manual:`cmake-packages(7)` manual for discussion of additional care that "
"must be taken when specifying usage requirements while creating packages "
"for redistribution."
msgstr ""
"请参阅 :ref:`cmake-packages(7)` 手册的 :ref:`Creating Relocatable Packages` "
"部分，讨论在创建用于重新分发的包时指定使用要求时必须注意的额外注意事项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:196
msgid "Target Properties"
msgstr "目标属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:198
msgid ""
"The contents of the :prop_tgt:`INCLUDE_DIRECTORIES`, "
":prop_tgt:`COMPILE_DEFINITIONS` and :prop_tgt:`COMPILE_OPTIONS` target "
"properties are used appropriately when compiling the source files of a "
"binary target."
msgstr ""
":prop_tgt:`INCLUDE_DIRECTORIES`、 :prop_tgt:`COMPILE_DEFINITIONS` 和 "
":prop_tgt:`COMPILE_OPTIONS` 目标属性的内容在编译二进制目标的源文件时被适当使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:203
msgid ""
"Entries in the :prop_tgt:`INCLUDE_DIRECTORIES` are added to the compile "
"line with ``-I`` or ``-isystem`` prefixes and in the order of appearance "
"in the property value."
msgstr ""
":prop_tgt:`INCLUDE_DIRECTORIES` 中的条目被添加到带有 ``-I`` 或 ``-isystem`` "
"前缀的编译行，并按照属性值中的出现顺序。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:207
msgid ""
"Entries in the :prop_tgt:`COMPILE_DEFINITIONS` are prefixed with ``-D`` or"
" ``/D`` and added to the compile line in an unspecified order.  The "
":prop_tgt:`DEFINE_SYMBOL` target property is also added as a compile "
"definition as a special convenience case for ``SHARED`` and ``MODULE`` "
"library targets."
msgstr ""
":prop_tgt:`COMPILE_DEFINITIONS` 中的条目以``-D`` 或``/D`` 为前缀，并以未指定的顺序添加到编译行。 "
":prop_tgt:`DEFINE_SYMBOL` 目标属性也作为编译定义添加为 ``SHARED`` 和 ``MODULE`` "
"库目标的特殊便利情况。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:213
msgid ""
"Entries in the :prop_tgt:`COMPILE_OPTIONS` are escaped for the shell and "
"added in the order of appearance in the property value.  Several compile "
"options have special separate handling, such as "
":prop_tgt:`POSITION_INDEPENDENT_CODE`."
msgstr ""
":prop_tgt:`COMPILE_OPTIONS` 中的条目针对 shell "
"进行了转义，并按照属性值中出现的顺序添加。几个编译选项有特殊的单独处理，例如 "
":prop_tgt:`POSITION_INDEPENDENT_CODE`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:217
msgid ""
"The contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties are *Usage "
"Requirements* -- they specify content which consumers must use to "
"correctly compile and link with the target they appear on. For any binary "
"target, the contents of each ``INTERFACE_`` property on each target "
"specified in a :command:`target_link_libraries` command is consumed:"
msgstr ""
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`、 :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`"
" 和 :prop_tgt:`INTERFACE_COMPILE_OPTIONS` "
"目标属性的内容是*使用要求*——它们指定了消费者必须使用的内容才能正确编译并链接到它们出现的目标在。对于任何二进制目标，在 "
":command:`target_link_libraries` 命令中指定的每个目标上的每个 ``INTERFACE_`` 属性的内容被消耗："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:244
msgid ""
"Because it is common to require that the source directory and "
"corresponding build directory are added to the "
":prop_tgt:`INCLUDE_DIRECTORIES`, the :variable:`CMAKE_INCLUDE_CURRENT_DIR`"
" variable can be enabled to conveniently add the corresponding directories"
" to the :prop_tgt:`INCLUDE_DIRECTORIES` of all targets.  The variable "
":variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` can be enabled to add "
"the corresponding directories to the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of all targets.  This makes use "
"of targets in multiple different directories convenient through use of the"
" :command:`target_link_libraries` command."
msgstr ""
"因为在INCLUDE_DIRECTORIES中通常需要添加源码目录和对应的build目录，所以可以开启CMAKE_INCLUDE_CURRENT_DIR变量，方便的将对应的目录添加到INCLUDE_DIRECTORIES中所有目标。可以启用变量"
" :variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` 以将相应目录添加到所有目标的 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`。这使得通过使用 target_link_libraries "
"命令可以方便地使用多个不同目录中的目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:258
msgid "Transitive Usage Requirements"
msgstr "传递使用要求"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:260
msgid ""
"The usage requirements of a target can transitively propagate to the "
"dependents. The :command:`target_link_libraries` command has ``PRIVATE``, "
"``INTERFACE`` and ``PUBLIC`` keywords to control the propagation."
msgstr ""
"目标的使用要求可以传递地传播到依赖项。 :command:`target_link_libraries` 命令有 "
"``PRIVATE``、``INTERFACE`` 和 ``PUBLIC`` 关键字来控制传播。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:282
msgid ""
"Because the ``archive`` is a ``PUBLIC`` dependency of ``archiveExtras``, "
"the usage requirements of it are propagated to ``consumer`` too."
msgstr ""
"因为 ``archive`` 是 ``archiveExtras`` 的 ``PUBLIC`` 依赖项，它的使用要求也传播到 "
"``consumer``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:285
msgid ""
"Because ``serialization`` is a ``PRIVATE`` dependency of "
"``archiveExtras``, the usage requirements of it are not propagated to "
"``consumer``."
msgstr ""
"因为 ``serialization`` 是 ``archiveExtras`` 的 ``PRIVATE`` 依赖项，它的使用要求不会传播到 "
"``consumer``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:289
msgid ""
"Generally, a dependency should be specified in a use of "
":command:`target_link_libraries` with the ``PRIVATE`` keyword if it is "
"used by only the implementation of a library, and not in the header files."
"  If a dependency is additionally used in the header files of a library "
"(e.g. for class inheritance), then it should be specified as a ``PUBLIC`` "
"dependency. A dependency which is not used by the implementation of a "
"library, but only by its headers should be specified as an ``INTERFACE`` "
"dependency.  The :command:`target_link_libraries` command may be invoked "
"with multiple uses of each keyword:"
msgstr ""
"通常，如果仅由库的实现而不是在头文件中使用，则应在使用 :command:`target_link_libraries` 和 ``PRIVATE``"
" 关键字时指定依赖项。如果在库的头文件中额外使用了依赖项（例如，用于类继承），则应将其指定为 ``PUBLIC`` "
"依赖项。库的实现不使用的依赖项，而仅由其标头使用的依赖项应指定为“INTERFACE”依赖项。 "
":command:`target_link_libraries` 命令可以通过多次使用每个关键字来调用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:306
msgid ""
"Usage requirements are propagated by reading the ``INTERFACE_`` variants "
"of target properties from dependencies and appending the values to the "
"non-``INTERFACE_`` variants of the operand.  For example, the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of dependencies is read and "
"appended to the :prop_tgt:`INCLUDE_DIRECTORIES` of the operand.  In cases "
"where order is relevant and maintained, and the order resulting from the "
":command:`target_link_libraries` calls does not allow correct compilation,"
" use of an appropriate command to set the property directly may update the"
" order."
msgstr ""
"通过从依赖项中读取目标属性的“INTERFACE_”变体并将值附加到操作数的非“INTERFACE_”变体来传播使用要求。例如，依赖项的 "
"INTERFACE_INCLUDE_DIRECTORIES 被读取并附加到操作数的 INCLUDE_DIRECTORIES "
"中。在顺序相关和维护的情况下，并且由 :command:`target_link_libraries` "
"调用产生的顺序不允许正确编译，使用适当的命令直接设置属性可能会更新顺序。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:316
msgid ""
"For example, if the linked libraries for a target must be specified in the"
" order ``lib1`` ``lib2`` ``lib3`` , but the include directories must be "
"specified in the order ``lib3`` ``lib1`` ``lib2``:"
msgstr ""
"例如，如果一个目标的链接库必须以 ``lib1`` ``lib2`` ``lib3`` 的顺序指定，但必须以 ``lib3`` ``lib1` "
"的顺序指定包含目录`` ``lib2``:"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:326
msgid ""
"Note that care must be taken when specifying usage requirements for "
"targets which will be exported for installation using the "
":command:`install(EXPORT)` command.  See :ref:`Creating Packages` for "
"more."
msgstr ""
"请注意，在为将使用 :command:`install(EXPORT)` 命令导出以进行安装的目标指定使用要求时必须小心。有关更多信息，请参阅 "
":ref:`Creating Packages`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:333
msgid "Compatible Interface Properties"
msgstr "兼容接口属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:335
msgid ""
"Some target properties are required to be compatible between a target and "
"the interface of each dependency.  For example, the "
":prop_tgt:`POSITION_INDEPENDENT_CODE` target property may specify a "
"boolean value of whether a target should be compiled as position-"
"independent-code, which has platform-specific consequences. A target may "
"also specify the usage requirement "
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` to communicate that "
"consumers must be compiled as position-independent-code."
msgstr ""
"一些目标属性需要在目标和每个依赖项的接口之间兼容。例如， :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"目标属性可以指定一个布尔值，表示目标是否应编译为位置无关代码，这具有特定于平台的后果。目标还可以指定使用要求:prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`"
" 以传达消费者必须编译为位置无关代码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:355
msgid ""
"Here, both ``exe1`` and ``exe2`` will be compiled as position-independent-"
"code. ``lib1`` will also be compiled as position-independent-code because "
"that is the default setting for ``SHARED`` libraries.  If dependencies "
"have conflicting, non-compatible requirements :manual:`cmake(1)` issues a "
"diagnostic:"
msgstr ""
"在这里，``exe1`` 和 ``exe2`` 都将被编译为位置无关代码。 ``lib1`` 也将被编译为与位置无关的代码，因为这是 "
"``SHARED`` 库的默认设置。如果依赖项有冲突的、不兼容的要求:manual:`cmake(1)` 发出诊断："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:375
msgid ""
"The ``lib1`` requirement ``INTERFACE_POSITION_INDEPENDENT_CODE`` is not "
"\"compatible\" with the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of "
"the ``exe1`` target.  The library requires that consumers are built as "
"position-independent-code, while the executable specifies to not built as "
"position-independent-code, so a diagnostic is issued."
msgstr ""
"``lib1`` 要求``INTERFACE_POSITION_INDEPENDENT_CODE`` 与``exe1`` "
"目标的 :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"属性不“兼容”。该库要求消费者构建为位置无关代码，而可执行文件指定不构建为位置无关代码，因此发出诊断。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:381
msgid ""
"The ``lib1`` and ``lib2`` requirements are not \"compatible\".  One of "
"them requires that consumers are built as position-independent-code, while"
" the other requires that consumers are not built as position-independent-"
"code. Because ``exe2`` links to both and they are in conflict, a CMake "
"error message is issued::"
msgstr ""
"``lib1`` 和 ``lib2`` 要求不“兼容”。其中一个要求消费者被构建为位置无关代码，而另一个要求消费者不被构建为位置独立代码。因为 "
"``exe2`` 链接到两者并且它们存在冲突，所以发出 CMake 错误消息 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:391
msgid ""
"To be \"compatible\", the :prop_tgt:`POSITION_INDEPENDENT_CODE` property, "
"if set must be either the same, in a boolean sense, as the "
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` property of all "
"transitively specified dependencies on which that property is set."
msgstr ""
"为了“兼容”， :prop_tgt:`POSITION_INDEPENDENT_CODE` 属性（如果设置）在布尔意义上必须与 "
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` 属性相同，该属性设置了该属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:396
msgid ""
"This property of \"compatible interface requirement\" may be extended to "
"other properties by specifying the property in the content of the "
":prop_tgt:`COMPATIBLE_INTERFACE_BOOL` target property.  Each specified "
"property must be compatible between the consuming target and the "
"corresponding property with an ``INTERFACE_`` prefix from each dependency:"
msgstr ""
"通过在 :prop_tgt:`COMPATIBLE_INTERFACE_BOOL` "
"目标属性的内容中指定该属性，可以将“兼容接口要求”的这一属性扩展到其他属性。每个指定的属性必须在消费目标和相应的属性之间兼容，每个依赖项都有一个 "
"``INTERFACE_`` 前缀："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:419
msgid ""
"Non-boolean properties may also participate in \"compatible interface\" "
"computations.  Properties specified in the "
":prop_tgt:`COMPATIBLE_INTERFACE_STRING` property must be either "
"unspecified or compare to the same string among all transitively specified"
" dependencies. This can be useful to ensure that multiple incompatible "
"versions of a library are not linked together through transitive "
"requirements of a target:"
msgstr ""
"非布尔属性也可以参与“兼容接口”计算。 :prop_tgt:`COMPATIBLE_INTERFACE_STRING` "
"属性中指定的属性必须未指定或与所有可传递指定的依赖项中的相同字符串进行比较。这对于确保库的多个不兼容版本不会通过目标的传递要求链接在一起很有用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:444
msgid ""
"The :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` target property specifies "
"that content will be evaluated numerically and the maximum number among "
"all specified will be calculated:"
msgstr ""
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` "
"目标属性指定将以数字方式评估内容，并计算所有指定内容中的最大数量："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:467
msgid ""
"Similarly, the :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` may be used to "
"calculate the numeric minimum value for a property from dependencies."
msgstr "类似地， :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` 可用于从依赖项计算属性的数字最小值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:470
msgid ""
"Each calculated \"compatible\" property value may be read in the consumer "
"at generate-time using generator expressions."
msgstr "每个计算出的“兼容”属性值都可以在生成时使用生成器表达式在消费者中读取。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:473
msgid ""
"Note that for each dependee, the set of properties specified in each "
"compatible interface property must not intersect with the set specified in"
" any of the other properties."
msgstr "请注意，对于每个依赖者，每个兼容接口属性中指定的属性集不得与任何其他属性中指定的属性集相交。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:478
msgid "Property Origin Debugging"
msgstr "属性源调试"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:480
msgid ""
"Because build specifications can be determined by dependencies, the lack "
"of locality of code which creates a target and code which is responsible "
"for setting build specifications may make the code more difficult to "
"reason about. :manual:`cmake(1)` provides a debugging facility to print "
"the origin of the contents of properties which may be determined by "
"dependencies.  The properties which can be debugged are listed in the "
":variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable documentation:"
msgstr ""
"因为构建规范可以由依赖关系确定，所以创建目标的代码和负责设置构建规范的代码缺乏局部性可能会使代码更难以推理。 :manual:`cmake(1)` "
"提供了一个调试工具来打印可能由依赖关系确定的属性内容的来源。可以调试的属性列在 CMAKE_DEBUG_TARGET_PROPERTIES "
"变量文档中："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:499
msgid ""
"In the case of properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_BOOL` "
"or :prop_tgt:`COMPATIBLE_INTERFACE_STRING`, the debug output shows which "
"target was responsible for setting the property, and which other "
"dependencies also defined the property.  In the case of "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` and "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN`, the debug output shows the "
"value of the property from each dependency, and whether the value "
"determines the new extreme."
msgstr ""
"对于 :prop_tgt:`COMPATIBLE_INTERFACE_BOOL` 或 "
":prop_tgt:`COMPATIBLE_INTERFACE_STRING` "
"中列出的属性，调试输出显示哪个目标负责设置该属性，以及哪些其他依赖项也定义了该属性。在 "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` 和 "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` "
"的情况下，调试输出显示每个依赖项的属性值，以及该值是否确定新的极值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:509
msgid "Build Specification with Generator Expressions"
msgstr "使用生成器表达式构建规范"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:511
msgid ""
"Build specifications may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>` containing content which may be conditional or "
"known only at generate-time.  For example, the calculated \"compatible\" "
"value of a property may be read with the ``TARGET_PROPERTY`` expression:"
msgstr ""
"构建规范可以使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"包含可能是有条件的或仅在生成时已知的内容。例如，可以使用“TARGET_PROPERTY”表达式读取属性的计算“兼容”值："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:532
msgid ""
"In this case, the ``exe1`` source files will be compiled with "
"``-DCONTAINER_SIZE=200``."
msgstr "在这种情况下，``exe1`` 源文件将使用``-DCONTAINER_SIZE=200`` 进行编译。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:535
msgid ""
"The unary ``TARGET_PROPERTY`` generator expression and the "
"``TARGET_POLICY`` generator expression are evaluated with the consuming "
"target context.  This means that a usage requirement specification may be "
"evaluated differently based on the consumer:"
msgstr ""
"一元“TARGET_PROPERTY”生成器表达式和“TARGET_POLICY”生成器表达式使用消费目标上下文进行评估。这意味着可以根据消费者对使用要求规范进行不同的评估："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:557
msgid ""
"The ``exe1`` executable will be compiled with ``-DLIB1_WITH_EXE``, while "
"the ``shared_lib`` shared library will be compiled with "
"``-DLIB1_WITH_SHARED_LIB`` and ``-DCONSUMER_CMP0041_NEW``, because policy "
":policy:`CMP0041` is ``NEW`` at the point where the ``shared_lib`` target "
"is created."
msgstr ""
"``exe1`` 可执行文件将使用``-DLIB1_WITH_EXE`` 进行编译，而``shared_lib`` "
"共享库将使用``-DLIB1_WITH_SHARED_LIB`` 和``-DCONSUMER_CMP0041_NEW`` 进行编译，因为策略:policy:"
" `CMP0041` 在创建 ``shared_lib`` 目标时是 ``NEW``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:562
msgid ""
"The ``BUILD_INTERFACE`` expression wraps requirements which are only used "
"when consumed from a target in the same buildsystem, or when consumed from"
" a target exported to the build directory using the :command:`export` "
"command.  The ``INSTALL_INTERFACE`` expression wraps requirements which "
"are only used when consumed from a target which has been installed and "
"exported with the :command:`install(EXPORT)` command:"
msgstr ""
"``BUILD_INTERFACE`` 表达式包装了要求，这些要求仅在从同一构建系统中的目标使用时使用，或者在使用 "
":command:`export` 命令从导出到构建目录的目标使用时使用。 ``INSTALL_INTERFACE`` "
"表达式包装了要求，这些要求仅在从已使用 :command:`install(EXPORT)` 命令安装和导出的目标中使用时使用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:584
msgid ""
"In this case, the ``exe1`` executable will be compiled with "
"``-DClimbingStats_FROM_BUILD_LOCATION``.  The exporting commands generate "
":prop_tgt:`IMPORTED` targets with either the ``INSTALL_INTERFACE`` or the "
"``BUILD_INTERFACE`` omitted, and the ``*_INTERFACE`` marker stripped away."
" A separate project consuming the ``ClimbingStats`` package would contain:"
msgstr ""
"在这种情况下，``exe1`` 可执行文件将使用``-DClimbingStats_FROM_BUILD_LOCATION`` "
"进行编译。导出命令生成 :prop_tgt:`IMPORTED` 目标，其中省略了 `INSTALL_INTERFACE`` 或 "
"``BUILD_INTERFACE``，并删除了 ``*_INTERFACE`` 标记。使用“ClimbingStats”包的单独项目将包含："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:597
msgid ""
"Depending on whether the ``ClimbingStats`` package was used from the build"
" location or the install location, the ``Downstream`` target would be "
"compiled with either ``-DClimbingStats_FROM_BUILD_LOCATION`` or "
"``-DClimbingStats_FROM_INSTALL_LOCATION``.  For more about packages and "
"exporting see the :manual:`cmake-packages(7)` manual."
msgstr ""
"根据“ClimbingStats”包是从构建位置还是从安装位置使用，“下游”目标将使用“-DClimbingStats_FROM_BUILD_LOCATION”或“-DClimbingStats_FROM_INSTALL_LOCATION”进行编译。有关包和导出的更多信息，请参阅"
" :manual:`cmake-packages(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:606
msgid "Include Directories and Usage Requirements"
msgstr "包括目录和使用要求"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:608
msgid ""
"Include directories require some special consideration when specified as "
"usage requirements and when used with generator expressions.  The "
":command:`target_include_directories` command accepts both relative and "
"absolute include directories:"
msgstr ""
"包含目录在指定为使用要求时以及与生成器表达式一起使用时需要一些特殊考虑。 :command:`target_include_directories`"
" 命令接受相对和绝对包含目录："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:621
msgid ""
"Relative paths are interpreted relative to the source directory where the "
"command appears.  Relative paths are not allowed in the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of :prop_tgt:`IMPORTED` targets."
msgstr ""
"相对路径被解释为相对于命令出现的源目录。 :prop_tgt:`IMPORTED` 目标的 "
"INTERFACE_INCLUDE_DIRECTORIES 中不允许使用相对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:625
msgid ""
"In cases where a non-trivial generator expression is used, the "
"``INSTALL_PREFIX`` expression may be used within the argument of an "
"``INSTALL_INTERFACE`` expression.  It is a replacement marker which "
"expands to the installation prefix when imported by a consuming project."
msgstr ""
"在使用非平凡生成器表达式的情况下，可以在 INSTALL_INTERFACE 表达式的参数中使用 INSTALL_PREFIX "
"表达式。它是一个替换标记，在由消费项目导入时扩展为安装前缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:630
msgid ""
"Include directories usage requirements commonly differ between the build-"
"tree and the install-tree.  The ``BUILD_INTERFACE`` and "
"``INSTALL_INTERFACE`` generator expressions can be used to describe "
"separate usage requirements based on the usage location.  Relative paths "
"are allowed within the ``INSTALL_INTERFACE`` expression and are "
"interpreted relative to the installation prefix.  For example:"
msgstr ""
"包含目录的使用要求通常在构建树和安装树之间有所不同。 ``BUILD_INTERFACE`` 和 ``INSTALL_INTERFACE`` "
"生成器表达式可用于根据使用位置描述单独的使用要求。 ``INSTALL_INTERFACE`` "
"表达式中允许使用相对路径，并相对于安装前缀进行解释。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:647
msgid ""
"Two convenience APIs are provided relating to include directories usage "
"requirements.  The :variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` "
"variable may be enabled, with an equivalent effect to:"
msgstr ""
"提供了两个与包含目录使用要求相关的便利 API。可以启用 "
":variable:`CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE` 变量，其效果等效于："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:657
msgid ""
"for each target affected.  The convenience for installed targets is an "
"``INCLUDES DESTINATION`` component with the :command:`install(TARGETS)` "
"command:"
msgstr ""
"对于每个受影响的目标。安装目标的便利是一个带有 :command:`install(TARGETS)` 命令的 ``INCLUDES "
"DESTINATION`` 组件："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:669
msgid ""
"This is equivalent to appending ``${CMAKE_INSTALL_PREFIX}/include`` to the"
" :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of each of the installed "
":prop_tgt:`IMPORTED` targets when generated by :command:`install(EXPORT)`."
msgstr ""
"这相当于在由 :command:`install(EXPORT)` 生成时将 ``${CMAKE_INSTALL_PREFIX}/include``"
" 附加到每个已安装的 :prop_tgt:`IMPORTED` 目标的 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:673
msgid ""
"When the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of an :ref:`imported "
"target <Imported targets>` is consumed, the entries in the property may be"
" treated as system include directories.  The effects of that are "
"toolchain-dependent, but one common effect is to omit compiler warnings "
"for headers found in those directories.  The :prop_tgt:`SYSTEM` property "
"of the installed target determines this behavior (see the "
":prop_tgt:`EXPORT_NO_SYSTEM` property for how to modify the installed "
"value for a target).  It is also possible to change how consumers "
"interpret the system behavior of consumed imported targets by setting the "
":prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property on the *consumer*."
msgstr ""
"当 :ref:`imported target <Imported targets>` 的 "
"INTERFACE_INCLUDE_DIRECTORIES "
"被消耗时，属性中的条目可能被视为系统包含目录。其效果依赖于工具链，但一个常见的效果是忽略在这些目录中找到的标头的编译器警告。已安装目标的 "
":prop_tgt:`SYSTEM` 属性决定了此行为（有关如何修改目标的已安装值，请参阅 :prop_tgt:`EXPORT_NO_SYSTEM`"
" 属性）。还可以通过在 *consumer* 上设置 :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` "
"目标属性来更改消费者解释已消费导入目标的系统行为的方式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:684
msgid ""
"If a binary target is linked transitively to a macOS "
":prop_tgt:`FRAMEWORK`, the ``Headers`` directory of the framework is also "
"treated as a usage requirement. This has the same effect as passing the "
"framework directory as an include directory."
msgstr ""
"如果二进制目标可传递地链接到 macOS :prop_tgt:`FRAMEWORK`，则框架的 ``Headers`` "
"目录也被视为使用要求。这与将框架目录作为包含目录传递具有相同的效果。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:690
msgid "Link Libraries and Generator Expressions"
msgstr "链接库和生成器表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:692
msgid ""
"Like build specifications, :prop_tgt:`link libraries <LINK_LIBRARIES>` may"
" be specified with generator expression conditions.  However, as "
"consumption of usage requirements is based on collection from linked "
"dependencies, there is an additional limitation that the link dependencies"
" must form a \"directed acyclic graph\".  That is, if linking to a target "
"is dependent on the value of a target property, that target property may "
"not be dependent on the linked dependencies:"
msgstr ""
"与构建规范一样， :prop_tgt:`link libraries <LINK_LIBRARIES>` "
"可以使用生成器表达式条件指定。然而，由于使用需求的消费是基于从链接依赖中收集的，因此存在一个额外的限制，即链接依赖必须形成一个“有向无环图”。也就是说，如果链接到目标依赖于目标属性的值，则该目标属性可能不依赖于链接的依赖项："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:713
msgid ""
"As the value of the :prop_tgt:`POSITION_INDEPENDENT_CODE` property of the "
"``exe1`` target is dependent on the linked libraries (``lib3``), and the "
"edge of linking ``exe1`` is determined by the same "
":prop_tgt:`POSITION_INDEPENDENT_CODE` property, the dependency graph above"
" contains a cycle.  :manual:`cmake(1)` issues an error message."
msgstr ""
"由于 ``exe1`` 目标的 :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"属性的值依赖于链接库（``lib3``），链接 ``exe1`` 的边缘由相同的决定： "
"prop_tgt:`POSITION_INDEPENDENT_CODE` 属性，上面的依赖图包含一个循环。 :manual:`cmake(1)` "
"发出错误信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:722
msgid "Output Artifacts"
msgstr "输出工件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:724
msgid ""
"The buildsystem targets created by the :command:`add_library` and "
":command:`add_executable` commands create rules to create binary outputs. "
"The exact output location of the binaries can only be determined at "
"generate-time because it can depend on the build-configuration and the "
"link-language of linked dependencies etc.  ``TARGET_FILE``, "
"``TARGET_LINKER_FILE`` and related expressions can be used to access the "
"name and location of generated binaries.  These expressions do not work "
"for ``OBJECT`` libraries however, as there is no single file generated by "
"such libraries which is relevant to the expressions."
msgstr ""
"由 :command:`add_library` 和 :command:`add_executable` "
"命令创建的构建系统目标创建创建二进制输出的规则。二进制文件的确切输出位置只能在生成时确定，因为它可能取决于构建配置和链接依赖项的链接语言等。``TARGET_FILE``、``TARGET_LINKER_FILE``"
" 和相关表达式可以是用于访问生成的二进制文件的名称和位置。然而，这些表达式不适用于 ``OBJECT`` "
"库，因为此类库没有生成与表达式相关的单个文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:734
msgid ""
"There are three kinds of output artifacts that may be build by targets as "
"detailed in the following sections.  Their classification differs between "
"DLL platforms and non-DLL platforms.  All Windows-based systems including "
"Cygwin are DLL platforms."
msgstr ""
"目标可以构建三种输出工件，如以下部分所述。它们的分类在 DLL 平台和非 DLL 平台之间有所不同。包括 Cygwin 在内的所有基于 "
"Windows 的系统都是 DLL 平台。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:742
msgid "Runtime Output Artifacts"
msgstr "运行时输出工件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:744
msgid "A *runtime* output artifact of a buildsystem target may be:"
msgstr "构建系统目标的 *runtime* 输出工件可能是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:746
msgid ""
"The executable file (e.g. ``.exe``) of an executable target created by the"
" :command:`add_executable` command."
msgstr "由 :command:`add_executable` 命令创建的可执行目标的可执行文件（例如 ``.exe``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:749
msgid ""
"On DLL platforms: the executable file (e.g. ``.dll``) of a shared library "
"target created by the :command:`add_library` command with the ``SHARED`` "
"option."
msgstr "在 DLL 平台上：由带有 SHARED 选项的 add_library 命令创建的共享库目标的可执行文件（例如 .dll）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:753
msgid ""
"The :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and "
":prop_tgt:`RUNTIME_OUTPUT_NAME` target properties may be used to control "
"runtime output artifact locations and names in the build tree."
msgstr ""
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` 和 :prop_tgt:`RUNTIME_OUTPUT_NAME` "
"目标属性可用于控制构建树中的运行时输出工件位置和名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:760
msgid "Library Output Artifacts"
msgstr "库输出工件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:762
msgid "A *library* output artifact of a buildsystem target may be:"
msgstr "构建系统目标的 *library* 输出工件可能是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:764
msgid ""
"The loadable module file (e.g. ``.dll`` or ``.so``) of a module library "
"target created by the :command:`add_library` command with the ``MODULE`` "
"option."
msgstr "由带有 MODULE 选项的 add_library 命令创建的模块库目标的可加载模块文件（例如 .dll 或 .so ）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:768
msgid ""
"On non-DLL platforms: the shared library file (e.g. ``.so`` or ``.dylib``)"
" of a shared library target created by the :command:`add_library` command "
"with the ``SHARED`` option."
msgstr ""
"在非 DLL 平台上：共享库目标的共享库文件（例如 ``.so`` 或 ``.dylib``）由带有 ``SHARED`` 选项的 "
"add_library 命令创建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:772
msgid ""
"The :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` and "
":prop_tgt:`LIBRARY_OUTPUT_NAME` target properties may be used to control "
"library output artifact locations and names in the build tree."
msgstr ""
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` 和 :prop_tgt:`LIBRARY_OUTPUT_NAME` "
"目标属性可用于控制构建树中库输出工件的位置和名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:779
msgid "Archive Output Artifacts"
msgstr "存档输出工件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:781
msgid "An *archive* output artifact of a buildsystem target may be:"
msgstr "构建系统目标的 *archive* 输出工件可能是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:783
msgid ""
"The static library file (e.g. ``.lib`` or ``.a``) of a static library "
"target created by the :command:`add_library` command with the ``STATIC`` "
"option."
msgstr "由带有 STATIC 选项的 add_library 命令创建的静态库目标的静态库文件（例如 .lib 或 .a ）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:787
msgid ""
"On DLL platforms: the import library file (e.g. ``.lib``) of a shared "
"library target created by the :command:`add_library` command with the "
"``SHARED`` option.  This file is only guaranteed to exist if the library "
"exports at least one unmanaged symbol."
msgstr ""
"在 DLL 平台上：共享库目标的导入库文件（例如 ``.lib``）由带有 ``SHARED`` 选项的 add_library "
"命令创建。仅当库导出至少一个非托管符号时，才能保证此文件存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:792
msgid ""
"On DLL platforms: the import library file (e.g. ``.lib``) of an executable"
" target created by the :command:`add_executable` command when its "
":prop_tgt:`ENABLE_EXPORTS` target property is set."
msgstr ""
"在 DLL 平台上：当 :prop_tgt:`ENABLE_EXPORTS` 目标属性设置时，由 add_executable "
"命令创建的可执行目标的导入库文件（例如 .lib）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:796
msgid ""
"On AIX: the linker import file (e.g. ``.imp``) of an executable target "
"created by the :command:`add_executable` command when its "
":prop_tgt:`ENABLE_EXPORTS` target property is set."
msgstr ""
"在 AIX 上：当其 :prop_tgt:`ENABLE_EXPORTS` 目标属性设置时，由 add_executable "
"命令创建的可执行目标的链接器导入文件（例如 .imp`）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:800
msgid ""
"The :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` and "
":prop_tgt:`ARCHIVE_OUTPUT_NAME` target properties may be used to control "
"archive output artifact locations and names in the build tree."
msgstr ""
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` 和 :prop_tgt:`ARCHIVE_OUTPUT_NAME` "
"目标属性可用于控制构建树中的存档输出工件位置和名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:805
msgid "Directory-Scoped Commands"
msgstr "目录范围的命令"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:807
msgid ""
"The :command:`target_include_directories`, "
":command:`target_compile_definitions` and "
":command:`target_compile_options` commands have an effect on only one "
"target at a time.  The commands :command:`add_compile_definitions`, "
":command:`add_compile_options` and :command:`include_directories` have a "
"similar function, but operate at directory scope instead of target scope "
"for convenience."
msgstr ""
":command:`target_include_directories`、 :command:`target_compile_definitions`"
" 和 :command:`target_compile_options` "
"命令一次只对一个目标产生影响。命令 :command:`add_compile_definitions`、 :command:`add_compile_options`"
" 和 :command:`include_directories` 具有类似的功能，但为方便起见，它们在目录范围而不是目标范围内运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:818
msgid "Build Configurations"
msgstr "构建配置"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:820
msgid ""
"Configurations determine specifications for a certain type of build, such "
"as ``Release`` or ``Debug``.  The way this is specified depends on the "
"type of :manual:`generator <cmake-generators(7)>` being used.  For single "
"configuration generators like  :ref:`Makefile Generators` and "
":generator:`Ninja`, the configuration is specified at configure time by "
"the :variable:`CMAKE_BUILD_TYPE` variable. For multi-configuration "
"generators like :ref:`Visual Studio <Visual Studio Generators>`, "
":generator:`Xcode`, and :generator:`Ninja Multi-Config`, the configuration"
" is chosen by the user at build time and :variable:`CMAKE_BUILD_TYPE` is "
"ignored.  In the multi-configuration case, the set of *available* "
"configurations is specified at configure time by the "
":variable:`CMAKE_CONFIGURATION_TYPES` variable, but the actual "
"configuration used cannot be known until the build stage. This difference "
"is often misunderstood, leading to problematic code like the following:"
msgstr ""
"配置确定特定类型构建的规范，例如“发布”或“调试”。指定的方式取决于所使用的 :manual:`generator <cmake-"
"generators(7)>` 的类型。对于像 Makefile Generators 和 Ninja 这样的单一配置生成器，配置在配置时由 "
"CMAKE_BUILD_TYPE 变量指定。对于 Visual Studio <Visual Studio Generators>、生成器 "
"Xcode 和生成器 Ninja Multi-Config 等多配置生成器，配置由用户在构建时选择，并且：变量 :`CMAKE_BUILD_TYPE`"
" 被忽略。在多配置情况下，*可用*配置集在配置时由 CMAKE_CONFIGURATION_TYPES "
"变量指定，但实际使用的配置直到构建阶段才能知道。这种差异经常被误解，导致出现如下有问题的代码："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:844
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` should be"
" used instead to handle configuration-specific logic correctly, regardless"
" of the generator used.  For example:"
msgstr ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` "
"应该被用来正确处理特定于配置的逻辑，而不管使用的是什么生成器。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:855
msgid ""
"In the presence of :prop_tgt:`IMPORTED` targets, the content of "
":prop_tgt:`MAP_IMPORTED_CONFIG_DEBUG <MAP_IMPORTED_CONFIG_<CONFIG>>` is "
"also accounted for by the above :genex:`$<CONFIG:Debug>` expression."
msgstr ""
"在存在 :prop_tgt:`IMPORTED` 目标的情况下， :prop_tgt:`MAP_IMPORTED_CONFIG_DEBUG "
"<MAP_IMPORTED_CONFIG_<CONFIG>>` 的内容也由上述 :genex:`$<CONFIG:Debug>` 表达式解释。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:861
msgid "Case Sensitivity"
msgstr "区分大小写"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:863
msgid ""
":variable:`CMAKE_BUILD_TYPE` and :variable:`CMAKE_CONFIGURATION_TYPES` are"
" just like other variables in that any string comparisons made with their "
"values will be case-sensitive.  The :genex:`$<CONFIG>` generator "
"expression also preserves the casing of the configuration as set by the "
"user or CMake defaults. For example:"
msgstr ""
":variable:`CMAKE_BUILD_TYPE` 和 :variable:`CMAKE_CONFIGURATION_TYPES` "
"与其他变量一样，任何与它们的值进行的字符串比较都是区分大小写的。 :genex:`$<CONFIG>` 生成器表达式还保留用户设置的配置大小写或 "
"CMake 默认值。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:888
msgid ""
"In contrast, CMake treats the configuration type case-insensitively when "
"using it internally in places that modify behavior based on the "
"configuration. For example, the :genex:`$<CONFIG:Debug>` generator "
"expression will evaluate to 1 for a configuration of not only ``Debug``, "
"but also ``DEBUG``, ``debug`` or even ``DeBuG``.  Therefore, you can "
"specify configuration types in :variable:`CMAKE_BUILD_TYPE` and "
":variable:`CMAKE_CONFIGURATION_TYPES` with any mixture of upper and "
"lowercase, although there are strong conventions (see the next section).  "
"If you must test the value in string comparisons, always convert the value"
" to upper or lowercase first and adjust the test accordingly."
msgstr ""
"相比之下，CMake 在根据配置修改行为的地方内部使用配置类型时，不区分大小写。例如， :genex:`$<CONFIG:Debug>` "
"生成器表达式将评估为 1 的配置不仅是 ``Debug``，还有 ``DEBUG``、``debug`` 甚至 ``调试``。因此，您可以在 "
":variable:`CMAKE_BUILD_TYPE` 和 :variable:`CMAKE_CONFIGURATION_TYPES` "
"中使用大小写的任意混合指定配置类型，尽管有严格的约定（请参阅下一节）。如果必须在字符串比较中测试值，请始终先将值转换为大写或小写，然后相应地调整测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:900
msgid "Default And Custom Configurations"
msgstr "默认和自定义配置"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:902
msgid "By default, CMake defines a number of standard configurations:"
msgstr "默认情况下，CMake 定义了一些标准配置："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:904
msgid "``Debug``"
msgstr "``调试``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:905
msgid "``Release``"
msgstr "``发布``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:906
msgid "``RelWithDebInfo``"
msgstr "``RelWithDebInfo``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:907
msgid "``MinSizeRel``"
msgstr "``MinSizeRel``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:909
msgid ""
"In multi-config generators, the :variable:`CMAKE_CONFIGURATION_TYPES` "
"variable will be populated with (potentially a subset of) the above list "
"by default, unless overridden by the project or user.  The actual "
"configuration used is selected by the user at build time."
msgstr ""
"在多配置生成器中，默认情况下，CMAKE_CONFIGURATION_TYPES "
"变量将填充上述列表（可能是其子集），除非被项目或用户覆盖。实际使用的配置由用户在构建时选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:914
msgid ""
"For single-config generators, the configuration is specified with the "
":variable:`CMAKE_BUILD_TYPE` variable at configure time and cannot be "
"changed at build time.  The default value will often be none of the above "
"standard configurations and will instead be an empty string.  A common "
"misunderstanding is that this is the same as ``Debug``, but that is not "
"the case.  Users should always explicitly specify the build type instead "
"to avoid this common problem."
msgstr ""
"对于单配置生成器，配置在配置时使用 :variable:`CMAKE_BUILD_TYPE` "
"变量指定，并且不能在构建时更改。默认值通常不是上述标准配置，而是一个空字符串。一个常见的误解是这与 ``Debug`` "
"相同，但事实并非如此。用户应该始终明确指定构建类型，而不是避免这种常见问题。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:921
msgid ""
"The above standard configuration types provide reasonable behavior on most"
" platforms, but they can be extended to provide other types.  Each "
"configuration defines a set of compiler and linker flag variables for the "
"language in use. These variables follow the convention "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`, where ``<CONFIG>`` is always the "
"uppercase configuration name.  When defining a custom configuration type, "
"make sure these variables are set appropriately, typically as cache "
"variables."
msgstr ""
"上述标准配置类型在大多数平台上提供了合理的行为，但它们可以扩展以提供其他类型。每个配置都为所使用的语言定义了一组编译器和链接器标志变量。这些变量遵循约定 :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`，其中``<CONFIG>``始终是大写的配置名称。定义自定义配置类型时，请确保正确设置这些变量，通常作为缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:931
msgid "Pseudo Targets"
msgstr "伪目标"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:933
msgid ""
"Some target types do not represent outputs of the buildsystem, but only "
"inputs such as external dependencies, aliases or other non-build "
"artifacts.  Pseudo targets are not represented in the generated "
"buildsystem."
msgstr "一些目标类型不代表构建系统的输出，而只代表输入，例如外部依赖项、别名或其他非构建工件。伪目标不在生成的构建系统中表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:940
msgid "Imported Targets"
msgstr "进口目标"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:942
msgid ""
"An :prop_tgt:`IMPORTED` target represents a pre-existing dependency.  "
"Usually such targets are defined by an upstream package and should be "
"treated as immutable. After declaring an :prop_tgt:`IMPORTED` target one "
"can adjust its target properties by using the customary commands such as "
":command:`target_compile_definitions`, "
":command:`target_include_directories`, :command:`target_compile_options` "
"or :command:`target_link_libraries` just like with any other regular "
"target."
msgstr ""
":prop_tgt:`IMPORTED` 目标表示预先存在的依赖项。通常这样的目标是由上游包定义的，应该被视为不可变的。声明 "
":prop_tgt:`IMPORTED` "
"目标后，可以使用常用命令调整其目标属性，例如:command:`target_compile_definitions`、 :command:`target_include_directories`、 :command:`target_compile_options`"
" 或 :command:`target_link_libraries`就像任何其他常规目标一样。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:950
msgid ""
":prop_tgt:`IMPORTED` targets may have the same usage requirement "
"properties populated as binary targets, such as "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`, "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS`, "
":prop_tgt:`INTERFACE_LINK_LIBRARIES`, and "
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`."
msgstr ""
"IMPORTED 目标可能具有与二进制目标相同的使用要求属性，例如 "
"INTERFACE_INCLUDE_DIRECTORIES、INTERFACE_COMPILE_DEFINITIONS、INTERFACE_COMPILE_OPTIONS、INTERFACE_LINK_LIBRARIES"
" 和 :prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:958
msgid ""
"The :prop_tgt:`LOCATION` may also be read from an IMPORTED target, though "
"there is rarely reason to do so.  Commands such as "
":command:`add_custom_command` can transparently use an "
":prop_tgt:`IMPORTED` :prop_tgt:`EXECUTABLE <TYPE>` target as a ``COMMAND``"
" executable."
msgstr ""
":prop_tgt:`LOCATION` 也可以从 IMPORTED 目标中读取，尽管很少有理由这样做。诸如 "
":command:`add_custom_command` 的命令可以透明地使用 :prop_tgt:`IMPORTED` "
":prop_tgt:`EXECUTABLE <TYPE>` 目标作为 ``COMMAND`` 可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:963
msgid ""
"The scope of the definition of an :prop_tgt:`IMPORTED` target is the "
"directory where it was defined.  It may be accessed and used from "
"subdirectories, but not from parent directories or sibling directories.  "
"The scope is similar to the scope of a cmake variable."
msgstr ""
":prop_tgt:`IMPORTED` 目标的定义范围是定义它的目录。它可以从子目录访问和使用，但不能从父目录或兄弟目录访问和使用。范围类似于 "
"cmake 变量的范围。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:968
msgid ""
"It is also possible to define a ``GLOBAL`` :prop_tgt:`IMPORTED` target "
"which is accessible globally in the buildsystem."
msgstr "也可以定义一个 ``GLOBAL`` :prop_tgt:`IMPORTED` 目标，它可以在构建系统中全局访问。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:971
msgid ""
"See the :manual:`cmake-packages(7)` manual for more on creating packages "
"with :prop_tgt:`IMPORTED` targets."
msgstr ""
"有关使用 :prop_tgt:`IMPORTED` 目标创建包的更多信息，请参阅 :manual:`cmake-packages(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:977
msgid "Alias Targets"
msgstr "别名目标"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:979
msgid ""
"An ``ALIAS`` target is a name which may be used interchangeably with a "
"binary target name in read-only contexts.  A primary use-case for "
"``ALIAS`` targets is for example or unit test executables accompanying a "
"library, which may be part of the same buildsystem or built separately "
"based on user configuration."
msgstr ""
"``ALIAS`` 目标是一个名称，可以在只读上下文中与二进制目标名称互换使用。 ``ALIAS`` "
"目标的主要用例是例如库附带的单元测试可执行文件，它们可能是同一构建系统的一部分，也可能根据用户配置单独构建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:993
msgid ""
"In another directory, we can link unconditionally to the "
"``Upstream::lib1`` target, which may be an :prop_tgt:`IMPORTED` target "
"from a package, or an ``ALIAS`` target if built as part of the same "
"buildsystem."
msgstr ""
"在另一个目录中，我们可以无条件地链接到 ``Upstream::lib1`` 目标，它可能是来自一个包的 :prop_tgt:`IMPORTED` "
"目标，或者是一个 ``ALIAS`` 目标，如果作为相同的一部分构建的话构建系统。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1005
msgid ""
"``ALIAS`` targets are not mutable, installable or exportable.  They are "
"entirely local to the buildsystem description.  A name can be tested for "
"whether it is an ``ALIAS`` name by reading the :prop_tgt:`ALIASED_TARGET` "
"property from it:"
msgstr ""
"``ALIAS`` 目标不是可变的、不可安装的或不可导出的。它们完全是构建系统描述的本地内容。可以通过从中读取 "
":prop_tgt:`ALIASED_TARGET` 属性来测试名称是否为 ``ALIAS`` 名称："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1020
msgid "Interface Libraries"
msgstr "接口库"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1022
msgid ""
"An ``INTERFACE`` library target does not compile sources and does not "
"produce a library artifact on disk, so it has no :prop_tgt:`LOCATION`."
msgstr "``INTERFACE`` 库目标不会编译源代码，也不会在磁盘上生成库工件，因此它没有 :prop_tgt:`LOCATION`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1025
msgid ""
"It may specify usage requirements such as "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`, "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS`, "
":prop_tgt:`INTERFACE_LINK_LIBRARIES`, :prop_tgt:`INTERFACE_SOURCES`, and "
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`. Only the ``INTERFACE`` "
"modes of the :command:`target_include_directories`, "
":command:`target_compile_definitions`, :command:`target_compile_options`, "
":command:`target_sources`, and :command:`target_link_libraries` commands "
"may be used with ``INTERFACE`` libraries."
msgstr ""
"它可以指定使用要求，例如_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE`。只有 "
":command:`target_include_directories`、 :command:`target_compile_definitions`、 :command:`target_compile_options`、 :command:`target_sources`"
" 和 :command:`target_link_libraries` 命令的 ``INTERFACE`` 模式可以与``INTERFACE`` "
"库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1037
msgid ""
"Since CMake 3.19, an ``INTERFACE`` library target may optionally contain "
"source files.  An interface library that contains source files will be "
"included as a build target in the generated buildsystem.  It does not "
"compile sources, but may contain custom commands to generate other "
"sources. Additionally, IDEs will show the source files as part of the "
"target for interactive reading and editing."
msgstr ""
"从 CMake 3.19 "
"开始，“INTERFACE”库目标可以选择包含源文件。包含源文件的接口库将作为构建目标包含在生成的构建系统中。它不编译源代码，但可能包含生成其他源代码的自定义命令。此外，IDE"
" 会将源文件显示为交互式阅读和编辑目标的一部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1044
msgid ""
"A primary use-case for ``INTERFACE`` libraries is header-only libraries. "
"Since CMake 3.23, header files may be associated with a library by adding "
"them to a header set using the :command:`target_sources` command:"
msgstr ""
"``INTERFACE`` 库的主要用例是仅标头库。从 CMake 3.23 开始，头文件可以通过使用 "
":command:`target_sources` 命令将头文件添加到头文件集来与库相关联："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1061
msgid ""
"When we specify the ``FILE_SET`` here, the ``BASE_DIRS`` we define "
"automatically become include directories in the usage requirements for the"
" target ``Eigen``. The usage requirements from the target are consumed and"
" used when compiling, but have no effect on linking."
msgstr ""
"当我们在这里指定 ``FILE_SET`` 时，我们定义的 ``BASE_DIRS`` 自动成为目标 ``Eigen`` 使用要求中的 "
"include 目录。来自目标的使用要求在编译时被消耗和使用，但对链接没有影响。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1066
msgid ""
"Another use-case is to employ an entirely target-focussed design for usage"
" requirements:"
msgstr "另一个用例是针对使用要求采用完全以目标为中心的设计："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1084
msgid ""
"This way, the build specification of ``exe1`` is expressed entirely as "
"linked targets, and the complexity of compiler-specific flags is "
"encapsulated in an ``INTERFACE`` library target."
msgstr "这样，``exe1`` 的构建规范完全表示为链接目标，编译器特定标志的复杂性被封装在 ``INTERFACE`` 库目标中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1088
msgid ""
"``INTERFACE`` libraries may be installed and exported. We can install the "
"default header set along with the target:"
msgstr "``INTERFACE`` 库可以被安装和导出。我们可以安装默认标头集和目标："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-buildsystem.7.rst:1107
msgid ""
"Here, the headers defined in the header set are installed to "
"``include/Eigen``. The install destination automatically becomes an "
"include directory that is a usage requirement for consumers."
msgstr "在这里，标头集中定义的标头被安装到“include/Eigen”。安装目标自动成为包含目录，这是消费者的使用要求。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:4
msgid "cmake-commands(7)"
msgstr "cmake 命令(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:11
msgid "Scripting Commands"
msgstr "脚本命令"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:13
msgid "These commands are always available."
msgstr "这些命令始终可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:70
msgid "Project Commands"
msgstr "项目命令"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:72
msgid "These commands are available only in CMake projects."
msgstr "这些命令仅在 CMake 项目中可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:127
msgid "CTest Commands"
msgstr "C测试命令"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:129
msgid "These commands are available only in CTest scripts."
msgstr "这些命令仅在 CTest 脚本中可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:149
msgid "Deprecated Commands"
msgstr "弃用的命令"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-commands.7.rst:151
msgid ""
"These commands are deprecated and are only made available to maintain "
"backward compatibility.  The documentation of each command states the "
"CMake version in which it was deprecated.  Do not use these commands in "
"new code."
msgstr "这些命令已弃用，仅用于维护向后兼容性。每个命令的文档都说明了它被弃用的 CMake 版本。不要在新代码中使用这些命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:4
msgid "cmake-compile-features(7)"
msgstr "cmake 编译功能 (7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:13
msgid ""
"Project source code may depend on, or be conditional on, the availability "
"of certain features of the compiler.  There are three use-cases which "
"arise: `Compile Feature Requirements`_, `Optional Compile Features`_ and "
"`Conditional Compilation Options`_."
msgstr "项目源代码可能取决于或取决于编译器某些功能的可用性。出现了三个用例：`编译特性要求`_、`可选编译特性`_ 和`条件编译选项`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:18
msgid ""
"While features are typically specified in programming language standards, "
"CMake provides a primary user interface based on granular handling of the "
"features, not the language standard that introduced the feature."
msgstr "虽然功能通常在编程语言标准中指定，但 CMake 提供了一个基于对功能的精细处理的主要用户界面，而不是引入该功能的语言标准。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:22
msgid ""
"The :prop_gbl:`CMAKE_C_KNOWN_FEATURES`, "
":prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES`, and "
":prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global properties contain all the "
"features known to CMake, regardless of compiler support for the feature. "
"The :variable:`CMAKE_C_COMPILE_FEATURES`, "
":variable:`CMAKE_CUDA_COMPILE_FEATURES` , and "
":variable:`CMAKE_CXX_COMPILE_FEATURES` variables contain all features "
"CMake knows are known to the compiler, regardless of language standard or "
"compile flags needed to use them."
msgstr ""
"CMAKE_C_KNOWN_FEATURES、CMAKE_CUDA_KNOWN_FEATURES 和 "
"CMAKE_CXX_KNOWN_FEATURES 全局属性包含 CMake 已知的所有功能，无论编译器是否支持该功能。 "
":variable:`CMAKE_C_COMPILE_FEATURES`、 :variable:`CMAKE_CUDA_COMPILE_FEATURES`"
" 和 :variable:`CMAKE_CXX_COMPILE_FEATURES` 变量包含 CMake "
"知道编译器已知的所有功能，无论使用它们所需的语言标准或编译标志如何。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:30
msgid ""
"Features known to CMake are named mostly following the same convention as "
"the Clang feature test macros.  There are some exceptions, such as CMake "
"using ``cxx_final`` and ``cxx_override`` instead of the single "
"``cxx_override_control`` used by Clang."
msgstr ""
"CMake 已知的功能命名大多遵循与 Clang 功能测试宏相同的约定。有一些例外，例如 CMake 使用 ``cxx_final`` 和 "
"``cxx_override`` 而不是 Clang 使用的单个 ``cxx_override_control``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:35
msgid ""
"Note that there are no separate compile features properties or variables "
"for the ``OBJC`` or ``OBJCXX`` languages.  These are based off ``C`` or "
"``C++`` respectively, so the properties and variables for their "
"corresponding base language should be used instead."
msgstr ""
"请注意，“OBJC”或“OBJCXX”语言没有单独的编译功能属性或变量。它们分别基于 ``C`` 或 "
"``C++``，因此应该使用它们相应的基本语言的属性和变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:41
msgid "Compile Feature Requirements"
msgstr "编译特性要求"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:43
msgid ""
"Compile feature requirements may be specified with the "
":command:`target_compile_features` command.  For example, if a target must"
" be compiled with compiler support for the :prop_gbl:`cxx_constexpr "
"<CMAKE_CXX_KNOWN_FEATURES>` feature:"
msgstr ""
"可以使用 target_compile_features "
"命令指定编译功能要求。例如，如果必须使用编译器支持编译目标:prop_gbl:`cxx_constexpr "
"<CMAKE_CXX_KNOWN_FEATURES>` 特性："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:53
msgid ""
"In processing the requirement for the ``cxx_constexpr`` feature, "
":manual:`cmake(1)` will ensure that the in-use C++ compiler is capable of "
"the feature, and will add any necessary flags such as ``-std=gnu++11`` to "
"the compile lines of C++ files in the ``mylib`` target.  A ``FATAL_ERROR``"
" is issued if the compiler is not capable of the feature."
msgstr ""
"在处理对 ``cxx_constexpr`` 功能的要求时，cmake(1)` 将确保正在使用的 C++ "
"编译器能够使用该功能，并将添加任何必要的标志，例如 ``-std= gnu++11`` 到 ``mylib`` 目标中的 C++ "
"文件的编译行。如果编译器不支持该功能，则会发出“FATAL_ERROR”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:60
msgid ""
"The exact compile flags and language standard are deliberately not part of"
" the user interface for this use-case.  CMake will compute the appropriate"
" compile flags to use by considering the features specified for each "
"target."
msgstr "确切的编译标志和语言标准故意不包含在该用例的用户界面中。 CMake 将通过考虑为每个目标指定的功能来计算要使用的适当编译标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:65
msgid ""
"Such compile flags are added even if the compiler supports the particular "
"feature without the flag. For example, the GNU compiler supports variadic "
"templates (with a warning) even if ``-std=gnu++98`` is used.  CMake adds "
"the ``-std=gnu++11`` flag if ``cxx_variadic_templates`` is specified as a "
"requirement."
msgstr ""
"即使编译器支持没有标志的特定功能，也会添加此类编译标志。例如，即使使用“-std=gnu++98”，GNU "
"编译器也支持可变参数模板（带有警告）。如果将“cxx_variadic_templates”指定为要求，CMake "
"添加“-std=gnu++11”标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:71
msgid ""
"In the above example, ``mylib`` requires ``cxx_constexpr`` when it is "
"built itself, but consumers of ``mylib`` are not required to use a "
"compiler which supports ``cxx_constexpr``.  If the interface of ``mylib`` "
"does require the ``cxx_constexpr`` feature (or any other known feature), "
"that may be specified with the ``PUBLIC`` or ``INTERFACE`` signatures of "
":command:`target_compile_features`:"
msgstr ""
"在上面的示例中，``mylib`` 在构建时需要``cxx_constexpr``，但是``mylib`` "
"的使用者不需要使用支持``cxx_constexpr`` 的编译器。如果 ``mylib`` 的接口确实需要 ``cxx_constexpr`` "
"特性（或任何其他已知特性），则可以使用 :command:`target_compile_features 的 ``PUBLIC`` 或 "
"``INTERFACE`` 签名指定`："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:88
msgid ""
"Feature requirements are evaluated transitively by consuming the link "
"implementation.  See :manual:`cmake-buildsystem(7)` for more on transitive"
" behavior of build properties and usage requirements."
msgstr ""
"通过使用链接实现来传递地评估功能需求。有关构建属性和使用要求的传递行为的更多信息，请参阅 :manual:`cmake-buildsystem(7)`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:95
msgid "Requiring Language Standards"
msgstr "要求语言标准"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:97
msgid ""
"In projects that use a large number of commonly available features from a "
"particular language standard (e.g. C++ 11) one may specify a meta-feature "
"(e.g. ``cxx_std_11``) that requires use of a compiler mode that is at "
"minimum aware of that standard, but could be greater. This is simpler than"
" specifying all the features individually, but does not guarantee the "
"existence of any particular feature. Diagnosis of use of unsupported "
"features will be delayed until compile time."
msgstr ""
"在使用来自特定语言标准（例如 C++ 11）的大量常用功能的项目中，可以指定一个元功能（例如 "
"``cxx_std_11``），该功能需要使用至少知道该功能的编译器模式标准，但可能会更大。这比单独指定所有特征更简单，但不保证任何特定特征的存在。使用不受支持的功能的诊断将延迟到编译时。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:105
msgid ""
"For example, if C++ 11 features are used extensively in a project's header"
" files, then clients must use a compiler mode that is no less than C++ 11."
"  This can be requested with the code:"
msgstr "例如，如果项目的头文件中大量使用 C++ 11 特性，则客户端必须使用不低于 C++ 11 的编译器模式。可以通过代码来请求："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:113
msgid ""
"In this example, CMake will ensure the compiler is invoked in a mode of "
"at-least C++ 11 (or C++ 14, C++ 17, ...), adding flags such as "
"``-std=gnu++11`` if necessary.  This applies to sources within ``mylib`` "
"as well as any dependents (that may include headers from ``mylib``)."
msgstr ""
"在此示例中，CMake 将确保以至少 C++ 11（或 C++ 14、C++ 17 "
"等）的模式调用编译器，如有必要，添加诸如“-std=gnu++11”之类的标志.这适用于 ``mylib`` 中的源以及任何依赖项（可能包括来自 "
"``mylib`` 的标头）。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_LANG_STD_FLAGS.txt:3
msgid ""
"If the compiler's default standard level is at least that of the requested"
" feature, CMake may omit the ``-std=`` flag. The flag may still be added "
"if the compiler's default extensions mode does not match the "
":prop_tgt:`<LANG>_EXTENSIONS` target property, or if the "
":prop_tgt:`<LANG>_STANDARD` target property is set."
msgstr ""
"如果编译器的默认标准级别至少是所请求功能的标准级别，CMake "
"可能会省略“-std=”标志。如果编译器的默认扩展模式与目标属性不匹配，或者如果设置了目标属性，则仍可能添加该标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:121
msgid "Availability of Compiler Extensions"
msgstr "编译器扩展的可用性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:123
msgid ""
"The :prop_tgt:`<LANG>_EXTENSIONS` target property defaults to the "
"compiler's default (see :variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`). Note"
" that because most compilers enable extensions by default, this may expose"
" portability bugs in user code or in the headers of third-party "
"dependencies."
msgstr ""
":prop_tgt:`<LANG>_EXTENSIONS` 目标属性默认为编译器的默认值（参见 "
":variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`）。请注意，由于大多数编译器默认启用扩展，这可能会暴露用户代码或第三方依赖项标头中的可移植性错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:128
msgid ""
":prop_tgt:`<LANG>_EXTENSIONS` used to default to ``ON``. See "
":policy:`CMP0128`."
msgstr ":prop_tgt:`<LANG>_EXTENSIONS` 过去默认为 ``ON``。请参阅:policy:`CMP0128`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:131
msgid "Optional Compile Features"
msgstr "可选的编译功能"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:133
msgid ""
"Compile features may be preferred if available, without creating a hard "
"requirement.   This can be achieved by *not* specifying features with "
":command:`target_compile_features` and instead checking the compiler "
"capabilities with preprocessor conditions in project code."
msgstr ""
"如果可用，编译功能可能是首选，而不会产生硬性要求。这可以通过*不*使用 :command:`target_compile_features` "
"指定功能，而是在项目代码中使用预处理器条件检查编译器功能来实现。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:138
msgid ""
"In this use-case, the project may wish to establish a particular language "
"standard if available from the compiler, and use preprocessor conditions "
"to detect the features actually available.  A language standard may be "
"established by `Requiring Language Standards`_ using "
":command:`target_compile_features` with meta-features like ``cxx_std_11``,"
" or by setting the :prop_tgt:`CXX_STANDARD` target property or "
":variable:`CMAKE_CXX_STANDARD` variable."
msgstr ""
"在此用例中，项目可能希望建立一个特定的语言标准（如果编译器可用），并使用预处理器条件来检测实际可用的功能。语言标准可以通过使用带有像 "
"cxx_std_11 这样的元特征的 :command:`target_compile_features` 的`Requiring Language "
"Standards`_ 来建立，或者通过设置 :prop_tgt:`CXX_STANDARD` "
"目标属性或 :variable:`CMAKE_CXX_STANDARD` 来建立。变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:146
msgid ""
"See also policy :policy:`CMP0120` and legacy documentation on "
":ref:`Example Usage <WCDH Example Usage>` of the deprecated "
":module:`WriteCompilerDetectionHeader` module."
msgstr ""
"另请参阅策略:policy:`CMP0120` 和遗留文档:ref:`Example Usage <WCDH Example Usage>` of "
"the deprecated :module:`WriteCompilerDetectionHeader` 模块。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:151
msgid "Conditional Compilation Options"
msgstr "条件编译选项"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:153
msgid ""
"Libraries may provide entirely different header files depending on "
"requested compiler features."
msgstr "库可能会根据请求的编译器功能提供完全不同的头文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:156
msgid "For example, a header at ``with_variadics/interface.h`` may contain:"
msgstr "例如，“with_variadics/interface.h”中的标头可能包含："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:181
msgid "while a header at ``no_variadics/interface.h`` may contain:"
msgstr "而 ``no_variadics/interface.h`` 的标题可能包含："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:191
msgid ""
"It may be possible to write an abstraction ``interface.h`` header "
"containing something like:"
msgstr "可以编写一个抽象的 ``interface.h`` 头文件，其中包含如下内容："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:202
msgid ""
"However this could be unmaintainable if there are many files to abstract. "
"What is needed is to use alternative include directories depending on the "
"compiler capabilities."
msgstr "然而，如果有很多文件要抽象，这可能无法维护。需要的是根据编译器功能使用替代包含目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:206
msgid ""
"CMake provides a ``COMPILE_FEATURES`` :manual:`generator expression "
"<cmake-generator-expressions(7)>` to implement such conditions.  This may "
"be used with the build-property commands such as "
":command:`target_include_directories` and :command:`target_link_libraries`"
" to set the appropriate :manual:`buildsystem <cmake-buildsystem(7)>` "
"properties:"
msgstr ""
"CMake 提供了一个 ``COMPILE_FEATURES`` :manual:`generator expression <cmake-"
"generator-expressions(7)>` "
"来实现这些条件。这可以与构建属性命令一起使用，例如 :command:`target_include_directories` "
"和 :command:`target_link_libraries` 来设置适当的 :manual:`buildsystem <cmake-"
"buildsystem(7)>` 属性："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:224
msgid ""
"Consuming code then simply links to the ``foo`` target as usual and uses "
"the feature-appropriate include directory"
msgstr "使用代码然后像往常一样简单地链接到 ``foo`` 目标并使用适合特性的包含目录"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:237
msgid "Supported Compilers"
msgstr "支持的编译器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:239
msgid ""
"CMake is currently aware of the :prop_tgt:`C++ standards <CXX_STANDARD>` "
"and :prop_gbl:`compile features <CMAKE_CXX_KNOWN_FEATURES>` available from"
" the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of "
"the versions specified for each:"
msgstr ""
"CMake 目前知道:prop_tgt:`C++ 标准 <CXX_STANDARD>` 和:prop_gbl:`编译特性 "
"<CMAKE_CXX_KNOWN_FEATURES>` 可从以下 :variable:`编译器 IDs <CMAKE_<LANG>_COMPILER_ID>` "
"指定版本对于每个："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:244
msgid "``AppleClang``: Apple Clang for Xcode versions 4.4+."
msgstr "``AppleClang``：Xcode 版本 4.4+ 的 Apple Clang。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:245
msgid "``Clang``: Clang compiler versions 2.9+."
msgstr "``Clang``：Clang 编译器版本 2.9+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:246
msgid "``GNU``: GNU compiler versions 4.4+."
msgstr "``GNU``：GNU 编译器版本 4.4+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:247
msgid "``MSVC``: Microsoft Visual Studio versions 2010+."
msgstr "``MSVC``：Microsoft Visual Studio 版本 2010+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:248
msgid "``SunPro``: Oracle SolarisStudio versions 12.4+."
msgstr "``SunPro``：Oracle SolarisStudio 版本 12.4+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:249
msgid "``Intel``: Intel compiler versions 12.1+."
msgstr "``Intel``：Intel 编译器版本 12.1+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:251
msgid ""
"CMake is currently aware of the :prop_tgt:`C standards <C_STANDARD>` and "
":prop_gbl:`compile features <CMAKE_C_KNOWN_FEATURES>` available from the "
"following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the "
"versions specified for each:"
msgstr ""
"CMake 目前知道:prop_tgt:`C 标准 <C_STANDARD>` 和:prop_gbl:`编译特性 "
"<CMAKE_C_KNOWN_FEATURES>` 可从以下 :variable:`编译器 ID <CMAKE_<LANG>_COMPILER_ID>` "
"指定版本对于每个："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:256
msgid "all compilers and versions listed above for C++."
msgstr "上面列出的所有 C++ 编译器和版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:257
msgid "``GNU``: GNU compiler versions 3.4+"
msgstr "``GNU``：GNU 编译器版本 3.4+"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:259
msgid ""
"CMake is currently aware of the :prop_tgt:`C++ standards <CXX_STANDARD>` "
"and their associated meta-features (e.g. ``cxx_std_11``) available from "
"the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of "
"the versions specified for each:"
msgstr ""
"CMake 目前知道:prop_tgt:`C++ 标准 <CXX_STANDARD>` 及其相关的元特征（例如 "
"``cxx_std_11``）可从以下 :variable:`编译器 ids <CMAKE_<LANG>_COMPILER_ID>` 获得为每个指定的版本："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:264
msgid "``Cray``: Cray Compiler Environment version 8.1+."
msgstr "``Cray``：Cray 编译器环境版本 8.1+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:265
msgid "``Fujitsu``: Fujitsu HPC compiler 4.0+."
msgstr "``Fujitsu``：Fujitsu HPC 编译器 4.0+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:266
msgid "``PGI``: PGI version 12.10+."
msgstr "``PGI``：PGI 版本 12.10+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:267
msgid "``NVHPC``: NVIDIA HPC compilers version 11.0+."
msgstr "``NVHPC``：NVIDIA HPC 编译器版本 11.0+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:268
msgid "``TI``: Texas Instruments compiler."
msgstr "``TI``：德州仪器编译器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:269
msgid "``XL``: IBM XL version 10.1+."
msgstr "``XL``：IBM XL 版本 10.1+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:271
msgid ""
"CMake is currently aware of the :prop_tgt:`C standards <C_STANDARD>` and "
"their associated meta-features (e.g. ``c_std_99``) available from the "
"following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of the "
"versions specified for each:"
msgstr ""
"CMake 目前知道:prop_tgt:`C 标准 <C_STANDARD>` 及其相关的元特性（例如 "
"``c_std_99``）可从以下 :variable:`编译器 ids <CMAKE_<LANG>_COMPILER_ID>` 中获得为每个指定的版本："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:276
msgid ""
"all compilers and versions listed above with only meta-features for C++."
msgstr "上面列出的所有编译器和版本仅具有 C++ 的元功能。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:278
msgid ""
"CMake is currently aware of the :prop_tgt:`CUDA standards <CUDA_STANDARD>`"
" and their associated meta-features (e.g. ``cuda_std_11``) available from "
"the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` as of "
"the versions specified for each:"
msgstr ""
"CMake 目前知道 :prop_tgt:`CUDA 标准 <CUDA_STANDARD>` 及其相关的元特征（例如 "
"``cuda_std_11``）可从以下 :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>` "
"获得为每个指定的版本："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:283
msgid "``Clang``: Clang compiler 5.0+."
msgstr "``Clang``：Clang 编译器 5.0+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:284
msgid "``NVIDIA``: NVIDIA nvcc compiler 7.5+."
msgstr "``NVIDIA``：NVIDIA nvcc 编译器 7.5+。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:289
msgid "Language Standard Flags"
msgstr "语言标准标志"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:291
msgid ""
"In order to satisfy requirements specified by the "
":command:`target_compile_features` command or the "
":variable:`CMAKE_<LANG>_STANDARD` variable, CMake may pass a language "
"standard flag to the compiler, such as ``-std=c++11``."
msgstr ""
"为了满足 :command:`target_compile_features` 命令或 "
":variable:`CMAKE_<LANG>_STANDARD` 变量指定的要求，CMake 可以将语言标准标志传递给编译器，例如 "
"``-std=c++ 11``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:296
msgid ""
"For :ref:`Visual Studio Generators`, CMake cannot precisely control the "
"placement of the language standard flag on the compiler command line. For "
":ref:`Ninja Generators`, :ref:`Makefile Generators`, and "
":generator:`Xcode`, CMake places the language standard flag just after the"
" language-wide flags from :variable:`CMAKE_<LANG>_FLAGS` and "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`."
msgstr ""
"对于 :ref:`Visual Studio Generators`，CMake "
"无法精确控制语言标准标志在编译器命令行上的位置。对于 :ref:`Ninja Generators`、 :ref:`Makefile "
"Generators` 和 :generator:`Xcode`，CMake 将语言标准标志放在 "
":variable:`CMAKE_<LANG>_FLAGS` 和 :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-compile-features.7.rst:303
msgid ""
"The language standard flag is placed before flags specified by other "
"abstractions such as the :command:`target_compile_options` command. Prior "
"to CMake 3.26, the language standard flag was placed after them."
msgstr ""
"语言标准标志位于其他抽象指定的标志之前，例如 :command:`target_compile_options` 命令。在 CMake 3.26 "
"之前，语言标准标志位于它们之后。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:4
msgid "cmake-configure-log(7)"
msgstr "cmake 配置日志(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:15
msgid ""
"CMake writes a running log, known as the *configure log*, of certain "
"events that occur during the Configure step. The configure log does *not* "
"contain a log of all output, errors, or messages printed while configuring"
" a project.  It is a log of detailed information about specific events, "
"such as toolchain inspection by :command:`try_compile`, meant for use in "
"debugging the configuration of a build tree."
msgstr ""
"CMake 为配置步骤中发生的某些事件写入运行日志，称为*配置日志*。配置日志 *不* "
"包含配置项目时打印的所有输出、错误或消息的日志。它是有关特定事件的详细信息的日志，例如:command:`try_compile` "
"的工具链检查，用于调试构建树的配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:23
msgid ""
"For human use, this version of CMake writes the configure log to the "
"file::"
msgstr "对于人类使用，此版本的 CMake 将配置日志写入文件 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:27
msgid ""
"However, the *location and name of the log file may change* in future "
"versions of CMake.  Tools that read the configure log should get its "
"location using a :ref:`configureLog <file-api configureLog>` query to the "
":manual:`cmake-file-api(7)`. See the `Log Versioning`_ section below for "
"details."
msgstr ""
"但是，日志文件的*位置和名称可能会在未来的 CMake 版本中更改*。读取配置日志的工具应该使用 :ref:`configureLog <file-"
"api configureLog>` 查询到 :manual:`cmake-file-api(7)` "
"来获取它的位置。有关详细信息，请参阅下面的“日志版本控制”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:34
msgid "Log Structure"
msgstr "日志结构"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:36
msgid ""
"The configure log is designed to be both machine- and human-readable."
msgstr "配置日志被设计为机器和人类都可读。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:38
msgid ""
"The log file is a YAML document stream containing zero or more YAML "
"documents separated by document markers.  Each document begins with a "
"``---`` document marker line, contains a single YAML mapping that logs "
"events from one CMake \"configure\" step, and, if the configure step "
"finished normally, ends with a ``...`` document marker line:"
msgstr ""
"日志文件是一个 YAML 文档流，包含零个或多个由文档标记分隔的 YAML 文档。每个文档都以“---”文档标记行开头，包含一个 YAML "
"映射，用于记录来自一个 CMake“配置”步骤的事件，并且如果配置步骤正常完成，则以“...”结束` 文档标记行："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:56
msgid ""
"A new document is appended to the log every time CMake configures the "
"build tree and logs new events."
msgstr "每次 CMake 配置构建树并记录新事件时，都会将一个新文档附加到日志中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:59
msgid "The keys of the each document root mapping are:"
msgstr "每个文档根映射的键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:64
msgid "``events``"
msgstr "``事件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:62
msgid ""
"A YAML block sequence of nodes corresponding to events logged during one "
"CMake \"configure\" step.  Each event is a YAML node containing one of the"
" `Event Kinds`_ documented below."
msgstr ""
"一个 YAML 块节点序列，对应于在一个 CMake“配置”步骤中记录的事件。每个事件都是一个 YAML 节点，其中包含下面记录的“事件种类”之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:67
msgid "Log Versioning"
msgstr "日志版本控制"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:69
msgid ""
"Each of the `Event Kinds`_ is versioned independently.  The set of keys an"
" event's log entry provides is specific to its major version. When an "
"event is logged, the latest version of its event kind that is known to the"
" running version of CMake is always written to the log."
msgstr ""
"每个“事件种类”都是独立版本化的。事件日志条目提供的键集特定于其主要版本。记录事件时，运行版本的 CMake 已知的事件类型的最新版本始终写入日志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:74
msgid ""
"Tools reading the configure log must ignore event kinds and versions they "
"do not understand:"
msgstr "读取配置日志的工具必须忽略它们不理解的事件种类和版本："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:77
msgid "A future version of CMake may introduce a new event kind or version."
msgstr "CMake 的未来版本可能会引入新的事件类型或版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:79
msgid ""
"If an existing build tree is re-configured with a different version of "
"CMake, the log may contain different versions of the same event kind."
msgstr "如果使用不同版本的 CMake 重新配置现有构建树，则日志可能包含同一事件类型的不同版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:82
msgid ""
"If :manual:`cmake-file-api(7)` queries request one or more "
":ref:`configureLog <file-api configureLog>` object versions, the log may "
"contain multiple entries for the same event, each with a different version"
" of its event kind."
msgstr ""
"如果 :manual:`cmake-file-api(7)` 查询请求一个或多个 :ref:`configureLog <file-api "
"configureLog>` 对象版本，日志可能包含同一事件的多个条目，每个条目都有不同的版本它的事件类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:87
msgid ""
"IDEs should write a :manual:`cmake-file-api(7)` query requesting a "
"specific :ref:`configureLog <file-api configureLog>` object version, "
"before running CMake, and then read the configure log only as described by"
" the file-api reply."
msgstr ""
"IDE 应该在运行 CMake 之前编写一个请求特定 :ref:`configureLog <file-api configureLog>` "
"对象版本的 :manual:`cmake-file-api(7)` 查询，然后仅按照如下所述读取配置日志文件 API 回复。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:93
msgid "Text Block Encoding"
msgstr "文本块编码"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:95
msgid ""
"In order to make the log human-readable, text blocks are always "
"represented using YAML literal block scalars (``|``). Since literal block "
"scalars do not support escaping, backslashes and non-printable characters "
"are encoded at the application layer:"
msgstr ""
"为了使日志易于阅读，文本块始终使用 YAML 文字块标量 (``|``) 表示。由于文字块标量不支持转义，因此反斜杠和不可打印字符在应用层进行编码："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:100
msgid "``\\\\`` encodes a backslash."
msgstr "``\\\\`` 编码反斜杠。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:101
msgid "``\\xXX`` encodes a byte using two hexadecimal digits, ``XX``."
msgstr "``\\xXX`` 使用两个十六进制数字 ``XX`` 对一个字节进行编码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:106
msgid "Event Kinds"
msgstr "活动种类"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:108
msgid "Every event kind is represented by a YAML mapping of the form:"
msgstr "每个事件类型都由以下形式的 YAML 映射表示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:119
msgid "The keys common to all events are:"
msgstr "所有事件共有的键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:122
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:133
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:359
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:796
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1512
msgid "``kind``"
msgstr "``善良``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:122
msgid "A string identifying the event kind and major version."
msgstr "标识事件类型和主要版本的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:128
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:893
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:923
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:993
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1072
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1133
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1212
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1228
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1246
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1555
msgid "``backtrace``"
msgstr "``回溯``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:125
msgid ""
"A YAML block sequence reporting the call stack of CMake source locations "
"at which the event occurred, from most-recent to least-recent.  Each node "
"is a string specifying one location formatted as ``<file>:<line> "
"(<function>)``."
msgstr ""
"YAML 块序列报告事件发生的 CMake 源位置的调用堆栈，从最近到最近。每个节点都是一个字符串，指定一个格式为“<file>:<line> "
"(<function>)”的位置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:135
msgid "``checks``"
msgstr "``检查``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:131
msgid ""
"An optional key that is present when the event occurred with at least one "
"pending :command:`message(CHECK_START)`.  Its value is a YAML block "
"sequence reporting the stack of pending checks, from most-recent to least-"
"recent.  Each node is a string containing a pending check message."
msgstr ""
"一个可选键，当事件发生时至少有一个待处理的 :command:`message(CHECK_START)` 出现。它的值是一个 YAML "
"块序列，报告待处理检查的堆栈，从最近到最近。每个节点都是一个包含待处理检查消息的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:137
msgid ""
"Additional mapping keys are specific to each (versioned) event kind, "
"described below."
msgstr "其他映射键特定于每个（版本化的）事件类型，如下所述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:143
msgid "Event Kind ``message``"
msgstr "事件种类``消息``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:145
msgid ""
"The :command:`message(CONFIGURE_LOG)` command logs ``message`` events."
msgstr ":command:`message(CONFIGURE_LOG)` 命令记录 ``message`` 事件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:147
msgid "There is only one ``message`` event major version, version 1."
msgstr "只有一个“消息”事件主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:152
msgid "``message-v1`` Event"
msgstr "``message-v1`` 事件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:154
msgid "A ``message-v1`` event is a YAML mapping:"
msgstr "``message-v1`` 事件是一个 YAML 映射："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:166
msgid "The keys specific to ``message-v1`` mappings are:"
msgstr "特定于“message-v1”映射的键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:170
msgid "``message``"
msgstr "``消息``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:169
msgid ""
"A YAML literal block scalar containing the message text, represented using"
" our `Text Block Encoding`_."
msgstr "包含消息文本的 YAML 文字块标量，使用我们的“文本块编码”表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:175
msgid "Event Kind ``try_compile``"
msgstr "事件类型``try_compile``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:177
msgid "The :command:`try_compile` command logs ``try_compile`` events."
msgstr ":command:`try_compile` 命令记录 ``try_compile`` 事件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:179
msgid "There is only one ``try_compile`` event major version, version 1."
msgstr "只有一个 ``try_compile`` 事件主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:184
msgid "``try_compile-v1`` Event"
msgstr "``try_compile-v1`` 事件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:186
msgid "A ``try_compile-v1`` event is a YAML mapping:"
msgstr "``try_compile-v1`` 事件是一个 YAML 映射："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:208
msgid "The keys specific to ``try_compile-v1`` mappings are:"
msgstr "``try_compile-v1`` 映射特有的键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:212
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:188
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:418
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:579
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:920
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1015
msgid "``description``"
msgstr "``描述``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:211
msgid ""
"An optional key that is present when the ``LOG_DESCRIPTION <text>`` option"
" was used.  Its value is a string containing the description ``<text>``."
msgstr "使用 ``LOG_DESCRIPTION <text>`` 选项时出现的可选键。它的值是一个包含描述“<text>”的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:226
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:579
msgid "``directories``"
msgstr "``目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:215
msgid ""
"A mapping describing the directories associated with the compilation "
"attempt.  It has the following keys:"
msgstr "描述与编译尝试关联的目录的映射。它具有以下键："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:220
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:493
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:521
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:660
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:940
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1464
msgid "``source``"
msgstr "``来源``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:219
msgid ""
"String specifying the source directory of the :command:`try_compile` "
"project."
msgstr "指定 :command:`try_compile` 项目源目录的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:226
msgid "``binary``"
msgstr "``二进制``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:223
msgid ""
"String specifying the binary directory of the :command:`try_compile` "
"project. For non-project invocations, this is often the same as the source"
" directory."
msgstr "指定 :command:`try_compile` 项目的二进制目录的字符串。对于非项目调用，这通常与源目录相同。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:232
msgid "``cmakeVariables``"
msgstr "``cmakeVariables``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:229
msgid ""
"An optional key that is present when CMake propagates variables into the "
"test project, either automatically or due to the "
":variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable. Its value is a "
"mapping from variable names to their values."
msgstr ""
"当 CMake 自动或由于 CMAKE_TRY_COMPILE_PLATFORM_VARIABLES "
"变量将变量传播到测试项目时出现的可选键。它的值是从变量名到它们的值的映射。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:253
msgid "``buildResult``"
msgstr "``构建结果``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:235
msgid ""
"A mapping describing the result of compiling the test code. It has the "
"following keys:"
msgstr "描述编译测试代码结果的映射。它具有以下键："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:240
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:306
msgid "``variable``"
msgstr "``变量``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:239
msgid ""
"A string specifying the name of the CMake variable storing the result of "
"trying to build the test project."
msgstr "一个字符串，指定存储尝试构建测试项目的结果的 CMake 变量的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:244
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:310
msgid "``cached``"
msgstr "``缓存``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:243
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:309
msgid ""
"A boolean indicating whether the above result ``variable`` is stored in "
"the CMake cache."
msgstr "一个布尔值，指示上述结果“变量”是否存储在 CMake 缓存中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:249
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:319
msgid "``stdout``"
msgstr "``标准输出``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:247
msgid ""
"A YAML literal block scalar containing the output from building the test "
"project, represented using our `Text Block Encoding`_. This contains build"
" output from both stdout and stderr."
msgstr ""
"一个 YAML 文字块标量，包含构建测试项目的输出，使用我们的“文本块编码”表示。这包含来自 stdout 和 stderr 的构建输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:253
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:333
msgid "``exitCode``"
msgstr "``退出代码``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:252
msgid ""
"An integer specifying the build tool exit code from trying to build the "
"test project."
msgstr "一个整数，指定用于尝试构建测试项目的构建工具退出代码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:258
msgid "Event Kind ``try_run``"
msgstr "事件种类``try_run``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:260
msgid "The :command:`try_run` command logs ``try_run`` events."
msgstr ":command:`try_run` 命令记录 ``try_run`` 事件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:262
msgid "There is only one ``try_run`` event major version, version 1."
msgstr "只有一个 ``try_run`` 事件主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:267
msgid "``try_run-v1`` Event"
msgstr "``try_run-v1`` 事件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:269
msgid "A ``try_run-v1`` event is a YAML mapping:"
msgstr "``try_run-v1`` 事件是一个 YAML 映射："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:297
msgid ""
"The keys specific to ``try_run-v1`` mappings include those documented by "
"the `try_compile-v1 event`_, plus:"
msgstr "``try_run-v1`` 映射特有的键包括那些由 `try_compile-v1 事件`_ 记录的键，以及："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:333
msgid "``runResult``"
msgstr "``运行结果``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:301
msgid ""
"A mapping describing the result of running the test code. It has the "
"following keys:"
msgstr "描述运行测试代码的结果的映射。它具有以下键："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:305
msgid ""
"A string specifying the name of the CMake variable storing the result of "
"trying to run the test executable."
msgstr "一个字符串，指定存储尝试运行测试可执行文件的结果的 CMake 变量的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:313
msgid ""
"An optional key that is present when the test project built successfully. "
"Its value is a YAML literal block scalar containing output from running "
"the test executable, represented using our `Text Block Encoding`_."
msgstr "成功构建测试项目时出现的可选密钥。它的值是一个 YAML 文字块标量，包含运行测试可执行文件的输出，使用我们的“文本块编码”表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:317
msgid ""
"If ``RUN_OUTPUT_VARIABLE`` was used, stdout and stderr are captured "
"together, so this will contain both.  Otherwise, this will contain only "
"the stdout output."
msgstr ""
"如果使用了``RUN_OUTPUT_VARIABLE``，stdout 和stderr 会一起捕获，所以这将包含两者。否则，这将只包含 stdout"
" 输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:329
msgid "``stderr``"
msgstr "``标准错误``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:322
msgid ""
"An optional key that is present when the test project built successfully "
"and the ``RUN_OUTPUT_VARIABLE`` option was not used. Its value is a YAML "
"literal block scalar containing output from running the test executable, "
"represented using our `Text Block Encoding`_."
msgstr ""
"当测试项目成功构建且未使用“RUN_OUTPUT_VARIABLE”选项时出现的可选键。它的值是一个 YAML "
"文字块标量，包含运行测试可执行文件的输出，使用我们的“文本块编码”表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:327
msgid ""
"If ``RUN_OUTPUT_VARIABLE`` was used, stdout and stderr are captured "
"together in the ``stdout`` key, and this key will not be present. "
"Otherwise, this will contain the stderr output."
msgstr ""
"如果使用了``RUN_OUTPUT_VARIABLE``，stdout 和stderr 将一起捕获在``stdout`` "
"键中，并且该键将不存在。否则，这将包含 stderr 输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-configure-log.7.rst:332
msgid ""
"An optional key that is present when the test project built successfully. "
"Its value is an integer specifying the exit code, or a string containing "
"an error message, from trying to run the test executable."
msgstr "成功构建测试项目时出现的可选密钥。它的值是一个整数，指定退出代码，或一个包含错误消息的字符串，用于尝试运行测试可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:4
msgid "cmake-developer(7)"
msgstr "cmake 开发人员(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:13
msgid ""
"This manual is intended for reference by developers working with "
":manual:`cmake-language(7)` code, whether writing their own modules, "
"authoring their own build systems, or working on CMake itself."
msgstr ""
"本手册旨在供使用 :manual:`cmake-language(7)` 代码的开发人员参考，无论是编写自己的模块、创作自己的构建系统，还是使用 "
"CMake 本身。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:17
msgid ""
"See https://cmake.org/get-involved/ to get involved in development of "
"CMake upstream.  It includes links to contribution instructions, which in "
"turn link to developer guides for CMake itself."
msgstr ""
"请参阅 https://cmake.org/get-involved/ 参与 CMake 上游的开发。它包括贡献说明的链接，这些说明又链接到 "
"CMake 本身的开发人员指南。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:22
msgid "Accessing Windows Registry"
msgstr "访问 Windows 注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:24
msgid ""
"CMake offers some facilities to access the registry on ``Windows`` "
"platforms."
msgstr "CMake 提供了一些工具来访问“Windows”平台上的注册表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:27
msgid "Query Windows Registry"
msgstr "查询 Windows 注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:31
msgid ""
"The :command:`cmake_host_system_information` command offers the "
"possibility to query the registry on the local computer. See "
":ref:`cmake_host_system(QUERY_WINDOWS_REGISTRY) <Query Windows registry>` "
"for more information."
msgstr ""
":command:`cmake_host_system_information` 命令提供了在本地计算机上查询注册表的可能性。有关更多信息，请参阅 "
":ref:`cmake_host_system(QUERY_WINDOWS_REGISTRY) <Query Windows registry>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:39
msgid "Find Using Windows Registry"
msgstr "使用 Windows 注册表查找"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:43
msgid ""
"Options ``HINTS`` and ``PATHS`` of :command:`find_file`, "
":command:`find_library`, :command:`find_path`, :command:`find_program`, "
"and :command:`find_package` commands offer the possibility, on ``Windows``"
" platform, to query the registry."
msgstr ""
"选项 ``HINTS`` 和 ``PATHS`` of :command:`find_file`, :command:`find_library`,"
" :command:`find_path`, :command:`find_program` 和 :command:`find_package` "
"命令提供在“Windows”平台上查询注册表的可能性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:48
#, python-format
msgid ""
"The formal syntax, as specified using `BNF "
"<https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form>`_ notation with "
"the regular extensions, for registry query is the following:"
msgstr ""
"使用带有常规扩展名的`BNF <https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form>`_ "
"符号指定的正式语法，用于注册表查询如下："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:74
msgid ""
"The :token:`sep_definition` optional item offers the possibility to "
"specify the string used to separate the :token:`sub_key` from the "
":token:`value_name` item. If not specified, the character ``;`` is used. "
"Multiple :token:`registry_query` items can be specified as part of a path."
msgstr ""
":token:`sep_definition` 可选项提供了指定用于分隔 :token:`sub_key` 和 "
":token:`value_name` 项的字符串的可能性。如果未指定，则使用字符 ``;``。多个 :token:`registry_query`"
" 项可以指定为路径的一部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:87
msgid ""
"If the :token:`value_name` item is not specified or has the special name "
"``(default)``, the content of the default value, if any, will be returned."
" The supported types for the :token:`value_name` are:"
msgstr ""
"如果 :token:`value_name` 项未指定或具有特殊名称 ``(default)``，则返回默认值的内容（如果有）。 "
":token:`value_name` 支持的类型是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:91
msgid "``REG_SZ``."
msgstr "``REG_SZ``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:92
msgid "``REG_EXPAND_SZ``. The returned data is expanded."
msgstr "``REG_EXPAND_SZ``。返回的数据被展开。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:93
msgid "``REG_DWORD``."
msgstr "``REG_DWORD``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:94
msgid "``REG_QWORD``."
msgstr "``REG_QWORD``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:96
msgid ""
"When the registry query failed, typically because the key does not exist "
"or the data type is not supported, the string ``/REGISTRY-NOTFOUND`` is "
"substituted to the ``[]`` query expression."
msgstr "当注册表查询失败时，通常是因为键不存在或数据类型不受支持，字符串“/REGISTRY-NOTFOUND”被替换为“[]”查询表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:103
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:103
msgid "Find Modules"
msgstr "查找模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:105
msgid ""
"A \"find module\" is a ``Find<PackageName>.cmake`` file to be loaded by "
"the :command:`find_package` command when invoked for ``<PackageName>``."
msgstr ""
"“查找模块”是一个 ``Find<PackageName>.cmake`` 文件，在为 ``<PackageName>`` 调用时由 "
":command:`find_package` 命令加载。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:108
msgid ""
"The primary task of a find module is to determine whether a package is "
"available, set the ``<PackageName>_FOUND`` variable to reflect this and "
"provide any variables, macros and imported targets required to use the "
"package.  A find module is useful in cases where an upstream library does "
"not provide a :ref:`config file package <Config File Packages>`."
msgstr ""
"查找模块的主要任务是确定包是否可用，设置“<PackageName>_FOUND”变量来反映这一点，并提供使用包所需的任何变量、宏和导入目标。在上游库不提供"
" :ref:`config 文件包 <Config File Packages>` 的情况下，查找模块很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:114
msgid ""
"The traditional approach is to use variables for everything, including "
"libraries and executables: see the `Standard Variable Names`_ section "
"below.  This is what most of the existing find modules provided by CMake "
"do."
msgstr ""
"传统方法是对所有内容都使用变量，包括库和可执行文件：请参阅下面的“标准变量名称”部分。这是 CMake 提供的大多数现有查找模块所做的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:119
msgid ""
"The more modern approach is to behave as much like :ref:`config file "
"packages <Config File Packages>` files as possible, by providing "
":ref:`imported target <Imported targets>`.  This has the advantage of "
"propagating :ref:`Target Usage Requirements` to consumers."
msgstr ""
"更现代的方法是通过提供 :ref:`imported target <Imported targets> 尽可能地表现得像 :ref:`config"
" file packages <Config File Packages>` 文件。这具有向消费者传播 :ref:`Target Usage "
"Requirements` 的优势。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:124
msgid ""
"In either case (or even when providing both variables and imported "
"targets), find modules should provide backwards compatibility with old "
"versions that had the same name."
msgstr "在任何一种情况下（或者甚至在同时提供变量和导入目标时），查找模块都应该提供与具有相同名称的旧版本的向后兼容性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:128
msgid "A FindFoo.cmake module will typically be loaded by the command::"
msgstr "FindFoo.cmake 模块通常由命令加载："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:136
msgid ""
"See the :command:`find_package` documentation for details on what "
"variables are set for the find module.  Most of these are dealt with by "
"using :module:`FindPackageHandleStandardArgs`."
msgstr ""
"有关为 find 模块设置哪些变量的详细信息，请参阅 :command:`find_package` 文档。其中大部分是通过使用 "
"FindPackageHandleStandardArgs 处理的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:140
msgid ""
"Briefly, the module should only locate versions of the package compatible "
"with the requested version, as described by the ``Foo_FIND_VERSION`` "
"family of variables.  If ``Foo_FIND_QUIETLY`` is set to true, it should "
"avoid printing messages, including anything complaining about the package "
"not being found.  If ``Foo_FIND_REQUIRED`` is set to true, the module "
"should issue a ``FATAL_ERROR`` if the package cannot be found.  If neither"
" are set to true, it should print a non-fatal message if it cannot find "
"the package."
msgstr ""
"简而言之，模块应该只定位与请求版本兼容的包版本，如“Foo_FIND_VERSION”变量族所描述的那样。如果``Foo_FIND_QUIETLY``"
" 设置为 true，它应该避免打印消息，包括任何关于找不到包的抱怨。如果“Foo_FIND_REQUIRED”设置为 "
"true，如果找不到包，模块应该发出“FATAL_ERROR”。如果两者均未设置为真，则在找不到包时应打印一条非致命消息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:149
msgid ""
"Packages that find multiple semi-independent parts (like bundles of "
"libraries) should search for the components listed in "
"``Foo_FIND_COMPONENTS`` if it is set , and only set ``Foo_FOUND`` to true "
"if for each searched-for component ``<c>`` that was not found, "
"``Foo_FIND_REQUIRED_<c>`` is not set to true.  The ``HANDLE_COMPONENTS`` "
"argument of ``find_package_handle_standard_args()`` can be used to "
"implement this."
msgstr ""
"找到多个半独立部分（如库包）的包应该搜索“Foo_FIND_COMPONENTS”中列出的组件（如果已设置），并且只有在每个搜索到的组件“”时才将“Foo_FOUND”设置为"
" true <c>`` 未找到，``Foo_FIND_REQUIRED_<c>`` 未设置为 true。 "
"``find_package_handle_standard_args()`` 的``HANDLE_COMPONENTS`` 参数可以用来实现这个。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:157
msgid ""
"If ``Foo_FIND_COMPONENTS`` is not set, which modules are searched for and "
"required is up to the find module, but should be documented."
msgstr "如果未设置“Foo_FIND_COMPONENTS”，则搜索和需要哪些模块取决于查找模块，但应记录在案。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:160
msgid ""
"For internal implementation, it is a generally accepted convention that "
"variables starting with underscore are for temporary use only."
msgstr "对于内部实现，以下划线开头的变量仅供临时使用，这是一个普遍接受的约定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:167
msgid "Standard Variable Names"
msgstr "标准变量名"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:169
msgid ""
"For a ``FindXxx.cmake`` module that takes the approach of setting "
"variables (either instead of or in addition to creating imported targets),"
" the following variable names should be used to keep things consistent "
"between Find modules.  Note that all variables start with ``Xxx_``, which "
"(unless otherwise noted) must match exactly the name of the "
"``FindXxx.cmake`` file, including upper/lowercase. This prefix on the "
"variable names ensures that they do not conflict with variables of other "
"Find modules.  The same pattern should also be followed for any macros, "
"functions and imported targets defined by the Find module."
msgstr ""
"对于采用设置变量方法的``FindXxx.cmake`` 模块（代替或补充创建导入目标），应使用以下变量名称来保持 Find "
"模块之间的一致性。请注意，所有变量都以“Xxx_”开头，除非另有说明，否则必须与“FindXxx.cmake”文件的名称完全匹配，包括大写/小写。变量名的这个前缀确保它们不与其他"
" Find 模块的变量冲突。查找模块定义的任何宏、函数和导入目标也应遵循相同的模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:183
msgid "``Xxx_INCLUDE_DIRS``"
msgstr "``Xxx_INCLUDE_DIRS``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:180
msgid ""
"The final set of include directories listed in one variable for use by "
"client code. This should not be a cache entry (note that this also means "
"this variable should not be used as the result variable of a "
":command:`find_path` command - see ``Xxx_INCLUDE_DIR`` below for that)."
msgstr ""
"一个变量中列出的最后一组包含目录供客户端代码使用。这不应该是缓存条目（请注意，这也意味着该变量不应该用作 :command:`find_path` "
"命令的结果变量 - 请参阅下面的 ``Xxx_INCLUDE_DIR``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:191
msgid "``Xxx_LIBRARIES``"
msgstr "``Xxx_LIBRARIES``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:186
msgid ""
"The libraries to use with the module.  These may be CMake targets, full "
"absolute paths to a library binary or the name of a library that the "
"linker must find in its search path.  This should not be a cache entry "
"(note that this also means this variable should not be used as the result "
"variable of a :command:`find_library` command - see ``Xxx_LIBRARY`` below "
"for that)."
msgstr ""
"与模块一起使用的库。这些可能是 CMake "
"目标、库二进制文件的完整绝对路径或链接器必须在其搜索路径中找到的库的名称。这不应该是缓存条目（请注意，这也意味着该变量不应该用作 "
":command:`find_library` 命令的结果变量 - 请参阅下面的 ``Xxx_LIBRARY``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:196
msgid "``Xxx_DEFINITIONS``"
msgstr "``Xxx_DEFINITIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:194
msgid ""
"The compile definitions to use when compiling code that uses the module. "
"This really shouldn't include options such as ``-DHAS_JPEG`` that a client"
" source-code file uses to decide whether to ``#include <jpeg.h>``"
msgstr ""
"编译使用该模块的代码时要使用的编译定义。这真的不应该包括客户端源代码文件用来决定是否要``#include "
"<jpeg.h>``的选项，例如``-DHAS_JPEG``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:204
msgid "``Xxx_EXECUTABLE``"
msgstr "``Xxx_EXECUTABLE``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:199
msgid ""
"The full absolute path to an executable.  In this case, ``Xxx`` might not "
"be the name of the module, it might be the name of the tool (usually "
"converted to all uppercase), assuming that tool has such a well-known name"
" that it is unlikely that another tool with the same name exists.  It "
"would be appropriate to use this as the result variable of a "
":command:`find_program` command."
msgstr ""
"可执行文件的完整绝对路径。在这种情况下，``Xxx`` "
"可能不是模块的名称，它可能是工具的名称（通常转换为全部大写），假设该工具具有如此知名的名称以至于另一个不太可能存在同名工具。将其用作 "
":command:`find_program` 命令的结果变量是合适的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:211
msgid "``Xxx_YYY_EXECUTABLE``"
msgstr "``Xxx_YYY_EXECUTABLE``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:207
msgid ""
"Similar to ``Xxx_EXECUTABLE`` except here the ``Xxx`` is always the module"
" name and ``YYY`` is the tool name (again, usually fully uppercase). "
"Prefer this form if the tool name is not very widely known or has the "
"potential  to clash with another tool.  For greater consistency, also "
"prefer this form if the module provides more than one executable."
msgstr ""
"类似于 ``Xxx_EXECUTABLE`` 除了这里的 ``Xxx`` 总是模块名称和 ``YYY`` "
"是工具名称（同样，通常完全大写）。如果工具名称不是很广为人知或有可能与其他工具冲突，则首选此形式。为了更好的一致性，如果模块提供多个可执行文件，也更喜欢这种形式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:215
msgid "``Xxx_LIBRARY_DIRS``"
msgstr "``Xxx_LIBRARY_DIRS``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:214
msgid ""
"Optionally, the final set of library directories listed in one variable "
"for use by client code. This should not be a cache entry."
msgstr "可选地，在一个变量中列出的最后一组库目录供客户端代码使用。这不应该是缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:218
msgid "``Xxx_ROOT_DIR``"
msgstr "``Xxx_ROOT_DIR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:218
msgid "Where to find the base directory of the module."
msgstr "在哪里可以找到模块的基本目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:229
msgid "``Xxx_VERSION_VV``"
msgstr "``Xxx_VERSION_VV``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:221
msgid ""
"Variables of this form specify whether the ``Xxx`` module being provided "
"is version ``VV`` of the module.  There should not be more than one "
"variable of this form set to true for a given module.  For example, a "
"module ``Barry`` might have evolved over many years and gone through a "
"number of different major versions.  Version 3 of the ``Barry`` module "
"might set the variable ``Barry_VERSION_3`` to true, whereas an older "
"version of the module might set ``Barry_VERSION_2`` to true instead. It "
"would be an error for both ``Barry_VERSION_3`` and ``Barry_VERSION_2`` to "
"both be set to true."
msgstr ""
"这种形式的变量指定提供的“Xxx”模块是否是模块的“VV”版本。对于给定模块，不应有超过一个此形式的变量设置为 "
"true。例如，模块“Barry”可能已经发展了很多年，并经历了许多不同的主要版本。 ``Barry`` 模块的第 3 版可能会将变量 "
"``Barry_VERSION_3`` 设置为 true，而该模块的旧版本可能会将 ``Barry_VERSION_2`` 设置为 true。将 "
"``Barry_VERSION_3`` 和 ``Barry_VERSION_2`` 都设置为 true 将是错误的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:235
msgid "``Xxx_WRAP_YY``"
msgstr "``Xxx_WRAP_YY``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:232
msgid ""
"When a variable of this form is set to false, it indicates that the "
"relevant wrapping command should not be used.  The wrapping command "
"depends on the module, it may be implied by the module name or it might be"
" specified by the ``YY`` part of the variable."
msgstr "当这种形式的变量设置为假时，表示不应使用相关的包装命令。包装命令取决于模块，它可能由模块名称暗示，也可能由变量的“YY”部分指定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:244
msgid "``Xxx_Yy_FOUND``"
msgstr "``Xxx_Yy_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:238
msgid ""
"For variables of this form, ``Yy`` is the name of a component for the "
"module.  It should match exactly one of the valid component names that may"
" be passed to the :command:`find_package` command for the module. If a "
"variable of this form is set to false, it means that the ``Yy`` component "
"of module ``Xxx`` was not found or is not available. Variables of this "
"form would typically be used for optional components so that the caller "
"can check whether an optional component is available."
msgstr ""
"对于这种形式的变量，“Yy”是模块组件的名称。它应该与可能传递给模块的 find_package "
"命令的有效组件名称之一完全匹配。如果这种形式的变量设置为 "
"false，则意味着模块“Xxx”的“Yy”组件未找到或不可用。这种形式的变量通常用于可选组件，以便调用者可以检查可选组件是否可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:249
msgid "``Xxx_FOUND``"
msgstr "``Xxx_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:247
msgid ""
"When the :command:`find_package` command returns to the caller, this "
"variable will be set to true if the module was deemed to have been found "
"successfully."
msgstr "当 :command:`find_package` 命令返回给调用者时，如果模块被认为已成功找到，则此变量将设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:257
msgid "``Xxx_NOT_FOUND_MESSAGE``"
msgstr "``Xxx_NOT_FOUND_MESSAGE``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:252
msgid ""
"Should be set by config-files in the case that it has set ``Xxx_FOUND`` to"
" FALSE.  The contained message will be printed by the "
":command:`find_package` command and by "
":command:`find_package_handle_standard_args` to inform the user about the "
"problem.  Use this instead of calling :command:`message` directly to "
"report a reason for failing to find the module or package."
msgstr ""
"如果已将“Xxx_FOUND”设置为 FALSE，则应由配置文件设置。包含的消息将由 :command:`find_package` 命令和 "
":command:`find_package_handle_standard_args` 打印，以通知用户该问题。使用它而不是直接调用 "
":command:`message` 来报告找不到模块或包的原因。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:263
msgid "``Xxx_RUNTIME_LIBRARY_DIRS``"
msgstr "``Xxx_RUNTIME_LIBRARY_DIRS``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:260
msgid ""
"Optionally, the runtime library search path for use when running an "
"executable linked to shared libraries.  The list should be used by user "
"code to create the ``PATH`` on windows or ``LD_LIBRARY_PATH`` on UNIX.  "
"This should not be a cache entry."
msgstr ""
"（可选）运行时链接到共享库的可执行文件时使用的运行时库搜索路径。用户代码应使用该列表在 Windows 上创建“PATH”或在 UNIX "
"上创建“LD_LIBRARY_PATH”。这不应该是缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:267
msgid "``Xxx_VERSION``"
msgstr "``Xxx_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:266
msgid ""
"The full version string of the package found, if any.  Note that many "
"existing modules provide ``Xxx_VERSION_STRING`` instead."
msgstr "找到的包的完整版本字符串（如果有）。请注意，许多现有模块改为提供“Xxx_VERSION_STRING”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:270
msgid "``Xxx_VERSION_MAJOR``"
msgstr "``Xxx_VERSION_MAJOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:270
msgid "The major version of the package found, if any."
msgstr "找到的软件包的主要版本（如果有）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:273
msgid "``Xxx_VERSION_MINOR``"
msgstr "``Xxx_VERSION_MINOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:273
msgid "The minor version of the package found, if any."
msgstr "找到的包的次要版本（如果有）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:276
msgid "``Xxx_VERSION_PATCH``"
msgstr "``Xxx_VERSION_PATCH``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:276
msgid "The patch version of the package found, if any."
msgstr "找到的包的补丁版本，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:278
msgid ""
"The following names should not usually be used in ``CMakeLists.txt`` "
"files. They are intended for use by Find modules to specify and cache the "
"locations of specific files or directories.  Users are typically able to "
"set and edit these variables to control the behavior of Find modules (like"
" entering the path to a library manually):"
msgstr ""
"以下名称通常不应在 ``CMakeLists.txt`` 文件中使用。它们旨在供 Find "
"模块使用，以指定和缓存特定文件或目录的位置。用户通常能够设置和编辑这些变量来控制 Find 模块的行为（比如手动输入库的路径）："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:287
msgid "``Xxx_LIBRARY``"
msgstr "``Xxx_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:285
msgid ""
"The path of the library.  Use this form only when the module provides a "
"single library.  It is appropriate to use this as the result variable in a"
" :command:`find_library` command."
msgstr "库的路径。仅当模块提供单个库时才使用此形式。在 :command:`find_library` 命令中使用它作为结果变量是合适的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:293
msgid "``Xxx_Yy_LIBRARY``"
msgstr "``Xxx_Yy_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:290
msgid ""
"The path of library ``Yy`` provided by the module ``Xxx``.  Use this form "
"when the module provides more than one library or where other modules may "
"also provide a library of the same name. It is also appropriate to use "
"this form as the result variable in a :command:`find_library` command."
msgstr ""
"模块“Xxx”提供的库“Yy”的路径。当模块提供多个库或其他模块也可能提供同名库时使用此形式。在 :command:`find_library` "
"命令中使用这种形式作为结果变量也是合适的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:300
msgid "``Xxx_INCLUDE_DIR``"
msgstr "``Xxx_INCLUDE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:296
msgid ""
"When the module provides only a single library, this variable can be used "
"to specify where to find headers for using the library (or more "
"accurately, the path that consumers of the library should add to their "
"header search path).  It would be appropriate to use this as the result "
"variable in a :command:`find_path` command."
msgstr ""
"当模块仅提供单个库时，此变量可用于指定在何处查找使用该库的标头（或更准确地说，该库的使用者应添加到其标头搜索路径中的路径）。在 "
":command:`find_path` 命令中使用它作为结果变量是合适的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:307
msgid "``Xxx_Yy_INCLUDE_DIR``"
msgstr "``Xxx_Yy_INCLUDE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:303
msgid ""
"If the module provides more than one library or where other modules may "
"also provide a library of the same name, this form is recommended for "
"specifying where to find headers for using library ``Yy`` provided by the "
"module.  Again, it would be appropriate to use this as the result variable"
" in a :command:`find_path` command."
msgstr ""
"如果模块提供多个库或其他模块也可能提供同名库，则建议使用这种形式来指定在何处查找头文件以使用模块提供的库“Yy”。同样，在 "
":command:`find_path` 命令中使用它作为结果变量是合适的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:309
msgid ""
"To prevent users being overwhelmed with settings to configure, try to keep"
" as many options as possible out of the cache, leaving at least one option"
" which can be used to disable use of the module, or locate a not-found "
"library (e.g. ``Xxx_ROOT_DIR``).  For the same reason, mark most cache "
"options as advanced.  For packages which provide both debug and release "
"binaries, it is common to create cache variables with a "
"``_LIBRARY_<CONFIG>`` suffix, such as ``Foo_LIBRARY_RELEASE`` and "
"``Foo_LIBRARY_DEBUG``.  The :module:`SelectLibraryConfigurations` module "
"can be helpful for such cases."
msgstr ""
"为防止用户被配置设置淹没，请尝试将尽可能多的选项保留在缓存之外，至少保留一个可用于禁用模块或找到未找到的库的选项（例如`` "
"Xxx_ROOT_DIR``）。出于同样的原因，将大多数缓存选项标记为高级。对于同时提供调试和发布二进制文件的包，通常会创建带有 "
"``_LIBRARY_<CONFIG>`` 后缀的缓存变量，例如 ``Foo_LIBRARY_RELEASE`` 和 "
"``Foo_LIBRARY_DEBUG``。 :module:`SelectLibraryConfigurations` 模块对这种情况很有帮助。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:319
msgid ""
"While these are the standard variable names, you should provide backwards "
"compatibility for any old names that were actually in use. Make sure you "
"comment them as deprecated, so that no-one starts using them."
msgstr "虽然这些是标准变量名称，但您应该为实际使用的任何旧名称提供向后兼容性。确保将它们评论为已弃用，这样就没有人开始使用它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:325
msgid "A Sample Find Module"
msgstr "示例查找模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:327
msgid ""
"We will describe how to create a simple find module for a library ``Foo``."
msgstr "我们将描述如何为库“Foo”创建一个简单的查找模块。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:329
msgid ""
"The top of the module should begin with a license notice, followed by a "
"blank line, and then followed by a :ref:`Bracket Comment`.  The comment "
"should begin with ``.rst:`` to indicate that the rest of its content is "
"reStructuredText-format documentation.  For example:"
msgstr ""
"模块的顶部应以许可证声明开头，后跟一个空行，然后是 :ref:`Bracket Comment`。注释应以 ``.rst:`` "
"开头，以表明其其余内容是 reStructuredText 格式的文档。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:379
msgid "The module documentation consists of:"
msgstr "模块文档包括："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:381
msgid "An underlined heading specifying the module name."
msgstr "指定模块名称的带下划线的标题。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:383
msgid ""
"A simple description of what the module finds. More description may be "
"required for some packages.  If there are caveats or other details users "
"of the module should be aware of, specify them here."
msgstr "模块查找内容的简单描述。某些包可能需要更多描述。如果有模块用户应该注意的注意事项或其他细节，请在此处指定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:388
msgid "A section listing imported targets provided by the module, if any."
msgstr "列出模块提供的导入目标的部分（如果有）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:390
msgid "A section listing result variables provided by the module."
msgstr "列出模块提供的结果变量的部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:392
msgid ""
"Optionally a section listing cache variables used by the module, if any."
msgstr "可选的部分列出模块使用的缓存变量，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:394
msgid ""
"If the package provides any macros or functions, they should be listed in "
"an additional section, but can be documented by additional ``.rst:`` "
"comment blocks immediately above where those macros or functions are "
"defined."
msgstr ""
"如果包提供任何宏或函数，它们应该列在一个额外的部分中，但可以在定义这些宏或函数的地方的正上方通过额外的 ``.rst:`` 注释块进行记录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:398
msgid ""
"The find module implementation may begin below the documentation block. "
"Now the actual libraries and so on have to be found.  The code here will "
"obviously vary from module to module (dealing with that, after all, is the"
" point of find modules), but there tends to be a common pattern for "
"libraries."
msgstr ""
"查找模块的实现可能在文档块下方开始。现在必须找到实际的库等。这里的代码显然会因模块而异（毕竟，处理这个问题是查找模块的重点），但是库往往有一个通用模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:403
msgid ""
"First, we try to use ``pkg-config`` to find the library.  Note that we "
"cannot rely on this, as it may not be available, but it provides a good "
"starting point."
msgstr "首先，我们尝试使用 ``pkg-config`` 来查找库。请注意，我们不能依赖它，因为它可能不可用，但它提供了一个很好的起点。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:412
msgid ""
"This should define some variables starting ``PC_Foo_`` that contain the "
"information from the ``Foo.pc`` file."
msgstr "这应该定义一些以 ``PC_Foo_`` 开头的变量，其中包含来自 ``Foo.pc`` 文件的信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:415
msgid ""
"Now we need to find the libraries and include files; we use the "
"information from ``pkg-config`` to provide hints to CMake about where to "
"look."
msgstr "现在我们需要找到库和包含文件；我们使用来自 ``pkg-config`` 的信息来向 CMake 提供有关查找位置的提示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:431
msgid ""
"Alternatively, if the library is available with multiple configurations, "
"you can use :module:`SelectLibraryConfigurations` to automatically set the"
" ``Foo_LIBRARY`` variable instead:"
msgstr ""
"或者，如果库具有多种配置，您可以使用:module:`SelectLibraryConfigurations` 来自动设置 "
"``Foo_LIBRARY`` 变量："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:449
msgid ""
"If you have a good way of getting the version (from a header file, for "
"example), you can use that information to set ``Foo_VERSION`` (although "
"note that find modules have traditionally used ``Foo_VERSION_STRING``, so "
"you may want to set both).  Otherwise, attempt to use the information from"
" ``pkg-config``"
msgstr ""
"如果您有获取版本的好方法（例如，从头文件），您可以使用该信息来设置``Foo_VERSION``（尽管请注意，查找模块传统上使用``Foo_VERSION_STRING``，所以您可能想同时设置）。否则，尝试使用来自"
" ``pkg-config`` 的信息"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:459
msgid ""
"Now we can use :module:`FindPackageHandleStandardArgs` to do most of the "
"rest of the work for us"
msgstr "现在我们可以使用 FindPackageHandleStandardArgs 为我们完成大部分剩余工作"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:473
msgid ""
"This will check that the ``REQUIRED_VARS`` contain values (that do not end"
" in ``-NOTFOUND``) and set ``Foo_FOUND`` appropriately.  It will also "
"cache those values.  If ``Foo_VERSION`` is set, and a required version was"
" passed to :command:`find_package`, it will check the requested version "
"against the one in ``Foo_VERSION``.  It will also print messages as "
"appropriate; note that if the package was found, it will print the "
"contents of the first required variable to indicate where it was found."
msgstr ""
"这将检查 ``REQUIRED_VARS`` 是否包含值（不以 ``-NOTFOUND`` 结尾）并适当地设置 "
"``Foo_FOUND``。它还将缓存这些值。如果设置了``Foo_VERSION``，并且将所需的版本传递给 :command:`find_package`，它将根据``Foo_VERSION``中的版本检查请求的版本。它还会根据需要打印消息；请注意，如果找到包，它将打印第一个必需变量的内容以指示找到它的位置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:481
msgid ""
"At this point, we have to provide a way for users of the find module to "
"link to the library or libraries that were found.  There are two "
"approaches, as discussed in the `Find Modules`_ section above.  The "
"traditional variable approach looks like"
msgstr ""
"在这一点上，我们必须为查找模块的用户提供一种方法来链接到找到的一个或多个库。如上文“查找模块”部分所述，有两种方法。传统的变量方法看起来像"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:494
msgid ""
"If more than one library was found, all of them should be included in "
"these variables (see the `Standard Variable Names`_ section for more "
"information)."
msgstr "如果找到多个库，则所有库都应包含在这些变量中（有关更多信息，请参阅“标准变量名称”部分）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:498
msgid ""
"When providing imported targets, these should be namespaced (hence the "
"``Foo::`` prefix); CMake will recognize that values passed to "
":command:`target_link_libraries` that contain ``::`` in their name are "
"supposed to be imported targets (rather than just library names), and will"
" produce appropriate diagnostic messages if that target does not exist "
"(see policy :policy:`CMP0028`)."
msgstr ""
"当提供导入的目标时，这些应该是命名空间的（因此有 ``Foo::`` 前缀）； CMake 将识别传递给 "
":command:`target_link_libraries` 的值在其名称中包含 ``::`` "
"应该是导入的目标（而不仅仅是库名称），如果该目标不存在，它将产生适当的诊断消息（参见政策:policy:`CMP0028`）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:516
msgid ""
"One thing to note about this is that the ``INTERFACE_INCLUDE_DIRECTORIES``"
" and similar properties should only contain information about the target "
"itself, and not any of its dependencies.  Instead, those dependencies "
"should also be targets, and CMake should be told that they are "
"dependencies of this target. CMake will then combine all the necessary "
"information automatically."
msgstr ""
"关于这一点需要注意的一件事是 ``INTERFACE_INCLUDE_DIRECTORIES`` "
"和类似的属性应该只包含关于目标本身的信息，而不是它的任何依赖项。相反，这些依赖项也应该是目标，并且应该告诉 CMake 它们是该目标的依赖项。然后 "
"CMake 将自动组合所有必要的信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:522
msgid ""
"The type of the :prop_tgt:`IMPORTED` target created in the "
":command:`add_library` command can always be specified as ``UNKNOWN`` "
"type.  This simplifies the code in cases where static or shared variants "
"may be found, and CMake will determine the type by inspecting the files."
msgstr ""
"在 :command:`add_library` 命令中创建的 :prop_tgt:`IMPORTED` 目标的类型总是可以指定为 "
"``UNKNOWN`` 类型。这在可能发现静态或共享变体的情况下简化了代码，CMake 将通过检查文件来确定类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:527
msgid ""
"If the library is available with multiple configurations, the "
":prop_tgt:`IMPORTED_CONFIGURATIONS` target property should also be "
"populated:"
msgstr "如果库具有多种配置，则还应填充 :prop_tgt:`IMPORTED_CONFIGURATIONS` 目标属性："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:559
msgid ""
"The ``RELEASE`` variant should be listed first in the property so that the"
" variant is chosen if the user uses a configuration which is not an exact "
"match for any listed ``IMPORTED_CONFIGURATIONS``."
msgstr ""
"``RELEASE`` 变体应该首先列在属性中，以便在用户使用与任何列出的 ``IMPORTED_CONFIGURATIONS`` "
"不完全匹配的配置时选择该变体。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:563
msgid ""
"Most of the cache variables should be hidden in the :program:`ccmake` "
"interface unless the user explicitly asks to edit them."
msgstr "大多数缓存变量应该隐藏在 ccmake 接口中，除非用户明确要求编辑它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-developer.7.rst:573
msgid ""
"If this module replaces an older version, you should set compatibility "
"variables to cause the least disruption possible."
msgstr "如果此模块替换了旧版本，您应该设置兼容性变量以尽可能减少中断。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:4
msgid "cmake-env-variables(7)"
msgstr "cmake 环境变量(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:10
msgid ""
"This page lists environment variables that have special meaning to CMake."
msgstr "此页面列出了对 CMake 具有特殊意义的环境变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:13
msgid ""
"For general information on environment variables, see the "
":ref:`Environment Variables <CMake Language Environment Variables>` "
"section in the cmake-language manual."
msgstr "有关环境变量的一般信息，请参阅 cmake 语言手册中的环境变量 <CMake 语言环境变量> 部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:18
msgid "Environment Variables that Change Behavior"
msgstr "改变行为的环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:28
msgid "Environment Variables that Control the Build"
msgstr "控制构建的环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:59
msgid "Environment Variables for Languages"
msgstr "语言的环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:88
msgid "Environment Variables for CTest"
msgstr "CTest 的环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-env-variables.7.rst:103
msgid "Environment Variables for the CMake curses interface"
msgstr "CMake curses 接口的环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:4
msgid "cmake-file-api(7)"
msgstr "cmake 文件应用编程接口(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:13
msgid ""
"CMake provides a file-based API that clients may use to get semantic "
"information about the buildsystems CMake generates.  Clients may use the "
"API by writing query files to a specific location in a build tree to "
"request zero or more `Object Kinds`_.  When CMake generates the "
"buildsystem in that build tree it will read the query files and write "
"reply files for the client to read."
msgstr ""
"CMake 提供了一个基于文件的 API，客户端可以使用它来获取有关 CMake "
"生成的构建系统的语义信息。客户端可以通过将查询文件写入构建树中的特定位置来使用 API，以请求零个或多个“对象种类”。当 CMake "
"在该构建树中生成构建系统时，它将读取查询文件并写入回复文件以供客户端读取。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:20
msgid ""
"The file-based API uses a ``<build>/.cmake/api/`` directory at the top of "
"a build tree.  The API is versioned to support changes to the layout of "
"files within the API directory.  API file layout versioning is orthogonal "
"to the versioning of `Object Kinds`_ used in replies. This version of "
"CMake supports only one API version, `API v1`_."
msgstr ""
"基于文件的 API 使用构建树顶部的 ``<build>/.cmake/api/`` 目录。 API 版本化以支持更改 API 目录中的文件布局。 "
"API 文件布局版本控制与回复中使用的“对象种类”版本控制是正交的。这个版本的 CMake 只支持一个 API 版本，`API v1`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:27
msgid "API v1"
msgstr "API v1"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:29
msgid ""
"API v1 is housed in the ``<build>/.cmake/api/v1/`` directory. It has the "
"following subdirectories:"
msgstr "API v1 位于 ``<build>/.cmake/api/v1/`` 目录中。它有以下子目录："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:35
msgid "``query/``"
msgstr "``查询/``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:33
msgid ""
"Holds query files written by clients. These may be `v1 Shared Stateless "
"Query Files`_, `v1 Client Stateless Query Files`_, or `v1 Client Stateful "
"Query Files`_."
msgstr "保存由客户端编写的查询文件。这些可能是“v1 共享无状态查询文件”、“v1 客户端无状态查询文件”或“v1 客户端有状态查询文件”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:45
msgid "``reply/``"
msgstr "``回复/``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:38
msgid ""
"Holds reply files written by CMake whenever it runs to generate a build "
"system.  These are indexed by a `v1 Reply Index File`_ file that may "
"reference additional `v1 Reply Files`_.  CMake owns all reply files. "
"Clients must never remove them."
msgstr ""
"每当它运行以生成构建系统时，保存由 CMake 编写的回复文件。这些由 `v1 Reply Index File`_ 文件索引，该文件可能引用其他 "
"`v1 Reply Files`_。 CMake 拥有所有回复文件。客户绝不能删除它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:43
msgid ""
"Clients may look for and read a reply index file at any time. Clients may "
"optionally create the ``reply/`` directory at any time and monitor it for "
"the appearance of a new reply index file."
msgstr "客户可以随时查找和阅读回复索引文件。客户端可以随时选择创建``reply/`` 目录并监视它是否出现新的回复索引文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:48
msgid "v1 Shared Stateless Query Files"
msgstr "v1 共享无状态查询文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:50
msgid ""
"Shared stateless query files allow clients to share requests for major "
"versions of the `Object Kinds`_ and get all requested versions recognized "
"by the CMake that runs."
msgstr "共享的无状态查询文件允许客户端共享对“对象种类”的主要版本的请求，并获得运行的 CMake 识别的所有请求版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:54
msgid ""
"Clients may create shared requests by creating empty files in the "
"``v1/query/`` directory.  The form is::"
msgstr "客户端可以通过在“v1/query/”目录中创建空文件来创建共享请求。形式是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:59
msgid ""
"where ``<kind>`` is one of the `Object Kinds`_, ``-v`` is literal, and "
"``<major>`` is the major version number."
msgstr "其中``<kind>``是`Object Kinds`_之一，``-v``是文字，``<major>``是主版本号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:62
msgid ""
"Files of this form are stateless shared queries not owned by any specific "
"client.  Once created they should not be removed without external client "
"coordination or human intervention."
msgstr "这种形式的文件是不属于任何特定客户端的无状态共享查询。一旦创建，在没有外部客户协调或人工干预的情况下，不应删除它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:67
msgid "v1 Client Stateless Query Files"
msgstr "v1 客户端无状态查询文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:69
msgid ""
"Client stateless query files allow clients to create owned requests for "
"major versions of the `Object Kinds`_ and get all requested versions "
"recognized by the CMake that runs."
msgstr "客户端无状态查询文件允许客户端为“对象种类”的主要版本创建拥有的请求，并获取运行的 CMake 识别的所有请求版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:73
msgid ""
"Clients may create owned requests by creating empty files in client-"
"specific query subdirectories.  The form is::"
msgstr "客户端可以通过在特定于客户端的查询子目录中创建空文件来创建拥有的请求。形式是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:78
msgid ""
"where ``client-`` is literal, ``<client>`` is a string uniquely "
"identifying the client, ``<kind>`` is one of the `Object Kinds`_, ``-v`` "
"is literal, and ``<major>`` is the major version number. Each client must "
"choose a unique ``<client>`` identifier via its own means."
msgstr ""
"其中``client-``是文字，``<client>``是唯一标识客户端的字符串，``<kind>``是`Object "
"Kinds`_之一，``-v``是文字, ``<major>`` 是主版本号。每个客户端必须通过自己的方式选择一个唯一的“<client>”标识符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:84
msgid ""
"Files of this form are stateless queries owned by the client ``<client>``."
" The owning client may remove them at any time."
msgstr "这种形式的文件是客户端 ``<client>`` 拥有的无状态查询。拥有的客户可以随时删除它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:88
msgid "v1 Client Stateful Query Files"
msgstr "v1 客户端状态查询文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:90
msgid ""
"Stateful query files allow clients to request a list of versions of each "
"of the `Object Kinds`_ and get only the most recent version recognized by "
"the CMake that runs."
msgstr "有状态查询文件允许客户端请求每个“对象种类”的版本列表，并仅获取运行的 CMake 识别的最新版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:94
msgid ""
"Clients may create owned stateful queries by creating ``query.json`` files"
" in client-specific query subdirectories.  The form is::"
msgstr "客户端可以通过在特定于客户端的查询子目录中创建“query.json”文件来创建自有状态查询。形式是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:99
msgid ""
"where ``client-`` is literal, ``<client>`` is a string uniquely "
"identifying the client, and ``query.json`` is literal.  Each client must "
"choose a unique ``<client>`` identifier via its own means."
msgstr ""
"其中``client-``是文字，``<client>``是唯一标识客户端的字符串，``query.json``是文字。每个客户端必须通过自己的方式选择一个唯一的“<client>”标识符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:103
msgid ""
"``query.json`` files are stateful queries owned by the client "
"``<client>``. The owning client may update or remove them at any time.  "
"When a given client installation is updated it may then update the "
"stateful query it writes to build trees to request newer object versions. "
"This can be used to avoid asking CMake to generate multiple object "
"versions unnecessarily."
msgstr ""
"``query.json`` 文件是客户端 ``<client>`` "
"拥有的状态查询。拥有的客户可以随时更新或删除它们。当给定的客户端安装更新时，它可能会更新它为构建树而编写的有状态查询，以请求更新的对象版本。这可用于避免要求"
" CMake 不必要地生成多个对象版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:110
msgid "A ``query.json`` file must contain a JSON object:"
msgstr "``query.json`` 文件必须包含一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:126
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:239
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:378
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:429
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1691
msgid "The members are:"
msgstr "成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:157
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:336
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:801
msgid "``requests``"
msgstr "``请求``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:129
msgid ""
"A JSON array containing zero or more requests.  Each request is a JSON "
"object with members:"
msgstr "包含零个或多个请求的 JSON 数组。每个请求都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:133
msgid "Specifies one of the `Object Kinds`_ to be included in the reply."
msgstr "指定要包含在回复中的“对象种类”之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:143
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:257
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:362
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1607
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:64
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:432
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:764
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:801
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1520
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1696
msgid "``version``"
msgstr "``版本``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:136
msgid ""
"Indicates the version(s) of the object kind that the client understands.  "
"Versions have major and minor components following semantic version "
"conventions.  The value must be"
msgstr "指示客户端理解的对象种类的版本。版本具有遵循语义版本约定的主要和次要组件。该值必须是"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:140
msgid "a JSON integer specifying a (non-negative) major version number, or"
msgstr "指定（非负）主要版本号的 JSON 整数，或"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:141
msgid ""
"a JSON object containing ``major`` and (optionally) ``minor`` members "
"specifying non-negative integer version components, or"
msgstr "包含指定非负整数版本组件的``major``和（可选）``minor``成员的JSON对象，或"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:143
msgid "a JSON array whose elements are each one of the above."
msgstr "一个 JSON 数组，其元素均为上述各项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:149
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:163
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:333
msgid "``client``"
msgstr "``客户端``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:146
msgid ""
"Optional member reserved for use by the client.  This value is preserved "
"in the reply written for the client in the `v1 Reply Index File`_ but is "
"otherwise ignored.  Clients may use this to pass custom information with a"
" request through to its reply."
msgstr ""
"保留供客户端使用的可选成员。此值保留在为客户端编写的回复中，位于“v1 "
"回复索引文件”中，但会被忽略。客户可以使用它来将自定义信息与请求一起传递到其回复。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:151
msgid ""
"For each requested object kind CMake will choose the *first* version that "
"it recognizes for that kind among those listed in the request. The "
"response will use the selected *major* version with the highest *minor* "
"version known to the running CMake for that major version. Therefore "
"clients should list all supported major versions in preferred order along "
"with the minimal minor version required for each major version."
msgstr ""
"对于每个请求的对象种类，CMake 将在请求中列出的那些中选择它为该种类识别的*第一个*版本。响应将使用选定的*主要*版本和运行中的 CMake "
"已知的最高*次要*版本。因此，客户应按首选顺序列出所有受支持的主要版本以及每个主要版本所需的最小次要版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:160
msgid ""
"Optional member reserved for use by the client.  This value is preserved "
"in the reply written for the client in the `v1 Reply Index File`_ but is "
"otherwise ignored.  Clients may use this to pass custom information with a"
" query through to its reply."
msgstr ""
"保留供客户端使用的可选成员。此值保留在为客户端编写的回复中，位于“v1 "
"回复索引文件”中，但会被忽略。客户端可以使用它来将自定义信息与查询一起传递到其回复。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:165
msgid ""
"Other ``query.json`` top-level members are reserved for future use. If "
"present they are ignored for forward compatibility."
msgstr "其他 ``query.json`` 顶级成员保留供将来使用。如果存在，它们将被忽略以实现向前兼容性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:169
msgid "v1 Reply Index File"
msgstr "v1 回复索引文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:171
msgid ""
"CMake writes an ``index-*.json`` file to the ``v1/reply/`` directory "
"whenever it runs to generate a build system.  Clients must read the reply "
"index file first and may read other `v1 Reply Files`_ only by following "
"references.  The form of the reply index file name is::"
msgstr ""
"CMake 在运行时将一个 ``index-*.json`` 文件写入 ``v1/reply/`` "
"目录以生成构建系统。客户端必须先阅读回复索引文件，然后才能阅读其他`v1 回复文件`_ 只能通过以下参考。回复索引文件名的格式为：："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:178
msgid ""
"where ``index-`` is literal and ``<unspecified>`` is an unspecified name "
"selected by CMake.  Whenever a new index file is generated it is given a "
"new name and any old one is deleted.  During the short time between these "
"steps there may be multiple index files present; the one with the largest "
"name in lexicographic order is the current index file."
msgstr ""
"其中 ``index-`` 是文字，``<unspecified>`` 是 CMake "
"选择的未指定名称。每当生成一个新的索引文件时，它都会被赋予一个新名称，并且任何旧的都会被删除。在这些步骤之间的短时间内，可能存在多个索引文件；字典序中名称最大的是当前索引文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:185
msgid "The reply index file contains a JSON object:"
msgstr "回复索引文件包含一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:278
msgid "``cmake``"
msgstr "``cmake``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:242
msgid ""
"A JSON object containing information about the instance of CMake that "
"generated the reply.  It contains members:"
msgstr "一个 JSON 对象，其中包含有关生成回复的 CMake 实例的信息。它包含成员："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:246
msgid "A JSON object specifying the version of CMake with members:"
msgstr "一个 JSON 对象，指定带有成员的 CMake 版本："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:248
msgid "``major``, ``minor``, ``patch``"
msgstr "``主要``，``次要``，``补丁``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:249
msgid ""
"Integer values specifying the major, minor, and patch version components."
msgstr "指定主要、次要和补丁版本组件的整数值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:250
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:761
msgid "``suffix``"
msgstr "``后缀``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:251
msgid "A string specifying the version suffix, if any, e.g. ``g0abc3``."
msgstr "指定版本后缀的字符串（如果有），例如``g0abc3``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:253
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:566
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1076
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1089
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:753
msgid "``string``"
msgstr "``字符串``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:253
msgid ""
"A string specifying the full version in the format "
"``<major>.<minor>.<patch>[-<suffix>]``."
msgstr "以“<major>.<minor>.<patch>[-<suffix>]”格式指定完整版本的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:257
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:764
msgid "``isDirty``"
msgstr "``是脏的``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:256
msgid ""
"A boolean indicating whether the version was built from a version "
"controlled source tree with local modifications."
msgstr "一个布尔值，指示该版本是否是从具有本地修改的版本控制源代码树构建的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:265
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:497
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:667
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:705
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:947
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1468
msgid "``paths``"
msgstr "``路径``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:260
msgid ""
"A JSON object specifying paths to things that come with CMake. It has "
"members for :program:`cmake`, :program:`ctest`, and :program:`cpack` whose"
" values are JSON strings specifying the absolute path to each tool, "
"represented with forward slashes.  It also has a ``root`` member for the "
"absolute path to the directory containing CMake resources like the "
"``Modules/`` directory (see :variable:`CMAKE_ROOT`)."
msgstr ""
"一个 JSON 对象，指定 CMake 附带的内容的路径。它有 :program:`cmake`、 :program:`ctest` 和 "
":program:`cpack` 的成员，它们的值是 JSON 字符串，指定每个工具的绝对路径，用正斜杠表示。它还有一个 ``root`` "
"成员，用于包含 CMake 资源的目录的绝对路径，例如 ``Modules/`` 目录（参见 :variable:`CMAKE_ROOT`）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:278
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:199
msgid "``generator``"
msgstr "``生成器``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:268
msgid ""
"A JSON object describing the CMake generator used for the build. It has "
"members:"
msgstr "描述用于构建的 CMake 生成器的 JSON 对象。它有成员："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:272
msgid "``multiConfig``"
msgstr "``多配置``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:272
msgid ""
"A boolean specifying whether the generator supports multiple output "
"configurations."
msgstr "一个布尔值，指定生成器是否支持多个输出配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:274
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:508
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:592
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:626
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:907
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:930
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1079
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1142
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1394
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1409
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:145
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:375
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:536
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:715
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:753
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:878
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1009
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1029
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:770
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1547
msgid "``name``"
msgstr "``名字``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:275
msgid "A string specifying the name of the generator."
msgstr "指定生成器名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:278
msgid "``platform``"
msgstr "``平台``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:277
msgid ""
"If the generator supports :variable:`CMAKE_GENERATOR_PLATFORM`, this is a "
"string specifying the generator platform name."
msgstr "如果生成器支持 :variable:`CMAKE_GENERATOR_PLATFORM`，这是一个指定生成器平台名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:283
msgid "``objects``"
msgstr "``对象``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:281
msgid ""
"A JSON array listing all versions of all `Object Kinds`_ generated as part"
" of the reply.  Each array entry is a `v1 Reply File Reference`_."
msgstr ""
"一个 JSON 数组，列出作为回复的一部分生成的所有“对象种类”的所有版本。每个数组条目都是一个 `v1 Reply File "
"Reference`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:348
msgid "``reply``"
msgstr "``回复``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:286
msgid ""
"A JSON object mirroring the content of the ``query/`` directory that CMake"
" loaded to produce the reply.  The members are of the form"
msgstr "一个 JSON 对象，反映了 CMake 加载以生成回复的 ``query/`` 目录的内容。成员的形式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:294
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:314
msgid "``<kind>-v<major>``"
msgstr "``<种类>-v<主要>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:290
msgid ""
"A member of this form appears for each of the `v1 Shared Stateless Query "
"Files`_ that CMake recognized as a request for object kind ``<kind>`` with"
" major version ``<major>``. The value is a `v1 Reply File Reference`_ to "
"the corresponding reply file for that object kind and version."
msgstr ""
"这种形式的成员出现在每个 `v1 共享无状态查询文件`_ 中，CMake 将其识别为对具有主要版本``<major>`` "
"的对象种类``<kind>`` 的请求。该值是该对象种类和版本的相应回复文件的“v1 回复文件参考”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:301
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:321
msgid "``<unknown>``"
msgstr "``<未知>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:297
msgid ""
"A member of this form appears for each of the `v1 Shared Stateless Query "
"Files`_ that CMake did not recognize. The value is a JSON object with a "
"single ``error`` member containing a string with an error message "
"indicating that the query file is unknown."
msgstr ""
"对于 CMake 无法识别的每个“v1 共享无状态查询文件”，都会出现此表单的成员。该值是一个 JSON 对象，具有单个 ``error`` "
"成员，其中包含一个字符串，其中包含一条错误消息，指示查询文件未知。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:348
msgid "``client-<client>``"
msgstr "``客户端-<客户端>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:304
msgid ""
"A member of this form appears for each client-owned directory holding `v1 "
"Client Stateless Query Files`_. The value is a JSON object mirroring the "
"content of the ``query/client-<client>/`` directory.  The members are of "
"the form:"
msgstr ""
"对于每个持有“v1 客户端无状态查询文件”的客户端拥有的目录，都会出现此表单的成员。该值是一个 JSON 对象，反映了 "
"``query/client-<client>/`` 目录的内容。成员的形式为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:310
msgid ""
"A member of this form appears for each of the `v1 Client Stateless Query "
"Files`_ that CMake recognized as a request for object kind ``<kind>`` with"
" major version ``<major>``. The value is a `v1 Reply File Reference`_ to "
"the corresponding reply file for that object kind and version."
msgstr ""
"这种形式的成员出现在每个 `v1 客户端无状态查询文件`_ 中，CMake 将其识别为对具有主要版本``<major>`` "
"的对象种类``<kind>`` 的请求。该值是该对象种类和版本的相应回复文件的“v1 回复文件参考”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:317
msgid ""
"A member of this form appears for each of the `v1 Client Stateless Query "
"Files`_ that CMake did not recognize. The value is a JSON object with a "
"single ``error`` member containing a string with an error message "
"indicating that the query file is unknown."
msgstr ""
"对于 CMake 无法识别的每个“v1 客户端无状态查询文件”，都会出现此表单的成员。该值是一个 JSON 对象，具有单个 ``error`` "
"成员，其中包含一个字符串，其中包含一条错误消息，指示查询文件未知。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:348
msgid "``query.json``"
msgstr "``query.json``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:324
msgid ""
"This member appears for clients using `v1 Client Stateful Query Files`_. "
"If the ``query.json`` file failed to read or parse as a JSON object, this "
"member is a JSON object with a single ``error`` member containing a string"
" with an error message.  Otherwise, this member is a JSON object mirroring"
" the content of the ``query.json`` file. The members are:"
msgstr ""
"该成员为使用“v1 客户端状态查询文件”的客户端显示。如果 ``query.json`` 文件无法读取或解析为 JSON 对象，则此成员是一个 "
"JSON 对象，带有一个包含带有错误消息的字符串的 ``error`` 成员。否则，该成员是一个镜像 ``query.json`` 文件内容的 "
"JSON 对象。成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:333
msgid "A copy of the ``query.json`` file ``client`` member, if it exists."
msgstr "``query.json`` 文件``client`` 成员的副本（如果存在）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:336
msgid "A copy of the ``query.json`` file ``requests`` member, if it exists."
msgstr "``query.json`` 文件``requests`` 成员的副本（如果存在）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:348
msgid "``responses``"
msgstr "``回应``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:339
msgid ""
"If the ``query.json`` file ``requests`` member is missing or invalid, this"
" member is a JSON object with a single ``error`` member containing a "
"string with an error message.  Otherwise, this member contains a JSON "
"array with a response for each entry of the ``requests`` array, in the "
"same order.  Each response is"
msgstr ""
"如果 ``query.json`` 文件 ``requests`` 成员丢失或无效，则此成员是一个 JSON "
"对象，带有一个包含带有错误消息的字符串的 ``error`` 成员。否则，此成员包含一个 JSON "
"数组，其中包含对“请求”数组的每个条目的响应，顺序相同。每个响应是"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:345
msgid ""
"a JSON object with a single ``error`` member containing a string with an "
"error message, or"
msgstr "一个带有单个 ``error`` 成员的 JSON 对象，其中包含带有错误消息的字符串，或者"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:347
msgid ""
"a `v1 Reply File Reference`_ to the corresponding reply file for the "
"requested object kind and selected version."
msgstr "`v1 Reply File Reference`_ 到请求的对象类型和所选版本的相应回复文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:350
msgid ""
"After reading the reply index file, clients may read the other `v1 Reply "
"Files`_ it references."
msgstr "读取回复索引文件后，客户端可以读取它引用的其他“v1 回复文件”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:354
msgid "v1 Reply File Reference"
msgstr "v1 回复文件参考"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:356
msgid ""
"The reply index file represents each reference to another reply file using"
" a JSON object with members:"
msgstr "回复索引文件使用带有成员的 JSON 对象表示对另一个回复文件的每个引用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:360
msgid "A string specifying one of the `Object Kinds`_."
msgstr "指定“对象种类”之一的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:362
msgid ""
"A JSON object with members ``major`` and ``minor`` specifying integer "
"version components of the object kind."
msgstr "一个 JSON 对象，其成员 ``major`` 和 ``minor`` 指定对象种类的整数版本组件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:366
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:579
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:643
msgid "``jsonFile``"
msgstr "``jsonFile``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:365
msgid ""
"A JSON string specifying a path relative to the reply index file to "
"another JSON file containing the object."
msgstr "一个 JSON 字符串，指定相对于包含该对象的另一个 JSON 文件的回复索引文件的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:369
msgid "v1 Reply Files"
msgstr "v1 回复文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:371
msgid ""
"Reply files containing specific `Object Kinds`_ are written by CMake. The "
"names of these files are unspecified and must not be interpreted by "
"clients.  Clients must first read the `v1 Reply Index File`_ and follow "
"references to the names of the desired response objects."
msgstr ""
"包含特定“对象种类”的回复文件由 CMake 编写。这些文件的名称未指定，不能由客户端解释。客户端必须首先阅读`v1 回复索引文件`_ "
"并遵循对所需响应对象名称的引用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:376
msgid ""
"Reply files (including the index file) will never be replaced by files of "
"the same name but different content.  This allows a client to read the "
"files concurrently with a running CMake that may generate a new reply.  "
"However, after generating a new reply CMake will attempt to remove reply "
"files from previous runs that it did not just write. If a client attempts "
"to read a reply file referenced by the index but finds the file missing, "
"that means a concurrent CMake has generated a new reply.  The client may "
"simply start again by reading the new reply index file."
msgstr ""
"回复文件（包括索引文件）永远不会被同名不同内容的文件替换。这允许客户端与正在运行的可能生成新回复的 CMake "
"同时读取文件。然而，在生成一个新的回复后，CMake "
"将尝试从以前的运行中删除它不只是写入的回复文件。如果客户端尝试读取索引引用的回复文件但发现文件丢失，则意味着并发 CMake "
"已生成新回复。客户端可以简单地通过读取新的回复索引文件重新开始。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:389
msgid "Object Kinds"
msgstr "对象种类"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:391
msgid ""
"The CMake file-based API reports semantic information about the build "
"system using the following kinds of JSON objects.  Each kind of object is "
"versioned independently using semantic versioning with major and minor "
"components.  Every kind of object has the form:"
msgstr ""
"CMake 基于文件的 API 使用以下类型的 JSON "
"对象报告有关构建系统的语义信息。每种对象都使用主要和次要组件的语义版本控制独立进行版本控制。每种对象都有以下形式："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:404
msgid ""
"The ``kind`` member is a string specifying the object kind name. The "
"``version`` member is a JSON object with ``major`` and ``minor`` members "
"specifying integer components of the object kind's version. Additional "
"top-level members are specific to each object kind."
msgstr ""
"``kind`` 成员是指定对象种类名称的字符串。 ``version`` 成员是一个 JSON 对象，其中``major`` 和``minor``"
" 成员指定对象种类版本的整数部分。其他顶级成员特定于每个对象种类。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:410
msgid "Object Kind \"codemodel\""
msgstr "对象种类“代码模型”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:412
msgid ""
"The ``codemodel`` object kind describes the build system structure as "
"modeled by CMake."
msgstr "``codemodel`` 对象类型描述了由 CMake 建模的构建系统结构。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:415
msgid ""
"There is only one ``codemodel`` object major version, version 2. Version 1"
" does not exist to avoid confusion with that from :manual:`cmake-"
"server(7)` mode."
msgstr ""
"只有一个 ``codemodel`` 对象主要版本，版本 2。版本 1 不存在以避免与来自 :manual:`cmake-server(7)` "
"模式的混淆。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:420
msgid "\"codemodel\" version 2"
msgstr "“代码模型”版本 2"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:422
msgid "``codemodel`` object version 2 is a JSON object:"
msgstr "``codemodel`` 对象版本 2 是一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:486
msgid "The members specific to ``codemodel`` objects are:"
msgstr "``codemodel`` 对象特有的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:489
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:653
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:933
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1460
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1590
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1616
msgid "A JSON object containing members:"
msgstr "包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:492
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1463
msgid ""
"A string specifying the absolute path to the top-level source directory, "
"represented with forward slashes."
msgstr "一个字符串，指定顶级源目录的绝对路径，用正斜杠表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:497
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:528
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:667
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:947
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1468
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:171
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:173
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:174
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:175
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:176
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:177
msgid "``build``"
msgstr "``构建``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:496
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1467
msgid ""
"A string specifying the absolute path to the top-level build directory, "
"represented with forward slashes."
msgstr "一个字符串，指定顶级构建目录的绝对路径，用正斜杠表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:643
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:958
msgid "``configurations``"
msgstr "``配置``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:500
msgid ""
"A JSON array of entries corresponding to available build configurations. "
"On single-configuration generators there is one entry for the value of the"
" :variable:`CMAKE_BUILD_TYPE` variable.  For multi-configuration "
"generators there is an entry for each configuration listed in the "
":variable:`CMAKE_CONFIGURATION_TYPES` variable. Each entry is a JSON "
"object containing members:"
msgstr ""
"对应于可用构建配置的条目的 JSON 数组。在单配置生成器上，CMAKE_BUILD_TYPE "
"变量的值有一个条目。对于多配置生成器，CMAKE_CONFIGURATION_TYPES "
"变量中列出的每个配置都有一个条目。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:508
msgid "A string specifying the name of the configuration, e.g. ``Debug``."
msgstr "指定配置名称的字符串，例如``调试``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:511
msgid ""
"A JSON array of entries each corresponding to a build system directory "
"whose source directory contains a ``CMakeLists.txt`` file.  The first "
"entry corresponds to the top-level directory.  Each entry is a JSON object"
" containing members:"
msgstr ""
"条目的 JSON "
"数组，每个条目对应于构建系统目录，其源目录包含一个“CMakeLists.txt”文件。第一个条目对应于顶级目录。每个条目都是一个包含成员的 "
"JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:517
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:656
msgid ""
"A string specifying the path to the source directory, represented with "
"forward slashes.  If the directory is inside the top-level source "
"directory then the path is specified relative to that directory (with "
"``.`` for the top-level source directory itself). Otherwise the path is "
"absolute."
msgstr ""
"指定源目录路径的字符串，用正斜杠表示。如果该目录位于顶级源目录中，则路径是相对于该目录指定的（顶级源目录本身带有 ``.``）。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:524
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:663
msgid ""
"A string specifying the path to the build directory, represented with "
"forward slashes.  If the directory is inside the top-level build directory"
" then the path is specified relative to that directory (with ``.`` for the"
" top-level build directory itself). Otherwise the path is absolute."
msgstr ""
"指定构建目录路径的字符串，用正斜杠表示。如果该目录位于顶级构建目录中，则路径是相对于该目录指定的（顶级构建目录本身使用 "
"``.``）。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:534
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:598
msgid "``parentIndex``"
msgstr "``父索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:531
msgid ""
"Optional member that is present when the directory is not top-level. The "
"value is an unsigned integer 0-based index of another entry in the main "
"``directories`` array that corresponds to the parent directory that added "
"this directory as a subdirectory."
msgstr ""
"当目录不是顶级目录时出现的可选成员。该值是主“directories”数组中另一个条目的基于 0 "
"的无符号整数索引，该数组对应于将此目录添加为子目录的父目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:541
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:604
msgid "``childIndexes``"
msgstr "``childIndexes``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:537
msgid ""
"Optional member that is present when the directory has subdirectories. The"
" value is a JSON array of entries corresponding to child directories "
"created by the :command:`add_subdirectory` or :command:`subdirs` command."
"  Each entry is an unsigned integer 0-based index of another entry in the "
"main ``directories`` array."
msgstr ""
"当目录具有子目录时存在的可选成员。该值是一个 JSON 条目数组，对应于由 :command:`add_subdirectory` 或 "
":command:`subdirs` 命令创建的子目录。每个条目都是主“目录”数组中另一个条目的从 0 开始的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:545
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:638
msgid "``projectIndex``"
msgstr "``projectIndex``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:544
msgid ""
"An unsigned integer 0-based index into the main ``projects`` array "
"indicating the build system project to which the this directory belongs."
msgstr "主“projects”数组中基于 0 的无符号整数索引，指示此目录所属的构建系统项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:551
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:616
msgid "``targetIndexes``"
msgstr "``目标索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:548
msgid ""
"Optional member that is present when the directory itself has targets, "
"excluding those belonging to subdirectories.  The value is a JSON array of"
" entries corresponding to the targets.  Each entry is an unsigned integer "
"0-based index into the main ``targets`` array."
msgstr ""
"当目录本身具有目标时存在的可选成员，不包括属于子目录的目标。该值是与目标对应的条目的 JSON 数组。每个条目都是一个无符号整数，从 0 "
"开始索引到主“目标”数组中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:566
msgid "``minimumCMakeVersion``"
msgstr "``最小CMakeVersion``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:554
msgid ""
"Optional member present when a minimum required version of CMake is known "
"for the directory.  This is the ``<min>`` version given to the most local "
"call to the :command:`cmake_minimum_required(VERSION)` command in the "
"directory itself or one of its ancestors. The value is a JSON object with "
"one member:"
msgstr ""
"当目录已知最低要求的 CMake 版本时，可选成员出现。这是给予目录本身或其祖先之一的 "
"cmake_minimum_required(VERSION) 命令的最本地调用的 ``<min>`` 版本。该值是一个具有一个成员的 JSON "
"对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:561
msgid "A string specifying the minimum required version in the format::"
msgstr "指定最低要求版本的字符串，格式如下："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:565
msgid ""
"Each component is an unsigned integer and the suffix may be an arbitrary "
"string."
msgstr "每个组件都是一个无符号整数，后缀可以是任意字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:572
msgid "``hasInstallRule``"
msgstr "``有安装规则``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:569
msgid ""
"Optional member that is present with boolean value ``true`` when the "
"directory or one of its subdirectories contains any :command:`install` "
"rules, i.e. whether a ``make install`` or equivalent rule is available."
msgstr ""
"当目录或其子目录之一包含任何 :command:`install` 规则时，布尔值 ``true`` 的可选成员，即是否有 ``make "
"install`` 或等效规则可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:575
msgid ""
"A JSON string specifying a path relative to the codemodel file to another "
"JSON file containing a `\"codemodel\" version 2 \"directory\" object`_."
msgstr "一个 JSON 字符串，指定相对于代码模型文件到另一个包含“代码模型”版本 2“目录”对象的 JSON 文件的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:579
msgid "This field was added in codemodel version 2.3."
msgstr "该字段是在代码模型版本 2.3 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:616
msgid "``projects``"
msgstr "``项目``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:582
msgid ""
"A JSON array of entries corresponding to the top-level project and sub-"
"projects defined in the build system.  Each (sub-)project corresponds to a"
" source directory whose ``CMakeLists.txt`` file calls the "
":command:`project` command with a project name different from its parent "
"directory.  The first entry corresponds to the top-level project."
msgstr ""
"对应于构建系统中定义的顶级项目和子项目的 JSON 条目数组。每个（子）项目对应一个源目录，其 ``CMakeLists.txt`` 文件调用 "
":command:`project` 命令，项目名称不同于其父目录。第一个条目对应于顶级项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:589
msgid "Each entry is a JSON object containing members:"
msgstr "每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:592
msgid ""
"A string specifying the name given to the :command:`project` command."
msgstr "指定给 :command:`project` 命令的名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:595
msgid ""
"Optional member that is present when the project is not top-level. The "
"value is an unsigned integer 0-based index of another entry in the main "
"``projects`` array that corresponds to the parent project that added this "
"project as a sub-project."
msgstr ""
"当项目不是顶级项目时出现的可选成员。该值是主 ``projects`` 数组中另一个条目的基于 0 "
"的无符号整数索引，对应于将此项目添加为子项目的父项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:601
msgid ""
"Optional member that is present when the project has sub-projects. The "
"value is a JSON array of entries corresponding to the sub-projects. Each "
"entry is an unsigned integer 0-based index of another entry in the main "
"``projects`` array."
msgstr ""
"当项目有子项目时出现的可选成员。该值是与子项目对应的条目的 JSON 数组。每个条目都是主 ``projects`` "
"数组中另一个条目的无符号整数，从 0 开始的索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:610
msgid "``directoryIndexes``"
msgstr "``目录索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:607
msgid ""
"A JSON array of entries corresponding to build system directories that are"
" part of the project.  The first entry corresponds to the top-level "
"directory of the project.  Each entry is an unsigned integer 0-based index"
" into the main ``directories`` array."
msgstr ""
"条目的 JSON 数组，对应于作为项目一部分的构建系统目录。第一个条目对应于项目的顶级目录。每个条目都是一个无符号整数，从 0 "
"开始索引到主“目录”数组中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:613
msgid ""
"Optional member that is present when the project itself has targets, "
"excluding those belonging to sub-projects.  The value is a JSON array of "
"entries corresponding to the targets.  Each entry is an unsigned integer "
"0-based index into the main ``targets`` array."
msgstr ""
"当项目本身有目标时存在的可选成员，不包括属于子项目的目标。该值是与目标对应的条目的 JSON 数组。每个条目都是一个无符号整数，从 0 "
"开始索引到主“目标”数组中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:643
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:472
msgid "``targets``"
msgstr "``目标``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:619
msgid ""
"A JSON array of entries corresponding to the build system targets. Such "
"targets are created by calls to :command:`add_executable`, "
":command:`add_library`, and :command:`add_custom_target`, excluding "
"imported targets and interface libraries (which do not generate any build "
"rules).  Each entry is a JSON object containing members:"
msgstr ""
"与构建系统目标对应的条目的 JSON 数组。此类目标是通过调用 "
":command:`add_executable`、 :command:`add_library` 和 "
":command:`add_custom_target` 创建的，不包括导入的目标和接口库（不生成任何构建规则）。每个条目都是一个包含成员的 "
"JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:626
msgid "A string specifying the target name."
msgstr "指定目标名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:630
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:823
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:874
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:911
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1065
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1601
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1732
msgid "``id``"
msgstr "``id``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:629
msgid ""
"A string uniquely identifying the target.  This matches the ``id`` field "
"in the file referenced by ``jsonFile``."
msgstr "唯一标识目标的字符串。这与 ``jsonFile`` 引用的文件中的 ``id`` 字段相匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:634
msgid "``directoryIndex``"
msgstr "``目录索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:633
msgid ""
"An unsigned integer 0-based index into the main ``directories`` array "
"indicating the build system directory in which the target is defined."
msgstr "主“目录”数组中基于 0 的无符号整数索引，指示定义目标的构建系统目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:637
msgid ""
"An unsigned integer 0-based index into the main ``projects`` array "
"indicating the build system project in which the target is defined."
msgstr "主“projects”数组中基于 0 的无符号整数索引，指示定义目标的构建系统项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:641
msgid ""
"A JSON string specifying a path relative to the codemodel file to another "
"JSON file containing a `\"codemodel\" version 2 \"target\" object`_."
msgstr "一个 JSON 字符串，指定相对于代码模型文件到另一个包含“代码模型”版本 2“目标”对象的 JSON 文件的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:646
msgid "\"codemodel\" version 2 \"directory\" object"
msgstr "“代码模型”版本 2“目录”对象"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:648
msgid ""
"A codemodel \"directory\" object is referenced by a `\"codemodel\" version"
" 2`_ object's ``directories`` array.  Each \"directory\" object is a JSON "
"object with members:"
msgstr "代码模型“目录”对象由“代码模型”第 2 版对象的“目录”数组引用。每个“目录”对象都是一个具有成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:893
msgid "``installers``"
msgstr "``安装程序``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:670
msgid ""
"A JSON array of entries corresponding to :command:`install` rules. Each "
"entry is a JSON object containing members:"
msgstr "对应于 :command:`install` 规则的条目的 JSON 数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:675
msgid "``component``"
msgstr "``组件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:674
msgid ""
"A string specifying the component selected by the corresponding "
":command:`install` command invocation."
msgstr "一个字符串，指定由相应的 :command:`install` 命令调用选择的组件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:680
msgid "``destination``"
msgstr "``目的地``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:678
msgid ""
"Optional member that is present for specific ``type`` values below. The "
"value is a string specifying the install destination path. The path may be"
" absolute or relative to the install prefix."
msgstr ""
"对于下面的特定 ``type`` 值存在的可选成员。该值是一个字符串，指定安装目标路径。该路径可以是绝对路径，也可以是相对于安装前缀的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:683
msgid ""
"Optional member that is present for specific ``type`` values below. The "
"value is a JSON array of entries corresponding to the paths (files or "
"directories) to be installed.  Each entry is one of:"
msgstr ""
"对于下面的特定 ``type`` 值存在的可选成员。该值是与要安装的路径（文件或目录）对应的条目的 JSON 数组。每个条目都是以下之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:687
msgid ""
"A string specifying the path from which a file or directory is to be "
"installed.  The portion of the path not preceded by a ``/`` also specifies"
" the path (name) to which the file or directory is to be installed under "
"the destination."
msgstr "一个字符串，指定要从中安装文件或目录的路径。前面没有“/”的路径部分还指定了目标下文件或目录要安装到的路径（名称）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:692
msgid "A JSON object with members:"
msgstr "具有成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:696
msgid "``from``"
msgstr "``来自``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:695
msgid ""
"A string specifying the path from which a file or directory is to be "
"installed."
msgstr "一个字符串，指定要从中安装文件或目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:700
msgid "``to``"
msgstr "``到``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:699
msgid ""
"A string specifying the path to which the file or directory is to be "
"installed under the destination."
msgstr "一个字符串，指定目标下要安装的文件或目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:702
msgid ""
"In both cases the paths are represented with forward slashes.  If the "
"\"from\" path is inside the top-level directory documented by the "
"corresponding ``type`` value, then the path is specified relative to that "
"directory.  Otherwise the path is absolute."
msgstr ""
"在这两种情况下，路径都用正斜杠表示。如果“from”路径位于相应“type”值记录的顶级目录内，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:768
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:917
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1083
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1401
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:267
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1025
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1111
msgid "``type``"
msgstr "``类型``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:708
msgid ""
"A string specifying the type of installation rule.  The value is one of "
"the following, with some variants providing additional members:"
msgstr "指定安装规则类型的字符串。该值是以下之一，一些变体提供额外的成员："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:716
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1274
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:382
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1535
msgid "``file``"
msgstr "``文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:712
msgid ""
"An :command:`install(FILES)` or :command:`install(PROGRAMS)` call. The "
"``destination`` and ``paths`` members are populated, with paths under the "
"top-level *source* directory expressed relative to it. The ``isOptional`` "
"member may exist. This type has no additional members."
msgstr ""
":command:`install(FILES)` 或 :command:`install(PROGRAMS)` 调用。 "
"``destination`` 和 ``paths`` 成员被填充，顶级 *source* 目录下的路径相对于它表示。 ``isOptional``"
" 成员可能存在。此类型没有其他成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:723
msgid "``directory``"
msgstr "``目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:719
msgid ""
"An :command:`install(DIRECTORY)` call. The ``destination`` and ``paths`` "
"members are populated, with paths under the top-level *source* directory "
"expressed relative to it. The ``isOptional`` member may exist. This type "
"has no additional members."
msgstr ""
":command:`install(DIRECTORY)` 调用。 ``destination`` 和 ``paths`` 成员被填充，顶级 "
"*source* 目录下的路径相对于它表示。 ``isOptional`` 成员可能存在。此类型没有其他成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:731
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1613
msgid "``target``"
msgstr "``目标``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:726
msgid ""
"An :command:`install(TARGETS)` call. The ``destination`` and ``paths`` "
"members are populated, with paths under the top-level *build* directory "
"expressed relative to it. The ``isOptional`` member may exist. This type "
"has additional members ``targetId``, ``targetIndex``, "
"``targetIsImportLibrary``, and ``targetInstallNamelink``."
msgstr ""
":command:`install(TARGETS)` 调用。 ``destination`` 和 ``paths`` 成员被填充，顶级 "
"*build* 目录下的路径相对于它表示。 ``isOptional`` "
"成员可能存在。这种类型有额外的成员``targetId``、``targetIndex``、``targetIsImportLibrary`` "
"和``targetInstallNamelink``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:740
msgid "``export``"
msgstr "``出口``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:734
msgid ""
"An :command:`install(EXPORT)` call. The ``destination`` and ``paths`` "
"members are populated, with paths under the top-level *build* directory "
"expressed relative to it. The ``paths`` entries refer to files generated "
"automatically by CMake for installation, and their actual values are "
"considered private implementation details. This type has additional "
"members ``exportName`` and ``exportTargets``."
msgstr ""
":command:`install(EXPORT)` 调用。 ``destination`` 和 ``paths`` 成员被填充，顶级 "
"*build* 目录下的路径相对于它表示。 ``paths`` 条目指的是 CMake "
"为安装自动生成的文件，它们的实际值被认为是私有实现细节。这种类型有额外的成员 ``exportName`` 和 ``exportTargets``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:744
msgid "``script``"
msgstr "``脚本``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:743
msgid ""
"An :command:`install(SCRIPT)` call. This type has additional member "
"``scriptFile``."
msgstr ":command:`install(SCRIPT)` 调用。这种类型有额外的成员``scriptFile``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:748
msgid "``code``"
msgstr "``代码``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:747
msgid ""
"An :command:`install(CODE)` call. This type has no additional members."
msgstr ":command:`install(CODE)` 调用。此类型没有其他成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:753
msgid "``importedRuntimeArtifacts``"
msgstr "``importedRuntimeArtifacts``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:751
msgid ""
"An :command:`install(IMPORTED_RUNTIME_ARTIFACTS)` call. The "
"``destination`` member is populated. The ``isOptional`` member may exist. "
"This type has no additional members."
msgstr ""
":command:`install(IMPORTED_RUNTIME_ARTIFACTS)` 调用。 ``destination`` 成员被填充。 "
"``isOptional`` 成员可能存在。此类型没有其他成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:759
msgid "``runtimeDependencySet``"
msgstr "``runtimeDependencySet``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:756
msgid ""
"An :command:`install(RUNTIME_DEPENDENCY_SET)` call or an "
":command:`install(TARGETS)` call with ``RUNTIME_DEPENDENCIES``. The "
"``destination`` member is populated. This type has additional members "
"``runtimeDependencySetName`` and ``runtimeDependencySetType``."
msgstr ""
":command:`install(RUNTIME_DEPENDENCY_SET)` 调用或带有 ``RUNTIME_DEPENDENCIES`` "
"的 :command:`install(TARGETS)` 调用。 ``destination`` "
"成员被填充。这种类型有额外的成员``runtimeDependencySetName`` "
"和``runtimeDependencySetType``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:768
msgid "``fileSet``"
msgstr "``文件集``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:762
msgid ""
"An :command:`install(TARGETS)` call with ``FILE_SET``. The ``destination``"
" and ``paths`` members are populated. The ``isOptional`` member may exist."
" This type has additional members ``fileSetName``, ``fileSetType``, "
"``fileSetDirectories``, and ``fileSetTarget``."
msgstr ""
"使用 FILE_SET 的 :command:`install(TARGETS)` 调用。 ``destination`` 和 ``paths`` "
"成员被填充。 ``isOptional`` "
"成员可能存在。这种类型有额外的成员``fileSetName``、``fileSetType``、``fileSetDirectories`` "
"和``fileSetTarget``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:768
msgid "This type was added in codemodel version 2.4."
msgstr "此类型是在代码模型版本 2.4 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:772
msgid "``isExcludeFromAll``"
msgstr "``isExcludeFromAll``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:771
msgid ""
"Optional member that is present with boolean value ``true`` when "
":command:`install` is called with the ``EXCLUDE_FROM_ALL`` option."
msgstr ""
"当使用 ``EXCLUDE_FROM_ALL`` 选项调用 :command:`install` 时，可选成员以布尔值 ``true`` 出现。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:777
msgid "``isForAllComponents``"
msgstr "``isForAllComponents``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:775
msgid ""
"Optional member that is present with boolean value ``true`` when "
":command:`install(SCRIPT|CODE)` is called with the ``ALL_COMPONENTS`` "
"option."
msgstr "当使用 ALL_COMPONENTS 选项调用 install(SCRIPT|CODE) 时，布尔值 true 的可选成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:782
msgid "``isOptional``"
msgstr "``是可选的``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:780
msgid ""
"Optional member that is present with boolean value ``true`` when "
":command:`install` is called with the ``OPTIONAL`` option. This is allowed"
" when ``type`` is ``file``, ``directory``, or ``target``."
msgstr ""
"当使用 ``OPTIONAL`` 选项调用 :command:`install` 时，可选成员以布尔值 ``true`` "
"出现。当“类型”是“文件”、“目录”或“目标”时，这是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:788
msgid "``targetId``"
msgstr "``targetId``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:785
msgid ""
"Optional member that is present when ``type`` is ``target``. The value is "
"a string uniquely identifying the target to be installed. This matches the"
" ``id`` member of the target in the main \"codemodel\" object's "
"``targets`` array."
msgstr ""
"当``type`` 为``target`` "
"时存在的可选成员。该值是唯一标识要安装的目标的字符串。这与主“codemodel”对象的“targets”数组中目标的“id”成员匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:793
msgid "``targetIndex``"
msgstr "``目标索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:791
msgid ""
"Optional member that is present when ``type`` is ``target``. The value is "
"an unsigned integer 0-based index into the main \"codemodel\" object's "
"``targets`` array for the target to be installed."
msgstr ""
"当``type`` 为``target`` 时存在的可选成员。该值是一个无符号整数，从 0 "
"开始索引到要安装的目标的主要“codemodel”对象的“targets”数组中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:798
msgid "``targetIsImportLibrary``"
msgstr "``targetIsImportLibrary``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:796
msgid ""
"Optional member that is present when ``type`` is ``target`` and the "
"installer is for a Windows DLL import library file or for an AIX linker "
"import file.  If present, it has boolean value ``true``."
msgstr ""
"当``type`` 为``target`` 且安装程序用于Windows DLL 导入库文件或AIX "
"链接器导入文件时出现的可选成员。如果存在，它具有布尔值“true”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:809
msgid "``targetInstallNamelink``"
msgstr "``targetInstallNamelink``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:801
msgid ""
"Optional member that is present when ``type`` is ``target`` and the "
"installer corresponds to a target that may use symbolic links to implement"
" the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties. The "
"value is a string indicating how the installer is supposed to handle the "
"symlinks: ``skip`` means the installer should skip the symlinks and "
"install only the real file, and ``only`` means the installer should "
"install only the symlinks and not the real file. In all cases the "
"``paths`` member lists what it actually installs."
msgstr ""
"当 ``type`` 为 ``target`` 并且安装程序对应于可以使用符号链接来实现 :prop_tgt:`VERSION` 和 "
":prop_tgt:`SOVERSION` 目标属性时出现的可选成员。该值是一个字符串，指示安装程序应如何处理符号链接：``skip`` "
"表示安装程序应跳过符号链接并仅安装真实文件，而``only`` 表示安装程序应仅安装符号链接和不是真正的文件。在所有情况下，``paths`` "
"成员都会列出它实际安装的内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:813
msgid "``exportName``"
msgstr "``导出名称``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:812
msgid ""
"Optional member that is present when ``type`` is ``export``. The value is "
"a string specifying the name of the export."
msgstr "当``type`` 为``export`` 时存在的可选成员。该值是一个字符串，指定导出的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:827
msgid "``exportTargets``"
msgstr "``导出目标``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:816
msgid ""
"Optional member that is present when ``type`` is ``export``. The value is "
"a JSON array of entries corresponding to the targets included in the "
"export.  Each entry is a JSON object with members:"
msgstr ""
"当``type`` 为``export`` 时存在的可选成员。该值是与导出中包含的目标对应的条目的 JSON 数组。每个条目都是一个包含成员的 "
"JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:821
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:872
msgid ""
"A string uniquely identifying the target.  This matches the ``id`` member "
"of the target in the main \"codemodel\" object's ``targets`` array."
msgstr "唯一标识目标的字符串。这与主“codemodel”对象的“targets”数组中目标的“id”成员匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:827
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:878
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:744
msgid "``index``"
msgstr "``索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:826
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:877
msgid ""
"An unsigned integer 0-based index into the main \"codemodel\" object's "
"``targets`` array for the target."
msgstr "目标的主“codemodel”对象的“targets”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:833
msgid "``runtimeDependencySetName``"
msgstr "``runtimeDependencySetName``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:830
msgid ""
"Optional member that is present when ``type`` is ``runtimeDependencySet`` "
"and the installer was created by an "
":command:`install(RUNTIME_DEPENDENCY_SET)` call. The value is a string "
"specifying the name of the runtime dependency set that was installed."
msgstr ""
"当 ``type`` 为 ``runtimeDependencySet`` 且安装程序由 "
":command:`install(RUNTIME_DEPENDENCY_SET)` "
"调用创建时出现的可选成员。该值是一个字符串，指定已安装的运行时依赖集的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:845
msgid "``runtimeDependencySetType``"
msgstr "``runtimeDependencySetType``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:836
msgid ""
"Optional member that is present when ``type`` is ``runtimeDependencySet``."
" The value is a string with one of the following values:"
msgstr "当``type`` 为``runtimeDependencySet`` 时存在的可选成员。该值是具有以下值之一的字符串："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:841
msgid "``library``"
msgstr "``图书馆``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:840
msgid ""
"Indicates that this installer installs dependencies that are not macOS "
"frameworks."
msgstr "表示此安装程序安装的依赖项不是 macOS 框架。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:845
msgid "``framework``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:844
msgid ""
"Indicates that this installer installs dependencies that are macOS "
"frameworks."
msgstr "表示此安装程序安装的依赖项是 macOS 框架。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:851
msgid "``fileSetName``"
msgstr "``文件集名称``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:848
msgid ""
"Optional member that is present when ``type`` is ``fileSet``. The value is"
" a string with the name of the file set."
msgstr "当``type`` 为``fileSet`` 时存在的可选成员。该值是一个带有文件集名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:851
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:857
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:865
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:880
msgid "This field was added in codemodel version 2.4."
msgstr "此字段是在代码模型版本 2.4 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:857
msgid "``fileSetType``"
msgstr "``文件集类型``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:854
msgid ""
"Optional member that is present when ``type`` is ``fileSet``. The value is"
" a string with the type of the file set."
msgstr "当``type`` 为``fileSet`` 时存在的可选成员。该值是一个带有文件集类型的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:865
msgid "``fileSetDirectories``"
msgstr "``文件集目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:860
msgid ""
"Optional member that is present when ``type`` is ``fileSet``. The value is"
" a list of strings with the file set's base directories (determined by "
"genex-evaluation of :prop_tgt:`HEADER_DIRS` or "
":prop_tgt:`HEADER_DIRS_<NAME>`)."
msgstr ""
"当``type`` 为``fileSet`` 时存在的可选成员。该值是包含文件集基本目录的字符串列表（由 "
":prop_tgt:`HEADER_DIRS` 或 :prop_tgt:`HEADER_DIRS_<NAME>` 的 genex 评估确定）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:880
msgid "``fileSetTarget``"
msgstr "``文件设置目标``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:868
msgid ""
"Optional member that is present when ``type`` is ``fileSet``. The value is"
" a JSON object with members:"
msgstr "当``type`` 为``fileSet`` 时存在的可选成员。该值是一个具有成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:887
msgid "``scriptFile``"
msgstr "``脚本文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:883
msgid ""
"Optional member that is present when ``type`` is ``script``. The value is "
"a string specifying the path to the script file on disk, represented with "
"forward slashes.  If the file is inside the top-level source directory "
"then the path is specified relative to that directory. Otherwise the path "
"is absolute."
msgstr ""
"当 ``type`` 为 ``script`` "
"时出现的可选成员。该值是一个字符串，指定磁盘上脚本文件的路径，用正斜杠表示。如果文件位于顶级源目录中，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:890
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`install` or other command invocation that added this installer "
"is available.  The value is an unsigned integer 0-based index into the "
"``backtraceGraph`` member's ``nodes`` array."
msgstr ""
"当 CMake 语言回溯到 :command:`install` "
"或添加此安装程序的其他命令调用可用时出现的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:897
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1259
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1541
msgid "``backtraceGraph``"
msgstr "``回溯图``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:896
msgid ""
"A `\"codemodel\" version 2 \"backtrace graph\"`_ whose nodes are "
"referenced from ``backtrace`` members elsewhere in this \"directory\" "
"object."
msgstr "`“codemodel”版本 2“回溯图”`_ 其节点从该“目录”对象中其他地方的 ``backtrace`` 成员引用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:900
msgid "\"codemodel\" version 2 \"target\" object"
msgstr "“代码模型”版本 2“目标”对象"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:902
msgid ""
"A codemodel \"target\" object is referenced by a `\"codemodel\" version "
"2`_ object's ``targets`` array.  Each \"target\" object is a JSON object "
"with members:"
msgstr "代码模型“目标”对象由“代码模型”第 2 版对象的“目标”数组引用。每个“目标”对象都是一个具有成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:907
msgid "A string specifying the logical name of the target."
msgstr "一个字符串，指定目标的逻辑名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:910
msgid ""
"A string uniquely identifying the target.  The format is unspecified and "
"should not be interpreted by clients."
msgstr "唯一标识目标的字符串。格式未指定，客户不应解释。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:914
msgid ""
"A string specifying the type of the target.  The value is one of "
"``EXECUTABLE``, ``STATIC_LIBRARY``, ``SHARED_LIBRARY``, "
"``MODULE_LIBRARY``, ``OBJECT_LIBRARY``, ``INTERFACE_LIBRARY``, or "
"``UTILITY``."
msgstr ""
"指定目标类型的字符串。该值为 "
"``EXECUTABLE``、``STATIC_LIBRARY``、``SHARED_LIBRARY``、``MODULE_LIBRARY``、``OBJECT_LIBRARY``、``INTERFACE_LIBRARY``"
" 或 ``UTILITY`` 之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:920
msgid ""
"Optional member that is present when a CMake language backtrace to the "
"command in the source code that created the target is available. The value"
" is an unsigned integer 0-based index into the ``backtraceGraph`` member's"
" ``nodes`` array."
msgstr ""
"当对创建目标的源代码中的命令的 CMake 语言回溯可用时出现的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 "
"的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:930
msgid "``folder``"
msgstr "``文件夹``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:926
msgid ""
"Optional member that is present when the :prop_tgt:`FOLDER` target "
"property is set.  The value is a JSON object with one member:"
msgstr "设置 :prop_tgt:`FOLDER` 目标属性时出现的可选成员。该值是一个具有一个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:930
msgid "A string specifying the name of the target folder."
msgstr "指定目标文件夹名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:936
msgid ""
"A string specifying the path to the target's source directory, represented"
" with forward slashes.  If the directory is inside the top-level source "
"directory then the path is specified relative to that directory (with "
"``.`` for the top-level source directory itself). Otherwise the path is "
"absolute."
msgstr ""
"指定目标源目录路径的字符串，用正斜杠表示。如果该目录位于顶级源目录中，则路径是相对于该目录指定的（顶级源目录本身带有 "
"``.``）。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:943
msgid ""
"A string specifying the path to the target's build directory, represented "
"with forward slashes.  If the directory is inside the top-level build "
"directory then the path is specified relative to that directory (with "
"``.`` for the top-level build directory itself). Otherwise the path is "
"absolute."
msgstr ""
"指定目标构建目录路径的字符串，用正斜杠表示。如果该目录位于顶级构建目录中，则路径是相对于该目录指定的（顶级构建目录本身使用 "
"``.``）。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:952
msgid "``nameOnDisk``"
msgstr "``nameOnDisk``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:950
msgid ""
"Optional member that is present for executable and library targets that "
"are linked or archived into a single primary artifact. The value is a "
"string specifying the file name of that artifact on disk."
msgstr "对于链接或归档到单个主要工件中的可执行文件和库目标，存在的可选成员。该值是一个字符串，指定磁盘上该工件的文件名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:964
msgid "``artifacts``"
msgstr "``人工制品``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:955
msgid ""
"Optional member that is present for executable and library targets that "
"produce artifacts on disk meant for consumption by dependents. The value "
"is a JSON array of entries corresponding to the artifacts. Each entry is a"
" JSON object containing one member:"
msgstr ""
"存在于可执行文件和库目标的可选成员，这些目标在磁盘上生成供依赖者使用的工件。该值是与工件对应的条目的 JSON 数组。每个条目都是一个包含一个成员的"
" JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:964
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:979
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:987
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1033
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1103
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1201
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1255
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1331
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1479
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1595
msgid "``path``"
msgstr "``路径``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:961
msgid ""
"A string specifying the path to the file on disk, represented with forward"
" slashes.  If the file is inside the top-level build directory then the "
"path is specified relative to that directory. Otherwise the path is "
"absolute."
msgstr "指定磁盘上文件路径的字符串，用正斜杠表示。如果文件位于顶级构建目录中，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:969
msgid "``isGeneratorProvided``"
msgstr "``isGeneratorProvided``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:967
msgid ""
"Optional member that is present with boolean value ``true`` if the target "
"is provided by CMake's build system generator rather than by a command in "
"the source code."
msgstr "如果目标是由 CMake 的构建系统生成器而不是源代码中的命令提供的，则可选成员具有布尔值“true”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:993
msgid "``install``"
msgstr "``安装``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:972
msgid ""
"Optional member that is present when the target has an :command:`install` "
"rule.  The value is a JSON object with members:"
msgstr "当目标具有 :command:`install` 规则时出现的可选成员。该值是一个具有成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:979
msgid "``prefix``"
msgstr "``前缀``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:976
msgid ""
"A JSON object specifying the installation prefix.  It has one member:"
msgstr "指定安装前缀的 JSON 对象。它有一个成员："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:979
msgid "A string specifying the value of :variable:`CMAKE_INSTALL_PREFIX`."
msgstr "指定 CMAKE_INSTALL_PREFIX 值的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:993
msgid "``destinations``"
msgstr "``目的地``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:982
msgid ""
"A JSON array of entries specifying an install destination path. Each entry"
" is a JSON object with members:"
msgstr "指定安装目标路径的 JSON 条目数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:986
msgid ""
"A string specifying the install destination path.  The path may be "
"absolute or relative to the install prefix."
msgstr "指定安装目标路径的字符串。该路径可以是绝对路径，也可以是相对于安装前缀的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:990
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`install` command invocation that specified this destination is "
"available.  The value is an unsigned integer 0-based index into the "
"``backtraceGraph`` member's ``nodes`` array."
msgstr ""
"当 CMake 语言回溯到指定此目标的 :command:`install` "
"命令调用可用时出现的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1033
msgid "``link``"
msgstr "``链接``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:996
msgid ""
"Optional member that is present for executables and shared library targets"
" that link into a runtime binary.  The value is a JSON object with members"
" describing the link step:"
msgstr "存在于链接到运行时二进制文件的可执行文件和共享库目标的可选成员。该值是一个 JSON 对象，其成员描述链接步骤："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1002
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1162
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1587
msgid "``language``"
msgstr "``语言``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1001
msgid ""
"A string specifying the language (e.g. ``C``, ``CXX``, ``Fortran``) of the"
" toolchain is used to invoke the linker."
msgstr "指定工具链语言（例如“C”、“CXX”、“Fortran”）的字符串用于调用链接器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1019
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1051
msgid "``commandFragments``"
msgstr "``commandFragments``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1005
msgid ""
"Optional member that is present when fragments of the link command line "
"invocation are available.  The value is a JSON array of entries specifying"
" ordered fragments.  Each entry is a JSON object with members:"
msgstr "当链接命令行调用的片段可用时出现的可选成员。该值是指定有序片段的 JSON 条目数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1011
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1046
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1192
msgid "``fragment``"
msgstr "``片段``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1010
msgid ""
"A string specifying a fragment of the link command line invocation. The "
"value is encoded in the build system's native shell format."
msgstr "指定链接命令行调用片段的字符串。该值以构建系统的本机 shell 格式编码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1019
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1051
msgid "``role``"
msgstr "``作用``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1014
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1049
msgid "A string specifying the role of the fragment's content:"
msgstr "指定片段内容角色的字符串："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1016
msgid "``flags``: link flags."
msgstr "``flags``：链接标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1017
msgid "``libraries``: link library file paths or flags."
msgstr "``libraries``：链接库文件路径或标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1018
msgid "``libraryPath``: library search path flags."
msgstr "``libraryPath``：库搜索路径标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1019
msgid "``frameworkPath``: macOS framework search path flags."
msgstr "``frameworkPath``：macOS 框架搜索路径标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1024
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1056
msgid "``lto``"
msgstr "``lto``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1022
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1054
msgid ""
"Optional member that is present with boolean value ``true`` when link-time"
" optimization (a.k.a. interprocedural optimization or link-time code "
"generation) is enabled."
msgstr "启用链接时优化（也称为过程间优化或链接时代码生成）时，以布尔值“true”存在的可选成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1033
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1255
msgid "``sysroot``"
msgstr "``系统根``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1027
msgid ""
"Optional member that is present when the :variable:`CMAKE_SYSROOT_LINK` or"
" :variable:`CMAKE_SYSROOT` variable is defined.  The value is a JSON "
"object with one member:"
msgstr ""
"定义 CMAKE_SYSROOT_LINK 或 CMAKE_SYSROOT 变量时出现的可选成员。该值是一个具有一个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1032
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1254
msgid ""
"A string specifying the absolute path to the sysroot, represented with "
"forward slashes."
msgstr "一个字符串，指定 sysroot 的绝对路径，用正斜杠表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1056
msgid "``archive``"
msgstr "``存档``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1036
msgid ""
"Optional member that is present for static library targets.  The value is "
"a JSON object with members describing the archive step:"
msgstr "静态库目标的可选成员。该值是一个 JSON 对象，其成员描述了归档步骤："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1040
msgid ""
"Optional member that is present when fragments of the archiver command "
"line invocation are available.  The value is a JSON array of entries "
"specifying the fragments.  Each entry is a JSON object with members:"
msgstr "当归档程序命令行调用的片段可用时出现的可选成员。该值是指定片段的 JSON 条目数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1045
msgid ""
"A string specifying a fragment of the archiver command line invocation. "
"The value is encoded in the build system's native shell format."
msgstr "指定归档程序命令行调用片段的字符串。该值以构建系统的本机 shell 格式编码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1051
msgid "``flags``: archiver flags."
msgstr "``flags``：归档器标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1072
msgid "``dependencies``"
msgstr "``依赖关系``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1059
msgid ""
"Optional member that is present when the target depends on other targets. "
"The value is a JSON array of entries corresponding to the dependencies. "
"Each entry is a JSON object with members:"
msgstr "当目标依赖于其他目标时出现的可选成员。该值是与依赖项对应的条目的 JSON 数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1064
msgid ""
"A string uniquely identifying the target on which this target depends. "
"This matches the main ``id`` member of the other target."
msgstr "唯一标识此目标所依赖的目标的字符串。这与另一个目标的主要 ``id`` 成员相匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1068
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`add_dependencies`, :command:`target_link_libraries`, or other "
"command invocation that created this dependency is available.  The value "
"is an unsigned integer 0-based index into the ``backtraceGraph`` member's "
"``nodes`` array."
msgstr ""
"当 CMake 语言回溯到 :command:`add_dependencies`、 :command:`target_link_libraries`"
" 或创建此依赖项的其他命令调用可用时存在的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1093
msgid "``fileSets``"
msgstr "``文件集``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1075
msgid ""
"A JSON array of entries corresponding to the target's file sets. Each "
"entry is a JSON object with members:"
msgstr "对应于目标文件集的条目的 JSON 数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1079
msgid "A string specifying the name of the file set."
msgstr "指定文件集名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1082
msgid ""
"A string specifying the type of the file set.  See "
":command:`target_sources` supported file set types."
msgstr "指定文件集类型的字符串。请参阅 :command:`target_sources` 支持的文件集类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1087
msgid "``visibility``"
msgstr "``可见性``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1086
msgid ""
"A string specifying the visibility of the file set; one of ``PUBLIC``, "
"``PRIVATE``, or ``INTERFACE``."
msgstr "指定文件集可见性的字符串； ``PUBLIC``、``PRIVATE`` 或 ``INTERFACE`` 之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1091
msgid "``baseDirectories``"
msgstr "``基础目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1090
msgid ""
"A JSON array of strings specifying the base directories containing sources"
" in the file set."
msgstr "一个 JSON 字符串数组，指定包含文件集中源的基本目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1093
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1125
msgid "This field was added in codemodel version 2.5."
msgstr "该字段是在代码模型版本 2.5 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1133
msgid "``sources``"
msgstr "``来源``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1096
msgid ""
"A JSON array of entries corresponding to the target's source files. Each "
"entry is a JSON object with members:"
msgstr "对应于目标源文件的条目的 JSON 数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1100
msgid ""
"A string specifying the path to the source file on disk, represented with "
"forward slashes.  If the file is inside the top-level source directory "
"then the path is specified relative to that directory. Otherwise the path "
"is absolute."
msgstr "指定磁盘上源文件路径的字符串，用正斜杠表示。如果文件位于顶级源目录中，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1108
msgid "``compileGroupIndex``"
msgstr "``compileGroupIndex``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1106
msgid ""
"Optional member that is present when the source is compiled. The value is "
"an unsigned integer 0-based index into the ``compileGroups`` array."
msgstr "编译源时出现的可选成员。该值是“compileGroups”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1114
msgid "``sourceGroupIndex``"
msgstr "``sourceGroupIndex``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1111
msgid ""
"Optional member that is present when the source is part of a source group "
"either via the :command:`source_group` command or by default. The value is"
" an unsigned integer 0-based index into the ``sourceGroups`` array."
msgstr ""
"通过 :command:`source_group` 命令或默认情况下，当源是源组的一部分时存在的可选成员。该值是 ``sourceGroups``"
" 数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1118
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1485
msgid "``isGenerated``"
msgstr "``isGenerated``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1117
msgid ""
"Optional member that is present with boolean value ``true`` if the source "
"is :prop_sf:`GENERATED`."
msgstr "如果源是:prop_sf:`GENERATED`，则可选成员以布尔值``true``存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1125
msgid "``fileSetIndex``"
msgstr "``文件集索引``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1121
msgid ""
"Optional member that is present when the source is part of a file set. The"
" value is an unsigned integer 0-based index into the ``fileSets`` array."
msgstr "当源是文件集的一部分时出现的可选成员。该值是 ``fileSets`` 数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1128
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`target_sources`, :command:`add_executable`, "
":command:`add_library`, :command:`add_custom_target`, or other command "
"invocation that added this source to the target is available.  The value "
"is an unsigned integer 0-based index into the ``backtraceGraph`` member's "
"``nodes`` array."
msgstr ""
"当 CMake 语言回溯到 "
":command:`target_sources`、 :command:`add_executable`、 :command:`add_library`、 :command:`add_custom_target`"
" 或将此源添加到目标可用。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1147
msgid "``sourceGroups``"
msgstr "``源组`​​`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1136
msgid ""
"Optional member that is present when sources are grouped together by the "
":command:`source_group` command or by default.  The value is a JSON array "
"of entries corresponding to the groups.  Each entry is a JSON object with "
"members:"
msgstr ""
"当源通过 :command:`source_group` 命令或默认情况下分组在一起时出现的可选成员。该值是与组对应的条目的 JSON "
"数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1142
msgid "A string specifying the name of the source group."
msgstr "指定源组名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1147
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1158
msgid "``sourceIndexes``"
msgstr "``sourceIndexes``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1145
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1156
msgid ""
"A JSON array listing the sources belonging to the group. Each entry is an "
"unsigned integer 0-based index into the main ``sources`` array for the "
"target."
msgstr "列出属于该组的源的 JSON 数组。每个条目都是一个无符号整数，从 0 开始索引到目标的主要“sources”数组中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1255
msgid "``compileGroups``"
msgstr "``编译组``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1150
msgid ""
"Optional member that is present when the target has sources that compile. "
"The value is a JSON array of entries corresponding to groups of sources "
"that all compile with the same settings.  Each entry is a JSON object with"
" members:"
msgstr ""
"当目标具有编译源时出现的可选成员。该值是一个 JSON 条目数组，对应于所有使用相同设置编译的源组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1161
msgid ""
"A string specifying the language (e.g. ``C``, ``CXX``, ``Fortran``) of the"
" toolchain is used to compile the source file."
msgstr "指定工具链语言（例如“C”、“CXX”、“Fortran”）的字符串用于编译源文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1182
msgid "``languageStandard``"
msgstr "``语言标准``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1165
msgid ""
"Optional member that is present when the language standard is set "
"explicitly (e.g. via :prop_tgt:`CXX_STANDARD`) or implicitly by compile "
"features.  Each entry is a JSON object with two members:"
msgstr ""
"显式设置语言标准（例如通过 CXX_STANDARD）或通过编译功能隐式设置时出现的可选成员。每个条目都是一个具有两个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1177
msgid "``backtraces``"
msgstr "``回溯``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1170
msgid ""
"Optional member that is present when a CMake language backtrace to the "
"``<LANG>_STANDARD`` setting is available.  If the language standard was "
"set implicitly by compile features those are used as the backtrace(s).  "
"It's possible for multiple compile features to require the same language "
"standard so there could be multiple backtraces. The value is a JSON array "
"with each entry being an unsigned integer 0-based index into the "
"``backtraceGraph`` member's ``nodes`` array."
msgstr ""
"当 CMake 语言回溯到 ``<LANG>_STANDARD`` "
"设置可用时出现的可选成员。如果语言标准是由编译特性隐式设置的，则这些标准将用作回溯。多个编译功能可能需要相同的语言标准，因此可能会有多个回溯。该值是一个"
" JSON 数组，每个条目都是一个无符号整数，从 0 开始索引到 `backtraceGraph`` 成员的 ``nodes`` 数组。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1180
msgid "``standard``"
msgstr "``标准``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1180
msgid "String representing the language standard."
msgstr "表示语言标准的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1182
msgid "This field was added in codemodel version 2.2."
msgstr "此字段是在代码模型版本 2.2 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1192
msgid "``compileCommandFragments``"
msgstr "``compileCommandFragments``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1185
msgid ""
"Optional member that is present when fragments of the compiler command "
"line invocation are available.  The value is a JSON array of entries "
"specifying ordered fragments.  Each entry is a JSON object with one "
"member:"
msgstr ""
"当编译器命令行调用的片段可用时出现的可选成员。该值是指定有序片段的 JSON 条目数组。每个条目都是一个具有一个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1191
msgid ""
"A string specifying a fragment of the compile command line invocation. The"
" value is encoded in the build system's native shell format."
msgstr "指定编译命令行调用片段的字符串。该值以构建系统的本机 shell 格式编码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1212
msgid "``includes``"
msgstr "``包括``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1195
msgid ""
"Optional member that is present when there are include directories. The "
"value is a JSON array with an entry for each directory.  Each entry is a "
"JSON object with members:"
msgstr "包含目录时存在的可选成员。该值是一个 JSON 数组，每个目录都有一个条目。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1200
msgid ""
"A string specifying the path to the include directory, represented with "
"forward slashes."
msgstr "指定包含目录路径的字符串，用正斜杠表示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1205
msgid "``isSystem``"
msgstr "``isSystem``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1204
msgid ""
"Optional member that is present with boolean value ``true`` if the include"
" directory is marked as a system include directory."
msgstr "如果包含目录被标记为系统包含目录，则可选成员以布尔值“true”存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1208
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`target_include_directories` or other command invocation that "
"added this include directory is available.  The value is an unsigned "
"integer 0-based index into the ``backtraceGraph`` member's ``nodes`` "
"array."
msgstr ""
"当 CMake 语言回溯到 :command:`target_include_directories` "
"或添加此包含目录的其他命令调用可用时存在的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1230
msgid "``precompileHeaders``"
msgstr "``precompileHeaders``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1215
msgid ""
"Optional member that is present when :command:`target_precompile_headers` "
"or other command invocations set :prop_tgt:`PRECOMPILE_HEADERS` on the "
"target.  The value is a JSON array with an entry for each header.  Each "
"entry is a JSON object with members:"
msgstr ""
"当 :command:`target_precompile_headers` 或其他命令调用在目标上设置 "
":prop_tgt:`PRECOMPILE_HEADERS` 时存在的可选成员。该值是一个 JSON "
"数组，每个标头都有一个条目。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1221
msgid "``header``"
msgstr "``标题``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1221
msgid "Full path to the precompile header file."
msgstr "预编译头文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1224
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`target_precompile_headers` or other command invocation that "
"added this precompiled header is available.  The value is an unsigned "
"integer 0-based index into the ``backtraceGraph`` member's ``nodes`` "
"array."
msgstr ""
"当 CMake 语言回溯到 :command:`target_precompile_headers` "
"或添加此预编译标头的其他命令调用可用时存在的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1230
msgid "This field was added in codemodel version 2.1."
msgstr "此字段是在代码模型版本 2.1 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1246
msgid "``defines``"
msgstr "``定义``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1233
msgid ""
"Optional member that is present when there are preprocessor definitions. "
"The value is a JSON array with an entry for each definition.  Each entry "
"is a JSON object with members:"
msgstr "存在预处理器定义时存在的可选成员。该值是一个 JSON 数组，每个定义都有一个条目。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1239
msgid "``define``"
msgstr "``定义``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1238
msgid ""
"A string specifying the preprocessor definition in the format "
"``<name>[=<value>]``, e.g. ``DEF`` or ``DEF=1``."
msgstr "以“<name>[=<value>]”格式指定预处理器定义的字符串，例如``DEF`` 或 ``DEF=1``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1242
msgid ""
"Optional member that is present when a CMake language backtrace to the "
":command:`target_compile_definitions` or other command invocation that "
"added this preprocessor definition is available.  The value is an unsigned"
" integer 0-based index into the ``backtraceGraph`` member's ``nodes`` "
"array."
msgstr ""
"当 CMake 语言回溯到 :command:`target_compile_definitions` "
"或添加此预处理器定义的其他命令调用可用时存在的可选成员。该值是“backtraceGraph”成员的“nodes”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1249
msgid ""
"Optional member that is present when the :variable:`CMAKE_SYSROOT_COMPILE`"
" or :variable:`CMAKE_SYSROOT` variable is defined.  The value is a JSON "
"object with one member:"
msgstr ""
"定义 CMAKE_SYSROOT_COMPILE 或 CMAKE_SYSROOT 变量时出现的可选成员。该值是一个具有一个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1258
msgid ""
"A `\"codemodel\" version 2 \"backtrace graph\"`_ whose nodes are "
"referenced from ``backtrace`` members elsewhere in this \"target\" object."
msgstr "`“codemodel”版本 2“回溯图”`_ 其节点从该“目标”对象中其他地方的 ``backtrace`` 成员引用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1262
msgid "\"codemodel\" version 2 \"backtrace graph\""
msgstr "“代码模型”版本 2“回溯图”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1264
msgid ""
"The ``backtraceGraph`` member of a `\"codemodel\" version 2 \"directory\" "
"object`_, or `\"codemodel\" version 2 \"target\" object`_ is a JSON object"
" describing a graph of backtraces.  Its nodes are referenced from "
"``backtrace`` members elsewhere in the containing object.  The backtrace "
"graph object members are:"
msgstr ""
"`“codemodel”第 2 版“目录”对象或“codemodel”第 2 版“目标”对象的 ``backtraceGraph` "
"成员是描述回溯图的 JSON 对象。它的节点是从包含对象中其他地方的“backtrace”成员引用的。回溯图对象成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1288
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1541
msgid "``nodes``"
msgstr "``节点``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1270
msgid ""
"A JSON array listing nodes in the backtrace graph.  Each entry is a JSON "
"object with members:"
msgstr "一个 JSON 数组，列出回溯图中的节点。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1274
msgid ""
"An unsigned integer 0-based index into the backtrace ``files`` array."
msgstr "回溯“文件”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1278
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:385
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1537
msgid "``line``"
msgstr "``线``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1277
msgid ""
"An optional member present when the node represents a line within the "
"file.  The value is an unsigned integer 1-based line number."
msgstr "当节点代表文件中的一行时出现的可选成员。该值是一个无符号整数，从 1 开始的行号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1283
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1533
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1553
msgid "``command``"
msgstr "``命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1281
msgid ""
"An optional member present when the node represents a command invocation "
"within the file.  The value is an unsigned integer 0-based index into the "
"backtrace ``commands`` array."
msgstr "当节点表示文件中的命令调用时出现的可选成员。该值是回溯“commands”数组中基于 0 的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1288
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1541
msgid "``parent``"
msgstr "``父母``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1286
msgid ""
"An optional member present when the node is not the bottom of the call "
"stack.  The value is an unsigned integer 0-based index of another entry in"
" the backtrace ``nodes`` array."
msgstr "当节点不在调用堆栈底部时出现的可选成员。该值是回溯“节点”数组中另一个条目的从 0 开始的无符号整数索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1292
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1526
msgid "``commands``"
msgstr "``命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1291
msgid ""
"A JSON array listing command names referenced by backtrace nodes. Each "
"entry is a string specifying a command name."
msgstr "一个 JSON 数组，列出回溯节点引用的命令名称。每个条目都是一个指定命令名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1299
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1528
msgid "``files``"
msgstr "``文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1295
msgid ""
"A JSON array listing CMake language files referenced by backtrace nodes. "
"Each entry is a string specifying the path to a file, represented with "
"forward slashes.  If the file is inside the top-level source directory "
"then the path is specified relative to that directory. Otherwise the path "
"is absolute."
msgstr ""
"列出回溯节点引用的 CMake 语言文件的 JSON "
"数组。每个条目都是一个字符串，指定文件的路径，用正斜杠表示。如果文件位于顶级源目录中，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1304
msgid "Object Kind \"configureLog\""
msgstr "对象种类“configureLog”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1306
msgid ""
"The ``configureLog`` object kind describes the location and contents of a "
":manual:`cmake-configure-log(7)` file."
msgstr "``configureLog`` 对象类型描述了 :manual:`cmake-configure-log(7)` 文件的位置和内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1309
msgid "There is only one ``configureLog`` object major version, version 1."
msgstr "只有一个 ``configureLog`` 对象主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1312
msgid "\"configureLog\" version 1"
msgstr "“配置日志”版本 1"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1314
msgid "``configureLog`` object version 1 is a JSON object:"
msgstr "``configureLog`` 对象版本 1 是一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1325
msgid "The members specific to ``configureLog`` objects are:"
msgstr "``configureLog`` 对象特有的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1328
msgid ""
"A string specifying the path to the configure log file. Clients must read "
"the log file from this path, which may be different than the path "
"documented by :manual:`cmake-configure-log(7)`. The log file may not exist"
" if no events are logged."
msgstr ""
"指定配置日志文件路径的字符串。客户端必须从此路径读取日志文件，该路径可能与 cmake-configure-log(7) "
"记录的路径不同。如果没有记录任何事件，则日志文件可能不存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1338
msgid "``eventKindNames``"
msgstr "``eventKindNames``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1334
msgid ""
"A JSON array whose entries are each a JSON string naming one of the "
":manual:`cmake-configure-log(7)` versioned event kinds. At most one "
"version of each configure log event kind will be listed. Although the "
"configure log may contain other (versioned) event kinds, clients must "
"ignore those that are not listed in this field."
msgstr ""
"一个 JSON 数组，其每个条目都是一个 JSON 字符串，命名 :manual:`cmake-configure-log(7)` "
"版本化事件类型之一。最多将列出每种配置日志事件类型的一个版本。尽管配置日志可能包含其他（版本化的）事件类型，但客户端必须忽略未在此字段中列出的那些。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1341
msgid "Object Kind \"cache\""
msgstr "对象种类“缓存”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1343
msgid ""
"The ``cache`` object kind lists cache entries.  These are the :ref:`CMake "
"Language Variables` stored in the persistent cache (``CMakeCache.txt``) "
"for the build tree."
msgstr ""
"``cache`` 对象类型列出了缓存条目。这些是 :ref:`CMake 语言变量` 存储在构建树的持久缓存 "
"(``CMakeCache.txt``) 中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1347
msgid ""
"There is only one ``cache`` object major version, version 2. Version 1 "
"does not exist to avoid confusion with that from :manual:`cmake-server(7)`"
" mode."
msgstr ""
"只有一个 ``cache`` 对象主要版本，版本 2。版本 1 不存在以避免与来自 :manual:`cmake-server(7)` 模式的混淆。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1352
msgid "\"cache\" version 2"
msgstr "“缓存”版本 2"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1354
msgid "``cache`` object version 2 is a JSON object:"
msgstr "``cache`` 对象版本 2 是一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1387
msgid "The members specific to ``cache`` objects are:"
msgstr "特定于 ``cache`` 对象的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1412
msgid "``entries``"
msgstr "``条目``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1390
msgid ""
"A JSON array whose entries are each a JSON object specifying a cache "
"entry.  The members of each entry are:"
msgstr "一个 JSON 数组，其每个条目都是指定缓存条目的 JSON 对象。每个条目的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1394
msgid "A string specifying the name of the entry."
msgstr "指定条目名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1397
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1412
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:211
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:272
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1054
msgid "``value``"
msgstr "``价值``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1397
msgid "A string specifying the value of the entry."
msgstr "指定条目值的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1400
msgid ""
"A string specifying the type of the entry used by :manual:`cmake-gui(1)` "
"to choose a widget for editing."
msgstr "一个字符串，指定 cmake-gui(1) 用来选择要编辑的小部件的条目类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1412
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1559
msgid "``properties``"
msgstr "``属性``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1404
msgid ""
"A JSON array of entries specifying associated :ref:`cache entry properties"
" <Cache Entry Properties>`. Each entry is a JSON object containing "
"members:"
msgstr "指定相关缓存条目属性的 JSON 条目数组<缓存条目属性>`。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1409
msgid "A string specifying the name of the cache entry property."
msgstr "一个字符串，指定缓存条目属性的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1412
msgid "A string specifying the value of the cache entry property."
msgstr "指定缓存条目属性值的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1415
msgid "Object Kind \"cmakeFiles\""
msgstr "对象种类“cmakeFiles”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1417
msgid ""
"The ``cmakeFiles`` object kind lists files used by CMake while configuring"
" and generating the build system.  These include the ``CMakeLists.txt`` "
"files as well as included ``.cmake`` files."
msgstr ""
"``cmakeFiles`` 对象种类列出了 CMake 在配置和生成构建系统时使用的文件。这些包括 ``CMakeLists.txt`` "
"文件以及包含的 ``.cmake`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1421
msgid "There is only one ``cmakeFiles`` object major version, version 1."
msgstr "只有一个 ``cmakeFiles`` 对象主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1424
msgid "\"cmakeFiles\" version 1"
msgstr "“cmakeFiles”版本 1"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1426
msgid "``cmakeFiles`` object version 1 is a JSON object:"
msgstr "``cmakeFiles`` 对象版本 1 是一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1457
msgid "The members specific to ``cmakeFiles`` objects are:"
msgstr "特定于 cmakeFiles 对象的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1494
msgid "``inputs``"
msgstr "``输入``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1471
msgid ""
"A JSON array whose entries are each a JSON object specifying an input file"
" used by CMake when configuring and generating the build system. The "
"members of each entry are:"
msgstr "一个 JSON 数组，其每个条目都是一个 JSON 对象，指定 CMake 在配置和生成构建系统时使用的输入文件。每个条目的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1476
msgid ""
"A string specifying the path to an input file to CMake, represented with "
"forward slashes.  If the file is inside the top-level source directory "
"then the path is specified relative to that directory. Otherwise the path "
"is absolute."
msgstr "指定 CMake 输入文件路径的字符串，用正斜杠表示。如果文件位于顶级源目录中，则路径是相对于该目录指定的。否则路径是绝对的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1482
msgid ""
"Optional member that is present with boolean value ``true`` if the path "
"specifies a file that is under the top-level build directory and the build"
" is out-of-source. This member is not available on in-source builds."
msgstr "如果路径指定顶级构建目录下的文件并且构建是源外的，则可选成员以布尔值“true”存在。该成员在源代码构建中不可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1490
msgid "``isExternal``"
msgstr "``是外部的``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1488
msgid ""
"Optional member that is present with boolean value ``true`` if the path "
"specifies a file that is not under the top-level source or build "
"directories."
msgstr "如果路径指定的文件不在顶级源目录或构建目录下，则该成员具有布尔值“true”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1494
msgid "``isCMake``"
msgstr "``isCMake``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1493
msgid ""
"Optional member that is present with boolean value ``true`` if the path "
"specifies a file in the CMake installation."
msgstr "如果路径指定 CMake 安装中的文件，则可选成员以布尔值“true”存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1497
msgid "Object Kind \"toolchains\""
msgstr "对象种类“工具链”"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1499
msgid ""
"The ``toolchains`` object kind lists properties of the toolchains used "
"during the build.  These include the language, compiler path, ID, and "
"version."
msgstr "``toolchains`` 对象种类列出了构建期间使用的工具链的属性。这些包括语言、编译器路径、ID 和版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1502
msgid "There is only one ``toolchains`` object major version, version 1."
msgstr "只有一个 ``toolchains`` 对象主要版本，版本 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1505
msgid "\"toolchains\" version 1"
msgstr "“工具链”版本 1"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1507
msgid "``toolchains`` object version 1 is a JSON object:"
msgstr "``toolchains`` 对象版本 1 是一个 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1577
msgid "The members specific to ``toolchains`` objects are:"
msgstr "特定于“工具链”对象的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1650
msgid "``toolchains``"
msgstr "``工具链``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1580
msgid ""
"A JSON array whose entries are each a JSON object specifying a toolchain "
"associated with a particular language. The members of each entry are:"
msgstr "一个 JSON 数组，其每个条目都是一个 JSON 对象，指定与特定语言关联的工具链。每个条目的成员是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1584
msgid ""
"A JSON string specifying the toolchain language, like C or CXX. Language "
"names are the same as language names that can be passed to the "
":command:`project` command. Because CMake only supports a single toolchain"
" per language, this field can be used as a key."
msgstr ""
"指定工具链语言的 JSON 字符串，例如 C 或 CXX。语言名称与可以传递给 :command:`project` 命令的语言名称相同。因为 "
"CMake 只支持每种语言的单个工具链，所以这个字段可以用作键。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1644
msgid "``compiler``"
msgstr "``编译器``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1593
msgid ""
"Optional member that is present when the :variable:`CMAKE_<LANG>_COMPILER`"
" variable is defined for the current language. Its value is a JSON string "
"holding the path to the compiler."
msgstr ""
"为当前语言定义 :variable:`CMAKE_<LANG>_COMPILER` 变量时出现的可选成员。它的值是一个包含编译器路径的 JSON "
"字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1598
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_COMPILER_ID` variable is defined for the current "
"language. Its value is a JSON string holding the ID (GNU, MSVC, etc.) of "
"the compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_COMPILER_ID 变量时出现的可选成员。它的值是一个包含编译器 ID（GNU、MSVC 等）的 "
"JSON 字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1604
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_COMPILER_VERSION` variable is defined for the "
"current language. Its value is a JSON string holding the version of the "
"compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_COMPILER_VERSION 变量时出现的可选成员。它的值是一个包含编译器版本的 JSON 字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1610
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_COMPILER_TARGET` variable is defined for the "
"current language. Its value is a JSON string holding the cross-compiling "
"target of the compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_COMPILER_TARGET 变量时出现的可选成员。它的值是一个 JSON "
"字符串，包含编译器的交叉编译目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1644
msgid "``implicit``"
msgstr "``隐式``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1623
msgid "``includeDirectories``"
msgstr "``includeDirectories``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1619
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES` variable is defined "
"for the current language. Its value is a JSON array of JSON strings where "
"each string holds a path to an implicit include directory for the "
"compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES 变量时出现的可选成员。它的值是一个由 JSON "
"字符串组成的 JSON 数组，其中每个字符串都包含一个指向编译器隐式包含目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1630
msgid "``linkDirectories``"
msgstr "``链接目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1626
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES` variable is defined for"
" the current language. Its value is a JSON array of JSON strings where "
"each string holds a path to an implicit link directory for the compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES 变量时出现的可选成员。它的值是一个由 JSON "
"字符串组成的 JSON 数组，其中每个字符串都包含一个指向编译器隐式链接目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1637
msgid "``linkFrameworkDirectories``"
msgstr "``linkFrameworkDirectories``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1633
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES` variable is "
"defined for the current language. Its value is a JSON array of JSON "
"strings where each string holds a path to an implicit link framework "
"directory for the compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "
"变量时出现的可选成员。它的值是一个由 JSON 字符串组成的 JSON 数组，其中每个字符串都包含一个指向编译器隐式链接框架目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1644
msgid "``linkLibraries``"
msgstr "``链接库``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1640
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES` variable is defined for "
"the current language. Its value is a JSON array of JSON strings where each"
" string holds a path to an implicit link library for the compiler."
msgstr ""
"为当前语言定义 CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES 变量时出现的可选成员。它的值是一个由 JSON "
"字符串组成的 JSON 数组，其中每个字符串都包含一个指向编译器隐式链接库的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1650
msgid "``sourceFileExtensions``"
msgstr "``sourceFileExtensions``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-file-api.7.rst:1647
msgid ""
"Optional member that is present when the "
":variable:`CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS` variable is defined for "
"the current language. Its value is a JSON array of JSON strings where each"
" each string holds a file extension (without the leading dot) for the "
"language."
msgstr ""
"为当前语言定义 :variable:`CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS` 变量时出现的可选成员。它的值是一个 "
"JSON 字符串数组，其中每个字符串都包含该语言的文件扩展名（没有前导点）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:4
msgid "cmake-generator-expressions(7)"
msgstr "cmake 生成器表达式 (7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:13
msgid ""
"Generator expressions are evaluated during build system generation to "
"produce information specific to each build configuration.  They have the "
"form ``$<...>``.  For example:"
msgstr "生成器表达式在构建系统生成期间进行评估，以生成特定于每个构建配置的信息。它们的形式为 ``$<...>``。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:21
msgid ""
"This would expand to ``/opt/include/GNU``, ``/opt/include/Clang``, etc. "
"depending on the C++ compiler used."
msgstr "这将扩展为“/opt/include/GNU”、“/opt/include/Clang”等，具体取决于所使用的 C++ 编译器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:24
msgid ""
"Generator expressions are allowed in the context of many target "
"properties, such as :prop_tgt:`LINK_LIBRARIES`, "
":prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:`COMPILE_DEFINITIONS` and "
"others.  They may also be used when using commands to populate those "
"properties, such as :command:`target_link_libraries`, "
":command:`target_include_directories`, "
":command:`target_compile_definitions` and others.  They enable conditional"
" linking, conditional definitions used when compiling, conditional include"
" directories, and more.  The conditions may be based on the build "
"configuration, target properties, platform information, or any other "
"queryable information."
msgstr ""
"许多目标属性的上下文中允许使用生成器表达式，例如:prop_tgt:`LINK_LIBRARIES`、 :prop_tgt:`INCLUDE_DIRECTORIES`、 :prop_tgt:`COMPILE_DEFINITIONS`"
" "
"等。它们也可以在使用命令填充这些属性时使用，例如:command:`target_link_libraries`、 :command:`target_include_directories`、 :command:`target_compile_definitions`"
" 等。它们启用条件链接、编译时使用的条件定义、条件包含目录等。这些条件可能基于构建配置、目标属性、平台信息或任何其他可查询信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:34
msgid "Generator expressions can be nested:"
msgstr "生成器表达式可以嵌套："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:42
msgid ""
"The above would expand to ``OLD_COMPILER`` if the "
":variable:`CMAKE_CXX_COMPILER_VERSION <CMAKE_<LANG>_COMPILER_VERSION>` is "
"less than 4.2.0."
msgstr ""
"如果 :variable:`CMAKE_CXX_COMPILER_VERSION <CMAKE_<LANG>_COMPILER_VERSION>` "
"小于 4.2.0，则以上将扩展为 ``OLD_COMPILER``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:47
msgid "Whitespace And Quoting"
msgstr "空格和引号"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:49
msgid ""
"Generator expressions are typically parsed after command arguments. If a "
"generator expression contains spaces, new lines, semicolons or other "
"characters that may be interpreted as command argument separators, the "
"whole expression should be surrounded by quotes when passed to a command."
"  Failure to do so may result in the expression being split and it may no "
"longer be recognized as a generator expression."
msgstr ""
"生成器表达式通常在命令参数之后进行解析。如果生成器表达式包含空格、换行符、分号或其他可能被解释为命令参数分隔符的字符，则在传递给命令时，整个表达式应该用引号括起来。如果不这样做可能会导致表达式被拆分并且它可能不再被识别为生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:56
msgid ""
"When using :command:`add_custom_command` or :command:`add_custom_target`, "
"use the ``VERBATIM`` and ``COMMAND_EXPAND_LISTS`` options to obtain robust"
" argument splitting and quoting."
msgstr ""
"使用 :command:`add_custom_command` 或 :command:`add_custom_target` 时，请使用 "
"``VERBATIM`` 和 ``COMMAND_EXPAND_LISTS`` 选项以获得可靠的参数拆分和引用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:92
msgid ""
"Using variables to build up a more complex generator expression is also a "
"good way to reduce errors and improve readability.  The above example can "
"be improved further like so:"
msgstr "使用变量构建更复杂的生成器表达式也是减少错误和提高可读性的好方法。上面的例子可以像这样进一步改进："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:107
msgid ""
"A common mistake is to try to split a generator expression across multiple"
" lines with indenting:"
msgstr "一个常见的错误是尝试通过缩进将生成器表达式拆分为多行："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:121
msgid ""
"Again, use helper variables with well-chosen names to build up a readable "
"expression instead:"
msgstr "同样，使用具有精心选择的名称的辅助变量来构建一个可读的表达式："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:134
msgid "Debugging"
msgstr "调试"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:136
msgid ""
"Since generator expressions are evaluated during generation of the "
"buildsystem, and not during processing of ``CMakeLists.txt`` files, it is "
"not possible to inspect their result with the :command:`message()` "
"command.  One possible way to generate debug messages is to add a custom "
"target:"
msgstr ""
"由于生成器表达式是在构建系统生成期间计算的，而不是在处理 CMakeLists.txt 文件期间计算的，因此无法使用 "
":command:`message()` 命令检查它们的结果。生成调试消息的一种可能方法是添加自定义目标："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:145
msgid ""
"After running :program:`cmake`, you can then build the ``genexdebug`` "
"target to print the result of the ``$<...>`` expression (i.e. run the "
"command :option:`cmake --build ... --target genexdebug <cmake--build "
"--target>`)."
msgstr ""
"运行 :program:`cmake` 后，您可以构建 ``genexdebug`` 目标以打印 ``$<...>`` "
"表达式的结果（即运行命令:option:`cmake --build ... --target genexdebug <cmake--build "
"--target>`）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:149
msgid ""
"Another way is to write debug messages to a file with "
":command:`file(GENERATE)`:"
msgstr "另一种方法是使用 :command:`file(GENERATE)` 将调试消息写入文件："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:156
msgid "Generator Expression Reference"
msgstr "生成器表达式参考"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:160
msgid ""
"This reference deviates from most of the CMake documentation in that it "
"omits angular brackets ``<...>`` around placeholders like ``condition``, "
"``string``, ``target``, etc.  This is to prevent an opportunity for those "
"placeholders to be misinterpreted as generator expressions."
msgstr ""
"此参考与大多数 CMake 文档不同，因为它省略了占位符周围的尖括号 ``<...>``，例如 "
"``condition``、``string``、``target`` 等。这是为了防止这些占位符被误解为生成器表达式的机会。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:168
msgid "Conditional Expressions"
msgstr "条件表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:170
msgid ""
"A fundamental category of generator expressions relates to conditional "
"logic. Two forms of conditional generator expressions are supported:"
msgstr "生成器表达式的一个基本类别与条件逻辑有关。支持两种形式的条件生成器表达式："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:175
msgid ""
"Evaluates to ``true_string`` if ``condition`` is ``1``, or an empty string"
" if ``condition`` evaluates to ``0``.  Any other value for ``condition`` "
"results in an error."
msgstr ""
"如果“条件”为“1”，则评估为“true_string”，如果“条件”评估为“0”，则评估为空字符串。 ``condition`` "
"的任何其他值都会导致错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:183
msgid ""
"Evaluates to ``true_string`` if ``condition`` is ``1``, or "
"``false_string`` if ``condition`` is ``0``.  Any other value for "
"``condition`` results in an error."
msgstr ""
"如果“条件”为“1”，则评估为“true_string”，如果“条件”为“0”，则评估为“false_string”。 ``condition`` "
"的任何其他值都会导致错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:187
msgid ""
"Typically, the ``condition`` is itself a generator expression.  For "
"instance, the following expression expands to ``DEBUG_MODE`` when the "
"``Debug`` configuration is used, and the empty string for all other "
"configurations:"
msgstr ""
"通常，“条件”本身就是一个生成器表达式。例如，当使用 ``Debug`` 配置时，以下表达式扩展为 "
"``DEBUG_MODE``，所有其他配置为空字符串："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:195
msgid ""
"Boolean-like ``condition`` values other than ``1`` or ``0`` can be handled"
" by wrapping them with the ``$<BOOL:...>`` generator expression:"
msgstr ""
"除了 ``1`` 或 ``0`` 之外的类似布尔的 ``condition`` 值可以通过用 ``$<BOOL:...>`` "
"生成器表达式包装它们来处理："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:200
msgid ""
"Converts ``string`` to ``0`` or ``1``. Evaluates to ``0`` if any of the "
"following is true:"
msgstr "将 ``string`` 转换为 ``0`` 或 ``1``。如果以下任何一项为真，则评估为“0”："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:203
msgid "``string`` is empty,"
msgstr "``string`` 为空，"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:204
msgid ""
"``string`` is a case-insensitive equal of ``0``, ``FALSE``, ``OFF``, "
"``N``, ``NO``, ``IGNORE``, or ``NOTFOUND``, or"
msgstr ""
"``string`` 是不区分大小写的等于 ``0``、``FALSE``、``OFF``、``N``、``NO``、``IGNORE`` 或 ` "
"`NOTFOUND`` 或"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:206
msgid "``string`` ends in the suffix ``-NOTFOUND`` (case-sensitive)."
msgstr "``string`` 以后缀 ``-NOTFOUND`` 结尾（区分大小写）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:208
msgid "Otherwise evaluates to ``1``."
msgstr "否则计算为“1”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:210
msgid ""
"The ``$<BOOL:...>`` generator expression is often used when a "
"``condition`` is provided by a CMake variable:"
msgstr "当 CMake 变量提供“条件”时，经常使用“$<BOOL:...>”生成器表达式："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:221
msgid "Logical Operators"
msgstr "逻辑运算符"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:223
msgid "The common boolean logic operators are supported:"
msgstr "支持常见的布尔逻辑运算符："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:227
msgid ""
"where ``conditions`` is a comma-separated list of boolean expressions, all"
" of which must evaluate to either ``1`` or ``0``.  The whole expression "
"evaluates to ``1`` if all conditions are ``1``.  If any condition is "
"``0``, the whole expression evaluates to ``0``."
msgstr ""
"其中 ``conditions`` 是以逗号分隔的布尔表达式列表，所有这些表达式的计算结果必须为 ``1`` 或 "
"``0``。如果所有条件都为“1”，则整个表达式的计算结果为“1”。如果任何条件为“0”，则整个表达式的计算结果为“0”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:234
msgid ""
"where ``conditions`` is a comma-separated list of boolean expressions. all"
" of which must evaluate to either ``1`` or ``0``.  The whole expression "
"evaluates to ``1`` if at least one of the ``conditions`` is ``1``.  If all"
" ``conditions`` evaluate to ``0``, the whole expression evaluates to "
"``0``."
msgstr ""
"其中 ``conditions`` "
"是以逗号分隔的布尔表达式列表。所有这些都必须评估为“1”或“0”。如果“条件”中的至少一个为“1”，则整个表达式的计算结果为“1”。如果所有“条件”的计算结果为“0”，则整个表达式的计算结果为“0”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:241
msgid ""
"``condition`` must be ``0`` or ``1``.  The result of the expression is "
"``0`` if ``condition`` is ``1``, else ``1``."
msgstr "``condition`` 必须是 ``0`` 或 ``1``。如果“条件”为“1”，则表达式的结果为“0”，否则为“1”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:247
msgid "Primary Comparison Expressions"
msgstr "初级比较表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:249
msgid ""
"CMake supports a variety of generator expressions that compare things. "
"This section covers the primary and most widely used comparison types. "
"Other more specific comparison types are documented in their own separate "
"sections further below."
msgstr "CMake 支持各种比较事物的生成器表达式。本节涵盖主要和最广泛使用的比较类型。其他更具体的比较类型在下面的单独部分中有记录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:255
msgid "String Comparisons"
msgstr "字符串比较"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:259
msgid ""
"``1`` if ``string1`` and ``string2`` are equal, else ``0``. The comparison"
" is case-sensitive.  For a case-insensitive comparison, combine with a "
":ref:`string transforming generator expression <String Transforming "
"Generator Expressions>`.  For example, the following evaluates to ``1`` if"
" ``${foo}`` is any of ``BAR``, ``Bar``, ``bar``, etc."
msgstr ""
"``1`` 如果 ``string1`` 和 ``string2`` 相等，否则为 ``0``。比较区分大小写。对于不区分大小写的比较，结合 "
":ref:`string transforming generator expression <String Transforming "
"Generator Expressions>`。例如，如果 ``${foo}`` 是 ``BAR``、``Bar``、``bar`` "
"等中的任何一个，则以下计算结果为 ``1``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:271
msgid ""
"``1`` if ``value1`` and ``value2`` are numerically equal, else ``0``."
msgstr "``1`` 如果``value1`` 和``value2`` 在数值上相等，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:274
msgid "Version Comparisons"
msgstr "版本比较"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:278
msgid "``1`` if ``v1`` is a version less than ``v2``, else ``0``."
msgstr "``1`` 如果``v1`` 的版本小于``v2``，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:282
msgid "``1`` if ``v1`` is a version greater than ``v2``, else ``0``."
msgstr "``1`` 如果``v1`` 是大于``v2`` 的版本，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:286
msgid "``1`` if ``v1`` is the same version as ``v2``, else ``0``."
msgstr "``1`` 如果``v1`` 与``v2`` 的版本相同，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:292
msgid ""
"``1`` if ``v1`` is a version less than or equal to ``v2``, else ``0``."
msgstr "``1`` 如果``v1`` 是小于或等于``v2`` 的版本，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:298
msgid ""
"``1`` if ``v1`` is a version greater than or equal to ``v2``, else ``0``."
msgstr "``1`` 如果``v1`` 是大于或等于``v2`` 的版本，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:303
msgid "String Transformations"
msgstr "字符串转换"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:307
msgid "Content of ``string`` converted to lower case."
msgstr "``string`` 的内容转换为小写。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:311
msgid "Content of ``string`` converted to upper case."
msgstr "``string`` 的内容转换为大写。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:315
msgid ""
"Content of ``...`` converted to a C identifier.  The conversion follows "
"the same behavior as :command:`string(MAKE_C_IDENTIFIER)`."
msgstr ""
"``...`` 的内容转换为 C 标识符。转换遵循与 :command:`string(MAKE_C_IDENTIFIER)` 相同的行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:319
msgid "List Expressions"
msgstr "列表表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:325
msgid ""
"``1`` if ``string`` is an item in the semicolon-separated ``list``, else "
"``0``. It uses case-sensitive comparisons."
msgstr "``1`` 如果``string`` 是分号分隔的``list`` 中的一项，否则为``0``。它使用区分大小写的比较。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:330
msgid ""
"Joins the list with the content of ``string`` inserted between each item."
msgstr "加入列表，在每个项目之间插入 ``string`` 的内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:336
msgid ""
"Removes duplicated items in the given ``list``. The relative order of "
"items is preserved, but if duplicates are encountered, only the first "
"instance is preserved."
msgstr "删除给定“列表”中的重复项目。保留项目的相对顺序，但如果遇到重复项，则仅保留第一个实例。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:344
msgid ""
"Includes or removes items from ``list`` that match the regular expression "
"``regex``."
msgstr "在 ``list`` 中包含或删除与正则表达式 ``regex`` 匹配的项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:348
msgid "Path Expressions"
msgstr "路径表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:350
msgid ""
"Most of the expressions in this section are closely associated with the "
":command:`cmake_path` command, providing the same capabilities, but in the"
" form of a generator expression."
msgstr "本节中的大多数表达式与 :command:`cmake_path` 命令密切相关，提供相同的功能，但采用生成器表达式的形式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:354
msgid ""
"For all generator expressions in this section, paths are expected to be in"
" cmake-style format. The :ref:`$\\<PATH:CMAKE_PATH\\> <GenEx PATH-"
"CMAKE_PATH>` generator expression can be used to convert a native path to "
"a cmake-style one."
msgstr ""
"对于本节中的所有生成器表达式，路径应采用 cmake 样式格式。 :ref:`$\\<PATH:CMAKE_PATH\\> <GenEx PATH-"
"CMAKE_PATH>` 生成器表达式可用于将本机路径转换为 ​​cmake 样式的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:362
msgid "Path Comparisons"
msgstr "路径比较"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:368
msgid ""
"Compares the lexical representations of two paths. No normalization is "
"performed on either path. Returns ``1`` if the paths are equal, ``0`` "
"otherwise."
msgstr "比较两条路径的词法表示。在任何一条路径上都不执行规范化。如果路径相等，则返回“1”，否则返回“0”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:372
msgid "See :ref:`cmake_path(COMPARE) <Path COMPARE>` for more details."
msgstr "有关详细信息，请参见:ref:`cmake_path(COMPARE) <Path COMPARE>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:377
msgid "Path Queries"
msgstr "路径查询"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:379
msgid ""
"These expressions provide the generation-time capabilities equivalent to "
"the :ref:`Query <Path Query>` options of the :command:`cmake_path` "
"command. All paths are expected to be in cmake-style format."
msgstr ""
"这些表达式提供的生成时功能等同于 cmake_path 命令的 :ref:`Query <Path Query>` 选项。所有路径都应采用 "
"cmake 样式格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:387
msgid ""
"The following operations return ``1`` if the particular path component is "
"present, ``0`` otherwise. See :ref:`Path Structure And Terminology` for "
"the meaning of each path component."
msgstr ""
"如果存在特定路径组件，则以下操作返回“1”，否则返回“0”。有关每个路径组件的含义，请参阅 :ref:`Path Structure And "
"Terminology`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:402
msgid "Note the following special cases:"
msgstr "注意以下特殊情况："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:404
msgid ""
"For ``HAS_ROOT_PATH``, a true result will only be returned if at least one"
" of ``root-name`` or ``root-directory`` is non-empty."
msgstr ""
"对于 ``HAS_ROOT_PATH``，仅当 ``root-name`` 或 ``root-directory`` 中至少有一个非空时，才会返回 "
"true 结果。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:407
msgid ""
"For ``HAS_PARENT_PATH``, the root directory is also considered to have a "
"parent, which will be itself.  The result is true except if the path "
"consists of just a :ref:`filename <FILENAME_DEF>`."
msgstr ""
"对于``HAS_PARENT_PATH``，根目录也被认为有一个父目录，就是它自己。结果为真，除非路径仅包含 :ref:`filename "
"<FILENAME_DEF>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:415
msgid ""
"Returns ``1`` if the path is :ref:`absolute <IS_ABSOLUTE>`, ``0`` "
"otherwise."
msgstr "如果路径是 absolute <IS_ABSOLUTE>`，则返回 ``1``，否则返回 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:421
msgid "This will return the opposite of ``IS_ABSOLUTE``."
msgstr "这将返回 IS_ABSOLUTE 的反义词。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:427
msgid ""
"Returns ``1`` if ``path`` is the prefix of ``input``, ``0`` otherwise."
msgstr "如果 ``path`` 是 ``input`` 的前缀，则返回 ``1``，否则返回 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:429
msgid ""
"When the ``NORMALIZE`` option is specified, ``path`` and ``input`` are "
":ref:`normalized <Normalization>` before the check."
msgstr ""
"当指定了 ``NORMALIZE`` 选项时，``path`` 和 ``input`` 在检查之前被规范化 <Normalization>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:435
msgid "Path Decomposition"
msgstr "路径分解"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:437
msgid ""
"These expressions provide the generation-time capabilities equivalent to "
"the :ref:`Decomposition <Path Decomposition>` options of the "
":command:`cmake_path` command.  All paths are expected to be in cmake-"
"style format."
msgstr ""
"这些表达式提供的生成时功能等同于 cmake_path 命令的 Decomposition <Path Decomposition> "
"选项。所有路径都应采用 cmake 样式格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:445
msgid ""
"The following operations retrieve a different component or group of "
"components from a path. See :ref:`Path Structure And Terminology` for the "
"meaning of each path component."
msgstr ""
"以下操作从路径中检索不同的组件或组件组。有关每个路径组件的含义，请参阅 :ref:`Path Structure And Terminology`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:460
msgid ""
"If a requested component is not present in the path, an empty string is "
"returned."
msgstr "如果路径中不存在请求的组件，则返回空字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:466
msgid "Path Transformations"
msgstr "路径转换"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:468
msgid ""
"These expressions provide the generation-time capabilities equivalent to "
"the :ref:`Modification <Path Modification>` and :ref:`Generation <Path "
"Generation>` options of the :command:`cmake_path` command.  All paths are "
"expected to be in cmake-style format."
msgstr ""
"这些表达式提供的生成时功能等效于 cmake_path 命令的 :ref:`Modification <Path Modification>` 和 "
":ref:`Generation <Path Generation>` 选项。所有路径都应采用 cmake 样式格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:479
msgid ""
"Returns ``path``. If ``path`` is a native path, it is converted into a "
"cmake-style path with forward-slashes (``/``). On Windows, the long "
"filename marker is taken into account."
msgstr ""
"返回“路径”。如果 ``path`` 是本机路径，它将转换为带有正斜杠 (``/``) 的 cmake 样式路径。在 Windows "
"上，长文件名标记被考虑在内。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:483
msgid ""
"When the ``NORMALIZE`` option is specified, the path is :ref:`normalized "
"<Normalization>` after the conversion."
msgstr "当指定了 ``NORMALIZE`` 选项时，转换后的路径是 :ref:`normalized <Normalization>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:490
msgid ""
"Returns all the ``input`` arguments appended to ``path`` using ``/`` as "
"the ``directory-separator``. Depending on the ``input``, the value of "
"``path`` may be discarded."
msgstr "使用“/”作为“目录分隔符”返回所有附加到“路径”的“输入”参数。根据“输入”，“路径”的值可能会被丢弃。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:494
msgid "See :ref:`cmake_path(APPEND) <APPEND>` for more details."
msgstr "有关更多详细信息，请参阅:ref:`cmake_path（APPEND）<APPEND>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:500
msgid ""
"Returns ``path`` with filename component (as returned by "
"``$<PATH:GET_FILENAME>``) removed. After removal, any trailing "
"``directory-separator`` is left alone, if present."
msgstr ""
"返回带有文件名组件（由 $<PATH:GET_FILENAME>`` 返回）的 ``path`` "
"被移除。删除后，任何尾随的“目录分隔符”（如果存在）将保持不变。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:504
msgid ""
"See :ref:`cmake_path(REMOVE_FILENAME) <REMOVE_FILENAME>` for more details."
msgstr "有关更多详细信息，请参阅 :ref:`cmake_path(REMOVE_FILENAME) <REMOVE_FILENAME>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:510
msgid ""
"Returns ``path`` with the filename component replaced by ``input``. If "
"``path`` has no filename component (i.e. ``$<PATH:HAS_FILENAME>`` returns "
"``0``), ``path`` is unchanged."
msgstr ""
"返回 ``path``，文件名部分替换为 ``input``。如果 ``path`` 没有文件名组件（即 "
"``$<PATH:HAS_FILENAME>`` 返回 ``0``），``path`` 不变。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:514
msgid ""
"See :ref:`cmake_path(REPLACE_FILENAME) <REPLACE_FILENAME>` for more "
"details."
msgstr "有关详细信息，请参见:ref:`cmake_path(REPLACE_FILENAME) <REPLACE_FILENAME>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:520
msgid ""
"Returns ``path`` with the :ref:`extension <EXTENSION_DEF>` removed, if "
"any."
msgstr "返回带有 :ref:`extension <EXTENSION_DEF>` 的 ``path``，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:522
msgid ""
"See :ref:`cmake_path(REMOVE_EXTENSION) <REMOVE_EXTENSION>` for more "
"details."
msgstr "有关详细信息，请参见:ref:`cmake_path(REMOVE_EXTENSION) <REMOVE_EXTENSION>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:528
msgid ""
"Returns ``path`` with the :ref:`extension <EXTENSION_DEF>` replaced by "
"``input``, if any."
msgstr "返回 ``path``，其中 :ref:`extension <EXTENSION_DEF>` 替换为 ``input``（如果有）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:531
msgid ""
"See :ref:`cmake_path(REPLACE_EXTENSION) <REPLACE_EXTENSION>` for more "
"details."
msgstr "有关详细信息，请参见:ref:`cmake_path(REPLACE_EXTENSION) <REPLACE_EXTENSION>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:537
msgid ""
"Returns ``path`` normalized according to the steps described in "
":ref:`Normalization`."
msgstr "返回根据 Normalization 中描述的步骤规范化的 ``path``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:544
msgid ""
"Returns ``path``, modified to make it relative to the ``base_directory`` "
"argument."
msgstr "返回 ``path``，修改后使其相对于 ``base_directory`` 参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:547
msgid ""
"See :ref:`cmake_path(RELATIVE_PATH) <cmake_path-RELATIVE_PATH>` for more "
"details."
msgstr ""
"有关详细信息，请参见:ref:`cmake_path(RELATIVE_PATH) <cmake_path-RELATIVE_PATH>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:554
msgid ""
"Returns ``path`` as absolute. If ``path`` is a relative path "
"(``$<PATH:IS_RELATIVE>`` returns ``1``), it is evaluated relative to the "
"given base directory specified by ``base_directory`` argument."
msgstr ""
"以绝对方式返回“路径”。如果 ``path`` 是相对路径（``$<PATH:IS_RELATIVE>`` 返回 ``1``），则相对于 "
"``base_directory`` 参数指定的给定基目录进行评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:558
msgid ""
"When the ``NORMALIZE`` option is specified, the path is :ref:`normalized "
"<Normalization>` after the path computation."
msgstr "当指定 ``NORMALIZE`` 选项时，路径在路径计算之后是 :ref:`normalized <Normalization>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:561
msgid ""
"See :ref:`cmake_path(ABSOLUTE_PATH) <ABSOLUTE_PATH>` for more details."
msgstr "有关详细信息，请参阅:ref:`cmake_path(ABSOLUTE_PATH) <ABSOLUTE_PATH>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:564
msgid "Shell Paths"
msgstr "外壳路径"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:570
msgid ""
"Content of ``...`` converted to shell path style. For example, slashes are"
" converted to backslashes in Windows shells and drive letters are "
"converted to posix paths in MSYS shells. The ``...`` must be an absolute "
"path."
msgstr ""
"``...`` 的内容转换为 shell 路径样式。例如，斜杠在 Windows shell 中被转换为反斜杠，驱动器号在 MSYS shell "
"中被转换为 posix 路径。 ``...`` 必须是绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:574
msgid ""
"The ``...`` may be a :ref:`semicolon-separated list <CMake Language "
"Lists>` of paths, in which case each path is converted individually and a "
"result list is generated using the shell path separator (``:`` on POSIX "
"and ``;`` on Windows).  Be sure to enclose the argument containing this "
"genex in double quotes in CMake source code so that ``;`` does not split "
"arguments."
msgstr ""
"``...`` 可能是:ref:`分号分隔的路径列表 <CMake Language Lists>`，在这种情况下，每个路径都会单独转换，并使用 "
"shell 路径分隔符生成结果列表（`` :`` 在 POSIX 上和 ``;`` 在 Windows 上）。请务必在 CMake "
"源代码中用双引号将包含此 genex 的参数括起来，以便 ``;`` 不会拆分参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:582
msgid "Configuration Expressions"
msgstr "配置表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:586
msgid ""
"Configuration name. Use this instead of the deprecated "
":genex:`CONFIGURATION` generator expression."
msgstr "配置名称。使用它代替已弃用的 CONFIGURATION 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:591
msgid ""
"``1`` if config is any one of the entries in comma-separated list "
"``cfgs``, else ``0``. This is a case-insensitive comparison. The mapping "
"in :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` is also considered by this "
"expression when it is evaluated on a property of an :prop_tgt:`IMPORTED` "
"target."
msgstr ""
"``1`` 如果配置是逗号分隔列表``cfgs`` 中的任何一个条目，否则为``0``。这是不区分大小写的比较。 "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` 中的映射在对 :prop_tgt:`IMPORTED` "
"目标的属性进行评估时也被此表达式考虑。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:597
msgid ""
"Multiple configurations can be specified for ``cfgs``. CMake 3.18 and "
"earlier only accepted a single configuration."
msgstr "可以为 ``cfgs`` 指定多个配置。 CMake 3.18 及更早版本仅接受单一配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:605
msgid ""
"Only valid in :command:`add_custom_command` and "
":command:`add_custom_target` as the outer-most generator expression in an "
"argument. With the :generator:`Ninja Multi-Config` generator, generator "
"expressions in ``...`` are evaluated using the custom command's \"output "
"config\". With other generators, the content of ``...`` is evaluated "
"normally."
msgstr ""
"仅在 :command:`add_custom_command` 和 :command:`add_custom_target` "
"作为参数中最外层的生成器表达式有效。使用 :generator:`Ninja Multi-Config` 生成器，``...`` "
"中的生成器表达式使用自定义命令的“输出配置”进行评估。对于其他生成器，``...`` 的内容被正常评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:615
msgid ""
"Only valid in :command:`add_custom_command` and "
":command:`add_custom_target` as the outer-most generator expression in an "
"argument. With the :generator:`Ninja Multi-Config` generator, generator "
"expressions in ``...`` are evaluated using the custom command's \"command "
"config\". With other generators, the content of ``...`` is evaluated "
"normally."
msgstr ""
"仅在 :command:`add_custom_command` 和 :command:`add_custom_target` "
"作为参数中最外层的生成器表达式有效。使用 :generator:`Ninja Multi-Config` 生成器，``...`` "
"中的生成器表达式使用自定义命令的“命令配置”进行评估。对于其他生成器，``...`` 的内容被正常评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:622
msgid "Toolchain And Language Expressions"
msgstr "工具链和语言表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:625
msgid "Platform"
msgstr "平台"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:629
msgid ""
"The current system's CMake platform id. See also the "
":variable:`CMAKE_SYSTEM_NAME` variable."
msgstr "当前系统的 CMake 平台 id。另请参阅 :variable:`CMAKE_SYSTEM_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:634
msgid ""
"``1`` if CMake's platform id matches any one of the entries in comma-"
"separated list ``platform_ids``, otherwise ``0``. See also the "
":variable:`CMAKE_SYSTEM_NAME` variable."
msgstr ""
"``1`` 如果 CMake 的平台 ID 与逗号分隔列表``platform_ids`` "
"中的任何一个条目匹配，否则为``0``。另请参阅 :variable:`CMAKE_SYSTEM_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:639
msgid "Compiler Version"
msgstr "编译器版本"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:641
msgid ""
"See also the :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable, which is "
"closely related to the expressions in this sub-section."
msgstr "另请参阅 :variable:`CMAKE_<LANG>_COMPILER_VERSION` 变量，它与本小节中的表达式密切相关。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:646
msgid "The version of the C compiler used."
msgstr "使用的 C 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:650
msgid ""
"``1`` if the version of the C compiler matches ``version``, otherwise "
"``0``."
msgstr "``1`` 如果 C 编译器的版本与 ``version`` 匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:654
msgid "The version of the CXX compiler used."
msgstr "使用的 CXX 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:658
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:670
msgid ""
"``1`` if the version of the CXX compiler matches ``version``, otherwise "
"``0``."
msgstr "``1`` 如果 CXX 编译器的版本与 ``version`` 匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:664
msgid "The version of the CUDA compiler used."
msgstr "使用的 CUDA 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:676
msgid "The version of the OBJC compiler used."
msgstr "使用的 OBJC 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:682
msgid ""
"``1`` if the version of the OBJC compiler matches ``version``, otherwise "
"``0``."
msgstr "``1`` 如果 OBJC 编译器的版本匹配``version``，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:688
msgid "The version of the OBJCXX compiler used."
msgstr "使用的 OBJCXX 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:694
msgid ""
"``1`` if the version of the OBJCXX compiler matches ``version``, otherwise"
" ``0``."
msgstr "``1`` 如果 OBJCXX 编译器的版本匹配``version``，否则为``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:698
msgid "The version of the Fortran compiler used."
msgstr "使用的 Fortran 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:702
msgid ""
"``1`` if the version of the Fortran compiler matches ``version``, "
"otherwise ``0``."
msgstr "``1`` 如果 Fortran 编译器的版本与 ``version`` 匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:708
msgid "The version of the HIP compiler used."
msgstr "使用的 HIP 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:714
msgid ""
"``1`` if the version of the HIP compiler matches ``version``, otherwise "
"``0``."
msgstr "如果 HIP 编译器的版本匹配“版本”，则为“1”，否则为“0”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:720
msgid "The version of the ISPC compiler used."
msgstr "使用的 ISPC 编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:726
msgid ""
"``1`` if the version of the ISPC compiler matches ``version``, otherwise "
"``0``."
msgstr "如果 ISPC 编译器的版本匹配“版本”，则为“1”，否则为“0”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:729
msgid "Compiler Language And ID"
msgstr "编译器语言和 ID"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:731
msgid ""
"See also the :variable:`CMAKE_<LANG>_COMPILER_ID` variable, which is "
"closely related to most of the expressions in this sub-section."
msgstr "另请参阅 :variable:`CMAKE_<LANG>_COMPILER_ID` 变量，它与本小节中的大多数表达式密切相关。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:736
msgid "CMake's compiler id of the C compiler used."
msgstr "使用的 C 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:740
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the C compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 C 编译器的 CMake 编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:746
msgid "CMake's compiler id of the CXX compiler used."
msgstr "使用的 CXX 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:750
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the CXX compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CXX 编译器的 CMake 编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:758
msgid "CMake's compiler id of the CUDA compiler used."
msgstr "使用的 CUDA 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:764
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the CUDA compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 CUDA 编译器编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:772
msgid "CMake's compiler id of the OBJC compiler used."
msgstr "使用的 OBJC 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:778
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the Objective-C compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 Objective-C 编译器的编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:786
msgid "CMake's compiler id of the OBJCXX compiler used."
msgstr "使用的 OBJCXX 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:792
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the Objective-C++ compiler matches any one of the entries "
"in ``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 Objective-C++ 编译器的编译器 ID 与"
" ``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:798
msgid "CMake's compiler id of the Fortran compiler used."
msgstr "使用的 Fortran 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:802
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the Fortran compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 Fortran 编译器的编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:810
msgid "CMake's compiler id of the HIP compiler used."
msgstr "使用的 HIP 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:816
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the HIP compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 HIP 编译器的编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:824
msgid "CMake's compiler id of the ISPC compiler used."
msgstr "使用的 ISPC 编译器的 CMake 编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:830
msgid ""
"where ``compiler_ids`` is a comma-separated list. ``1`` if CMake's "
"compiler id of the ISPC compiler matches any one of the entries in "
"``compiler_ids``, otherwise ``0``."
msgstr ""
"其中 ``compiler_ids`` 是以逗号分隔的列表。 ``1`` 如果 CMake 的 ISPC 编译器的编译器 ID 与 "
"``compiler_ids`` 中的任何一个条目匹配，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:838
msgid ""
"The compile language of source files when evaluating compile options. See "
":ref:`the related boolean expression <Boolean COMPILE_LANGUAGE Generator "
"Expression>` ``$<COMPILE_LANGUAGE:language>`` for notes about the "
"portability of this generator expression."
msgstr ""
"评估编译选项时源文件的编译语言。有关此生成器表达式的可移植性的注释，请参阅 :ref:`相关的布尔表达式 <Boolean "
"COMPILE_LANGUAGE Generator Expression>``$<COMPILE_LANGUAGE:language>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:850
msgid ""
"Multiple languages can be specified for ``languages``. CMake 3.14 and "
"earlier only accepted a single language."
msgstr "可以为 ``languages`` 指定多种语言。 CMake 3.14 及更早版本仅接受一种语言。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:854
msgid ""
"``1`` when the language used for compilation unit matches any of the "
"comma-separated entries in ``languages``, otherwise ``0``. This expression"
" may be used to specify compile options, compile definitions, and include "
"directories for source files of a particular language in a target. For "
"example:"
msgstr ""
"``1`` 当用于编译单元的语言与 ``languages`` 中任何逗号分隔的条目匹配时，否则为 "
"``0``。此表达式可用于指定编译选项、编译定义以及在目标中包含特定语言的源文件的目录。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:874
msgid ""
"This specifies the use of the ``-fno-exceptions`` compile option, "
"``COMPILING_CXX`` compile definition, and ``cxx_headers`` include "
"directory for C++ only (compiler id checks elided).  It also specifies a "
"``COMPILING_CUDA`` compile definition for CUDA."
msgstr ""
"这指定使用``-fno-exceptions`` 编译选项、``COMPILING_CXX`` 编译定义和``cxx_headers`` 仅包含用于"
" C++ 的目录（省略了编译器 ID 检查）。它还为 CUDA 指定了一个 ``COMPILING_CUDA`` 编译定义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:879
msgid ""
"Note that with :ref:`Visual Studio Generators` and :generator:`Xcode` "
"there is no way to represent target-wide compile definitions or include "
"directories separately for ``C`` and ``CXX`` languages. Also, with "
":ref:`Visual Studio Generators` there is no way to represent target-wide "
"flags separately for ``C`` and ``CXX`` languages.  Under these generators,"
" expressions for both C and C++ sources will be evaluated using ``CXX`` if"
" there are any C++ sources and otherwise using ``C``. A workaround is to "
"create separate libraries for each source file language instead:"
msgstr ""
"请注意，使用 :ref:`Visual Studio Generators` 和 :generator:`Xcode` "
"无法表示目标范围的编译定义，也无法为 ``C`` 和 ``CXX`` 语言单独包含目录。此外，使用 :ref:`Visual Studio "
"Generators` 无法分别为 ``C`` 和 ``CXX`` 语言表示目标范围内的标志。在这些生成器下，如果有任何 C++ 源，则将使用 "
"CXX 计算 C 和 C++ 源的表达式，否则使用 C。解决方法是为每种源文件语言创建单独的库："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:901
msgid ""
"``1`` when the language used for compilation unit matches ``language`` and"
" CMake's compiler id of the ``language`` compiler matches any one of the "
"comma-separated entries in ``compiler_ids``, otherwise ``0``. This "
"expression is a short form for the combination of "
"``$<COMPILE_LANGUAGE:language>`` and ``$<LANG_COMPILER_ID:compiler_ids>``."
" This expression may be used to specify compile options, compile "
"definitions, and include directories for source files of a particular "
"language and compiler combination in a target. For example:"
msgstr ""
"``1`` 当用于编译单元的语言与 ``language`` 匹配并且 ``language`` 编译器的 CMake 编译器 id 与 "
"``compiler_ids`` 中任何一个以逗号分隔的条目匹配时，否则为 ``0 "
"``。此表达式是“$<COMPILE_LANGUAGE:language>”和“$<LANG_COMPILER_ID:compiler_ids>”组合的缩写形式。此表达式可用于指定编译选项、编译定义，以及在目标中包含特定语言和编译器组合的源文件的目录。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:919
msgid ""
"This specifies the use of different compile definitions based on both the "
"compiler id and compilation language. This example will have a "
"``COMPILING_CXX_WITH_CLANG`` compile definition when Clang is the CXX "
"compiler, and ``COMPILING_CXX_WITH_INTEL`` when Intel is the CXX compiler."
" Likewise, when the C compiler is Clang, it will only see the "
"``COMPILING_C_WITH_CLANG`` definition."
msgstr ""
"这指定了基于编译器 ID 和编译语言的不同编译定义的使用。当 Clang 是 CXX 编译器时，这个例子将有一个 "
"``COMPILING_CXX_WITH_CLANG`` 编译定义，当 Intel 是 CXX "
"编译器时，这个例子将有一个``COMPILING_CXX_WITH_INTEL``。同样，当 C 编译器是 Clang 时，它只会看到 "
"``COMPILING_C_WITH_CLANG`` 定义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:926
msgid ""
"Without the ``COMPILE_LANG_AND_ID`` generator expression, the same logic "
"would be expressed as:"
msgstr "如果没有 ``COMPILE_LANG_AND_ID`` 生成器表达式，相同的逻辑将表示为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:938
msgid "Compile Features"
msgstr "编译功能"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:944
msgid ""
"where ``features`` is a comma-separated list. Evaluates to ``1`` if all of"
" the ``features`` are available for the 'head' target, and ``0`` "
"otherwise. If this expression is used while evaluating the link "
"implementation of a target and if any dependency transitively increases "
"the required :prop_tgt:`C_STANDARD` or :prop_tgt:`CXX_STANDARD` for the "
"'head' target, an error is reported.  See the :manual:`cmake-compile-"
"features(7)` manual for information on compile features and a list of "
"supported compilers."
msgstr ""
"其中 ``features`` "
"是以逗号分隔的列表。如果所有“功能”都可用于“head”目标，则评估为“1”，否则评估为“0”。如果在评估目标的链接实现时使用此表达式，并且如果任何依赖项传递地增加了“头”目标所需的 :prop_tgt:`C_STANDARD`"
" 或 :prop_tgt:`CXX_STANDARD`，则会报告错误。有关编译功能的信息和支持的编译器列表，请参阅 :manual:`cmake-"
"compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:954
msgid "Linker Language And ID"
msgstr "链接器语言和 ID"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:960
msgid ""
"The link language of the target when evaluating link options. See "
":ref:`the related boolean expression <Boolean LINK_LANGUAGE Generator "
"Expression>` ``$<LINK_LANGUAGE:languages>`` for notes about the "
"portability of this generator expression."
msgstr ""
"评估链接选项时目标的链接语言。有关此生成器表达式的可移植性的注释，请参阅 :ref:`相关的布尔表达式 <Boolean LINK_LANGUAGE "
"Generator Expression>``$<LINK_LANGUAGE:languages>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:967
msgid ""
"This generator expression is not supported by the link libraries "
"properties to avoid side-effects due to the double evaluation of these "
"properties."
msgstr "链接库属性不支持此生成器表达式，以避免由于对这些属性进行双重评估而产生副作用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:978
msgid ""
"``1`` when the language used for link step matches any of the comma-"
"separated entries in ``languages``, otherwise ``0``.  This expression may "
"be used to specify link libraries, link options, link directories and link"
" dependencies of a particular language in a target. For example:"
msgstr ""
"当用于链接步骤的语言与“语言”中任何以逗号分隔的条目匹配时为“1”，否则为“0”。该表达式可用于指定目标中特定语言的链接库、链接选项、链接目录和链接依赖项。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:999
msgid ""
"This specifies to use the ``api`` target for linking targets ``myapp1`` "
"and ``myapp2``. In practice, ``myapp1`` will link with target ``api_C`` "
"and option ``-opt_c`` because it will use ``C`` as link language. And "
"``myapp2`` will link with ``api_CXX`` and option ``-opt_cxx`` because "
"``CXX`` will be the link language."
msgstr ""
"这指定使用 ``api`` 目标来链接目标 ``myapp1`` 和 ``myapp2``。实际上，``myapp1`` 将与目标``api_C``"
" 和选项``-opt_c`` 链接，因为它将使用``C`` 作为链接语言。 ``myapp2`` 将与``api_CXX`` "
"和选项``-opt_cxx`` 链接，因为``CXX`` 将是链接语言。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1009
msgid ""
"To determine the link language of a target, it is required to collect, "
"transitively, all the targets which will be linked to it. So, for link "
"libraries properties, a double evaluation will be done. During the first "
"evaluation, ``$<LINK_LANGUAGE:..>`` expressions will always return ``0``. "
"The link language computed after this first pass will be used to do the "
"second pass. To avoid inconsistency, it is required that the second pass "
"do not change the link language. Moreover, to avoid unexpected side-"
"effects, it is required to specify complete entities as part of the "
"``$<LINK_LANGUAGE:..>`` expression. For example:"
msgstr ""
"为了确定目标的链接语言，需要传递地收集将链接到它的所有目标。因此，对于链接库属性，将进行双重评估。在第一次评估期间，``$<LINK_LANGUAGE:..>``"
" 表达式将始终返回 "
"``0``。第一次通过后计算出的链接语言将用于第二次通过。为避免不一致，要求第二遍不要更改链接语言。此外，为了避免意外的副作用，需要指定完整的实体作为"
" ``$<LINK_LANGUAGE:..>`` 表达式的一部分。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1032
msgid ""
"In this example, for ``myapp1``, the first pass will, unexpectedly, "
"determine that the link language is ``CXX`` because the evaluation of the "
"generator expression will be an empty string so ``myapp1`` will depends on"
" target ``lib`` which is ``C++``. On the contrary, for ``myapp2``, the "
"first evaluation will give ``C`` as link language, so the second pass will"
" correctly add target ``libother`` as link dependency."
msgstr ""
"在此示例中，对于“myapp1”，第一次通过将意外地确定链接语言为“CXX”，因为生成器表达式的评估将是一个空字符串，因此“myapp1”将取决于目标"
" ``lib`` 是 "
"``C++``。相反，对于“myapp2”，第一次评估会将“C”作为链接语言，因此第二遍将正确添加目标“libother”作为链接依赖项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1043
msgid ""
"``1`` when the language used for link step matches ``language`` and the "
"CMake's compiler id of the language linker matches any one of the comma-"
"separated entries in ``compiler_ids``, otherwise ``0``. This expression is"
" a short form for the combination of ``$<LINK_LANGUAGE:language>`` and "
"``$<LANG_COMPILER_ID:compiler_ids>``. This expression may be used to "
"specify link libraries, link options, link directories and link "
"dependencies of a particular language and linker combination in a target. "
"For example:"
msgstr ""
"``1`` 当用于链接步骤的语言与 ``language`` 匹配并且语言链接器的 CMake 编译器 ID 与 ``compiler_ids`` "
"中任何一个以逗号分隔的条目匹配时，否则为 "
"``0``。此表达式是“$<LINK_LANGUAGE:language>”和“$<LANG_COMPILER_ID:compiler_ids>”组合的缩写形式。此表达式可用于指定目标中特定语言和链接器组合的链接库、链接选项、链接目录和链接依赖项。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1068
msgid ""
"This specifies the use of different link libraries based on both the "
"compiler id and link language. This example will have target "
"``libCXX_Clang`` as link dependency when ``Clang`` or ``AppleClang`` is "
"the ``CXX`` linker, and ``libCXX_Intel`` when ``Intel`` is the ``CXX`` "
"linker. Likewise when the ``C`` linker is ``Clang`` or ``AppleClang``, "
"target ``libC_Clang`` will be added as link dependency and ``libC_Intel`` "
"when ``Intel`` is the ``C`` linker."
msgstr ""
"这指定了基于编译器标识和链接语言使用不同的链接库。当 ``Clang`` 或 ``AppleClang`` 是 ``CXX`` "
"链接器时，此示例将目标 ``libCXX_Clang`` 作为链接依赖项，当 ``Intel`` 是 `` 时，``libCXX_Intel`` "
"CXX`` 链接器。同样，当 ``C`` 链接器是 ``Clang`` 或 ``AppleClang`` 时，目标 ``libC_Clang`` "
"将被添加为链接依赖项，而 ``libC_Intel`` 当 ``Intel`` 是 `` C``链接器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1076
msgid ""
"See :ref:`the note related to <Constraints LINK_LANGUAGE Generator "
"Expression>` ``$<LINK_LANGUAGE:language>`` for constraints about the usage"
" of this generator expression."
msgstr ""
"请参阅 :ref:`与 <Constraints LINK_LANGUAGE Generator Expression>` "
"``$<LINK_LANGUAGE:language> 相关的说明以了解有关此生成器表达式的使用的限制。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1082
msgid "Link Features"
msgstr "链接功能"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1088
msgid ""
"Specify a set of libraries to link to a target, along with a ``feature`` "
"which provides details about *how* they should be linked.  For example:"
msgstr "指定一组链接到目标的库，以及提供有关*如何*它们应该链接的详细信息的“功能”。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1097
msgid ""
"This specifies that ``lib2`` should link to ``lib1`` and use the "
"``WHOLE_ARCHIVE`` feature when doing so."
msgstr "这指定 ``lib2`` 应该链接到 ``lib1`` 并在这样做时使用 ``WHOLE_ARCHIVE`` 特性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1100
msgid ""
"Feature names are case-sensitive and may only contain letters, numbers and"
" underscores.  Feature names defined in all uppercase are reserved for "
"CMake's own built-in features.  The pre-defined built-in library features "
"are:"
msgstr "功能名称区分大小写，并且只能包含字母、数字和下划线。全部大写定义的功能名称保留给 CMake 自己的内置功能。预定义的内置库功能是："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:5
msgid "``DEFAULT``"
msgstr "``默认``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:2
msgid ""
"This feature corresponds to standard linking, essentially equivalent to "
"using no feature at all.  It is typically only used with the "
":prop_tgt:`LINK_LIBRARY_OVERRIDE` and "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties."
msgstr ""
"此功能对应于标准链接，本质上相当于根本不使用任何功能。它通常只与 :prop_tgt:`LINK_LIBRARY_OVERRIDE` "
"和 :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` 目标属性一起使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:22
msgid "``WHOLE_ARCHIVE``"
msgstr "``WHOLE_ARCHIVE``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:8
msgid ""
"Force inclusion of all members of a static library.  This feature is only "
"supported for the following platforms, with limitations as noted:"
msgstr "强制包含静态库的所有成员。仅以下平台支持此功能，但有如下限制："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:11
msgid "Linux."
msgstr "Linux。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:12
msgid "All BSD variants."
msgstr "所有 BSD 变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:13
msgid "SunOS."
msgstr "太阳操作系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:14
msgid ""
"All Apple variants.  The library must be specified as a CMake target name,"
" a library file name (such as ``libfoo.a``), or a library file path (such "
"as ``/path/to/libfoo.a``).  Due to a limitation of the Apple linker, it "
"cannot be specified as a plain library name like ``foo``, where ``foo`` is"
" not a CMake target."
msgstr ""
"所有 Apple 变体。库必须指定为 CMake 目标名称、库文件名（例如 ``libfoo.a``）或库文件路径（例如 "
"``/path/to/libfoo.a``）。由于 Apple 链接器的限制，它不能被指定为像 ``foo`` 这样的普通库名称，其中 "
"``foo`` 不是 CMake 目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:19
msgid ""
"Windows.  When using a MSVC or MSVC-like toolchain, the MSVC version must "
"be greater than 1900."
msgstr "视窗。使用 MSVC 或类似 MSVC 的工具链时，MSVC 版本必须大于 1900。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:21
msgid "Cygwin."
msgstr "西格温。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:22
msgid "MSYS."
msgstr "系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:65
msgid "``FRAMEWORK``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:25
msgid ""
"This option tells the linker to search for the specified framework using "
"the ``-framework`` linker option.  It can only be used on Apple platforms,"
" and only with a linker that understands the option used (i.e. the linker "
"provided with Xcode, or one compatible with it)."
msgstr ""
"此选项告诉链接器使用“-framework”链接器选项搜索指定的框架。它只能在 Apple 平台上使用，并且只能与理解所用选项的链接器一起使用（即 "
"Xcode 提供的链接器，或与之兼容的链接器）。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:30
msgid ""
"The framework can be specified as a CMake framework target, a bare "
"framework name, or a file path.  If a target is given, that target must "
"have the :prop_tgt:`FRAMEWORK` target property set to true.  For a file "
"path, if it contains a directory part, that directory will be added as a "
"framework search path."
msgstr ""
"框架可以指定为 CMake 框架目标、裸框架名称或文件路径。如果给出了目标，则该目标必须将 :prop_tgt:`FRAMEWORK` "
"目标属性设置为 true。对于文件路径，如果它包含目录部分，则该目录将被添加为框架搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:44
msgid ""
"File paths must conform to one of the following patterns (``*`` is a "
"wildcard, and optional parts are shown as ``[...]``):"
msgstr "文件路径必须符合以下模式之一（``*`` 为通配符，可选部分显示为``[...]``）："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:47
msgid "``[/path/to/]FwName[.framework]``"
msgstr "``[/path/to/]FwName[.framework]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:48
msgid "``[/path/to/]FwName.framework/FwName[suffix]``"
msgstr "``[/path/to/]FwName.framework/FwName[后缀]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:49
msgid "``[/path/to/]FwName.framework/Versions/*/FwName[suffix]``"
msgstr "``[/path/to/]FwName.framework/Versions/*/FwName[后缀]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:51
msgid ""
"Note that CMake recognizes and automatically handles framework targets, "
"even without using the :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` expression. "
"The generator expression can still be used with a CMake target if the "
"project wants to be explicit about it, but it is not required to do so. "
"The linker command line may have some differences between using the "
"generator expression or not, but the final result should be the same. On "
"the other hand, if a file path is given, CMake will recognize some paths "
"automatically, but not all cases.  The project may want to use "
":genex:`$<LINK_LIBRARY:FRAMEWORK,...>` for file paths so that the expected"
" behavior is clear."
msgstr ""
"请注意，即使不使用 :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` 表达式，CMake "
"也会识别并自动处理框架目标。如果项目想要对其进行明确说明，生成器表达式仍然可以与 CMake "
"目标一起使用，但这不是必需的。链接器命令行使用与不使用生成器表达式可能会有一些差异，但最终结果应该是一样的。另一方面，如果给定文件路径，CMake "
"会自动识别某些路径，但不是所有情况。该项目可能希望使用 :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` "
"作为文件路径，以便明确预期的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:62
msgid ""
"The :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property as"
" well as the ``suffix`` of the framework library name are now supported by"
" the ``FRAMEWORK`` features."
msgstr ""
"``FRAMEWORK`` 功能现在支持 :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` "
"目标属性以及框架库名称的 ``suffix``。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:71
msgid "``NEEDED_FRAMEWORK``"
msgstr "``NEEDED_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:68
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it forces the linker "
"to link with the framework even if no symbols are used from it.  It uses "
"the ``-needed_framework`` option and has the same linker constraints as "
"``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"功能，除了它强制链接器与框架链接，即使没有使用它的符号。它使用“-needed_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:77
msgid "``REEXPORT_FRAMEWORK``"
msgstr "``REEXPORT_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:74
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it tells the linker "
"that the framework should be available to clients linking to the library "
"being created.  It uses the ``-reexport_framework`` option and has the "
"same linker constraints as ``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"特性，除了它告诉链接器框架应该对链接到正在创建的库的客户端可用。它使用“-reexport_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:83
msgid "``WEAK_FRAMEWORK``"
msgstr "``弱框架``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:80
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it forces the linker "
"to mark the framework and all references to it as weak imports.  It uses "
"the ``-weak_framework`` option and has the same linker constraints as "
"``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"特性，除了它强制链接器将框架和所有对它的引用标记为弱导入。它使用“-weak_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:89
msgid "``NEEDED_LIBRARY``"
msgstr "``NEEDED_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:86
msgid ""
"This is similar to the ``NEEDED_FRAMEWORK`` feature, except it is for use "
"with non-framework targets or libraries (Apple platforms only). It uses "
"the ``-needed_library`` or ``-needed-l`` option as appropriate, and has "
"the same linker constraints as ``NEEDED_FRAMEWORK``."
msgstr ""
"这类似于 ``NEEDED_FRAMEWORK`` 功能，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-needed_library”或“-needed-l”选项，并具有与“NEEDED_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:95
msgid "``REEXPORT_LIBRARY``"
msgstr "``REEXPORT_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:92
msgid ""
"This is similar to the ``REEXPORT_FRAMEWORK`` feature,  except it is for "
"use with non-framework targets or libraries (Apple platforms only). It "
"uses the ``-reexport_library`` or ``-reexport-l`` option as appropriate, "
"and has the same linker constraints as ``REEXPORT_FRAMEWORK``."
msgstr ""
"这类似于 REEXPORT_FRAMEWORK 功能，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-reexport_library”或“-reexport-l”选项，并具有与“REEXPORT_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:101
msgid "``WEAK_LIBRARY``"
msgstr "``WEAK_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:98
msgid ""
"This is similar to the ``WEAK_FRAMEWORK`` feature, except it is for use "
"with non-framework targets or libraries (Apple platforms only). It uses "
"the ``-weak_library`` or ``-weak-l`` option as appropriate, and has the "
"same linker constraints as ``WEAK_FRAMEWORK``."
msgstr ""
"这类似于 ``WEAK_FRAMEWORK`` 特性，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-weak_library”或“-weak-l”选项，并具有与“WEAK_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1106
msgid ""
"Built-in and custom library features are defined in terms of the following"
" variables:"
msgstr "内置和自定义库功能根据以下变量定义："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1109
msgid ":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`"
msgstr ":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1110
msgid ":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>`"
msgstr ":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1111
msgid ":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`"
msgstr ":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1112
msgid ":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>`"
msgstr ":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1114
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1206
msgid ""
"The value used for each of these variables is the value as set at the end "
"of the directory scope in which the target was created.  The usage is as "
"follows:"
msgstr "用于这些变量中的每一个的值是在创建目标的目录范围末尾设置的值。用法如下："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1117
msgid ""
"If the language-specific "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable "
"is true, the ``feature`` must be defined by the corresponding "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` variable."
msgstr ""
"如果特定语言 :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"变量为真，则 ``feature`` 必须由相应的 "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` 变量定义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1121
msgid ""
"If no language-specific ``feature`` is supported, then the "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable must be "
"true and the ``feature`` must be defined by the corresponding "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variable."
msgstr ""
"如果不支持特定语言的“功能”，则 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"变量必须为真，并且“功能”必须由相应的 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE> 定义`变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1126
msgid "The following limitations should be noted:"
msgstr "应注意以下限制："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1128
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1304
msgid ""
"The ``library-list`` can specify CMake targets or libraries. Any CMake "
"target of type :ref:`OBJECT <Object Libraries>` or :ref:`INTERFACE "
"<Interface Libraries>` will ignore the feature aspect of the expression "
"and instead be linked in the standard way."
msgstr ""
"``library-list`` 可以指定 CMake 目标或库。任何类型为 :ref:`OBJECT <Object Libraries>` 或 "
":ref:`INTERFACE <Interface Libraries>` 的 CMake 目标都将忽略表达式的特征方面，而是以标准方式链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1133
msgid ""
"The ``$<LINK_LIBRARY:...>`` generator expression can only be used to "
"specify link libraries.  In practice, this means it can appear in the "
":prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`, and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT`  target properties, and be "
"specified in :command:`target_link_libraries` and "
":command:`link_libraries` commands."
msgstr ""
"``$<LINK_LIBRARY:...>`` "
"生成器表达式只能用于指定链接库。实际上，这意味着它可以出现在 :prop_tgt:`LINK_LIBRARIES`、 :prop_tgt:`INTERFACE_LINK_LIBRARIES`"
" 和 :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` "
"目标属性中，并在 :command:`target_link_libraries` 和 :command:`link_libraries 中指定`命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1140
msgid ""
"If a ``$<LINK_LIBRARY:...>`` generator expression appears in the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property of a target, it will be "
"included in the imported target generated by a :command:`install(EXPORT)` "
"command.  It is the responsibility of the environment consuming this "
"import to define the link feature used by this expression."
msgstr ""
"如果 ``$<LINK_LIBRARY:...>`` 生成器表达式出现在目标的 INTERFACE_LINK_LIBRARIES` "
"属性中，它将包含在 :command:`install(EXPORT)` 生成的导入目标中命令。使用此导入的环境负责定义此表达式使用的链接功能。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1146
msgid ""
"Each target or library involved in the link step must have at most only "
"one kind of library feature.  The absence of a feature is also "
"incompatible with all other features.  For example:"
msgstr "链接步骤中涉及的每个目标或库最多只能具有一种库功能。缺少某个功能也与所有其他功能不兼容。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1163
msgid ""
"Where it isn't possible to use the same feature throughout a build for a "
"given target or library, the :prop_tgt:`LINK_LIBRARY_OVERRIDE` and "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties can be used "
"to resolve such incompatibilities."
msgstr ""
"如果无法在给定目标或库的整个构建过程中使用相同的功能，可以使用 LINK_LIBRARY_OVERRIDE 和 "
"LINK_LIBRARY_OVERRIDE_<LIBRARY> 目标属性来解决此类不兼容问题。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1168
msgid ""
"The ``$<LINK_LIBRARY:...>`` generator expression does not guarantee that "
"the list of specified targets and libraries will be kept grouped together."
"  To manage constructs like ``--start-group`` and ``--end-group``, as "
"supported by the GNU ``ld`` linker, use the :genex:`LINK_GROUP` generator "
"expression instead."
msgstr ""
"``$<LINK_LIBRARY:...>`` 生成器表达式不保证指定目标和库的列表将保持分组在一起。要管理 GNU ``ld`` "
"链接器支持的``--start-group`` 和``--end-group`` 等构造，请改用 :genex:`LINK_GROUP` "
"生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1178
msgid ""
"Specify a group of libraries to link to a target, along with a ``feature``"
" which defines how that group should be linked.  For example:"
msgstr "指定一组链接到目标的库，以及定义该组应如何链接的“功能”。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1187
msgid ""
"This specifies that ``lib2`` should link to ``lib1`` and ``external``, and"
" that both of those two libraries should be included on the linker command"
" line according to the definition of the ``RESCAN`` feature."
msgstr ""
"这指定 ``lib2`` 应该链接到 ``lib1`` 和 ``external``，并且根据 ``RESCAN`` "
"特性的定义，这两个库都应该包含在链接器命令行中."

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1191
msgid ""
"Feature names are case-sensitive and may only contain letters, numbers and"
" underscores.  Feature names defined in all uppercase are reserved for "
"CMake's own built-in features.  Currently, there is only one pre-defined "
"built-in group feature:"
msgstr ""
"功能名称区分大小写，并且只能包含字母、数字和下划线。全部大写定义的功能名称保留给 CMake 自己的内置功能。目前，只有一个预定义的内置组功能："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:22
msgid "``RESCAN``"
msgstr "``重新扫描``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:2
msgid ""
"Some linkers are single-pass only.  For such linkers, circular references "
"between libraries typically result in unresolved symbols.  This feature "
"instructs the linker to search the specified static libraries repeatedly "
"until no new undefined references are created."
msgstr ""
"一些链接器仅是单程的。对于此类链接器，库之间的循环引用通常会导致无法解析的符号。此功能指示链接器重复搜索指定的静态库，直到没有创建新的未定义引用为止。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:7
msgid ""
"Normally, a static library is searched only once in the order that it is "
"specified on the command line.  If a symbol in that library is needed to "
"resolve an undefined symbol referred to by an object in a library that "
"appears later on the command line, the linker would not be able to resolve"
" that reference.  By grouping the static libraries with the ``RESCAN`` "
"feature, they will all be searched repeatedly until all possible "
"references are resolved.  This will use linker options like ``--start-"
"group`` and ``--end-group``, or on SunOS, ``-z rescan-start`` and ``-z "
"rescan-end``."
msgstr ""
"通常，静态库只会按照在命令行中指定的顺序搜索一次。如果需要该库中的符号来解析由稍后出现在命令行中的库中的对象引用的未定义符号，则链接器将无法解析该引用。通过使用"
" ``RESCAN`` 特性对静态库进行分组，它们将被重复搜索，直到所有可能的引用都被解析。这将使用链接器选项，如``--start-group``"
" 和``--end-group``，或在 SunOS 上，``-z rescan-start`` 和``-z rescan-end``。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:16
msgid ""
"Using this feature has a significant performance cost. It is best to use "
"it only when there are unavoidable circular references between two or more"
" static libraries."
msgstr "使用此功能会产生显着的性能成本。最好只在两个或多个静态库之间存在不可避免的循环引用时才使用它。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:20
msgid ""
"This feature is available when using toolchains that target Linux, BSD, "
"and SunOS.  It can also be used when targeting Windows platforms if the "
"GNU toolchain is used."
msgstr ""
"当使用面向 Linux、BSD 和 SunOS 的工具链时，此功能可用。如果使用 GNU 工具链，它也可以在针对 Windows 平台时使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1198
msgid ""
"Built-in and custom group features are defined in terms of the following "
"variables:"
msgstr "内置和自定义组功能根据以下变量定义："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1201
msgid ":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`"
msgstr ":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1202
msgid ":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>`"
msgstr ":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1203
msgid ":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED`"
msgstr ":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1204
msgid ":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>`"
msgstr ":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1209
msgid ""
"If the language-specific "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable is "
"true, the ``feature`` must be defined by the corresponding "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` variable."
msgstr ""
"如果特定于语言的 :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` "
"变量为真，则 ``feature`` 必须由相应的 "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` 变量定义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1213
msgid ""
"If no language-specific ``feature`` is supported, then the "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable must be "
"true and the ``feature`` must be defined by the corresponding "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variable."
msgstr ""
"如果不支持特定语言的“功能”，则 :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` "
"变量必须为真，并且“功能”必须由相应的 :variable:`CMAKE_LINK_GROUP_USING_<FEATURE> 定义`变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1218
msgid ""
"The ``LINK_GROUP`` generator expression is compatible with the "
":genex:`LINK_LIBRARY` generator expression. The libraries involved in a "
"group can be specified using the :genex:`LINK_LIBRARY` generator "
"expression."
msgstr ""
"``LINK_GROUP`` 生成器表达式与 :genex:`LINK_LIBRARY` 生成器表达式兼容。可以使用 LINK_LIBRARY "
"生成器表达式指定组中涉及的库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1222
msgid ""
"Each target or external library involved in the link step is allowed to be"
" part of multiple groups, but only if all the groups involved specify the "
"same ``feature``.  Such groups will not be merged on the linker command "
"line, the individual groups will still be preserved.  Mixing different "
"group features for the same target or library is forbidden."
msgstr ""
"链接步骤中涉及的每个目标或外部库都允许成为多个组的一部分，但前提是所有涉及的组都指定相同的“功能”。此类组不会在链接器命令行上合并，单个组仍会保留。禁止为同一目标或库混合不同的组特征。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1245
msgid ""
"When a target or an external library is involved in the link step as part "
"of a group and also as not part of any group, any occurrence of the non-"
"group link item will be replaced by the groups it belongs to."
msgstr "当目标或外部库作为组的一部分并且不属于任何组的一部分参与链接步骤时，非组链接项的任何出现都将被其所属的组替换。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1261
msgid ""
"Because ``lib1`` is part of the group defined for ``lib4``, that group "
"then gets applied back to the use of ``lib1`` for ``lib3``.  The end "
"result will be as though the linking relationship for ``lib3`` had been "
"specified as:"
msgstr ""
"因为 ``lib1`` 是为 ``lib4`` 定义的组的一部分，所以该组将被应用回用于 ``lib3`` 的 ``lib1``。最终结果就像 "
"``lib3`` 的链接关系被指定为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1269
msgid ""
"Be aware that the precedence of the group over the non-group link item can"
" result in circular dependencies between groups.  If this occurs, a fatal "
"error is raised because circular dependencies are not allowed for groups."
msgstr "请注意，组优先于非组链接项可能会导致组之间的循环依赖关系。如果发生这种情况，则会引发致命错误，因为组不允许循环依赖。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1291
msgid ""
"Because of the groups defined for ``lib3``, the linking relationships for "
"``lib1A`` and ``lib2B`` effectively get expanded to the equivalent of:"
msgstr "由于为 ``lib3`` 定义的组，``lib1A`` 和 ``lib2B`` 的链接关系有效地扩展为等同于："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1299
msgid ""
"This creates a circular dependency between groups: ``lib1A --> lib2B --> "
"lib1A``."
msgstr "这会在组之间创建循环依赖：``lib1A --> lib2B --> lib1A``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1302
msgid "The following limitations should also be noted:"
msgstr "还应注意以下限制："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1309
msgid ""
"The ``$<LINK_GROUP:...>`` generator expression can only be used to specify"
" link libraries.  In practice, this means it can appear in the "
":prop_tgt:`LINK_LIBRARIES`, :prop_tgt:`INTERFACE_LINK_LIBRARIES`,and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target properties, and be "
"specified in :command:`target_link_libraries` and "
":command:`link_libraries` commands."
msgstr ""
"``$<LINK_GROUP:...>`` "
"生成器表达式只能用于指定链接库。实际上，这意味着它可以出现在 :prop_tgt:`LINK_LIBRARIES`、 :prop_tgt:`INTERFACE_LINK_LIBRARIES`"
" 和 :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` "
"目标属性中，并在 :command:`target_link_libraries` 和 :command:`link_libraries 中指定`命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1316
msgid ""
"If a ``$<LINK_GROUP:...>`` generator expression appears in the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property of a target, it will be "
"included in the imported target generated by a :command:`install(EXPORT)` "
"command.  It is the responsibility of the environment consuming this "
"import to define the link feature used by this expression."
msgstr ""
"如果 ``$<LINK_GROUP:...>`` 生成器表达式出现在目标的 INTERFACE_LINK_LIBRARIES` 属性中，它将包含在 "
":command:`install(EXPORT)` 生成的导入目标中命令。使用此导入的环境负责定义此表达式使用的链接功能。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1323
msgid "Link Context"
msgstr "链接上下文"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1329
msgid ""
"Content of ``...``, except while collecting :ref:`Target Usage "
"Requirements`, in which case it is the empty string.  This is intended for"
" use in an :prop_tgt:`INTERFACE_LINK_LIBRARIES` target property, typically"
" populated via the :command:`target_link_libraries` command, to specify "
"private link dependencies without other usage requirements."
msgstr ""
"``...`` 的内容，收集 :ref:`Target Usage Requirements` 时除外，在这种情况下它是空字符串。这旨在用于 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` 目标属性，通常通过 "
":command:`target_link_libraries` 命令填充，以指定没有其他使用要求的私有链接依赖项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1335
msgid ""
"``LINK_ONLY`` may also be used in a :prop_tgt:`LINK_LIBRARIES` target "
"property.  See policy :policy:`CMP0131`."
msgstr ""
"``LINK_ONLY`` 也可以在 :prop_tgt:`LINK_LIBRARIES` 目标属性中使用。请参阅政策:policy:`CMP0131`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1343
msgid ""
"Returns the list if it is the device link step, an empty list otherwise. "
"The device link step is controlled by "
":prop_tgt:`CUDA_SEPARABLE_COMPILATION` and "
":prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy "
":policy:`CMP0105`. This expression can only be used to specify link "
"options."
msgstr ""
"如果是设备链接步骤则返回列表，否则返回空列表。设备链接步骤由 CUDA_SEPARABLE_COMPILATION 和 "
"CUDA_RESOLVE_DEVICE_SYMBOLS 属性和策略 CMP0105 控制。该表达式只能用于指定链接选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1353
msgid ""
"Returns the list if it is the normal link step, an empty list otherwise. "
"This expression is mainly useful when a device link step is also involved "
"(see :genex:`$<DEVICE_LINK:list>` generator expression). This expression "
"can only be used to specify link options."
msgstr ""
"如果是正常链接步骤，则返回列表，否则返回空列表。当还涉及设备链接步骤时，此表达式主要有用（请参阅 "
":genex:`$<DEVICE_LINK:list>` 生成器表达式）。该表达式只能用于指定链接选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1362
msgid "Target-Dependent Expressions"
msgstr "目标相关表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1364
msgid ""
"These queries refer to a target ``tgt``. Unless otherwise stated, this can"
" be any runtime artifact, namely:"
msgstr "这些查询引用目标“tgt”。除非另有说明，这可以是任何运行时工件，即："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1367
msgid "An executable target created by :command:`add_executable`."
msgstr "由 :command:`add_executable` 创建的可执行目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1368
msgid ""
"A shared library target (``.so``, ``.dll`` but not their ``.lib`` import "
"library) created by :command:`add_library`."
msgstr ""
"由 :command:`add_library` 创建的共享库目标（``.so``、``.dll`` 但不是它们的``.lib`` 导入库）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1370
msgid "A static library target created by :command:`add_library`."
msgstr "由 :command:`add_library` 创建的静态库目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1372
msgid ""
"In the following, the phrase \"the ``tgt`` filename\" means the name of "
"the ``tgt`` binary file. This has to be distinguished from the phrase "
"\"the target name\", which is just the string ``tgt``."
msgstr ""
"在下文中，短语“the ``tgt`` filename”表示 ``tgt`` "
"二进制文件的名称。这必须与短语“目标名称”区分开来，后者只是字符串“tgt”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1380
msgid "``1`` if ``tgt`` exists as a CMake target, else ``0``."
msgstr "``1`` 如果``tgt`` 作为 CMake 目标存在，否则为 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1386
msgid ""
"The target name ``tgt`` if the target exists, an empty string otherwise."
msgstr "如果目标存在，则为目标名称“tgt”，否则为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1388
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1401
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1458
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1469
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1480
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1521
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1533
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1547
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1609
msgid ""
"Note that ``tgt`` is not added as a dependency of the target this "
"expression is evaluated on."
msgstr "请注意，``tgt`` 不会添加为该表达式所评估的目标的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1393
msgid ""
"Marks ``...`` as being the name of a target.  This is required if "
"exporting targets to multiple dependent export sets.  The ``...`` must be "
"a literal name of a target, it may not contain generator expressions."
msgstr ""
"将 ``...`` 标记为目标的名称。如果将目标导出到多个相关导出集，则这是必需的。 ``...`` 必须是目标的文字名称，它不能包含生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1399
msgid "Value of the property ``prop`` on the target ``tgt``."
msgstr "目标“tgt”上的属性“prop”的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1404
msgid ""
"When encountered during evaluation of :ref:`Target Usage Requirements`, "
"typically in an ``INTERFACE_*`` target property, lookup of the ``tgt`` "
"name occurs in the directory of the target specifying the requirement, "
"rather than the directory of the consuming target for which the expression"
" is being evaluated."
msgstr ""
"在评估 :ref:`Target Usage Requirements` 期间遇到时，通常在 ``INTERFACE_*`` "
"目标属性中，``tgt`` 名称的查找发生在指定要求的目标目录中，而不是目录中正在评估表达式的消费目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1413
msgid ""
"Value of the property ``prop`` on the target for which the expression is "
"being evaluated. Note that for generator expressions in :ref:`Target Usage"
" Requirements` this is the consuming target rather than the target "
"specifying the requirement."
msgstr ""
"正在评估表达式的目标上属性“prop”的值。请注意，对于 :ref:`Target Usage Requirements` "
"中的生成器表达式，这是使用目标而不是指定要求的目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1422
msgid ""
"List of objects resulting from building ``tgt``.  This would typically be "
"used on :ref:`object library <Object Libraries>` targets."
msgstr "构建“tgt”产生的对象列表。这通常用于 :ref:`object library <Object Libraries>` 目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1427
msgid ""
"``1`` if the ``policy`` was ``NEW`` when the 'head' target was created, "
"else ``0``.  If the ``policy`` was not set, the warning message for the "
"policy will be emitted. This generator expression only works for a subset "
"of policies."
msgstr ""
"如果创建“head”目标时“policy”为“NEW”，则为“1”，否则为“0”。如果未设置 "
"``policy``，将发出该策略的警告消息。此生成器表达式仅适用于策略的子集。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1434
msgid "Full path to the ``tgt`` binary file."
msgstr "``tgt`` 二进制文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1436
msgid ""
"Note that ``tgt`` is not added as a dependency of the target this "
"expression is evaluated on, unless the expression is being used in "
":command:`add_custom_command` or :command:`add_custom_target`."
msgstr ""
"请注意，``tgt`` 不会添加为该表达式所评估的目标的依赖项，除非该表达式正在 :command:`add_custom_command` 或 "
":command:`add_custom_target` 中使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1444
msgid ""
"Base name of ``tgt``, i.e. ``$<TARGET_FILE_NAME:tgt>`` without prefix and "
"suffix. For example, if the ``tgt`` filename is ``libbase.so``, the base "
"name is ``base``."
msgstr ""
"``tgt`` 的基本名称，即没有前缀和后缀的 ``$<TARGET_FILE_NAME:tgt>``。例如，如果 ``tgt`` 文件名为 "
"``libbase.so``，则基本名称为 ``base``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1448
msgid ""
"See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`, "
":prop_tgt:`LIBRARY_OUTPUT_NAME` and :prop_tgt:`RUNTIME_OUTPUT_NAME` target"
" properties and their configuration specific variants "
":prop_tgt:`OUTPUT_NAME_<CONFIG>`, "
":prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`, "
":prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` and "
":prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`."
msgstr ""
"另请参阅:prop_tgt:`OUTPUT_NAME`、:prop_tgt:`ARCHIVE_OUTPUT_NAME`、:prop_tgt:`LIBRARY_OUTPUT_NAME`"
" 和:prop_tgt:`RUNTIME_OUTPUT_NAME` "
"目标属性及其配置特定变体:prop_tgt:`OUTPUT_NAME_<CONFIG>`、:prop_tgt: "
"`ARCHIVE_OUTPUT_NAME_<CONFIG>`、 :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` 和 "
":prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1455
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1518
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1606
msgid ""
"The :prop_tgt:`<CONFIG>_POSTFIX` and :prop_tgt:`DEBUG_POSTFIX` target "
"properties can also be considered."
msgstr ":prop_tgt:`<CONFIG>_POSTFIX` 和 :prop_tgt:`DEBUG_POSTFIX` 目标属性也可以考虑。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1465
msgid "Prefix of the ``tgt`` filename (such as ``lib``)."
msgstr "``tgt`` 文件名的前缀（例如 ``lib``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1467
msgid "See also the :prop_tgt:`PREFIX` target property."
msgstr "另请参阅 :prop_tgt:`PREFIX` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1476
msgid ""
"Suffix of the ``tgt`` filename (extension such as ``.so`` or ``.exe``)."
msgstr "``tgt`` 文件名的后缀（扩展名为 ``.so`` 或 ``.exe``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1478
msgid "See also the :prop_tgt:`SUFFIX` target property."
msgstr "另请参阅 :prop_tgt:`SUFFIX` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1485
msgid "The ``tgt`` filename."
msgstr "``tgt`` 文件名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1487
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1494
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1554
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1561
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1571
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1578
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1618
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1627
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1638
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1648
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1662
msgid ""
"Note that ``tgt`` is not added as a dependency of the target this "
"expression is evaluated on (see policy :policy:`CMP0112`)."
msgstr "请注意，``tgt`` 不会添加为该表达式所评估的目标的依赖项（请参阅策略:policy:`CMP0112`）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1492
msgid "Directory of the ``tgt`` binary file."
msgstr "``tgt`` 二进制文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1499
msgid ""
"File used when linking to the ``tgt`` target.  This will usually be the "
"library that ``tgt`` represents (``.a``, ``.lib``, ``.so``), but for a "
"shared library on DLL platforms, it would be the ``.lib`` import library "
"associated with the DLL."
msgstr ""
"链接到“tgt”目标时使用的文件。这通常是 ``tgt`` 代表的库（``.a``、``.lib``、``.so``），但对于 DLL "
"平台上的共享库，它将是 ` `.lib`` 导入与 DLL 关联的库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1508
msgid ""
"Base name of file used to link the target ``tgt``, i.e. "
"``$<TARGET_LINKER_FILE_NAME:tgt>`` without prefix and suffix. For example,"
" if target file name is ``libbase.a``, the base name is ``base``."
msgstr ""
"用于链接目标 ``tgt`` 的文件的基本名称，即 ``$<TARGET_LINKER_FILE_NAME:tgt>`` "
"没有前缀和后缀。例如，如果目标文件名为 ``libbase.a``，则基本名称为 ``base``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1512
msgid ""
"See also the :prop_tgt:`OUTPUT_NAME`, :prop_tgt:`ARCHIVE_OUTPUT_NAME`, and"
" :prop_tgt:`LIBRARY_OUTPUT_NAME` target properties and their configuration"
" specific variants :prop_tgt:`OUTPUT_NAME_<CONFIG>`, "
":prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` and "
":prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`."
msgstr ""
"另请参阅:prop_tgt:`OUTPUT_NAME`、:prop_tgt:`ARCHIVE_OUTPUT_NAME` "
"和:prop_tgt:`LIBRARY_OUTPUT_NAME` "
"目标属性及其配置特定变体:prop_tgt:`OUTPUT_NAME_<CONFIG>`、:prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`和"
" :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1528
msgid "Prefix of file used to link target ``tgt``."
msgstr "用于链接目标“tgt”的文件前缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1530
msgid ""
"See also the :prop_tgt:`PREFIX` and :prop_tgt:`IMPORT_PREFIX` target "
"properties."
msgstr "另请参阅 :prop_tgt:`PREFIX` 和 :prop_tgt:`IMPORT_PREFIX` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1540
msgid "Suffix of file used to link where ``tgt`` is the name of a target."
msgstr "用于链接的文件后缀，其中“tgt”是目标名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1542
msgid "The suffix corresponds to the file extension (such as \".so\" or \".lib\")."
msgstr "后缀对应于文件扩展名（例如“.so”或“.lib”）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1544
msgid ""
"See also the :prop_tgt:`SUFFIX` and :prop_tgt:`IMPORT_SUFFIX` target "
"properties."
msgstr "另请参阅 :prop_tgt:`SUFFIX` 和 :prop_tgt:`IMPORT_SUFFIX` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1552
msgid "Name of file used to link target ``tgt``."
msgstr "用于链接目标“tgt”的文件名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1559
msgid "Directory of file used to link target ``tgt``."
msgstr "用于链接目标“tgt”的文件目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1566
msgid "File with soname (``.so.3``) where ``tgt`` is the name of a target."
msgstr "带有 soname (``.so.3``) 的文件，其中 ``tgt`` 是目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1569
msgid "Name of file with soname (``.so.3``)."
msgstr "带有 soname 的文件名（``.so.3``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1576
msgid "Directory of with soname (``.so.3``)."
msgstr "soname 的目录（``.so.3``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1585
msgid ""
"Full path to the linker generated program database file (.pdb) where "
"``tgt`` is the name of a target."
msgstr "链接器生成的程序数据库文件 (.pdb) 的完整路径，其中“tgt”是目标名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1588
msgid ""
"See also the :prop_tgt:`PDB_NAME` and :prop_tgt:`PDB_OUTPUT_DIRECTORY` "
"target properties and their configuration specific variants "
":prop_tgt:`PDB_NAME_<CONFIG>` and "
":prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`."
msgstr ""
"另请参阅 :prop_tgt:`PDB_NAME` 和 :prop_tgt:`PDB_OUTPUT_DIRECTORY` "
"目标属性及其配置特定变体 :prop_tgt:`PDB_NAME_<CONFIG>` "
"和 :prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1596
msgid ""
"Base name of the linker generated program database file (.pdb) where "
"``tgt`` is the name of a target."
msgstr "链接器生成的程序数据库文件 (.pdb) 的基本名称，其中“tgt”是目标名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1599
msgid ""
"The base name corresponds to the target PDB file name (see "
"``$<TARGET_PDB_FILE_NAME:tgt>``) without prefix and suffix. For example, "
"if target file name is ``base.pdb``, the base name is ``base``."
msgstr ""
"基本名称对应于目标 PDB 文件名（参见 ``$<TARGET_PDB_FILE_NAME:tgt>``），不带前缀和后缀。例如，如果目标文件名为 "
"``base.pdb``，则基本名称为 ``base``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1603
msgid ""
"See also the :prop_tgt:`PDB_NAME` target property and its configuration "
"specific variant :prop_tgt:`PDB_NAME_<CONFIG>`."
msgstr "另请参阅:prop_tgt:`PDB_NAME` 目标属性及其配置特定变体:prop_tgt:`PDB_NAME_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1616
msgid "Name of the linker generated program database file (.pdb)."
msgstr "链接器生成的程序数据库文件 (.pdb) 的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1625
msgid "Directory of the linker generated program database file (.pdb)."
msgstr "链接器生成的程序数据库文件 (.pdb) 的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1634
msgid ""
"Full path to the bundle directory (``/path/to/my.app``, "
"``/path/to/my.framework``, or ``/path/to/my.bundle``), where ``tgt`` is "
"the name of a target."
msgstr ""
"包目录的完整路径（``/path/to/my.app``、``/path/to/my.framework`` 或 "
"``/path/to/my.bundle``），其中 ` `tgt`` 是目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1645
msgid ""
"Name of the bundle directory (``my.app``, ``my.framework``, or "
"``my.bundle``), where ``tgt`` is the name of a target."
msgstr ""
"包目录的名称（``my.app``、``my.framework`` 或``my.bundle``），其中``tgt`` 是目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1655
msgid ""
"Full path to the bundle content directory where ``tgt`` is the name of a "
"target.  For the macOS SDK it leads to ``/path/to/my.app/Contents``, "
"``/path/to/my.framework``, or ``/path/to/my.bundle/Contents``. For all "
"other SDKs (e.g. iOS) it leads to ``/path/to/my.app``, "
"``/path/to/my.framework``, or ``/path/to/my.bundle`` due to the flat "
"bundle structure."
msgstr ""
"包内容目录的完整路径，其中“tgt”是目标名称。对于 macOS "
"SDK，它导致“/path/to/my.app/Contents”、“/path/to/my.framework”或“/path/to/my.bundle/Contents”"
" .对于所有其他 SDK（例如 "
"iOS），它导致“/path/to/my.app”、“/path/to/my.framework”或“/path/to/my.bundle”由于扁平束结构。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1669
msgid ""
"List of DLLs that the target depends on at runtime. This is determined by "
"the locations of all the ``SHARED`` targets in the target's transitive "
"dependencies. Using this generator expression on targets other than "
"executables, ``SHARED`` libraries, and ``MODULE`` libraries is an error. "
"**On non-DLL platforms, this expression always evaluates to an empty "
"string**."
msgstr ""
"目标在运行时依赖的 DLL "
"列表。这由目标的传递依赖项中所有“共享”目标的位置决定。在除可执行文件、“SHARED”库和“MODULE”库之外的目标上使用此生成器表达式是错误的。"
" **在非 DLL 平台上，此表达式的计算结果始终为空字符串**。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1675
msgid ""
"This generator expression can be used to copy all of the DLLs that a "
"target depends on into its output directory in a ``POST_BUILD`` custom "
"command using the :option:`cmake -E copy -t <cmake-E copy>` command. For "
"example:"
msgstr ""
"此生成器表达式可用于将目标依赖的所有 DLL 复制到 POST_BUILD 自定义命令中的输出目录中，使用 :option:`cmake -E "
"copy -t <cmake-E copy>` 命令.例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1692
msgid ""
":ref:`Imported Targets` are supported only if they know the location of "
"their ``.dll`` files.  An imported ``SHARED`` library must have "
":prop_tgt:`IMPORTED_LOCATION` set to its ``.dll`` file.  See the "
":ref:`add_library imported libraries <add_library imported libraries>` "
"section for details.  Many :ref:`Find Modules` produce imported targets "
"with the ``UNKNOWN`` type and therefore will be ignored."
msgstr ""
":ref:`Imported Targets` 只有在知道其 ``.dll`` 文件的位置时才受支持。导入的 ``SHARED`` 库必须将 "
":prop_tgt:`IMPORTED_LOCATION` 设置为其 ``.dll`` 文件。有关详细信息，请参阅 "
":ref:`add_library imported libraries <add_library imported libraries>` "
"部分。许多 :ref:`Find Modules` 生成具有 ``UNKNOWN`` 类型的导入目标，因此将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1699
msgid ""
"On platforms that support runtime paths (``RPATH``), refer to the "
":prop_tgt:`INSTALL_RPATH` target property. On Apple platforms, refer to "
"the :prop_tgt:`INSTALL_NAME_DIR` target property."
msgstr ""
"在支持运行时路径 (``RPATH``) 的平台上，请参考 :prop_tgt:`INSTALL_RPATH` 目标属性。在 Apple "
"平台上，请参考 :prop_tgt:`INSTALL_NAME_DIR` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1704
msgid "Export And Install Expressions"
msgstr "导出和安装表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1708
msgid ""
"Content of ``...`` when the property is exported using "
":command:`install(EXPORT)`, and empty otherwise."
msgstr "使用 :command:`install(EXPORT)` 导出属性时 ``...`` 的内容，否则为空。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1713
msgid ""
"Content of ``...`` when the property is exported using :command:`export`, "
"or when the target is used by another target in the same buildsystem. "
"Expands to the empty string otherwise."
msgstr ""
"使用 :command:`export` 导出属性时，或者当目标被同一构建系统中的另一个目标使用时，`...`` 的内容。否则扩展为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1721
msgid ""
"Content of ``...`` when the target is used by another target in the same "
"buildsystem. Expands to the empty string otherwise."
msgstr "当目标被同一构建系统中的另一个目标使用时，``...`` 的内容。否则扩展为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1726
msgid ""
"Content of the install prefix when the target is exported via "
":command:`install(EXPORT)`, or when evaluated in the "
":prop_tgt:`INSTALL_NAME_DIR` property or the ``INSTALL_NAME_DIR`` argument"
" of :command:`install(RUNTIME_DEPENDENCY_SET)`, and empty otherwise."
msgstr ""
"当通过 :command:`install(EXPORT)` 导出目标时，或在 :prop_tgt:`INSTALL_NAME_DIR` 属性或 "
":command:`install(RUNTIME_DEPENDENCY_SET) 的 ``INSTALL_NAME_DIR`` "
"参数中评估时安装前缀的内容`，否则为空。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1732
msgid "Multi-level Expression Evaluation"
msgstr "多级表达式评估"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1738
msgid ""
"Content of ``expr`` evaluated as a generator expression in the current "
"context. This enables consumption of generator expressions whose "
"evaluation results itself in generator expressions."
msgstr "``expr`` 的内容在当前上下文中评估为生成器表达式。这使得能够使用生成器表达式，其评估结果本身就是生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1746
msgid ""
"Content of ``expr`` evaluated as a generator expression in the context of "
"``tgt`` target. This enables consumption of custom target properties that "
"themselves contain generator expressions."
msgstr "``expr`` 的内容在 ``tgt`` 目标的上下文中评估为生成器表达式。这允许使用本身包含生成器表达式的自定义目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1750
msgid ""
"Having the capability to evaluate generator expressions is very useful "
"when you want to manage custom properties supporting generator "
"expressions. For example:"
msgstr "当您想要管理支持生成器表达式的自定义属性时，具有计算生成器表达式的能力非常有用。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1766
msgid ""
"This naive implementation of the ``printFooKeys`` custom command is wrong "
"because ``CUSTOM_KEYS`` target property is not evaluated and the content "
"is passed as is (i.e. ``$<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>``)."
msgstr ""
"``printFooKeys`` 自定义命令的这种天真实现是错误的，因为``CUSTOM_KEYS`` 目标属性未被评估并且内容按原样传递（即 "
"``$<$<CONFIG:DEBUG>:FOO_EXTRA_THINGS>``） ."

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1770
msgid ""
"To have the expected result (i.e. ``FOO_EXTRA_THINGS`` if config is "
"``Debug``), it is required to evaluate the output of "
"``$<TARGET_PROPERTY:foo,CUSTOM_KEYS>``:"
msgstr ""
"要获得预期的结果（即如果配置为“调试”，则为“FOO_EXTRA_THINGS”），需要评估“$<TARGET_PROPERTY:foo,CUSTOM_KEYS>”的输出："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1782
msgid "Escaped Characters"
msgstr "转义字符"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1784
msgid ""
"These expressions evaluate to specific string literals. Use them in place "
"of the actual string literal where you need to prevent them from having "
"their special meaning."
msgstr "这些表达式求值为特定的字符串文字。在需要防止它们具有特殊含义的地方使用它们代替实际的字符串文字。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1790
msgid ""
"A literal ``>``. Used for example to compare strings that contain a ``>``."
msgstr "文字``>``。例如用于比较包含 ``>`` 的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1794
msgid ""
"A literal ``,``. Used for example to compare strings which contain a "
"``,``."
msgstr "一个字面的``，``。例如用于比较包含 ``,`` 的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1798
msgid ""
"A literal ``;``. Used to prevent list expansion on an argument with ``;``."
msgstr "一个字面的``;``。用于防止对带有 ``;`` 的参数进行列表扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1801
msgid "Deprecated Expressions"
msgstr "弃用的表达式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generator-expressions.7.rst:1805
msgid ""
"Configuration name. Deprecated since CMake 3.0. Use :genex:`CONFIG` "
"instead."
msgstr "配置名称。自 CMake 3.0 起已弃用。使用 :genex:`CONFIG` 代替。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:4
msgid "cmake-generators(7)"
msgstr "cmake 生成器(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:13
msgid ""
"A *CMake Generator* is responsible for writing the input files for a "
"native build system.  Exactly one of the `CMake Generators`_ must be "
"selected for a build tree to determine what native build system is to be "
"used.  Optionally one of the `Extra Generators`_ may be selected as a "
"variant of some of the `Command-Line Build Tool Generators`_ to produce "
"project files for an auxiliary IDE."
msgstr ""
"*CMake 生成器* 负责为本机构建系统编写输入文件。必须为构建树选择 CMake Generators "
"中的一个，以确定要使用的本机构建系统。可选地，可以选择“额外生成器”之一作为某些“命令行构建工具生成器”的变体，以生成用于辅助 IDE 的项目文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:20
msgid ""
"CMake Generators are platform-specific so each may be available only on "
"certain platforms.  The :manual:`cmake(1)` command-line tool "
":option:`--help <cmake --help>` output lists available generators on the "
"current platform.  Use its :option:`-G <cmake -G>` option to specify the "
"generator for a new build tree. The :manual:`cmake-gui(1)` offers "
"interactive selection of a generator when creating a new build tree."
msgstr ""
"CMake 生成器是特定于平台的，因此每个生成器可能仅在特定平台上可用。 :manual:`cmake(1)` "
"命令行工具 :option:`--help <cmake --help>` 输出列出了当前平台上可用的生成器。使用其 :option:`-G "
"<cmake -G>` 选项为新构建树指定生成器。 :manual:`cmake-gui(1)` 在创建新构建树时提供生成器的交互式选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:28
msgid "CMake Generators"
msgstr "生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:33
msgid "Command-Line Build Tool Generators"
msgstr "命令行构建工具生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:35
msgid ""
"These generators support command-line build tools.  In order to use them, "
"one must launch CMake from a command-line prompt whose environment is "
"already configured for the chosen compiler and build tool."
msgstr "这些生成器支持命令行构建工具。为了使用它们，必须从命令行提示符启动 CMake，其环境已经为所选的编译器和构建工具配置好。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:42
msgid "Makefile Generators"
msgstr "Makefile 生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:58
msgid "Ninja Generators"
msgstr "忍者生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:69
msgid "IDE Build Tool Generators"
msgstr "IDE 构建工具生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:71
msgid ""
"These generators support Integrated Development Environment (IDE) project "
"files.  Since the IDEs configure their own environment one may launch "
"CMake from any environment."
msgstr "这些生成器支持集成开发环境 (IDE) 项目文件。由于 IDE 配置自己的环境，因此可以从任何环境启动 CMake。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:78
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:227
msgid "Visual Studio Generators"
msgstr "Visual Studio 生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:97
msgid "Other Generators"
msgstr "其他生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:108
msgid "Extra Generators"
msgstr "额外的生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-generators.7.rst:110
msgid ""
"Some of the `CMake Generators`_ listed in the :manual:`cmake(1)` command-"
"line tool :option:`--help <cmake --help>` output may have variants that "
"specify an extra generator for an auxiliary IDE tool. Such generator names"
" have the form ``<extra-generator> - <main-generator>``. The following "
"extra generators are known to CMake."
msgstr ""
"在 :manual:`cmake(1)` 命令行工具 :option:`--help <cmake --help>` 输出中列出的一些 CMake "
"Generators 可能有指定额外生成器的变体IDE 工具。这样的生成器名称的格式为``<extra-generator> - <main-"
"generator>``。以下额外生成器是 CMake 已知的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:4
msgid "cmake-gui(1)"
msgstr "cmake-GUI(1)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:19
msgid ""
"The :program:`cmake-gui` executable is the CMake GUI.  Project "
"configuration settings may be specified interactively.  Brief instructions"
" are provided at the bottom of the window when the program is running."
msgstr ""
":program:`cmake-gui` 可执行文件是 CMake GUI。可以交互方式指定项目配置设置。程序运行时，窗口底部会提供简要说明。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:46
msgid ""
"Name of the preset to use from the project's :manual:`presets <cmake-"
"presets(7)>` files, if it has them."
msgstr "从项目的 :manual:`presets <cmake-presets(7)>` 文件中使用的预设名称，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-gui.1.rst:51
msgid "Open the CMake reference manual in a browser and immediately exit."
msgstr "在浏览器中打开 CMake 参考手册并立即退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:4
msgid "cmake-language(7)"
msgstr "cmake 语言(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:11
msgid "Organization"
msgstr "组织"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:13
msgid ""
"CMake input files are written in the \"CMake Language\" in source files "
"named ``CMakeLists.txt`` or ending in a ``.cmake`` file name extension."
msgstr "CMake 输入文件以“CMake 语言”编写在名为“CMakeLists.txt”或以“.cmake”文件扩展名结尾的源文件中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:16
msgid "CMake Language source files in a project are organized into:"
msgstr "项目中的 CMake 语言源文件组织为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:18
msgid "`Directories`_ (``CMakeLists.txt``),"
msgstr "`目录`_（``CMakeLists.txt``），"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:19
msgid "`Scripts`_ (``<script>.cmake``), and"
msgstr "`Scripts`_ (``<script>.cmake``)，以及"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:20
msgid "`Modules`_ (``<module>.cmake``)."
msgstr "`模块`_（``<模块>.cmake``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:23
msgid "Directories"
msgstr "目录"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:25
msgid ""
"When CMake processes a project source tree, the entry point is a source "
"file called ``CMakeLists.txt`` in the top-level source directory.  This "
"file may contain the entire build specification or use the "
":command:`add_subdirectory` command to add subdirectories to the build.  "
"Each subdirectory added by the command must also contain a "
"``CMakeLists.txt`` file as the entry point to that directory.  For each "
"source directory whose ``CMakeLists.txt`` file is processed CMake "
"generates a corresponding directory in the build tree to act as the "
"default working and output directory."
msgstr ""
"当 CMake 处理项目源代码树时，入口点是顶级源目录中名为“CMakeLists.txt”的源文件。此文件可能包含整个构建规范或使用 "
":command:`add_subdirectory` "
"命令将子目录添加到构建中。该命令添加的每个子目录还必须包含一个“CMakeLists.txt”文件作为该目录的入口点。对于处理“CMakeLists.txt”文件的每个源目录，CMake"
" 在构建树中生成一个相应的目录作为默认工作和输出目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:36
msgid "Scripts"
msgstr "脚本"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:38
msgid ""
"An individual ``<script>.cmake`` source file may be processed in *script "
"mode* by using the :manual:`cmake(1)` command-line tool with the "
":option:`-P <cmake -P>` option.  Script mode simply runs the commands in "
"the given CMake Language source file and does not generate a build system."
"  It does not allow CMake commands that define build targets or actions."
msgstr ""
"一个单独的 ``<script>.cmake`` 源文件可以在*脚本模式*下使用 :manual:`cmake(1)` 命令行工具和 "
":option:`-P <cmake -P> `选项。脚本模式只是运行给定 CMake "
"语言源文件中的命令，并不生成构建系统。它不允许定义构建目标或操作的 CMake 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:46
msgid "Modules"
msgstr "模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:48
msgid ""
"CMake Language code in either `Directories`_ or `Scripts`_ may use the "
":command:`include` command to load a ``<module>.cmake`` source file in the"
" scope of the including context. See the :manual:`cmake-modules(7)` manual"
" page for documentation of modules included with the CMake distribution. "
"Project source trees may also provide their own modules and specify their "
"location(s) in the :variable:`CMAKE_MODULE_PATH` variable."
msgstr ""
"`Directories`_ 或 `Scripts`_ 中的 CMake 语言代码可以使用 :command:`include` "
"命令在包含上下文的范围内加载 ``<module>.cmake`` 源文件。请参阅 :manual:`cmake-modules(7)` "
"手册页，了解 CMake 发行版中包含的模块文档。项目源代码树也可以提供自己的模块并在 CMAKE_MODULE_PATH 变量中指定它们的位置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:58
msgid "Syntax"
msgstr "句法"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:63
msgid "Encoding"
msgstr "编码"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:65
msgid ""
"A CMake Language source file may be written in 7-bit ASCII text for "
"maximum portability across all supported platforms.  Newlines may be "
"encoded as either ``\\n`` or ``\\r\\n`` but will be converted to ``\\n`` "
"as input files are read."
msgstr ""
"CMake 语言源文件可以用 7 位 ASCII "
"文本编写，以实现跨所有支持平台的最大可移植性。换行符可以编码为“\\n”或“\\r\\n”，但在读取输入文件时将被转换为“\\n”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:70
msgid ""
"Note that the implementation is 8-bit clean so source files may be encoded"
" as UTF-8 on platforms with system APIs supporting this encoding.  In "
"addition, CMake 3.2 and above support source files encoded in UTF-8 on "
"Windows (using UTF-16 to call system APIs). Furthermore, CMake 3.0 and "
"above allow a leading UTF-8 `Byte-Order Mark`_ in source files."
msgstr ""
"请注意，实现是 8 位干净的，因此在具有支持此编码的系统 API 的平台上，源文件可以编码为 UTF-8。此外，CMake 3.2 及以上版本支持在"
" Windows 上以 UTF-8 编码的源文件（使用 UTF-16 调用系统 API）。此外，CMake 3.0 及更高版本允许在源文件中使用前导"
" UTF-8 字节顺序标记。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:80
msgid "Source Files"
msgstr "源文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:82
msgid ""
"A CMake Language source file consists of zero or more `Command "
"Invocations`_ separated by newlines and optionally spaces and `Comments`_:"
msgstr ""
"CMake 语言源文件由零个或多个 `Command Invocations`_ 组成，由换行符和可选的空格和 `Comments`_ 分隔："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:102
msgid ""
"Note that any source file line not inside `Command Arguments`_ or a "
"`Bracket Comment`_ can end in a `Line Comment`_."
msgstr ""
"请注意，任何不在 `Command Arguments`_ 或 `Bracket Comment`_ 内的源文件行都可以以 `Line "
"Comment`_ 结尾。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:108
msgid "Command Invocations"
msgstr "命令调用"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:110
msgid ""
"A *command invocation* is a name followed by paren-enclosed arguments "
"separated by whitespace:"
msgstr "*命令调用* 是一个名称，后跟用空格分隔的括号括起来的参数："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:129
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:260
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:322
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:449
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:481
msgid "For example:"
msgstr "例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:135
msgid ""
"Command names are case-insensitive. Nested unquoted parentheses in the "
"arguments must balance. Each ``(`` or ``)`` is given to the command "
"invocation as a literal `Unquoted Argument`_.  This may be used in calls "
"to the :command:`if` command to enclose conditions. For example:"
msgstr ""
"命令名称不区分大小写。参数中嵌套的不带引号的括号必须平衡。每个 ``(`` 或 ``)`` 都作为文字 `Unquoted Argument`_ "
"提供给命令调用。这可以用于调用 :command:`if` 命令来包含条件。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:147
msgid ""
"CMake versions prior to 3.0 require command name identifiers to be at "
"least 2 characters."
msgstr "3.0 之前的 CMake 版本要求命令名称标识符至少为 2 个字符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:150
msgid ""
"CMake versions prior to 2.8.12 silently accept an `Unquoted Argument`_ or "
"a `Quoted Argument`_ immediately following a `Quoted Argument`_ and not "
"separated by any whitespace.  For compatibility, CMake 2.8.12 and higher "
"accept such code but produce a warning."
msgstr ""
"2.8.12 之前的 CMake 版本默默地接受一个 `Unquoted Argument`_ 或一个 `Quoted Argument`_ 紧跟在"
" `Quoted Argument`_ 之后并且不被任何空格分隔。为了兼容性，CMake 2.8.12 及更高版本接受此类代码但会产生警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:156
msgid "Command Arguments"
msgstr "命令参数"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:158
msgid "There are three types of arguments within `Command Invocations`_:"
msgstr "`Command Invocations`_ 中有三种类型的参数："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:174
msgid "Bracket Argument"
msgstr "括号参数"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:176
msgid ""
"A *bracket argument*, inspired by `Lua`_ long bracket syntax, encloses "
"content between opening and closing \"brackets\" of the same length:"
msgstr "*括号参数*，受 `Lua`_ 长括号语法的启发，将内容包含在相同长度的开始和结束“括号”之间："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:195
msgid ""
"An opening bracket is written ``[`` followed by zero or more ``=`` "
"followed by ``[``.  The corresponding closing bracket is written ``]`` "
"followed by the same number of ``=`` followed by ``]``. Brackets do not "
"nest.  A unique length may always be chosen for the opening and closing "
"brackets to contain closing brackets of other lengths."
msgstr ""
"左括号写成 ``[`` 后跟零个或多个 ``=`` 后跟 ``[``。相应的右括号写为 ``]`` 后跟相同数量的 ``=`` 后跟 "
"``]``。括号不嵌套。可以始终为左括号和右括号选择唯一的长度以包含其他长度的右括号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:202
msgid ""
"Bracket argument content consists of all text between the opening and "
"closing brackets, except that one newline immediately following the "
"opening bracket, if any, is ignored.  No evaluation of the enclosed "
"content, such as `Escape Sequences`_ or `Variable References`_, is "
"performed.  A bracket argument is always given to the command invocation "
"as exactly one argument."
msgstr ""
"括号参数内容由左括号和右括号之间的所有文本组成，除了紧跟在左括号之后的一个换行符（如果有的话）将被忽略。不执行封闭内容的评估，例如“转义序列”或“变量引用”。括号参数始终作为一个参数提供给命令调用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:212
msgid "For example::"
msgstr "例如：："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:223
msgid ""
"CMake versions prior to 3.0 do not support bracket arguments. They "
"interpret the opening bracket as the start of an `Unquoted Argument`_."
msgstr "3.0 之前的 CMake 版本不支持方括号参数。他们将左括号解释为 `Unquoted Argument`_ 的开始。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:232
msgid "Quoted Argument"
msgstr "引用的参数"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:234
msgid ""
"A *quoted argument* encloses content between opening and closing double-"
"quote characters:"
msgstr "一个 *quoted argument* 在开始和结束双引号字符之间包含内容："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:252
msgid ""
"Quoted argument content consists of all text between opening and closing "
"quotes.  Both `Escape Sequences`_ and `Variable References`_ are "
"evaluated.  A quoted argument is always given to the command invocation as"
" exactly one argument."
msgstr ""
"引用的参数内容由开始和结束引号之间的所有文本组成。 `Escape Sequences`_ 和 `Variable References`_ "
"都被求值。带引号的参数总是作为一个参数提供给命令调用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:274
msgid ""
"The final ``\\`` on any line ending in an odd number of backslashes is "
"treated as a line continuation and ignored along with the immediately "
"following newline character.  For example:"
msgstr "以奇数个反斜杠结尾的任何行上的最后一个 ``\\`` 被视为续行，并与紧随其后的换行符一起被忽略。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:287
msgid ""
"CMake versions prior to 3.0 do not support continuation with ``\\``. They "
"report errors in quoted arguments containing lines ending in an odd number"
" of ``\\`` characters."
msgstr "3.0 之前的 CMake 版本不支持使用 ``\\`` 继续。他们报告引用参数中包含以奇数个 ``\\`` 字符结尾的行的错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:294
msgid "Unquoted Argument"
msgstr "未引用的论点"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:296
msgid ""
"An *unquoted argument* is not enclosed by any quoting syntax. It may not "
"contain any whitespace, ``(``, ``)``, ``#``, ``\"``, or ``\\`` except when"
" escaped by a backslash:"
msgstr ""
"*unquoted argument* 不包含在任何引用语法中。它可能不包含任何空格、``(``、``)``、``#``、``\"`` 或 "
"``\\``，除非用反斜杠转义："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:314
msgid ""
"Unquoted argument content consists of all text in a contiguous block of "
"allowed or escaped characters.  Both `Escape Sequences`_ and `Variable "
"References`_ are evaluated.  The resulting value is divided in the same "
"way `Lists`_ divide into elements.  Each non-empty element is given to the"
" command invocation as an argument.  Therefore an unquoted argument may be"
" given to a command invocation as zero or more arguments."
msgstr ""
"未加引号的参数内容由允许或转义字符的连续块中的所有文本组成。 `Escape Sequences`_ 和 `Variable "
"References`_ "
"都被求值。结果值的划分方式与“列表”划分为元素的方式相同。每个非空元素都作为参数提供给命令调用。因此，可以将未加引号的参数作为零个或多个参数提供给命令调用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:336
msgid ""
"To support legacy CMake code, unquoted arguments may also contain double-"
"quoted strings (``\"...\"``, possibly enclosing horizontal whitespace), "
"and make-style variable references (``$(MAKEVAR)``)."
msgstr ""
"为了支持旧版 CMake 代码，未加引号的参数还可以包含双引号字符串（``\"...\"``，可能包含水平空格）和 make "
"样式变量引用（``$(MAKEVAR)``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:340
msgid ""
"Unescaped double-quotes must balance, may not appear at the beginning of "
"an unquoted argument, and are treated as part of the content.  For "
"example, the unquoted arguments ``-Da=\"b c\"``, ``-Da=$(v)``, and ``a\" "
"\"b\"c\"d`` are each interpreted literally. They may instead be written as"
" quoted arguments ``\"-Da=\\\"b c\\\"\"``, ``\"-Da=$(v)\"``, and ``\"a\\\""
" \\\"b\\\"c\\\"d\"``, respectively."
msgstr ""
"未转义的双引号必须平衡，不能出现在未引用的参数的开头，并被视为内容的一部分。例如，未加引号的参数``-Da=\"b "
"c\"``、``-Da=$(v)`` 和``a\" \"b\"c\"d`` 都按字面解释。它们可以写成带引号的参数 ``\"-Da=\\\"b "
"c\\\"\"``、``\"-Da=$(v)\"`` 和 ``\"a\\\" \\\"b\\\"c \\\"d\"``，分别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:347
msgid ""
"Make-style references are treated literally as part of the content and do "
"not undergo variable expansion.  They are treated as part of a single "
"argument (rather than as separate ``$``, ``(``, ``MAKEVAR``, and ``)`` "
"arguments)."
msgstr ""
"Make-style "
"引用按字面意思被视为内容的一部分，不会进行变量扩展。它们被视为单个参数的一部分（而不是单独的“$”、“（”、“MAKEVAR”和“）”参数）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:352
msgid ""
"The above \"unquoted_legacy\" production represents such arguments. We do "
"not recommend using legacy unquoted arguments in new code. Instead use a "
"`Quoted Argument`_ or a `Bracket Argument`_ to represent the content."
msgstr ""
"上面的“unquoted_legacy”作品代表了这样的论点。我们不建议在新代码中使用遗留的不带引号的参数。而是使用 `Quoted "
"Argument`_ 或 `Bracket Argument`_ 来表示内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:360
msgid "Escape Sequences"
msgstr "转义序列"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:362
msgid "An *escape sequence* is a ``\\`` followed by one character:"
msgstr "*转义序列*是一个``\\``后跟一个字符："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:378
msgid ""
"A ``\\`` followed by a non-alphanumeric character simply encodes the "
"literal character without interpreting it as syntax.  A ``\\t``, ``\\r``, "
"or ``\\n`` encodes a tab, carriage return, or newline character, "
"respectively. A ``\\;`` outside of any `Variable References`_  encodes "
"itself but may be used in an `Unquoted Argument`_ to encode the ``;`` "
"without dividing the argument value on it.  A ``\\;`` inside `Variable "
"References`_ encodes the literal ``;`` character.  (See also policy "
":policy:`CMP0053` documentation for historical considerations.)"
msgstr ""
"后跟非字母数字字符的 ``\\`` 只是对文字字符进行编码，而不将其解释为语法。 ``\\t``、``\\r`` 或 ``\\n`` "
"分别编码制表符、回车符或换行符。任何 `Variable References`_ 之外的 ``\\;`` 都会对自身进行编码，但可以在 "
"`Unquoted Argument`_ 中使用以对 ``;`` 进行编码，而不会将参数值除​​以它。 ``Variable "
"References`_ 中的``\\;`` 编码文字``;`` 字符。 （另请参阅 policy :policy:`CMP0053` "
"文档了解历史注意事项。）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:390
msgid "Variable References"
msgstr "变量引用"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:392
msgid ""
"A *variable reference* has the form ``${<variable>}`` and is evaluated "
"inside a `Quoted Argument`_ or an `Unquoted Argument`_. A variable "
"reference is replaced by the value of the specified variable or cache "
"entry, or if neither is set, by the empty string. Variable references can "
"nest and are evaluated from the inside out, e.g. "
"``${outer_${inner_variable}_variable}``."
msgstr ""
"*变量引用*的形式为``${<variable>}``，并在`Quoted Argument`_ 或`Unquoted Argument`_ "
"中进行计算。变量引用由指定变量或缓存条目的值替换，或者如果两者均未设置，则由空字符串替换。变量引用可以嵌套并从内向外求值，例如``${outer_${inner_variable}_variable}``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:399
msgid ""
"Literal variable references may consist of alphanumeric characters, the "
"characters ``/_.+-``, and `Escape Sequences`_.  Nested references may be "
"used to evaluate variables of any name.  See also policy :policy:`CMP0053`"
" documentation for historical considerations and reasons why the ``$`` is "
"also technically permitted but is discouraged."
msgstr ""
"文字变量引用可能由字母数字字符、字符“/_.+-”和“转义序列”组成。嵌套引用可用于评估任何名称的变量。另请参阅策略 "
":policy:`CMP0053` 文档，了解历史考虑因素以及为什么 ``$`` 在技术上也是允许但不鼓励的原因。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:405
msgid ""
"The `Variables`_ section documents the scope of variable names and how "
"their values are set."
msgstr "`Variables`_ 部分记录了变量名称的范围及其值的设置方式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:408
msgid ""
"An *environment variable reference* has the form ``$ENV{<variable>}``. See"
" the `Environment Variables`_ section for more information."
msgstr "*环境变量引用*的形式为“$ENV{<variable>}”。有关详细信息，请参阅“环境变量”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:411
msgid ""
"A *cache variable reference* has the form ``$CACHE{<variable>}``, and is "
"replaced by the value of the specified cache entry without checking for a "
"normal variable of the same name.  If the cache entry does not exist, it "
"is replaced by the empty string. See :variable:`CACHE` for more "
"information."
msgstr ""
"*缓存变量引用*的形式为``$CACHE{<variable>}``，并被指定的缓存条目的值替换，而不检查同名的普通变量。如果缓存条目不存在，则将其替换为空字符串。有关详细信息，请参阅 :variable:`CACHE`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:417
msgid ""
"The :command:`if` command has a special condition syntax that allows for "
"variable references in the short form ``<variable>`` instead of "
"``${<variable>}``.  However, environment variables always need to be "
"referenced as ``$ENV{<variable>}``."
msgstr ""
":command:`if` 命令有一个特殊的条件语法，允许以缩写形式``<variable>`` 代替``${<variable>}`` "
"的变量引用。然而，环境变量总是需要被引用为``$ENV{<variable>}``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:423
msgid "Comments"
msgstr "评论"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:425
msgid ""
"A comment starts with a ``#`` character that is not inside a `Bracket "
"Argument`_, `Quoted Argument`_, or escaped with ``\\`` as part of an "
"`Unquoted Argument`_.  There are two types of comments: a `Bracket "
"Comment`_ and a `Line Comment`_."
msgstr ""
"注释以 ``#`` 字符开头，该字符不在 `Bracket Argument`_、`Quoted Argument`_ 内，或作为 "
"`Unquoted Argument`_ 的一部分以 ``\\`` 转义。有两种类型的注释：`Bracket Comment`_ 和 `Line "
"Comment`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:433
msgid "Bracket Comment"
msgstr "括号注释"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:435
msgid ""
"A ``#`` immediately followed by a :token:`bracket_open` forms a *bracket "
"comment* consisting of the entire bracket enclosure:"
msgstr "``#`` 紧跟一个 :token:`bracket_open` 形成一个 *bracket comment* 由整个括号包围："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:458
msgid ""
"CMake versions prior to 3.0 do not support bracket comments. They "
"interpret the opening ``#`` as the start of a `Line Comment`_."
msgstr "3.0 之前的 CMake 版本不支持括号注释。他们将开头的 ``#`` 解释为 `Line Comment`_ 的开始。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:464
msgid "Line Comment"
msgstr "行注释"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:466
msgid ""
"A ``#`` not immediately followed by a :token:`bracket_open` forms a *line "
"comment* that runs until the end of the line:"
msgstr "``#`` 后面没有紧跟着 :token:`bracket_open` 形成一个*行注释*，一直运行到行尾："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:490
msgid "Control Structures"
msgstr "控制结构"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:493
msgid "Conditional Blocks"
msgstr "条件块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:495
msgid ""
"The :command:`if`/:command:`elseif`/:command:`else`/:command:`endif` "
"commands delimit code blocks to be executed conditionally."
msgstr ""
":command:`if`/:command:`elseif`/:command:`else`/:command:`endif` "
"命令分隔要有条件执行的代码块。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:499
msgid "Loops"
msgstr "循环"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:501
msgid ""
"The :command:`foreach`/:command:`endforeach` and "
":command:`while`/:command:`endwhile` commands delimit code blocks to be "
"executed in a loop.  Inside such blocks the :command:`break` command may "
"be used to terminate the loop early whereas the :command:`continue` "
"command may be used to start with the next iteration immediately."
msgstr ""
":command:`foreach`/:command:`endforeach` "
"和 :command:`while`/:command:`endwhile` "
"命令分隔要在循环中执行的代码块。在这样的块中， :command:`break` 命令可用于提前终止循环，而 :command:`continue` "
"命令可用于立即开始下一次迭代。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:509
msgid "Command Definitions"
msgstr "命令定义"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:511
msgid ""
"The :command:`macro`/:command:`endmacro`, and "
":command:`function`/:command:`endfunction` commands delimit code blocks to"
" be recorded for later invocation as commands."
msgstr ""
":command:`macro`/:command:`endmacro` 和 "
":command:`function`/:command:`endfunction` 命令分隔要记录的代码块，以便以后作为命令调用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:518
msgid "Variables"
msgstr "变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:520
msgid ""
"Variables are the basic unit of storage in the CMake Language. Their "
"values are always of string type, though some commands may interpret the "
"strings as values of other types. The :command:`set` and :command:`unset` "
"commands explicitly set or unset a variable, but other commands have "
"semantics that modify variables as well. Variable names are case-sensitive"
" and may consist of almost any text, but we recommend sticking to names "
"consisting only of alphanumeric characters plus ``_`` and ``-``."
msgstr ""
"变量是 CMake 语言中的基本存储单元。它们的值始终是字符串类型，尽管某些命令可能会将字符串解释为其他类型的值。 :command:`set` 和"
" :command:`unset` "
"命令显式设置或取消设置变量，但其他命令也具有修改变量的语义。变量名称区分大小写，几乎可以包含任何文本，但我们建议坚持使用仅由字母数字字符加上“_”和“-”组成的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:530
msgid ""
"Variables have dynamic scope.  Each variable \"set\" or \"unset\" creates "
"a binding in the current scope:"
msgstr "变量具有动态范围。每个变量“set”或“unset”在当前范围内创建一个绑定："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:534
msgid "Block Scope"
msgstr "块作用域"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:534
msgid ""
"The :command:`block` command may create a new scope for variable bindings."
msgstr ":command:`block` 命令可以为变量绑定创建一个新的范围。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:541
msgid "Function Scope"
msgstr "功能范围"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:537
msgid ""
"`Command Definitions`_ created by the :command:`function` command create "
"commands that, when invoked, process the recorded commands in a new "
"variable binding scope.  A variable \"set\" or \"unset\" binds in this "
"scope and is visible for the current function and any nested calls within "
"it, but not after the function returns."
msgstr ""
"`Command Definitions`_ 由 :command:`function` "
"命令创建，创建命令，当调用这些命令时，在新的变量绑定范围内处理记录的命令。变量“set”或“unset”在此范围内绑定，并且对当前函数和其中的任何嵌套调用可见，但在函数返回后不可见。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:552
msgid "Directory Scope"
msgstr "目录范围"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:544
msgid ""
"Each of the `Directories`_ in a source tree has its own variable bindings."
"  Before processing the ``CMakeLists.txt`` file for a directory, CMake "
"copies all variable bindings currently defined in the parent directory, if"
" any, to initialize the new directory scope.  CMake `Scripts`_, when "
"processed with :option:`cmake -P`, bind variables in one \"directory\" "
"scope."
msgstr ""
"源代码树中的每个“目录”都有自己的变量绑定。在处理目录的 ``CMakeLists.txt`` 文件之前，CMake "
"复制当前在父目录中定义的所有变量绑定（如果有）以初始化新的目录范围。 CMake `Scripts`_，当使用 :option:`cmake -P`"
" 处理时，在一个“目录”范围内绑定变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:551
msgid ""
"A variable \"set\" or \"unset\" not inside a function call binds to the "
"current directory scope."
msgstr "不在函数调用内的变量“set”或“unset”绑定到当前目录范围。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:559
msgid "Persistent Cache"
msgstr "持久缓存"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:555
msgid ""
"CMake stores a separate set of \"cache\" variables, or \"cache entries\", "
"whose values persist across multiple runs within a project build tree.  "
"Cache entries have an isolated binding scope modified only by explicit "
"request, such as by the ``CACHE`` option of the :command:`set` and "
":command:`unset` commands."
msgstr ""
"CMake "
"存储一组单独的“缓存”变量或“缓存条目”，其值在项目构建树中的多次运行中保持不变。缓存条目有一个独立的绑定范围，只能通过显式请求修改，例如通过 "
":command:`set` 和 :command:`unset` 命令的 ``CACHE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:561
msgid ""
"When evaluating `Variable References`_, CMake first searches the function "
"call stack, if any, for a binding and then falls back to the binding in "
"the current directory scope, if any.  If a \"set\" binding is found, its "
"value is used.  If an \"unset\" binding is found, or no binding is found, "
"CMake then searches for a cache entry.  If a cache entry is found, its "
"value is used. Otherwise, the variable reference evaluates to an empty "
"string. The ``$CACHE{VAR}`` syntax can be used to do direct cache entry "
"lookups."
msgstr ""
"在评估 `Variable References`_ 时，CMake "
"首先搜索函数调用堆栈（如果有）以查找绑定，然后回退到当前目录范围内的绑定（如果有）。如果找到“set”绑定，则使用它的值。如果找到“未设置”绑定，或未找到绑定，CMake"
" 会搜索缓存条目。如果找到缓存条目，则使用它的值。否则，变量引用的计算结果为空字符串。 ``$CACHE{VAR}`` 语法可用于直接查找缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:571
msgid ""
"The :manual:`cmake-variables(7)` manual documents the many variables that "
"are provided by CMake or have meaning to CMake when set by project code."
msgstr ""
":manual:`cmake-variables(7)` 手册记录了 CMake 提供的许多变量，或者在项目代码设置时对 CMake 有意义的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/ID_RESERVE.txt:3
msgid "CMake reserves identifiers that:"
msgstr "CMake 保留标识符："

#: ../../cmake-prefix/src/cmake/Help/manual/ID_RESERVE.txt:5
msgid "begin with ``CMAKE_`` (upper-, lower-, or mixed-case), or"
msgstr "以 ``CMAKE_``（大写、小写或混合大小写）开头，或"

#: ../../cmake-prefix/src/cmake/Help/manual/ID_RESERVE.txt:6
msgid "begin with ``_CMAKE_`` (upper-, lower-, or mixed-case), or"
msgstr "以 ``_CMAKE_``（大写、小写或混合大小写）开头，或"

#: ../../cmake-prefix/src/cmake/Help/manual/ID_RESERVE.txt:7
msgid ""
"begin with ``_`` followed by the name of any :manual:`CMake Command "
"<cmake-commands(7)>`."
msgstr "以 ``_`` 开头，后跟任何 :manual:`CMake 命令 <cmake-commands(7)>` 的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:580
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1752
msgid "Environment Variables"
msgstr "环境变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:582
msgid ""
"Environment Variables are like ordinary `Variables`_, with the following "
"differences:"
msgstr "环境变量就像普通的`Variables`_，有以下区别："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:587
msgid "Scope"
msgstr "范围"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:586
msgid ""
"Environment variables have global scope in a CMake process. They are never"
" cached."
msgstr "环境变量在 CMake 进程中具有全局范围。它们永远不会被缓存。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:591
msgid "References"
msgstr "参考"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:590
msgid ""
"`Variable References`_ have the form ``$ENV{<variable>}``, using the "
":variable:`ENV` operator."
msgstr ""
"`Variable References`_ 具有``$ENV{<variable>}`` 的形式，使用 :variable:`ENV` 运算符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:604
msgid "Initialization"
msgstr "初始化"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:594
msgid ""
"Initial values of the CMake environment variables are those of the calling"
" process. Values can be changed using the :command:`set` and "
":command:`unset` commands. These commands only affect the running CMake "
"process, not the system environment at large. Changed values are not "
"written back to the calling process, and they are not seen by subsequent "
"build or test processes."
msgstr ""
"CMake 环境变量的初始值是调用进程的初始值。可以使用 :command:`set` 和 :command:`unset` "
"命令更改值。这些命令只会影响正在运行的 CMake 进程，不会影响整个系统环境。更改的值不会写回调用进程，后续构建或测试进程也看不到它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:603
msgid ""
"See the :option:`cmake -E env <cmake-E env>` command-line tool to run a "
"command in a modified environment."
msgstr "请参阅:option:`cmake -E env <cmake-E env>` 命令行工具以在修改后的环境中运行命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:608
msgid "Inspection"
msgstr "检查"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:607
msgid ""
"See the :option:`cmake -E environment <cmake-E environment>` command-line "
"tool to display all current environment variables."
msgstr ""
"请参阅 :option:`cmake -E environment <cmake-E environment>` 命令行工具以显示所有当前环境变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:610
msgid ""
"The :manual:`cmake-env-variables(7)` manual documents environment "
"variables that have special meaning to CMake."
msgstr ":manual:`cmake-env-variables(7)` 手册记录了对 CMake 具有特殊意义的环境变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:616
msgid "Lists"
msgstr "列表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:618
msgid ""
"Although all values in CMake are stored as strings, a string may be "
"treated as a list in certain contexts, such as during evaluation of an "
"`Unquoted Argument`_.  In such contexts, a string is divided into list "
"elements by splitting on ``;`` characters not following an unequal number "
"of ``[`` and ``]`` characters and not immediately preceded by a ``\\``.  "
"The sequence ``\\;`` does not divide a value but is replaced by ``;`` in "
"the resulting element."
msgstr ""
"尽管 CMake "
"中的所有值都存储为字符串，但在某些情况下，字符串可能会被视为列表，例如在评估“未引用的参数”期间。在这样的上下文中，一个字符串被分成列表元素，方法是在"
" ``;`` 字符之后不跟随不等数量的 ``[`` 和 ``]`` 字符，并且前面没有紧跟 ``\\``。序列 ``\\;`` "
"不划分值，但在结果元素中被 ``;`` 替换。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:626
msgid ""
"A list of elements is represented as a string by concatenating the "
"elements separated by ``;``.  For example, the :command:`set` command "
"stores multiple values into the destination variable as a list:"
msgstr "通过连接由“;”分隔的元素，将元素列表表示为字符串。例如， :command:`set` 命令将多个值作为列表存储到目标变量中："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:635
msgid ""
"Lists are meant for simple use cases such as a list of source files and "
"should not be used for complex data processing tasks. Most commands that "
"construct lists do not escape ``;`` characters in list elements, thus "
"flattening nested lists:"
msgstr ""
"列表适用于简单的用例，例如源文件列表，不应用于复杂的数据处理任务。大多数构造列表的命令不会转义列表元素中的 ``;`` 字符，从而展平嵌套列表："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:644
msgid ""
"In general, lists do not support elements containing ``;`` characters. To "
"avoid problems, consider the following advice:"
msgstr "通常，列表不支持包含“;”字符的元素。为避免出现问题，请考虑以下建议："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:647
msgid ""
"The interfaces of many CMake commands, variables, and properties accept "
"semicolon-separated lists.  Avoid passing lists with elements containing "
"semicolons to these interfaces unless they document either direct support "
"or some way to escape or encode semicolons."
msgstr ""
"许多 CMake "
"命令、变量和属性的接口都接受以分号分隔的列表。避免将包含分号的元素的列表传递给这些接口，除非它们记录了直接支持或某种转义或编码分号的方法。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:652
msgid ""
"When constructing a list, substitute an otherwise-unused placeholder for "
"``;`` in elements when.  Then substitute ``;`` for the placeholder when "
"processing list elements. For example, the following code uses ``|`` in "
"place of ``;`` characters:"
msgstr ""
"构造列表时，将元素中的 ``;`` 替换为其他未使用的占位符。然后在处理列表元素时用 ``;`` 代替占位符。例如，以下代码使用 ``|`` 代替 "
"``;`` 字符："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:665
msgid ""
"The :module:`ExternalProject` module's ``LIST_SEPARATOR`` option is an "
"example of an interface built using this approach."
msgstr ":module:`ExternalProject` 模块的 ``LIST_SEPARATOR`` 选项是使用这种方法构建的接口的示例。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:668
msgid ""
"In lists of :manual:`generator expressions <cmake-generator-"
"expressions(7)>`, use the :genex:`$<SEMICOLON>` generator expression."
msgstr ""
"在 :manual:`generator expressions <cmake-generator-expressions(7)>` 列表中，使用 "
":genex:`$<SEMICOLON>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:671
msgid ""
"In command calls, use `Quoted Argument`_ syntax whenever possible. The "
"called command will receive the content of the argument with semicolons "
"preserved.  An `Unquoted Argument`_ will be split on semicolons."
msgstr ""
"在命令调用中，尽可能使用 `Quoted Argument`_ 语法。被调用的命令将接收保留分号的参数内容。 `Unquoted "
"Argument`_ 将以分号分隔。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:676
msgid ""
"In :command:`function` implementations, avoid ``ARGV`` and ``ARGN``, which"
" do not distinguish semicolons in values from those separating values. "
"Instead, prefer using named positional arguments and the ``ARGC`` and "
"``ARGV#`` variables. When using :command:`cmake_parse_arguments` to parse "
"arguments, prefer its ``PARSE_ARGV`` signature, which uses the ``ARGV#`` "
"variables."
msgstr ""
"在 :command:`function` 实现中，避免使用 ``ARGV`` 和 "
"``ARGN``，它们不区分值中的分号和分隔值。相反，更喜欢使用命名位置参数和 ``ARGC`` 和 ``ARGV#`` 变量。使用 "
":command:`cmake_parse_arguments` 解析参数时，更喜欢它的 ``PARSE_ARGV`` 签名，它使用 "
"``ARGV#`` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-language.7.rst:683
msgid ""
"Note that this approach does not apply to :command:`macro` implementations"
" because they reference arguments using placeholders, not real variables."
msgstr "请注意，此方法不适用于 :command:`macro` 实现，因为它们使用占位符引用参数，而不是实际变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:4
msgid "cmake-modules(7)"
msgstr "cmake 模块(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:6
msgid ""
"The modules listed here are part of the CMake distribution. Projects may "
"provide further modules; their location(s) can be specified in the "
":variable:`CMAKE_MODULE_PATH` variable."
msgstr "此处列出的模块是 CMake 发行版的一部分。项目可以提供更多模块；它们的位置可以在 CMAKE_MODULE_PATH 变量中指定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:11
msgid "Utility Modules"
msgstr "实用模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:13
msgid "These modules are loaded using the :command:`include` command."
msgstr "这些模块使用 :command:`include` 命令加载。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:105
msgid ""
"These modules search for third-party software. They are normally called "
"through the :command:`find_package` command."
msgstr "这些模块搜索第三方软件。它们通常通过 :command:`find_package` 命令调用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:266
msgid "Deprecated Modules"
msgstr "弃用的模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:269
msgid "Deprecated Utility Modules"
msgstr "弃用的实用程序模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:290
msgid "Deprecated Find Modules"
msgstr "弃用的查找模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:305
msgid "Legacy CPack Modules"
msgstr "旧版 CPack 模块"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-modules.7.rst:307
msgid ""
"These modules used to be mistakenly exposed to the user, and have been "
"moved out of user visibility. They are for CPack internal use, and should "
"never be used directly."
msgstr "这些模块曾经被错误地暴露给用户，并且已经被移出用户可见范围。它们供 CPack 内部使用，切勿直接使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:4
msgid "cmake-packages(7)"
msgstr "cmake 包(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:13
msgid ""
"Packages provide dependency information to CMake based buildsystems.  "
"Packages are found with the :command:`find_package` command.  The result "
"of using :command:`find_package` is either a set of :prop_tgt:`IMPORTED` "
"targets, or a set of variables corresponding to build-relevant "
"information."
msgstr ""
"包为基于 CMake 的构建系统提供依赖信息。使用 :command:`find_package` 命令找到包。使用 "
":command:`find_package` 的结果要么是一组 :prop_tgt:`IMPORTED` "
"目标，要么是一组与构建相关信息相对应的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:19
msgid "Using Packages"
msgstr "使用包"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:21
msgid ""
"CMake provides direct support for two forms of packages, `Config-file "
"Packages`_ and `Find-module Packages`_. Indirect support for ``pkg-"
"config`` packages is also provided via the :module:`FindPkgConfig` module."
"  In all cases, the basic form of :command:`find_package` calls is the "
"same:"
msgstr ""
"CMake 直接支持两种形式的包，`Config-file Packages`_ 和 `Find-module Packages`_。还通过 "
"FindPkgConfig 模块提供对 ``pkg-config`` 包的间接支持。在所有情况下， :command:`find_package` "
"调用的基本形式是相同的："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:33
msgid ""
"In cases where it is known that a package configuration file is provided "
"by upstream, and only that should be used, the ``CONFIG`` keyword may be "
"passed to :command:`find_package`:"
msgstr ""
"如果已知上游提供了包配置文件，并且只应使用该文件，则可以将 ``CONFIG`` 关键字传递给 :command:`find_package`："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:42
msgid "Similarly, the ``MODULE`` keyword says to use only a find-module:"
msgstr "同样，``MODULE`` 关键字表示只使用一个查找模块："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:48
msgid ""
"Specifying the type of package explicitly improves the error message shown"
" to the user if it is not found."
msgstr "如果未找到，明确指定包的类型会改进向用户显示的错误消息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:51
msgid ""
"Both types of packages also support specifying components of a package, "
"either after the ``REQUIRED`` keyword:"
msgstr "这两种类型的包还支持在 ``REQUIRED`` 关键字之后指定包的组件："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:58
msgid "or as a separate ``COMPONENTS`` list:"
msgstr "或者作为单独的“组件”列表："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:64
msgid "or as a separate ``OPTIONAL_COMPONENTS`` list:"
msgstr "或者作为一个单独的``OPTIONAL_COMPONENTS`` 列表："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:72
msgid ""
"Handling of ``COMPONENTS`` and ``OPTIONAL_COMPONENTS`` is defined by the "
"package."
msgstr "``COMPONENTS`` 和``OPTIONAL_COMPONENTS`` 的处理由包定义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:75
msgid ""
"By setting the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` "
"variable to ``TRUE``, the ``<PackageName>`` package will not be searched, "
"and will always be ``NOTFOUND``. Likewise, setting the "
":variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` to ``TRUE`` will make"
" the package REQUIRED."
msgstr ""
"通过将 :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` 变量设置为 "
"``TRUE``，将不会搜索 ``<PackageName>`` 包，并且将始终为 ``NOTFOUND``。同样，将 "
":variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` 设置为 ``TRUE`` "
"将使包成为必需的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:84
msgid "Config-file Packages"
msgstr "配置文件包"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:86
msgid ""
"A config-file package is a set of files provided by upstreams for "
"downstreams to use. CMake searches in a number of locations for package "
"configuration files, as described in the :command:`find_package` "
"documentation.  The most simple way for a CMake user to tell "
":manual:`cmake(1)` to search in a non-standard prefix for a package is to "
"set the ``CMAKE_PREFIX_PATH`` cache variable."
msgstr ""
"配置文件包是上游提供给下游使用的一组文件。 CMake 在多个位置搜索包配置文件，如 :command:`find_package` 文档中所述。 "
"CMake 用户告诉 :manual:`cmake(1)` 在非标准前缀中搜索包的最简单方法是设置 ``CMAKE_PREFIX_PATH`` "
"缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:92
msgid ""
"Config-file packages are provided by upstream vendors as part of "
"development packages, that is, they belong with the header files and any "
"other files provided to assist downstreams in using the package."
msgstr "配置文件包由上游供应商作为开发包的一部分提供，也就是说，它们与头文件和任何其他提供的文件一起提供，以帮助下游使用该包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:96
msgid ""
"A set of variables which provide package status information are also set "
"automatically when using a config-file package.  The "
"``<PackageName>_FOUND`` variable is set to true or false, depending on "
"whether the package was found.  The ``<PackageName>_DIR`` cache variable "
"is set to the location of the package configuration file."
msgstr ""
"使用配置文件包时，也会自动设置一组提供包状态信息的变量。 ``<PackageName>_FOUND`` 变量设置为 true 或 "
"false，具体取决于是否找到包。 ``<PackageName>_DIR`` 缓存变量设置为包配置文件的位置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:103
msgid "Find-module Packages"
msgstr "查找模块包"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:105
msgid ""
"A find module is a file with a set of rules for finding the required "
"pieces of a dependency, primarily header files and libraries.  Typically, "
"a find module is needed when the upstream is not built with CMake, or is "
"not CMake-aware enough to otherwise provide a package configuration file."
"  Unlike a package configuration file, it is not shipped with upstream, "
"but is used by downstream to find the files by guessing locations of files"
" with platform-specific hints."
msgstr ""
"查找模块是一个包含一组规则的文件，用于查找所需的依赖项，主要是头文件和库。通常，当上游不是使用 CMake 构建的，或者 CMake "
"的意识不足以提供包配置文件时，需要查找模块。与包配置文件不同，它不随上游一起提供，但下游使用它通过使用特定于平台的提示猜测文件位置来查找文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:112
msgid ""
"Unlike the case of an upstream-provided package configuration file, no "
"single point of reference identifies the package as being found, so the "
"``<PackageName>_FOUND`` variable is not automatically set by the "
":command:`find_package` command.  It can still be expected to be set by "
"convention however and should be set by the author of the Find-module.  "
"Similarly there is no ``<PackageName>_DIR`` variable, but each of the "
"artifacts such as library locations and header file locations provide a "
"separate cache variable."
msgstr ""
"与上游提供的包配置文件的情况不同，没有单个参考点将包标识为已找到，因此 ``<PackageName>_FOUND`` 变量不会由 "
":command:`find_package` 命令自动设置。然而，它仍然可以按约定设置，并且应该由 Find-module "
"的作者设置。类似地，没有 ``<PackageName>_DIR`` 变量，但是每个工件（例如库位置和头文件位置）都提供了一个单独的缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:120
msgid ""
"See the :manual:`cmake-developer(7)` manual for more information about "
"creating Find-module files."
msgstr "有关创建查找模块文件的更多信息，请参阅 :manual:`cmake-developer(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:124
msgid "Package Layout"
msgstr "包装布局"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:126
msgid ""
"A config-file package consists of a `Package Configuration File`_ and "
"optionally a `Package Version File`_ provided with the project "
"distribution."
msgstr "配置文件包由项目分发提供的“包配置文件”和可选的“包版本文件”组成。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:130
msgid "Package Configuration File"
msgstr "包配置文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:132
msgid "Consider a project ``Foo`` that installs the following files::"
msgstr "考虑一个安装以下文件的项目“Foo”："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:137
msgid "It may also provide a CMake package configuration file::"
msgstr "它还可能提供一个 CMake 包配置文件 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:141
msgid ""
"with content defining :prop_tgt:`IMPORTED` targets, or defining variables,"
" such as:"
msgstr "内容定义 :prop_tgt:`IMPORTED` 目标，或定义变量，例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:152
msgid ""
"If another project wishes to use ``Foo`` it need only to locate the "
"``FooConfig.cmake`` file and load it to get all the information it needs "
"about package content locations.  Since the package configuration file is "
"provided by the package installation it already knows all the file "
"locations."
msgstr ""
"如果另一个项目希望使用 ``Foo``，它只需要找到 ``FooConfig.cmake`` "
"文件并加载它以获取它需要的关于包内容位置的所有信息。由于包配置文件是由包安装提供的，它已经知道所有文件位置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:157
msgid ""
"The :command:`find_package` command may be used to search for the package "
"configuration file.  This command constructs a set of installation "
"prefixes and searches under each prefix in several locations.  Given the "
"name ``Foo``, it looks for a file called ``FooConfig.cmake`` or ``foo-"
"config.cmake``. The full set of locations is specified in the "
":command:`find_package` command documentation. One place it looks is::"
msgstr ""
":command:`find_package` "
"命令可用于搜索包配置文件。此命令构造一组安装前缀并在多个位置的每个前缀下搜索。给定名称“Foo”，它会查找名为“FooConfig.cmake”或“foo-"
"config.cmake”的文件。完整的位置集在 :command:`find_package` 命令文档中指定。它看起来的一个地方是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:166
msgid ""
"where ``Foo*`` is a case-insensitive globbing expression.  In our example "
"the globbing expression will match ``<prefix>/lib/cmake/foo-1.2`` and the "
"package configuration file will be found."
msgstr ""
"其中``Foo*`` 是不区分大小写的 globbing 表达式。在我们的示例中，globbing 表达式将匹配 "
"``<prefix>/lib/cmake/foo-1.2`` 并且将找到包配置文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:170
msgid ""
"Once found, a package configuration file is immediately loaded.  It, "
"together with a package version file, contains all the information the "
"project needs to use the package."
msgstr "一旦找到，就会立即加载一个包配置文件。它与包版本文件一起包含项目使用该包所需的所有信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:175
msgid "Package Version File"
msgstr "包版本文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:177
msgid ""
"When the :command:`find_package` command finds a candidate package "
"configuration file it looks next to it for a version file. The version "
"file is loaded to test whether the package version is an acceptable match "
"for the version requested. If the version file claims compatibility the "
"configuration file is accepted. Otherwise it is ignored."
msgstr ""
"当 :command:`find_package` "
"命令找到候选包配置文件时，它会在它旁边查找版本文件。加载版本文件以测试包版本是否与请求的版本匹配。如果版本文件声称兼容，则接受配置文件。否则将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:183
msgid ""
"The name of the package version file must match that of the package "
"configuration file but has either ``-version`` or ``Version`` appended to "
"the name before the ``.cmake`` extension.  For example, the files::"
msgstr ""
"包版本文件的名称必须与包配置文件的名称相匹配，但在“.cmake”扩展名之前的名称后附加“-version”或“Version”。例如，文件 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:190
msgid "and::"
msgstr "和：："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:195
msgid ""
"are each pairs of package configuration files and corresponding package "
"version files."
msgstr "是每对包配置文件和相应的包版本文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:198
msgid ""
"When the :command:`find_package` command loads a version file it first "
"sets the following variables:"
msgstr "当 :command:`find_package` 命令加载版本文件时，它首先设置以下变量："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:202
msgid "``PACKAGE_FIND_NAME``"
msgstr "``PACKAGE_FIND_NAME``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:202
msgid "The ``<PackageName>``"
msgstr "``<PackageName>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:205
msgid "``PACKAGE_FIND_VERSION``"
msgstr "``PACKAGE_FIND_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:205
msgid "Full requested version string"
msgstr "完整请求的版本字符串"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:208
msgid "``PACKAGE_FIND_VERSION_MAJOR``"
msgstr "``PACKAGE_FIND_VERSION_MAJOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:208
msgid "Major version if requested, else 0"
msgstr "如果需要，则为主要版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:211
msgid "``PACKAGE_FIND_VERSION_MINOR``"
msgstr "``PACKAGE_FIND_VERSION_MINOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:211
msgid "Minor version if requested, else 0"
msgstr "如果要求是次要版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:214
msgid "``PACKAGE_FIND_VERSION_PATCH``"
msgstr "``PACKAGE_FIND_VERSION_PATCH``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:214
msgid "Patch version if requested, else 0"
msgstr "如果要求补丁版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:217
msgid "``PACKAGE_FIND_VERSION_TWEAK``"
msgstr "``PACKAGE_FIND_VERSION_TWEAK``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:217
msgid "Tweak version if requested, else 0"
msgstr "如果需要调整版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:220
msgid "``PACKAGE_FIND_VERSION_COUNT``"
msgstr "``PACKAGE_FIND_VERSION_COUNT``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:220
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:261
msgid "Number of version components, 0 to 4"
msgstr "版本组件数，0 到 4"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:222
msgid ""
"The version file must use these variables to check whether it is "
"compatible or an exact match for the requested version and set the "
"following variables with results:"
msgstr "版本文件必须使用这些变量来检查它是否与请求的版本兼容或完全匹配，并使用结果设置以下变量："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:227
msgid "``PACKAGE_VERSION``"
msgstr "``PACKAGE_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:227
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:246
msgid "Full provided version string"
msgstr "完整提供的版本字符串"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:230
msgid "``PACKAGE_VERSION_EXACT``"
msgstr "``PACKAGE_VERSION_EXACT``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:230
msgid "True if version is exact match"
msgstr "如果版本完全匹配则为真"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:233
msgid "``PACKAGE_VERSION_COMPATIBLE``"
msgstr "``PACKAGE_VERSION_COMPATIBLE``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:233
msgid "True if version is compatible"
msgstr "如果版本兼容则为真"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:236
msgid "``PACKAGE_VERSION_UNSUITABLE``"
msgstr "``PACKAGE_VERSION_UNSUITABLE``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:236
msgid "True if unsuitable as any version"
msgstr "如果不适合任何版本，则为真"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:238
msgid ""
"Version files are loaded in a nested scope so they are free to set any "
"variables they wish as part of their computation. The find_package command"
" wipes out the scope when the version file has completed and it has "
"checked the output variables. When the version file claims to be an "
"acceptable match for the requested version the find_package command sets "
"the following variables for use by the project:"
msgstr ""
"版本文件在嵌套范围内加载，因此它们可以自由设置任何他们希望的变量作为计算的一部分。 find_package "
"命令在版本文件完成并检查输出变量时清除范围。当版本文件声称与请求的版本匹配时，find_package 命令会设置以下变量供项目使用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:246
msgid "``<PackageName>_VERSION``"
msgstr "``<PackageName>_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:249
msgid "``<PackageName>_VERSION_MAJOR``"
msgstr "``<PackageName>_VERSION_MAJOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:249
msgid "Major version if provided, else 0"
msgstr "如果提供主要版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:252
msgid "``<PackageName>_VERSION_MINOR``"
msgstr "``<PackageName>_VERSION_MINOR``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:252
msgid "Minor version if provided, else 0"
msgstr "如果提供次要版本，否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:255
msgid "``<PackageName>_VERSION_PATCH``"
msgstr "``<PackageName>_VERSION_PATCH``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:255
msgid "Patch version if provided, else 0"
msgstr "补丁版本（如果提供），否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:258
msgid "``<PackageName>_VERSION_TWEAK``"
msgstr "``<PackageName>_VERSION_TWEAK``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:258
msgid "Tweak version if provided, else 0"
msgstr "调整版本（如果提供），否则为 0"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:261
msgid "``<PackageName>_VERSION_COUNT``"
msgstr "``<PackageName>_VERSION_COUNT``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:263
msgid ""
"The variables report the version of the package that was actually found. "
"The ``<PackageName>`` part of their name matches the argument given to the"
" :command:`find_package` command."
msgstr ""
"变量报告实际找到的包的版本。其名称的``<PackageName>`` 部分与提供给 :command:`find_package` "
"命令的参数相匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:270
msgid "Creating Packages"
msgstr "创建包"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:272
msgid ""
"Usually, the upstream depends on CMake itself and can use some CMake "
"facilities for creating the package files. Consider an upstream which "
"provides a single shared library:"
msgstr "通常，上游依赖于 CMake 本身，并且可以使用一些 CMake 工具来创建包文件。考虑一个提供单个共享库的上游："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:348
msgid ""
"The :module:`CMakePackageConfigHelpers` module provides a macro for "
"creating a simple ``ConfigVersion.cmake`` file.  This file sets the "
"version of the package.  It is read by CMake when :command:`find_package` "
"is called to determine the compatibility with the requested version, and "
"to set some version-specific variables ``<PackageName>_VERSION``, "
"``<PackageName>_VERSION_MAJOR``, ``<PackageName>_VERSION_MINOR`` etc.  The"
" :command:`install(EXPORT)` command is used to export the targets in the "
"``ClimbingStatsTargets`` export-set, defined previously by the "
":command:`install(TARGETS)` command. This command generates the "
"``ClimbingStatsTargets.cmake`` file to contain :prop_tgt:`IMPORTED` "
"targets, suitable for use by downstreams and arranges to install it to "
"``lib/cmake/ClimbingStats``.  The generated "
"``ClimbingStatsConfigVersion.cmake`` and a "
"``cmake/ClimbingStatsConfig.cmake`` are installed to the same location, "
"completing the package."
msgstr ""
":module:`CMakePackageConfigHelpers` 模块提供了一个用于创建简单的 ``ConfigVersion.cmake``"
" 文件的宏。该文件设置包的版本。当 :command:`find_package` "
"被调用以确定与请求版本的兼容性，并设置一些特定于版本的变量``<PackageName>_VERSION``、``<PackageName>_VERSION_MAJOR``、`"
" `<PackageName>_VERSION_MINOR`` 等。 :command:`install(EXPORT)` 命令用于导出之前由 "
":command:`install(TARGETS)` 定义的 ``ClimbingStatsTargets`` 导出集中的目标命令。此命令生成 "
"``ClimbingStatsTargets.cmake`` 文件以包含:prop_tgt:`IMPORTED` "
"目标，适合下游使用，并安排将其安装到 ``lib/cmake/ClimbingStats``。生成的 "
"``ClimbingStatsConfigVersion.cmake`` 和 ``cmake/ClimbingStatsConfig.cmake``"
" 安装到相同的位置，完成包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:362
msgid ""
"The generated :prop_tgt:`IMPORTED` targets have appropriate properties set"
" to define their :ref:`usage requirements <Target Usage Requirements>`, "
"such as :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`, "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` and other relevant built-in "
"``INTERFACE_`` properties.  The ``INTERFACE`` variant of user-defined "
"properties listed in :prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other "
":ref:`Compatible Interface Properties` are also propagated to the "
"generated :prop_tgt:`IMPORTED` targets.  In the above case, "
"``ClimbingStats_MAJOR_VERSION`` is defined as a string which must be "
"compatible among the dependencies of any depender.  By setting this custom"
" defined user property in this version and in the next version of "
"``ClimbingStats``, :manual:`cmake(1)` will issue a diagnostic if there is "
"an attempt to use version 3 together with version 4.  Packages can choose "
"to employ such a pattern if different major versions of the package are "
"designed to be incompatible."
msgstr ""
"生成的 :prop_tgt:`IMPORTED` 目标具有适当的属性集来定义它们的 :ref:`使用要求 <Target Usage "
"Requirements>`，例如 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`、 :prop_tgt:`INTERFACE_COMPILE_DEFINITIONS`"
" 和其他相关的内置``INTERFACE_`` 属性。 COMPATIBLE_INTERFACE_STRING 和其他 Compatible "
"Interface Properties 中列出的用户定义属性的 INTERFACE 变体也传播到生成的 IMPORTED "
"目标。在上述情况下，``ClimbingStats_MAJOR_VERSION`` "
"被定义为一个字符串，它必须在任何依赖项的依赖项之间兼容。通过在此版本和下一版本的“ClimbingStats”中设置此自定义用户属性，如果尝试将版本"
" 3 与版本 4 一起使用，cmake(1) 将发出诊断。如果包的不同主要版本被设计为不兼容，则可以选择采用这种模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:378
msgid ""
"A ``NAMESPACE`` with double-colons is specified when exporting the targets"
" for installation.  This convention of double-colons gives CMake a hint "
"that the name is an :prop_tgt:`IMPORTED` target when it is used by "
"downstreams with the :command:`target_link_libraries` command.  This way, "
"CMake can issue a diagnostic if the package providing it has not yet been "
"found."
msgstr ""
"导出安装目标时指定带有双冒号的 ``NAMESPACE``。这种双冒号的约定给 CMake 一个提示，当它被下游使用 "
":command:`target_link_libraries` 命令时，该名称是一个 :prop_tgt:`IMPORTED` "
"目标。这样，如果尚未找到提供它的包，CMake 可以发出诊断。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:384
msgid ""
"In this case, when using :command:`install(TARGETS)` the ``INCLUDES "
"DESTINATION`` was specified.  This causes the ``IMPORTED`` targets to have"
" their :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated with the "
"``include`` directory in the :variable:`CMAKE_INSTALL_PREFIX`.  When the "
"``IMPORTED`` target is used by downstream, it automatically consumes the "
"entries from that property."
msgstr ""
"在这种情况下，当使用 :command:`install(TARGETS)` 时指定了``INCLUDES DESTINATION``。这会导致 "
"``IMPORTED`` 目标的 INTERFACE_INCLUDE_DIRECTORIES 填充 CMAKE_INSTALL_PREFIX 中的 "
"``include`` 目录。当下游使用 ``IMPORTED`` 目标时，它会自动使用该属性中的条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:392
msgid "Creating a Package Configuration File"
msgstr "创建包配置文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:394
msgid ""
"In this case, the ``ClimbingStatsConfig.cmake`` file could be as simple "
"as:"
msgstr "在这种情况下，``ClimbingStatsConfig.cmake`` 文件可以很简单："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:400
msgid ""
"As this allows downstreams to use the ``IMPORTED`` targets.  If any macros"
" should be provided by the ``ClimbingStats`` package, they should be in a "
"separate file which is installed to the same location as the "
"``ClimbingStatsConfig.cmake`` file, and included from there."
msgstr ""
"因为这允许下游使用 ``IMPORTED`` "
"目标。如果“ClimbingStats”包应该提供任何宏，它们应该在一个单独的文件中，该文件安装到与“ClimbingStatsConfig.cmake”文件相同的位置，并从那里包含。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:405
msgid "This can also be extended to cover dependencies:"
msgstr "这也可以扩展以涵盖依赖项："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:416
msgid ""
"As the ``Stats::Types`` target is a ``PUBLIC`` dependency of "
"``ClimbingStats``, downstreams must also find the ``Stats`` package and "
"link to the ``Stats::Types`` library.  The ``Stats`` package should be "
"found in the ``ClimbingStatsConfig.cmake`` file to ensure this.  The "
"``find_dependency`` macro from the :module:`CMakeFindDependencyMacro` "
"helps with this by propagating whether the package is ``REQUIRED``, or "
"``QUIET`` etc.  All ``REQUIRED`` dependencies of a package should be found"
" in the ``Config.cmake`` file:"
msgstr ""
"由于``Stats::Types`` 目标是``ClimbingStats`` 的``PUBLIC`` 依赖项，下游还必须找到``Stats`` "
"包并链接到``Stats::Types`` 库. ``Stats`` 包应该在``ClimbingStatsConfig.cmake`` "
"文件中找到以确保这一点。来自 :module:`CMakeFindDependencyMacro` 的 ``find_dependency`` "
"宏通过传播包是 ``REQUIRED`` 还是 ``QUIET`` 等来帮助解决这个问题。包的所有 ``REQUIRED`` "
"依赖项应该是在``Config.cmake`` 文件中找到："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:432
msgid ""
"The ``find_dependency`` macro also sets ``ClimbingStats_FOUND`` to "
"``False`` if the dependency is not found, along with a diagnostic that the"
" ``ClimbingStats`` package can not be used without the ``Stats`` package."
msgstr ""
"``find_dependency`` 宏还会将``ClimbingStats_FOUND`` "
"设置为``False``（如果未找到依赖项），以及一个诊断，即``ClimbingStats`` 包在没有``Stats`` 的情况下无法使用包裹。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:436
msgid ""
"If ``COMPONENTS`` are specified when the downstream uses "
":command:`find_package`, they are listed in the "
"``<PackageName>_FIND_COMPONENTS`` variable. If a particular component is "
"non-optional, then the ``<PackageName>_FIND_REQUIRED_<comp>`` will be "
"true. This can be tested with logic in the package configuration file:"
msgstr ""
"如果在下游使用 :command:`find_package` 时指定了 "
"``COMPONENTS``，它们将列在``<PackageName>_FIND_COMPONENTS`` 变量中。如果特定组件是非可选的，则 "
"``<PackageName>_FIND_REQUIRED_<comp>`` 将为真。这可以用包配置文件中的逻辑进行测试："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:459
msgid ""
"Here, the ``ClimbingStats_NOT_FOUND_MESSAGE`` is set to a diagnosis that "
"the package could not be found because an invalid component was specified."
"  This message variable can be set for any case where the ``_FOUND`` "
"variable is set to ``False``, and will be displayed to the user."
msgstr ""
"在这里，``ClimbingStats_NOT_FOUND_MESSAGE`` "
"被设置为无法找到包的诊断，因为指定了无效的组件。这个消息变量可以在任何情况下设置 `_FOUND`` 变量设置为 "
"``False``，并将显示给用户。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:465
msgid "Creating a Package Configuration File for the Build Tree"
msgstr "为构建树创建包配置文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:467
msgid ""
"The :command:`export(EXPORT)` command creates an :prop_tgt:`IMPORTED` "
"targets definition file which is specific to the build-tree, and is not "
"relocatable. This can similarly be used with a suitable package "
"configuration file and package version file to define a package for the "
"build tree which may be used without installation.  Consumers of the build"
" tree can simply ensure that the :variable:`CMAKE_PREFIX_PATH` contains "
"the build directory, or set the ``ClimbingStats_DIR`` to "
"``<build_dir>/ClimbingStats`` in the cache."
msgstr ""
":command:`export(EXPORT)` 命令创建一个 :prop_tgt:`IMPORTED` "
"目标定义文件，该文件特定于构建树，并且不可重定位。这可以类似地与合适的包配置文件和包版本文件一起使用，为构建树定义一个包，无需安装即可使用。构建树的消费者只需确保 :variable:`CMAKE_PREFIX_PATH`"
" 包含构建目录，或在缓存中将``ClimbingStats_DIR`` 设置为``<build_dir>/ClimbingStats``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:478
msgid "Creating Relocatable Packages"
msgstr "创建可重定位包"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:480
msgid ""
"A relocatable package must not reference absolute paths of files on the "
"machine where the package is built that will not exist on the machines "
"where the package may be installed."
msgstr "可重定位包不得引用在构建包的机器上的文件的绝对路径，这些文件在可能安装包的机器上不存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:484
msgid ""
"Packages created by :command:`install(EXPORT)` are designed to be "
"relocatable, using paths relative to the location of the package itself.  "
"When defining the interface of a target for ``EXPORT``, keep in mind that "
"the include directories should be specified as relative paths which are "
"relative to the :variable:`CMAKE_INSTALL_PREFIX`:"
msgstr ""
"由 :command:`install(EXPORT)` 创建的包被设计为可重定位，使用相对于包本身位置的路径。在为 EXPORT "
"定义目标接口时，请记住，包含目录应指定为相对于 CMAKE_INSTALL_PREFIX 的相对路径："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:502
msgid ""
"The ``$<INSTALL_PREFIX>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` may be used as a placeholder for the install prefix "
"without resulting in a non-relocatable package.  This is necessary if "
"complex generator expressions are used:"
msgstr ""
"``$<INSTALL_PREFIX>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` 可以用作安装前缀的占位符，而不会产生不可重定位的包。如果使用复杂的生成器表达式，这是必需的："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:514
msgid ""
"This also applies to paths referencing external dependencies. It is not "
"advisable to populate any properties which may contain paths, such as "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES`, with paths relevant to dependencies."
" For example, this code may not work well for a relocatable package:"
msgstr ""
"这也适用于引用外部依赖项的路径。不建议使用与依赖项相关的路径填充任何可能包含路径的属性，例如:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES`"
" 和 :prop_tgt:`INTERFACE_LINK_LIBRARIES`。例如，此代码可能不适用于可重定位包："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:529
msgid ""
"The referenced variables may contain the absolute paths to libraries and "
"include directories **as found on the machine the package was made on**. "
"This would create a package with hard-coded paths to dependencies and not "
"suitable for relocation."
msgstr "引用的变量可能包含库的绝对路径，并包含目录**在创建包的机器上找到的**。这将创建一个包，其中包含硬编码的依赖项路径并且不适合重定位。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:534
msgid ""
"Ideally such dependencies should be used through their own :ref:`IMPORTED "
"targets <Imported Targets>` that have their own "
":prop_tgt:`IMPORTED_LOCATION` and usage requirement properties such as "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` populated appropriately.  Those "
"imported targets may then be used with the "
":command:`target_link_libraries` command for ``ClimbingStats``:"
msgstr ""
"理想情况下，此类依赖项应通过它们自己的 :ref:`IMPORTED 目标 <Imported Targets>` 使用，这些目标具有自己的 "
":prop_tgt:`IMPORTED_LOCATION` 和使用要求属性，例如 INTERFACE_INCLUDE_DIRECTORIES` "
"适当填充。这些导入的目标然后可以与 :command:`target_link_libraries` 命令一起用于 "
"``ClimbingStats``："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:545
msgid ""
"With this approach the package references its external dependencies only "
"through the names of :ref:`IMPORTED targets <Imported Targets>`. When a "
"consumer uses the installed package, the consumer will run the appropriate"
" :command:`find_package` commands (via the ``find_dependency`` macro "
"described above) to find the dependencies and populate the imported "
"targets with appropriate paths on their own machine."
msgstr ""
"使用这种方法，包仅通过 :ref:`IMPORTED targets <Imported Targets>` "
"的名称引用其外部依赖项。当消费者使用已安装的包时，消费者将运行适当的 :command:`find_package` 命令（通过上述的 "
"``find_dependency`` 宏）来查找依赖项并在自己的机器上使用适当的路径填充导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:552
msgid ""
"Unfortunately many :manual:`modules <cmake-modules(7)>` shipped with CMake"
" do not yet provide :ref:`IMPORTED targets <Imported Targets>` because "
"their development pre-dated this approach.  This may improve incrementally"
" over time.  Workarounds to create relocatable packages using such modules"
" include:"
msgstr ""
"不幸的是，CMake 附带的许多 :manual:`modules <cmake-modules(7)>` 还没有提供 :ref:`IMPORTED"
" targets <Imported "
"Targets>`，因为它们的开发早于这种方法。随着时间的推移，这可能会逐渐改善。使用此类模块创建可重定位包的解决方法包括："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:558
msgid ""
"When building the package, specify each ``Foo_LIBRARY`` cache entry as "
"just a library name, e.g. ``-DFoo_LIBRARY=foo``.  This tells the "
"corresponding find module to populate the ``Foo_LIBRARIES`` with just "
"``foo`` to ask the linker to search for the library instead of hard-coding"
" a path."
msgstr ""
"构建包时，将每个“Foo_LIBRARY”缓存条目指定为库名称，例如``-DFoo_LIBRARY=foo``。这告诉相应的查找模块只用 "
"``foo`` 填充 ``Foo_LIBRARIES`` 以要求链接器搜索库而不是硬编码路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:564
msgid ""
"Or, after installing the package content but before creating the package "
"installation binary for redistribution, manually replace the absolute "
"paths with placeholders for substitution by the installation tool when the"
" package is installed."
msgstr "或者，在安装包内容之后但在创建用于重新分发的包安装二进制文件之前，手动将绝对路径替换为占位符，以便在安装包时由安装工具替换。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:572
msgid "Package Registry"
msgstr "包注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:574
msgid ""
"CMake provides two central locations to register packages that have been "
"built or installed anywhere on a system:"
msgstr "CMake 提供了两个中心位置来注册已构建或安装在系统任何位置的包："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:577
msgid "`User Package Registry`_"
msgstr "`用户包注册表`_"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:578
msgid "`System Package Registry`_"
msgstr "`系统包注册表`_"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:580
msgid ""
"The registries are especially useful to help projects find packages in "
"non-standard install locations or directly in their own build trees. A "
"project may populate either the user or system registry (using its own "
"means, see below) to refer to its location. In either case the package "
"should store at the registered location a `Package Configuration File`_ "
"(``<PackageName>Config.cmake``) and optionally a `Package Version File`_ "
"(``<PackageName>ConfigVersion.cmake``)."
msgstr ""
"这些注册表对于帮助项目在非标准安装位置或直接在它们自己的构建树中查找包特别有用。一个项目可以填充用户或系统注册表（使用它自己的方式，见下文）来引用它的位置。在任何一种情况下，包都应该在注册位置存储一个`包配置文件`_（``<PackageName>Config.cmake``）和可选的`包版本文件`_（``<PackageName>ConfigVersion.cmake``"
" )."

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:588
msgid ""
"The :command:`find_package` command searches the two package registries as"
" two of the search steps specified in its documentation.  If it has "
"sufficient permissions it also removes stale package registry entries that"
" refer to directories that do not exist or do not contain a matching "
"package configuration file."
msgstr ""
":command:`find_package` "
"命令搜索两个包注册表作为其文档中指定的两个搜索步骤。如果它有足够的权限，它还会删除引用不存在或不包含匹配包配置文件的目录的陈旧包注册表项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:597
msgid "User Package Registry"
msgstr "用户包注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:599
msgid ""
"The User Package Registry is stored in a per-user location. The "
":command:`export(PACKAGE)` command may be used to register a project build"
" tree in the user package registry.  CMake currently provides no interface"
" to add install trees to the user package registry.  Installers must be "
"manually taught to register their packages if desired."
msgstr ""
"用户包注册表存储在每个用户的位置。 :command:`export(PACKAGE)` 命令可用于在用户包注册表中注册项目构建树。 CMake "
"目前没有提供接口来将安装树添加到用户包注册表。如果需要，必须手动教导安装者注册他们的包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:605
msgid ""
"On Windows the user package registry is stored in the Windows registry "
"under a key in ``HKEY_CURRENT_USER``."
msgstr "在 Windows 上，用户包注册表存储在 Windows 注册表中的“HKEY_CURRENT_USER”中的一个键下。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:608
msgid "A ``<PackageName>`` may appear under registry key::"
msgstr "``<PackageName>`` 可能会出现在注册表项下 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:612
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:639
msgid ""
"as a ``REG_SZ`` value, with arbitrary name, that specifies the directory "
"containing the package configuration file."
msgstr "作为 ``REG_SZ`` 值，具有任意名称，指定包含包配置文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:615
msgid ""
"On UNIX platforms the user package registry is stored in the user home "
"directory under ``~/.cmake/packages``.  A ``<PackageName>`` may appear "
"under the directory::"
msgstr ""
"在 UNIX 平台上，用户包注册表存储在 ~/.cmake/packages 下的用户主目录中。 ``<PackageName>`` "
"可能会出现在目录下："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:621
msgid ""
"as a file, with arbitrary name, whose content specifies the directory "
"containing the package configuration file."
msgstr "作为一个文件，具有任意名称，其内容指定包含包配置文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:627
msgid "System Package Registry"
msgstr "系统包注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:629
msgid ""
"The System Package Registry is stored in a system-wide location. CMake "
"currently provides no interface to add to the system package registry. "
"Installers must be manually taught to register their packages if desired."
msgstr "系统包注册表存储在系统范围内的位置。 CMake 当前不提供添加到系统包注册表的接口。如果需要，必须手动教导安装者注册他们的包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:633
msgid ""
"On Windows the system package registry is stored in the Windows registry "
"under a key in ``HKEY_LOCAL_MACHINE``.  A ``<PackageName>`` may appear "
"under registry key::"
msgstr ""
"在 Windows 上，系统包注册表存储在 Windows 注册表中的“HKEY_LOCAL_MACHINE”中的一个键下。 "
"``<PackageName>`` 可能会出现在注册表项下 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:642
msgid "There is no system package registry on non-Windows platforms."
msgstr "非 Windows 平台上没有系统包注册表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:647
msgid "Disabling the Package Registry"
msgstr "禁用包注册表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:649
msgid ""
"In some cases using the Package Registries is not desirable. CMake allows "
"one to disable them using the following variables:"
msgstr "在某些情况下，使用包注册表是不可取的。 CMake 允许使用以下变量禁用它们："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:652
msgid ""
"The :command:`export(PACKAGE)` command does not populate the user package "
"registry when :policy:`CMP0090` is set to ``NEW`` unless the "
":variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable explicitly enables it. "
"When :policy:`CMP0090` is *not* set to ``NEW`` then "
":command:`export(PACKAGE)` populates the user package registry unless the "
":variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable explicitly disables "
"it."
msgstr ""
"当 CMP0090 设置为 NEW 时，export(PACKAGE) 命令不会填充用户包注册表，除非 "
"CMAKE_EXPORT_PACKAGE_REGISTRY 变量明确启用它。当 CMP0090 *未*设置为 NEW "
"时，export(PACKAGE) 将填充用户包注册表，除非 CMAKE_EXPORT_NO_PACKAGE_REGISTRY 变量明确禁用它。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:659
msgid ""
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` disables the User Package "
"Registry in all the :command:`find_package` calls when set to ``FALSE``."
msgstr ""
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 在设置为 ``FALSE`` 时禁用所有 "
":command:`find_package` 调用中的用户包注册表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:662
msgid ""
"Deprecated :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` disables the"
" User Package Registry in all the :command:`find_package` calls when set "
"to ``TRUE``. This variable is ignored when "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` has been set."
msgstr ""
"已弃用 :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` 在设置为 ``TRUE`` 时禁用所有 "
":command:`find_package` 调用中的用户包注册表。当 "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 已设置时，此变量将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:666
msgid ""
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` disables the "
"System Package Registry in all the :command:`find_package` calls."
msgstr ""
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` 在所有 "
":command:`find_package` 调用中禁用系统包注册表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:670
msgid "Package Registry Example"
msgstr "包注册表示例"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:672
msgid ""
"A simple convention for naming package registry entries is to use content "
"hashes.  They are deterministic and unlikely to collide "
"(:command:`export(PACKAGE)` uses this approach). The name of an entry "
"referencing a specific directory is simply the content hash of the "
"directory path itself."
msgstr ""
"命名包注册表项的一个简单约定是使用内容哈希。它们是确定性的并且不太可能发生冲突（ :command:`export(PACKAGE)` "
"使用这种方法）。引用特定目录的条目的名称只是目录路径本身的内容哈希。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:678
msgid ""
"If a project arranges for package registry entries to exist, such as::"
msgstr "如果项目安排包注册表条目存在，例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:685
msgid "or::"
msgstr "或者：："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:692
msgid "then the ``CMakeLists.txt`` code:"
msgstr "然后是 ``CMakeLists.txt`` 代码："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:698
msgid ""
"will search the registered locations for package configuration files "
"(``MyPackageConfig.cmake``).  The search order among package registry "
"entries for a single package is unspecified and the entry names (hashes in"
" this example) have no meaning.  Registered locations may contain package "
"version files (``MyPackageConfigVersion.cmake``) to tell "
":command:`find_package` whether a specific location is suitable for the "
"version requested."
msgstr ""
"将在注册位置搜索包配置文件（``MyPackageConfig.cmake``）。单个包的包注册表条目中的搜索顺序未指定，条目名称（本例中的散列）没有意义。注册位置可能包含包版本文件（``MyPackageConfigVersion.cmake``）来告诉 :command:`find_package`"
" 特定位置是否适合所请求的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:707
msgid "Package Registry Ownership"
msgstr "包注册表所有权"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:709
msgid ""
"Package registry entries are individually owned by the project "
"installations that they reference.  A package installer is responsible for"
" adding its own entry and the corresponding uninstaller is responsible for"
" removing it."
msgstr "包注册表项由它们引用的项目安装单独拥有。软件包安装程序负责添加自己的条目，相应的卸载程序负责删除它。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-packages.7.rst:713
msgid ""
"The :command:`export(PACKAGE)` command populates the user package registry"
" with the location of a project build tree.  Build trees tend to be "
"deleted by developers and have no \"uninstall\" event that could trigger "
"removal of their entries.  In order to keep the registries clean the "
":command:`find_package` command automatically removes stale entries it "
"encounters if it has sufficient permissions.  CMake provides no interface "
"to remove an entry referencing an existing build tree once "
":command:`export(PACKAGE)` has been invoked. However, if the project "
"removes its package configuration file from the build tree then the entry "
"referencing the location will be considered stale."
msgstr ""
":command:`export(PACKAGE)` "
"命令使用项目构建树的位置填充用户包注册表。构建树往往被开发人员删除，并且没有可能触发删除其条目的“卸载”事件。为了保持注册表的清洁，如果有足够的权限， :command:`find_package`"
" 命令会自动删除它遇到的陈旧条目。一旦 export(PACKAGE) 被调用，CMake "
"就没有提供接口来删除引用现有构建树的条目。但是，如果项目从构建树中删除其包配置文件，则引用该位置的条目将被视为陈旧。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:57
msgid "CMP0143: USE_FOLDERS global property is treated as ON by default."
msgstr "CMP0143：默认情况下，USE_FOLDERS 全局属性被视为开启。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:65
msgid ""
"CMP0142: The Xcode generator does not append per-config suffixes to "
"library search paths."
msgstr "CMP0142：Xcode 生成器不会将 per-config 后缀附加到库搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:65
msgid ""
"CMP0141: MSVC debug information format flags are selected by an "
"abstraction."
msgstr "CMP0141：MSVC 调试信息格式标志由抽象选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:65
msgid "CMP0140: The return() command checks its arguments."
msgstr "CMP0140：return() 命令检查其参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid ""
"CMP0139: The if() command supports path comparisons using PATH_EQUAL "
"operator."
msgstr "CMP0139：if() 命令支持使用 PATH_EQUAL 运算符进行路径比较。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid "CMP0138: CheckIPOSupported uses flags from calling project."
msgstr "CMP0138：CheckIPOSupported 使用来自调用项目的标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid "CMP0137: try_compile() passes platform variables in project mode."
msgstr "CMP0137：try_compile() 在项目模式下传递平台变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid ""
"CMP0136: Watcom runtime library flags are selected by an abstraction."
msgstr "CMP0136：Watcom 运行时库标志由抽象选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid ""
"CMP0135: ExternalProject ignores timestamps in archives by default for the"
" URL download method."
msgstr "CMP0135：对于 URL 下载方法，ExternalProject 默认忽略存档中的时间戳。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid ""
"CMP0134: Fallback to \"HOST\" Windows registry view when \"TARGET\" view "
"is not usable."
msgstr "CMP0134：当“TARGET”视图不可用时回退到“HOST”Windows 注册表视图。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid ""
"CMP0133: The CPack module disables SLA by default in the CPack DragNDrop "
"Generator."
msgstr "CMP0133：CPack 模块在 CPack DragNDrop 生成器中默认禁用 SLA。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid "CMP0132: Do not set compiler environment variables on first run."
msgstr "CMP0132：不要在首次运行时设置编译器环境变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid "CMP0131: LINK_LIBRARIES supports the LINK_ONLY generator expression."
msgstr "CMP0131：LINK_LIBRARIES 支持 LINK_ONLY 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:75
msgid "CMP0130: while() diagnoses condition evaluation errors."
msgstr "CMP0130：while() 诊断条件评估错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:92
msgid "CMP0129: Compiler id for MCST LCC compilers is now LCC, not GNU."
msgstr "CMP0129：MCST LCC 编译器的编译器 ID 现在是 LCC，而不是 GNU。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:100
msgid ""
"CMP0128: Selection of language standard and extension flags improved."
msgstr "CMP0128：改进了语言标准和扩展标志的选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:100
msgid "CMP0127: cmake_dependent_option() supports full Condition Syntax."
msgstr "CMP0127：cmake_dependent_option() 支持完整的条件语法。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid ""
"CMP0126: set(CACHE) does not remove a normal variable of the same name."
msgstr "CMP0126：set(CACHE) 不会删除同名的普通变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid ""
"CMP0125: find_(path|file|library|program) have consistent behavior for "
"cache variables."
msgstr "CMP0125：find_(path|file|library|program) 对高速缓存变量具有一致的行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid ""
"CMP0124: foreach() loop variables are only available in the loop scope."
msgstr "CMP0124：foreach() 循环变量仅在循环范围内可用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid ""
"CMP0123: ARMClang cpu/arch compile and link flags must be set explicitly."
msgstr "CMP0123：必须显式设置 ARMClang cpu/arch 编译和链接标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid ""
"CMP0122: UseSWIG use standard library name conventions for csharp "
"language."
msgstr "CMP0122：UseSWIG 使用 csharp 语言的标准库名称约定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:109
msgid "CMP0121: The list command detects invalid indices."
msgstr "CMP0121：列表命令检测到无效索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid "CMP0120: The WriteCompilerDetectionHeader module is removed."
msgstr "CMP0120：WriteCompilerDetectionHeader 模块已移除。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid ""
"CMP0119: LANGUAGE source file property explicitly compiles as language."
msgstr "CMP0119：LANGUAGE 源文件属性显式编译为语言。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid ""
"CMP0118: The GENERATED source file property is now visible in all "
"directories."
msgstr "CMP0118：GENERATED 源文件属性现在在所有目录中可见。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid ""
"CMP0117: MSVC RTTI flag /GR is not added to CMAKE_CXX_FLAGS by default."
msgstr "CMP0117：默认情况下，MSVC RTTI 标志 /GR 未添加到 CMAKE_CXX_FLAGS。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid ""
"CMP0116: Ninja generators transform DEPFILEs from add_custom_command()."
msgstr "CMP0116：Ninja 生成器从 add_custom_command() 转换 DEPFILE。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:122
msgid "CMP0115: Source file extensions must be explicit."
msgstr "CMP0115：源文件扩展名必须明确。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid "CMP0114: ExternalProject step targets fully adopt their steps."
msgstr "CMP0114：ExternalProject 步骤目标完全采用其步骤。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid ""
"CMP0113: Makefile generators do not repeat custom commands from target "
"dependencies."
msgstr "CMP0113：Makefile 生成器不重复来自目标依赖项的自定义命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid ""
"CMP0112: Target file component generator expressions do not add target "
"dependencies."
msgstr "CMP0112：目标文件组件生成器表达式不添加目标依赖项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid ""
"CMP0111: An imported target missing its location property fails during "
"generation."
msgstr "CMP0111：缺少其位置属性的导入目标在生成过程中失败。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid "CMP0110: add_test() supports arbitrary characters in test names."
msgstr "CMP0110：add_test() 支持测试名称中的任意字符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:135
msgid ""
"CMP0109: find_program() requires permission to execute but not to read."
msgstr "CMP0109：find_program() 需要执行权限而不是读取权限。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid "CMP0108: A target cannot link to itself through an alias."
msgstr "CMP0108：目标无法通过别名链接到自身。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid "CMP0107: An ALIAS target cannot overwrite another target."
msgstr "CMP0107：ALIAS 目标无法覆盖另一个目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid "CMP0106: The Documentation module is removed."
msgstr "CMP0106：文档模块已删除。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid "CMP0105: Device link step uses the link options."
msgstr "CMP0105：设备链接步骤使用链接选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid ""
"CMP0104: CMAKE_CUDA_ARCHITECTURES now detected for NVCC, empty "
"CUDA_ARCHITECTURES not allowed."
msgstr ""
"CMP0104：现在为 NVCC 检测到 CMAKE_CUDA_ARCHITECTURES，不允许为空 CUDA_ARCHITECTURES。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:148
msgid ""
"CMP0103: Multiple export() with same FILE without APPEND is not allowed."
msgstr "CMP0103：不允许在没有 APPEND 的情况下使用相同 FILE 的多个 export()。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:161
msgid ""
"CMP0102: mark_as_advanced() does nothing if a cache entry does not exist."
msgstr "CMP0102：如果缓存条目不存在，mark_as_advanced() 将不执行任何操作。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:161
msgid "CMP0101: target_compile_options honors BEFORE keyword in all scopes."
msgstr "CMP0101：target_compile_options 在所有范围内都遵循 BEFORE 关键字。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:161
msgid "CMP0100: Let AUTOMOC and AUTOUIC process .hh header files."
msgstr "CMP0100：让 AUTOMOC 和 AUTOUIC 处理 .hh 头文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:161
msgid ""
"CMP0099: Link properties are transitive over private dependency on static "
"libraries."
msgstr "CMP0099：链接属性可通过对静态库的私有依赖进行传递。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:161
msgid ""
"CMP0098: FindFLEX runs flex in CMAKE_CURRENT_BINARY_DIR when executing."
msgstr "CMP0098：FindFLEX 在执行时在 CMAKE_CURRENT_BINARY_DIR 中运行 flex。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:173
msgid ""
"CMP0097: ExternalProject_Add with GIT_SUBMODULES \"\" initializes no "
"submodules."
msgstr "CMP0097：带有 GIT_SUBMODULES“”的 ExternalProject_Add 未初始化任何子模块。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:173
msgid "CMP0096: project() preserves leading zeros in version components."
msgstr "CMP0096：project() 保留版本组件中的前导零。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:173
msgid ""
"CMP0095: RPATH entries are properly escaped in the intermediary CMake "
"install script."
msgstr "CMP0095：RPATH 条目已在中间 CMake 安装脚本中正确转义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid ""
"CMP0094: FindPython3, FindPython2 and FindPython use LOCATION for lookup "
"strategy."
msgstr "CMP0094：FindPython3、FindPython2 和 FindPython 使用 LOCATION 作为查找策略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid "CMP0093: FindBoost reports Boost_VERSION in x.y.z format."
msgstr "CMP0093：FindBoost 以 x.y.z 格式报告 Boost_VERSION。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid ""
"CMP0092: MSVC warning flags are not in CMAKE_{C,CXX}_FLAGS by default."
msgstr "CMP0092：默认情况下，MSVC 警告标志不在 CMAKE_{C,CXX}_FLAGS 中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid "CMP0091: MSVC runtime library flags are selected by an abstraction."
msgstr "CMP0091：MSVC 运行时库标志由抽象选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid ""
"CMP0090: export(PACKAGE) does not populate package registry by default."
msgstr "CMP0090：export(PACKAGE) 默认不填充包注册表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:183
msgid ""
"CMP0089: Compiler id for IBM Clang-based XL compilers is now XLClang."
msgstr "CMP0089：基于 IBM Clang 的 XL 编译器的编译器 ID 现在是 XLClang。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid ""
"CMP0088: FindBISON runs bison in CMAKE_CURRENT_BINARY_DIR when executing."
msgstr "CMP0088：FindBISON 在执行时在 CMAKE_CURRENT_BINARY_DIR 中运行 bison。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid "CMP0087: install(SCRIPT | CODE) supports generator expressions."
msgstr "CMP0087：install(SCRIPT | CODE) 支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid "CMP0086: UseSWIG honors SWIG_MODULE_NAME via -module flag."
msgstr "CMP0086：UseSWIG 通过 -module 标志支持 SWIG_MODULE_NAME。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid "CMP0085: IN_LIST generator expression handles empty list items."
msgstr "CMP0085：IN_LIST 生成器表达式处理空列表项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid "CMP0084: The FindQt module does not exist for find_package()."
msgstr "CMP0084：FindQt 模块对于 find_package() 不存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid "CMP0083: Add PIE options when linking executable."
msgstr "CMP0083：链接可执行文件时添加 PIE 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:196
msgid ""
"CMP0082: Install rules from add_subdirectory() are interleaved with those "
"in caller."
msgstr "CMP0082：来自 add_subdirectory() 的安装规则与调用者中的规则交错。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid ""
"CMP0081: Relative paths not allowed in LINK_DIRECTORIES target property."
msgstr "CMP0081：LINK_DIRECTORIES 目标属性中不允许使用相对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid "CMP0080: BundleUtilities cannot be included at configure time."
msgstr "CMP0080：无法在配置时包含 BundleUtilities。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid ""
"CMP0079: target_link_libraries allows use with targets in other "
"directories."
msgstr "CMP0079：target_link_libraries 允许与其他目录中的目标一起使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid "CMP0078: UseSWIG generates standard target names."
msgstr "CMP0078：UseSWIG 生成标准目标名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid "CMP0077: option() honors normal variables."
msgstr "CMP0077：option() 支持普通变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:211
msgid ""
"CMP0076: target_sources() command converts relative paths to absolute."
msgstr "CMP0076：target_sources() 命令将相对路径转换为绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:224
msgid "CMP0075: Include file check macros honor CMAKE_REQUIRED_LIBRARIES."
msgstr "CMP0075：包含文件检查宏以支持 CMAKE_REQUIRED_LIBRARIES。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:224
msgid "CMP0074: find_package uses PackageName_ROOT variables."
msgstr "CMP0074：find_package 使用 PackageName_ROOT 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:224
msgid "CMP0073: Do not produce legacy _LIB_DEPENDS cache entries."
msgstr "CMP0073：不生成遗留 _LIB_DEPENDS 缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:234
msgid "CMP0072: FindOpenGL prefers GLVND by default when available."
msgstr "CMP0072：FindOpenGL 在可用时默认首选 GLVND。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:242
msgid "CMP0071: Let AUTOMOC and AUTOUIC process GENERATED files."
msgstr "CMP0071：让 AUTOMOC 和 AUTOUIC 处理生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:242
msgid "CMP0070: Define file(GENERATE) behavior for relative paths."
msgstr "CMP0070：为相对路径定义文件 (GENERATE) 行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:251
msgid "CMP0069: INTERPROCEDURAL_OPTIMIZATION is enforced when enabled."
msgstr "CMP0069：启用时强制执行 INTERPROCEDURAL_OPTIMIZATION。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:251
msgid "CMP0068: RPATH settings on macOS do not affect install_name."
msgstr "CMP0068：macOS 上的 RPATH 设置不影响 install_name。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:260
msgid ""
"CMP0067: Honor language standard in try_compile() source-file signature."
msgstr "CMP0067：遵守 try_compile() 源文件签名中的语言标准。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:268
msgid ""
"CMP0066: Honor per-config flags in try_compile() source-file signature."
msgstr "CMP0066：尊重 try_compile() 源文件签名中的每个配置标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:276
msgid ""
"CMP0065: Do not add flags to export symbols from executables without the "
"ENABLE_EXPORTS target property."
msgstr "CMP0065：不要添加标志以从没有 ENABLE_EXPORTS 目标属性的可执行文件中导出符号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:276
msgid "CMP0064: Support new TEST if() operator."
msgstr "CMP0064：支持新的 TEST if() 运算符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0063: Honor visibility properties for all target types."
msgstr "CMP0063：尊重所有目标类型的可见性属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0062: Disallow install() of export() result."
msgstr "CMP0062：禁止 export() 结果的 install()。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0061: CTest does not by default tell make to ignore errors (-i)."
msgstr "CMP0061：默认情况下，CTest 不会告诉 make 忽略错误 (-i)。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0060: Link libraries by full path even in implicit directories."
msgstr "CMP0060：即使在隐式目录中也按完整路径链接库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0059: Do not treat DEFINITIONS as a built-in directory property."
msgstr "CMP0059：不要将 DEFINITIONS 视为内置目录属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0058: Ninja requires custom command byproducts to be explicit."
msgstr "CMP0058：Ninja 要求自定义命令副产品是显式的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:285
msgid "CMP0057: Support new IN_LIST if() operator."
msgstr "CMP0057：支持新的 IN_LIST if() 运算符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:299
msgid "CMP0056: Honor link flags in try_compile() source-file signature."
msgstr "CMP0056：尊重 try_compile() 源文件签名中的链接标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:299
msgid "CMP0055: Strict checking for break() command."
msgstr "CMP0055：严格检查 break() 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:308
msgid ""
"CMP0054: Only interpret if() arguments as variables or keywords when "
"unquoted."
msgstr "CMP0054：仅在未加引号时将 if() 参数解释为变量或关键字。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:308
msgid "CMP0053: Simplify variable reference and escape sequence evaluation."
msgstr "CMP0053：简化变量引用和转义序列评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:308
msgid ""
"CMP0052: Reject source and build dirs in installed "
"INTERFACE_INCLUDE_DIRECTORIES."
msgstr "CMP0052：拒绝安装的 INTERFACE_INCLUDE_DIRECTORIES 中的源和构建目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:308
msgid "CMP0051: List TARGET_OBJECTS in SOURCES target property."
msgstr "CMP0051：在 SOURCES 目标属性中列出 TARGET_OBJECTS。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0050: Disallow add_custom_command SOURCE signatures."
msgstr "CMP0050：不允许 add_custom_command SOURCE 签名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0049: Do not expand variables in target source entries."
msgstr "CMP0049：不要扩展目标源条目中的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0048: project() command manages VERSION variables."
msgstr "CMP0048：project() 命令管理 VERSION 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0047: Use QCC compiler id for the qcc drivers on QNX."
msgstr "CMP0047：将 QCC 编译器 ID 用于 QNX 上的 qcc 驱动程序。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0046: Error on non-existent dependency in add_dependencies."
msgstr "CMP0046：add_dependencies 中不存在的依赖项出错。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0045: Error on non-existent target in get_target_property."
msgstr "CMP0045：get_target_property 中不存在的目标出错。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0044: Case sensitive Lang_COMPILER_ID generator expressions."
msgstr "CMP0044：区分大小写的 Lang_COMPILER_ID 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0043: Ignore COMPILE_DEFINITIONS_Config properties."
msgstr "CMP0043：忽略 COMPILE_DEFINITIONS_Config 属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0042: MACOSX_RPATH is enabled by default."
msgstr "CMP0042：默认启用 MACOSX_RPATH。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0041: Error on relative include with generator expression."
msgstr "CMP0041：生成器表达式的相关包含错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid ""
"CMP0040: The target in the TARGET signature of add_custom_command() must "
"exist."
msgstr "CMP0040：add_custom_command() 的 TARGET 签名中的目标必须存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0039: Utility targets may not have link dependencies."
msgstr "CMP0039：实用程序目标可能没有链接依赖性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0038: Targets may not link directly to themselves."
msgstr "CMP0038：目标不能直接链接到它们自己。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid ""
"CMP0037: Target names should not be reserved and should match a validity "
"pattern."
msgstr "CMP0037：目标名称不应保留且应与有效性模式相匹配。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0036: The build_name command should not be called."
msgstr "CMP0036：不应调用 build_name 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0035: The variable_requires command should not be called."
msgstr "CMP0035：不应调用 variable_requires 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0034: The utility_source command should not be called."
msgstr "CMP0034：不应调用 utility_source 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid ""
"CMP0033: The export_library_dependencies command should not be called."
msgstr "CMP0033：不应调用 export_library_dependencies 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0032: The output_required_files command should not be called."
msgstr "CMP0032：不应调用 output_required_files 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0031: The load_command command should not be called."
msgstr "CMP0031：不应调用 load_command 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0030: The use_mangled_mesa command should not be called."
msgstr "CMP0030：不应调用 use_mangled_mesa 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0029: The subdir_depends command should not be called."
msgstr "CMP0029：不应调用 subdir_depends 命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0028: Double colon in target name means ALIAS or IMPORTED target."
msgstr "CMP0028：目标名称中的双冒号表示 ALIAS 或 IMPORTED 目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid ""
"CMP0027: Conditionally linked imported targets with missing include "
"directories."
msgstr "CMP0027：有条件地链接导入的目标，但缺少包含目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0026: Disallow use of the LOCATION target property."
msgstr "CMP0026：不允许使用 LOCATION 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0025: Compiler id for Apple Clang is now AppleClang."
msgstr "CMP0025：Apple Clang 的编译器 ID 现在是 AppleClang。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:319
msgid "CMP0024: Disallow include export result."
msgstr "CMP0024：不允许包含导出结果。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid ""
"CMP0023: Plain and keyword target_link_libraries signatures cannot be "
"mixed."
msgstr "CMP0023：普通签名和关键字 target_link_libraries 签名不能混合。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0022: INTERFACE_LINK_LIBRARIES defines the link interface."
msgstr "CMP0022：INTERFACE_LINK_LIBRARIES 定义链接接口。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid ""
"CMP0021: Fatal error on relative paths in INCLUDE_DIRECTORIES target "
"property."
msgstr "CMP0021：INCLUDE_DIRECTORIES 目标属性中的相对路径发生致命错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid ""
"CMP0020: Automatically link Qt executables to qtmain target on Windows."
msgstr "CMP0020：自动将 Qt 可执行文件链接到 Windows 上的 qtmain 目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0019: Do not re-expand variables in include and link information."
msgstr "CMP0019：不要重新扩展包含和链接信息中的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0018: Ignore CMAKE_SHARED_LIBRARY_Lang_FLAGS variable."
msgstr "CMP0018：忽略 CMAKE_SHARED_LIBRARY_Lang_FLAGS 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid ""
"CMP0017: Prefer files from the CMake module directory when including from "
"there."
msgstr "CMP0017：从那里包含时，首选 CMake 模块目录中的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid ""
"CMP0016: target_link_libraries() reports error if its only argument is not"
" a target."
msgstr "CMP0016：如果 target_link_libraries() 的唯一参数不是目标，则报告错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0015: link_directories() treats paths relative to the source dir."
msgstr "CMP0015：link_directories() 处理相对于源目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0014: Input directories must have CMakeLists.txt."
msgstr "CMP0014：输入目录必须有 CMakeLists.txt。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0013: Duplicate binary directories are not allowed."
msgstr "CMP0013：不允许重复的二进制目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:353
msgid "CMP0012: if() recognizes numbers and boolean constants."
msgstr "CMP0012：if() 识别数字和布尔常量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0011: Included scripts do automatic cmake_policy PUSH and POP."
msgstr "CMP0011：包含的脚本执行自动 cmake_policy PUSH 和 POP。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0010: Bad variable reference syntax is an error."
msgstr "CMP0010：错误的变量引用语法是一个错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0009: FILE GLOB_RECURSE calls should not follow symlinks by default."
msgstr "CMP0009：默认情况下，FILE GLOB_RECURSE 调用不应遵循符号链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0008: Libraries linked by full-path must have a valid library file "
"name."
msgstr "CMP0008：通过完整路径链接的库必须具有有效的库文件名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0007: list command no longer ignores empty elements."
msgstr "CMP0007：列表命令不再忽略空元素。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0006: Installing MACOSX_BUNDLE targets requires a BUNDLE DESTINATION."
msgstr "CMP0006：安装 MACOSX_BUNDLE 目标需要 BUNDLE DESTINATION。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0005: Preprocessor definition values are now escaped automatically."
msgstr "CMP0005：预处理器定义值现在自动转义。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0004: Libraries linked may not have leading or trailing whitespace."
msgstr "CMP0004：链接的库可能没有前导或尾随空格。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid ""
"CMP0003: Libraries linked via full path no longer produce linker search "
"paths."
msgstr "CMP0003：通过完整路径链接的库不再生成链接器搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0002: Logical target names must be globally unique."
msgstr "CMP0002：逻辑目标名称必须全局唯一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0001: CMAKE_BACKWARDS_COMPATIBILITY should no longer be used."
msgstr "CMP0001：不应再使用 CMAKE_BACKWARDS_COMPATIBILITY。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:372
msgid "CMP0000: A minimum required CMake version must be specified."
msgstr "CMP0000：必须指定所需的最低 CMake 版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:4
msgid "cmake-policies(7)"
msgstr "cmake 政策(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:13
msgid ""
"Policies in CMake are used to preserve backward compatible behavior across"
" multiple releases.  When a new policy is introduced, newer CMake versions"
" will begin to warn about the backward compatible behavior.  It is "
"possible to disable the warning by explicitly requesting the OLD, or "
"backward compatible behavior using the :command:`cmake_policy` command. It"
" is also possible to request ``NEW``, or non-backward compatible behavior "
"for a policy, also avoiding the warning.  Each policy can also be set to "
"either ``NEW`` or ``OLD`` behavior explicitly on the command line with the"
" :variable:`CMAKE_POLICY_DEFAULT_CMP<NNNN>` variable."
msgstr ""
"CMake 中的策略用于跨多个版本保留向后兼容的行为。当引入新策略时，较新的 CMake 版本将开始警告有关向后兼容的行为。可以通过使用 "
":command:`cmake_policy` "
"命令明确请求旧的或向后兼容的行为来禁用警告。也可以为策略请求“NEW”或非向后兼容行为，同时避免警告。每个策略也可以在命令行上使用 "
":variable:`CMAKE_POLICY_DEFAULT_CMP<NNNN>` 变量显式设置为 ``NEW`` 或 ``OLD`` 行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:23
msgid ""
"A policy is a deprecation mechanism and not a reliable feature toggle. A "
"policy should almost never be set to ``OLD``, except to silence warnings "
"in an otherwise frozen or stable codebase, or temporarily as part of a "
"larger migration path. The ``OLD`` behavior of each policy is undesirable "
"and will be replaced with an error condition in a future release."
msgstr ""
"策略是一种弃用机制，而不是可靠的功能切换。策略几乎不应该设置为“旧”，除非在冻结或稳定的代码库中消除警告，或者暂时作为更大迁移路径的一部分。每个策略的“旧”行为都是不可取的，在未来的版本中将被替换为错误条件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:29
msgid ""
"The :command:`cmake_minimum_required` command does more than report an "
"error if a too-old version of CMake is used to build a project.  It also "
"sets all policies introduced in that CMake version or earlier to ``NEW`` "
"behavior.  To manage policies without increasing the minimum required "
"CMake version, the :command:`if(POLICY)` command may be used:"
msgstr ""
"如果使用太旧版本的 CMake 构建项目，cmake_minimum_required 命令不仅仅会报告错误。它还将在该 CMake "
"版本或更早版本中引入的所有策略设置为“新”行为。要在不增加所需的最低 CMake 版本的情况下管理策略，可以使用 "
":command:`if(POLICY)` 命令："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:41
msgid ""
"This has the effect of using the ``NEW`` behavior with newer CMake "
"releases which users may be using and not issuing a compatibility warning."
msgstr "这具有将“NEW”行为与用户可能正在使用的较新 CMake 版本一起使用的效果，并且不会发出兼容性警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:44
msgid ""
"The setting of a policy is confined in some cases to not propagate to the "
"parent scope.  For example, if the files read by the :command:`include` "
"command or the :command:`find_package` command contain a use of "
":command:`cmake_policy`, that policy setting will not affect the caller by"
" default.  Both commands accept an optional ``NO_POLICY_SCOPE`` keyword to"
" control this behavior."
msgstr ""
"策略的设置在某些情况下被限制为不传播到父范围。例如，如果 :command:`include` 命令或 "
":command:`find_package` 命令读取的文件包含对 :command:`cmake_policy` "
"的使用，默认情况下该策略设置不会影响调用者。这两个命令都接受可选的 ``NO_POLICY_SCOPE`` 关键字来控制此行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:50
msgid ""
"The :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` variable may also be used "
"to determine whether to report an error on use of deprecated macros or "
"functions."
msgstr ""
":variable:`CMAKE_MINIMUM_REQUIRED_VERSION` 变量也可用于确定是否报告有关使用已弃用的宏或函数的错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:55
msgid "Policies Introduced by CMake 3.26"
msgstr "CMake 3.26 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:63
msgid "Policies Introduced by CMake 3.25"
msgstr "CMake 3.25 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:73
msgid "Policies Introduced by CMake 3.24"
msgstr "CMake 3.24 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:90
msgid "Policies Introduced by CMake 3.23"
msgstr "CMake 3.23 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:98
msgid "Policies Introduced by CMake 3.22"
msgstr "CMake 3.22 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:107
msgid "Policies Introduced by CMake 3.21"
msgstr "CMake 3.21 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:120
msgid "Policies Introduced by CMake 3.20"
msgstr "CMake 3.20 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:133
msgid "Policies Introduced by CMake 3.19"
msgstr "CMake 3.19 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:146
msgid "Policies Introduced by CMake 3.18"
msgstr "CMake 3.18 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:159
msgid "Policies Introduced by CMake 3.17"
msgstr "CMake 3.17 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:171
msgid "Policies Introduced by CMake 3.16"
msgstr "CMake 3.16 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:181
msgid "Policies Introduced by CMake 3.15"
msgstr "CMake 3.15 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:194
msgid "Policies Introduced by CMake 3.14"
msgstr "CMake 3.14 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:209
msgid "Policies Introduced by CMake 3.13"
msgstr "CMake 3.13 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:222
msgid "Policies Introduced by CMake 3.12"
msgstr "CMake 3.12 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:232
msgid "Policies Introduced by CMake 3.11"
msgstr "CMake 3.11 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:240
msgid "Policies Introduced by CMake 3.10"
msgstr "CMake 3.10 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:249
msgid "Policies Introduced by CMake 3.9"
msgstr "CMake 3.9 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:258
msgid "Policies Introduced by CMake 3.8"
msgstr "CMake 3.8 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:266
msgid "Policies Introduced by CMake 3.7"
msgstr "CMake 3.7 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:274
msgid "Policies Introduced by CMake 3.4"
msgstr "CMake 3.4 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:283
msgid "Policies Introduced by CMake 3.3"
msgstr "CMake 3.3 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:297
msgid "Policies Introduced by CMake 3.2"
msgstr "CMake 3.2 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:306
msgid "Policies Introduced by CMake 3.1"
msgstr "CMake 3.1 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:317
msgid "Policies Introduced by CMake 3.0"
msgstr "CMake 3.0 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:351
msgid "Policies Introduced by CMake 2.8"
msgstr "CMake 2.8 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-policies.7.rst:370
msgid "Policies Introduced by CMake 2.6"
msgstr "CMake 2.6 引入的策略"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:4
msgid "cmake-presets(7)"
msgstr "cmake 预设 (7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:15
msgid ""
"One problem that CMake users often face is sharing settings with other "
"people for common ways to configure a project. This may be done to support"
" CI builds, or for users who frequently use the same build. CMake supports"
" two main files, ``CMakePresets.json`` and ``CMakeUserPresets.json``, that"
" allow users to specify common configure options and share them with "
"others. CMake also supports files included with the ``include`` field."
msgstr ""
"CMake 用户经常面临的一个问题是与其他人共享设置以获取配置项目的常用方法。这样做可能是为了支持 CI 构建，或者是为了经常使用相同构建的用户。 "
"CMake 支持两个主要文件，``CMakePresets.json`` "
"和``CMakeUserPresets.json``，允许用户指定通用配置选项并与他人共享。 CMake "
"还支持包含在“include”字段中的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:22
msgid ""
"``CMakePresets.json`` and ``CMakeUserPresets.json`` live in the project's "
"root directory. They both have exactly the same format, and both are "
"optional (though at least one must be present if :option:`--preset <cmake "
"--preset>` is specified).  ``CMakePresets.json`` is meant to specify "
"project-wide build details, while ``CMakeUserPresets.json`` is meant for "
"developers to specify their own local build details."
msgstr ""
"``CMakePresets.json`` 和 ``CMakeUserPresets.json`` "
"位于项目的根目录中。它们都具有完全相同的格式，并且都是可选的（尽管如果指定了 :option:`--preset <cmake --preset>`"
" 则至少必须存在一个）。 ``CMakePresets.json`` 用于指定项目范围的构建细节，而 "
"``CMakeUserPresets.json`` 用于开发人员指定他们自己的本地构建细节。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:29
msgid ""
"``CMakePresets.json`` may be checked into a version control system, and "
"``CMakeUserPresets.json`` should NOT be checked in. For example, if a "
"project is using Git, ``CMakePresets.json`` may be tracked, and "
"``CMakeUserPresets.json`` should be added to the ``.gitignore``."
msgstr ""
"``CMakePresets.json`` 可能会被签入版本控制系统，而 ``CMakeUserPresets.json`` "
"不应被签入。例如，如果项目使用 Git，则可能会跟踪 ``CMakePresets.json`` , 并且 "
"``CMakeUserPresets.json`` 应该被添加到 ``.gitignore`` 中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:35
msgid "Format"
msgstr "格式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:37
msgid "The files are a JSON document with an object as the root:"
msgstr "这些文件是一个以对象为根的 JSON 文档："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:42
msgid "The root object recognizes the following fields:"
msgstr "根对象识别以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:45
msgid ""
"A required integer representing the version of the JSON schema. The "
"supported versions are:"
msgstr "表示 JSON 架构版本的必需整数。支持的版本是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:49
msgid "``1``"
msgstr "``1``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:52
msgid "``2``"
msgstr "``2``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:55
msgid "``3``"
msgstr "``3``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:58
msgid "``4``"
msgstr "``4``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:61
msgid "``5``"
msgstr "``5``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:64
msgid "``6``"
msgstr "``6``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:77
msgid "``cmakeMinimumRequired``"
msgstr "``cmakeMinimumRequired``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:67
msgid ""
"An optional object representing the minimum version of CMake needed to "
"build this project. This object consists of the following fields:"
msgstr "一个可选对象，表示构建此项目所需的最低 CMake 版本。该对象由以下字段组成："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:71
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:755
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1517
msgid "``major``"
msgstr "``主要``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:71
msgid "An optional integer representing the major version."
msgstr "代表主要版本的可选整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:74
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:757
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1520
msgid "``minor``"
msgstr "``未成年人``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:74
msgid "An optional integer representing the minor version."
msgstr "代表次要版本的可选整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:77
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:759
msgid "``patch``"
msgstr "``补丁``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:77
msgid "An optional integer representing the patch version."
msgstr "表示补丁版本的可选整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:83
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:744
msgid "``include``"
msgstr "``包括``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:80
msgid ""
"An optional array of strings representing files to include. If the "
"filenames are not absolute, they are considered relative to the current "
"file. This is allowed in preset files specifying version ``4`` or above. "
"See `Includes`_ for discussion of the constraints on included files."
msgstr ""
"一个可选的字符串数组，表示要包含的文件。如果文件名不是绝对的，则它们被认为是相对于当前文件的。这在指定版本“4”或更高版本的预设文件中是允许的。有关包含文件的约束的讨论，请参阅“包含”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:91
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:182
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:412
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:573
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:914
msgid "``vendor``"
msgstr "``供应商``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:86
msgid ""
"An optional map containing vendor-specific information. CMake does not "
"interpret the contents of this field except to verify that it is a map if "
"it does exist. However, the keys should be a vendor-specific domain name "
"followed by a ``/``-separated path. For example, the Example IDE 1.0 could"
" use ``example.com/ExampleIDE/1.0``. The value of each field can be "
"anything desired by the vendor, though will typically be a map."
msgstr ""
"包含供应商特定信息的可选映射。 CMake "
"不解释此字段的内容，除非它是一个映射（如果它确实存在）。但是，密钥应该是特定于供应商的域名，后跟“/”分隔的路径。例如，示例 IDE 1.0 "
"可以使用 ``example.com/ExampleIDE/1.0``。每个字段的值可以是供应商想要的任何值，但通常是地图。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:95
msgid "``configurePresets``"
msgstr "``配置预设``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:94
msgid ""
"An optional array of `Configure Preset`_ objects. This is allowed in "
"preset files specifying version ``1`` or above."
msgstr "`Configure Preset`_ 对象的可选数组。这在指定版本“1”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:99
msgid "``buildPresets``"
msgstr "``buildPresets``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:98
msgid ""
"An optional array of `Build Preset`_ objects. This is allowed in preset "
"files specifying version ``2`` or above."
msgstr "`Build Preset`_ 对象的可选数组。这在指定版本“2”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:103
msgid "``testPresets``"
msgstr "``测试预设``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:102
msgid ""
"An optional array of `Test Preset`_ objects. This is allowed in preset "
"files specifying version ``2`` or above."
msgstr "可选的“测试预设”对象数组。这在指定版本“2”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:107
msgid "``packagePresets``"
msgstr "``packagePresets``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:106
msgid ""
"An optional array of `Package Preset`_ objects. This is allowed in preset "
"files specifying version ``6`` or above."
msgstr "一个可选的 `Package Preset`_ 对象数组。这在指定版本“6”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:111
msgid "``workflowPresets``"
msgstr "``workflowPresets``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:110
msgid ""
"An optional array of `Workflow Preset`_ objects. This is allowed in preset"
" files specifying version ``6`` or above."
msgstr "`Workflow Preset`_ 对象的可选数组。这在指定版本“6”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:114
msgid "Includes"
msgstr "包括"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:116
msgid ""
"``CMakePresets.json`` and ``CMakeUserPresets.json`` can include other "
"files with the ``include`` field in file version ``4`` and later. Files "
"included by these files can also include other files. If "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` are both present, "
"``CMakeUserPresets.json`` implicitly includes ``CMakePresets.json``, even "
"with no ``include`` field, in all versions of the format."
msgstr ""
"``CMakePresets.json`` 和 ``CMakeUserPresets.json`` 可以在文件版本 ``4`` 及更高版本中使用 "
"``include`` 字段包含其他文件。这些文件包含的文件还可以包含其他文件。如果 ``CMakePresets.json`` 和 "
"``CMakeUserPresets.json`` 都存在，``CMakeUserPresets.json`` 在所有版本中隐式包含 "
"``CMakePresets.json``，即使没有 ``include`` 字段的格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:123
msgid ""
"If a preset file contains presets that inherit from presets in another "
"file, the file must include the other file either directly or indirectly. "
"Include cycles are not allowed among files. If ``a.json`` includes "
"``b.json``, ``b.json`` cannot include ``a.json``. However, a file may be "
"included multiple times from the same file or from different files."
msgstr ""
"如果预设文件包含从另一个文件中的预设继承的预设，则该文件必须直接或间接包含另一个文件。文件之间不允许包含循环。如果 ``a.json`` 包含 "
"``b.json``，则 ``b.json`` 不能包含 ``a.json``。但是，一个文件可能会从同一个文件或不同文件中多次包含。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:129
msgid ""
"Files directly or indirectly included from ``CMakePresets.json`` should be"
" guaranteed to be provided by the project. ``CMakeUserPresets.json`` may "
"include files from anywhere."
msgstr ""
"``CMakePresets.json`` 中直接或间接包含的文件应保证由项目提供。 ``CMakeUserPresets.json`` "
"可能包含来自任何地方的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:134
msgid "Configure Preset"
msgstr "配置预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:136
msgid ""
"Each entry of the ``configurePresets`` array is a JSON object that may "
"contain the following fields:"
msgstr "``configurePresets`` 数组的每个条目都是一个 JSON 对象，可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:140
msgid ""
"A required string representing the machine-friendly name of the preset. "
"This identifier is used in the :ref:`cmake --preset <CMake Options>` "
"option. There must not be two configure presets in the union of "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` in the same directory "
"with the same name. However, a configure preset may have the same name as "
"a build, test, package, or workflow preset."
msgstr ""
"表示预设的机器友好名称的必需字符串。此标识符用于 :ref:`cmake --preset <CMake Options>` 选项。 "
"``CMakePresets.json`` 和 ``CMakeUserPresets.json`` "
"的并集在同一目录中不能有两个同名的配置预设。但是，配置预设可能与构建、测试、包或工作流预设具有相同的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:153
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:383
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:544
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:886
msgid "``hidden``"
msgstr "``隐藏``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:148
msgid ""
"An optional boolean specifying whether or not a preset should be hidden. "
"If a preset is hidden, it cannot be used in the ``--preset=`` argument, "
"will not show up in the :manual:`CMake GUI <cmake-gui(1)>`, and does not "
"have to have a valid ``generator`` or ``binaryDir``, even from "
"inheritance. ``hidden`` presets are intended to be used as a base for "
"other presets to inherit via the ``inherits`` field."
msgstr ""
"一个可选的布尔值，指定是否应隐藏预设。如果预设是隐藏的，则不能在 ``--preset=`` 参数中使用，也不会出现在 :manual:`CMake"
" GUI <cmake-gui(1)>` 中，并且不必一个有效的 ``generator`` 或 ``binaryDir``，甚至来自继承。 "
"``hidden`` 预设旨在用作其他预设通过 ``inherits`` 字段继承的基础。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:170
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:400
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:561
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:903
msgid "``inherits``"
msgstr "``继承``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:156
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:386
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:547
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:889
msgid ""
"An optional array of strings representing the names of presets to inherit "
"from. This field can also be a string, which is equivalent to an array "
"containing one string."
msgstr "一个可选的字符串数组，表示要继承的预设的名称。该字段也可以是字符串，相当于一个包含一个字符串的数组。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:160
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:390
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:551
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:893
msgid ""
"The preset will inherit all of the fields from the ``inherits`` presets by"
" default (except ``name``, ``hidden``, ``inherits``, ``description``, and "
"``displayName``), but can override them as desired. If multiple "
"``inherits`` presets provide conflicting values for the same field, the "
"earlier preset in the ``inherits`` array will be preferred."
msgstr ""
"默认情况下，预设将继承“inherits”预设中的所有字段（“name”、“hidden”、“inherits”、“description”和“displayName”除外）"
" ), 但可以根据需要覆盖它们。如果多个 ``inherits`` 预设为同一字段提供冲突的值，则 ``inherits`` "
"数组中较早的预设将是首选。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:167
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:397
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:558
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:900
msgid ""
"A preset can only inherit from another preset that is defined in the same "
"file or in one of the files it includes (directly or indirectly). Presets "
"in ``CMakePresets.json`` may not inherit from presets in "
"``CMakeUserPresets.json``."
msgstr ""
"预设只能继承自同一文件或它包含的其中一个文件（直接或间接）中定义的另一个预设。 ``CMakePresets.json`` 中的预设可能不会继承自 "
"``CMakeUserPresets.json`` 中的预设。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:174
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:404
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:565
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:906
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1111
msgid "``condition``"
msgstr "``条件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:173
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:403
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:564
msgid ""
"An optional `Condition`_ object. This is allowed in preset files "
"specifying version ``3`` or above."
msgstr "一个可选的“条件”对象。这在指定版本“3”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:177
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:407
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:568
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:909
msgid ""
"An optional map containing vendor-specific information. CMake does not "
"interpret the contents of this field except to verify that it is a map if "
"it does exist. However, it should follow the same conventions as the root-"
"level ``vendor`` field. If vendors use their own per-preset ``vendor`` "
"field, they should implement inheritance in a sensible manner when "
"appropriate."
msgstr ""
"包含供应商特定信息的可选映射。 CMake "
"不解释此字段的内容，除非它是一个映射（如果它确实存在）。但是，它应该遵循与根级“vendor”字段相同的约定。如果供应商使用他们自己的预设“vendor”字段，他们应该在适当的时候以合理的方式实现继承。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:185
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:415
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:576
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:917
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1012
msgid "``displayName``"
msgstr "``显示名称``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:185
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:415
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:576
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:917
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1012
msgid "An optional string with a human-friendly name of the preset."
msgstr "带有人性化预设名称的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:188
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:418
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:579
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:920
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1015
msgid "An optional string with a human-friendly description of the preset."
msgstr "一个可选的字符串，带有对预设的人性化描述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:191
msgid ""
"An optional string representing the generator to use for the preset. If "
"``generator`` is not specified, it must be inherited from the ``inherits``"
" preset (unless this preset is ``hidden``). In version ``3`` or above, "
"this field may be omitted to fall back to regular generator discovery "
"procedure."
msgstr ""
"一个可选字符串，表示用于预设的生成器。如果未指定 ``generator``，则必须从 ``inherits`` 预设继承（除非此预设为 "
"``hidden``）。在版本 ``3`` 或更高版本中，可以省略此字段以回退到常规生成器发现过程。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:197
msgid ""
"Note that for Visual Studio generators, unlike in the command line "
":option:`-G <cmake -G>` argument, you cannot include the platform name in "
"the generator name. Use the ``architecture`` field instead."
msgstr ""
"请注意，对于 Visual Studio 生成器，与命令行中的 :option:`-G <cmake -G>` "
"参数不同，您不能在生成器名称中包含平台名称。请改用 ``architecture`` 字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:230
msgid "``architecture``, ``toolset``"
msgstr "``架构``，``工具集``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:202
msgid ""
"Optional fields representing the platform and toolset, respectively, for "
":manual:`generators <cmake-generators(7)>` that support them."
msgstr "代表平台和工具集的可选字段，分别用于:manual:`generators <cmake-generators(7)>` 支持它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:205
msgid ""
"See :option:`cmake -A` option for possible values for ``architecture`` and"
" :option:`cmake -T` for ``toolset``."
msgstr ""
"请参阅:option:`cmake -A` 选项以了解 ``architecture`` 的可能值和 :option:`cmake -T` 用于 "
"``toolset`` 。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:208
msgid "Each may be either a string or an object with the following fields:"
msgstr "每个都可以是字符串或具有以下字段的对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:211
msgid "An optional string representing the value."
msgstr "表示值的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:230
msgid "``strategy``"
msgstr "``策略``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:214
msgid ""
"An optional string telling CMake how to handle the ``architecture`` or "
"``toolset`` field. Valid values are:"
msgstr "一个可选的字符串，告诉 CMake 如何处理 ``architecture`` 或 ``toolset`` 字段。有效值为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:219
msgid "``\"set\"``"
msgstr "``“设置”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:218
msgid ""
"Set the respective value. This will result in an error for generators that"
" do not support the respective field."
msgstr "设置相应的值。对于不支持相应字段的生成器，这将导致错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:227
msgid "``\"external\"``"
msgstr "``“外部”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:222
msgid ""
"Do not set the value, even if the generator supports it. This is useful "
"if, for example, a preset uses the Ninja generator, and an IDE knows how "
"to set up the Visual C++ environment from the ``architecture`` and "
"``toolset`` fields. In that case, CMake will ignore the field, but the IDE"
" can use them to set up the environment before invoking CMake."
msgstr ""
"不要设置该值，即使生成器支持它。例如，如果预设使用 Ninja 生成器，并且 IDE 知道如何从 ``architecture`` 和 "
"``toolset`` 字段设置 Visual C++ 环境，这将很有用。在这种情况下，CMake 将忽略该字段，但 IDE 可以使用它们在调用 "
"CMake 之前设置环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:229
msgid ""
"If no ``strategy`` field is given, or if the field uses the string form "
"rather than the object form, the behavior is the same as ``\"set\"``."
msgstr "如果没有给出 ``strategy`` 字段，或者如果该字段使用字符串形式而不是对象形式，则行为与 ``\"set\"`` 相同。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:238
msgid "``toolchainFile``"
msgstr "``工具链文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:233
msgid ""
"An optional string representing the path to the toolchain file. This field"
" supports `macro expansion`_. If a relative path is specified, it is "
"calculated relative to the build directory, and if not found, relative to "
"the source directory. This field takes precedence over any "
":variable:`CMAKE_TOOLCHAIN_FILE` value. It is allowed in preset files "
"specifying version ``3`` or above."
msgstr ""
"表示工具链文件路径的可选字符串。该字段支持`宏扩展`_。如果指定了相对路径，则相对于构建目录进行计算，如果找不到，则相对于源目录进行计算。该字段优先于任何"
" :variable:`CMAKE_TOOLCHAIN_FILE` 值。在指定版本“3”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:246
msgid "``binaryDir``"
msgstr "``binaryDir``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:241
msgid ""
"An optional string representing the path to the output binary directory. "
"This field supports `macro expansion`_. If a relative path is specified, "
"it is calculated relative to the source directory. If ``binaryDir`` is not"
" specified, it must be inherited from the ``inherits`` preset (unless this"
" preset is ``hidden``). In version ``3`` or above, this field may be "
"omitted."
msgstr ""
"表示输出二进制目录路径的可选字符串。该字段支持`宏扩展`_。如果指定了相对路径，则它是相对于源目录计算的。如果未指定 "
"``binaryDir``，则必须从 ``inherits`` 预设继承（除非此预设为 ``hidden``）。在版本 ``3`` "
"或更高版本中，此字段可以省略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:252
msgid "``installDir``"
msgstr "``安装目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:249
msgid ""
"An optional string representing the path to the installation directory. "
"This field supports `macro expansion`_. If a relative path is specified, "
"it is calculated relative to the source directory. This is allowed in "
"preset files specifying version ``3`` or above."
msgstr ""
"表示安装目录路径的可选字符串。该字段支持`宏扩展`_。如果指定了相对路径，则它是相对于源目录计算的。这在指定版本“3”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:257
msgid "``cmakeExecutable``"
msgstr "``cmakeExecutable``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:255
msgid ""
"An optional string representing the path to the CMake executable to use "
"for this preset. This is reserved for use by IDEs, and is not used by "
"CMake itself. IDEs that use this field should expand any macros in it."
msgstr ""
"一个可选字符串，表示用于此预设的 CMake 可执行文件的路径。这是保留给 IDE 使用的，CMake 本身不使用。使用该字段的 IDE "
"应该扩展其中的任何宏。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:279
msgid "``cacheVariables``"
msgstr "``缓存变量``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:260
msgid ""
"An optional map of cache variables. The key is the variable name (which "
"may not be an empty string), and the value is either ``null``, a boolean "
"(which is equivalent to a value of ``\"TRUE\"`` or ``\"FALSE\"`` and a "
"type of ``BOOL``), a string representing the value of the variable (which "
"supports `macro expansion`_), or an object with the following fields:"
msgstr ""
"缓存变量的可选映射。键是变量名（可能不是空字符串），值是 ``null``，一个布尔值（相当于 ``\"TRUE\"`` 或 ``\"FALSE\""
" 的值`` 和一种 ``BOOL`` 类型），表示变量值的字符串（支持 `宏扩展`_），或具有以下字段的对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:267
msgid "An optional string representing the type of the variable."
msgstr "表示变量类型的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:270
msgid ""
"A required string or boolean representing the value of the variable. A "
"boolean is equivalent to ``\"TRUE\"`` or ``\"FALSE\"``. This field "
"supports `macro expansion`_."
msgstr "表示变量值的必需字符串或布尔值。布尔值等同于“真”或“假”。该字段支持`宏扩展`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:274
msgid ""
"Cache variables are inherited through the ``inherits`` field, and the "
"preset's variables will be the union of its own ``cacheVariables`` and the"
" ``cacheVariables`` from all its parents. If multiple presets in this "
"union define the same variable, the standard rules of ``inherits`` are "
"applied. Setting a variable to ``null`` causes it to not be set, even if a"
" value was inherited from another preset."
msgstr ""
"缓存变量通过 ``inherits`` 字段继承，preset 的变量将是它自己的 ``cacheVariables`` 和来自其所有父项的 "
"``cacheVariables`` "
"的联合。如果此联合中的多个预设定义相同的变量，则应用“继承”的标准规则。将变量设置为“null”会导致它不被设置，即使值是从另一个预设继承的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:296
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:448
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:596
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:937
msgid "``environment``"
msgstr "``环境``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:282
msgid ""
"An optional map of environment variables. The key is the variable name "
"(which may not be an empty string), and the value is either ``null`` or a "
"string representing the value of the variable. Each variable is set "
"regardless of whether or not a value was given to it by the process's "
"environment. This field supports `macro expansion`_, and environment "
"variables in this map may reference each other, and may be listed in any "
"order, as long as such references do not cause a cycle (for example, if "
"``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)"
msgstr ""
"环境变量的可选映射。键是变量名（可能不是空字符串），值是“null”或表示变量值的字符串。无论进程环境是否给它赋值，每个变量都会被设置。该字段支持`宏扩展`_，并且该映射中的环境变量可以相互引用，并且可以以任意顺序列出，只要这样的引用不会导致循环（例如，如果``ENV_1``是`"
" `$env{ENV_2}``，``ENV_2`` 可能不是 ``$env{ENV_1}``。）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:291
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:430
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:591
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:932
msgid ""
"Environment variables are inherited through the ``inherits`` field, and "
"the preset's environment will be the union of its own ``environment`` and "
"the ``environment`` from all its parents. If multiple presets in this "
"union define the same variable, the standard rules of ``inherits`` are "
"applied. Setting a variable to ``null`` causes it to not be set, even if a"
" value was inherited from another preset."
msgstr ""
"环境变量通过 ``inherits`` 字段继承，预设的环境将是它自己的 ``environment`` 和来自它所有父级的 "
"``environment`` "
"的联合。如果此联合中的多个预设定义相同的变量，则应用“继承”的标准规则。将变量设置为“null”会导致它不被设置，即使值是从另一个预设继承的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:327
msgid "``warnings``"
msgstr "``警告``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:299
msgid ""
"An optional object specifying the warnings to enable. The object may "
"contain the following fields:"
msgstr "一个可选对象，指定要启用的警告。该对象可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:303
msgid ""
"An optional boolean. Equivalent to passing :option:`-Wdev <cmake -Wdev>` "
"or :option:`-Wno-dev <cmake -Wno-dev>` on the command line. This may not "
"be set to ``false`` if ``errors.dev`` is set to ``true``."
msgstr ""
"一个可选的布尔值。相当于在命令行上传递 :option:`-Wdev <cmake -Wdev>` 或 :option:`-Wno-dev <cmake"
" -Wno-dev>`。如果 ``errors.dev`` 设置为 ``true``，则不能设置为 ``false``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:308
msgid ""
"An optional boolean. Equivalent to passing :option:`-Wdeprecated <cmake "
"-Wdeprecated>` or :option:`-Wno-deprecated <cmake -Wno-deprecated>` on the"
" command line. This may not be set to ``false`` if ``errors.deprecated`` "
"is set to ``true``."
msgstr ""
"一个可选的布尔值。相当于在命令行上传递 :option:`-Wdeprecated <cmake -Wdeprecated>` 或 "
":option:`-Wno-deprecated <cmake -Wno-deprecated>`。如果 ``errors.deprecated``"
" 设置为 ``true``，则不能设置为 ``false``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:317
msgid "``uninitialized``"
msgstr "``未初始化``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:315
msgid ""
"An optional boolean. Setting this to ``true`` is equivalent to passing "
":option:`--warn-uninitialized <cmake --warn-uninitialized>` on the command"
" line."
msgstr ""
"一个可选的布尔值。将此设置为 ``true`` 相当于在命令行上传递:option:`--warn-uninitialized <cmake --warn-"
"uninitialized>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:322
msgid "``unusedCli``"
msgstr "``unusedCli``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:320
msgid ""
"An optional boolean. Setting this to ``false`` is equivalent to passing "
":option:`--no-warn-unused-cli <cmake --no-warn-unused-cli>` on the command"
" line."
msgstr ""
"一个可选的布尔值。将此设置为 ``false`` 相当于在命令行上传递:option:`--no-warn-unused-cli <cmake --no-"
"warn-unused-cli>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:327
msgid "``systemVars``"
msgstr "``系统变量``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:325
msgid ""
"An optional boolean. Setting this to ``true`` is equivalent to passing "
":option:`--check-system-vars <cmake --check-system-vars>` on the command "
"line."
msgstr ""
"一个可选的布尔值。将此设置为 ``true`` 相当于在命令行上传递:option:`--check-system-vars <cmake --check-"
"system-vars>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:343
msgid "``errors``"
msgstr "``错误``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:330
msgid ""
"An optional object specifying the errors to enable. The object may contain"
" the following fields:"
msgstr "一个可选对象，指定要启用的错误。该对象可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:334
msgid ""
"An optional boolean. Equivalent to passing :option:`-Werror=dev <cmake "
"-Werror>` or :option:`-Wno-error=dev <cmake -Werror>` on the command line."
" This may not be set to ``true`` if ``warnings.dev`` is set to ``false``."
msgstr ""
"一个可选的布尔值。相当于在命令行上传递 :option:`-Werror=dev <cmake -Werror>` 或 :option:`-Wno-"
"error=dev <cmake -Werror>`。如果 ``warnings.dev`` 设置为 ``false``，这可能不会设置为 "
"``true``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:339
msgid ""
"An optional boolean. Equivalent to passing :option:`-Werror=deprecated "
"<cmake -Werror>` or :option:`-Wno-error=deprecated <cmake -Werror>` on the"
" command line. This may not be set to ``true`` if ``warnings.deprecated`` "
"is set to ``false``."
msgstr ""
"一个可选的布尔值。相当于在命令行上传递 :option:`-Werror=deprecated <cmake -Werror>` 或 "
":option:`-Wno-error=deprecated <cmake -Werror>`。如果 ``warnings.deprecated``"
" 设置为 ``false``，这可能不会设置为 ``true``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:360
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:647
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:974
msgid "``debug``"
msgstr "``调试``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:346
msgid ""
"An optional object specifying debug options. The object may contain the "
"following fields:"
msgstr "指定调试选项的可选对象。该对象可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:351
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:701
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:979
msgid "``output``"
msgstr "``输出``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:350
msgid ""
"An optional boolean. Setting this to ``true`` is equivalent to passing "
":option:`--debug-output <cmake --debug-output>` on the command line."
msgstr ""
"一个可选的布尔值。将此设置为 ``true`` 相当于在命令行上传递:option:`--debug-output <cmake --debug-"
"output>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:356
msgid "``tryCompile``"
msgstr "``尝试编译``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:354
msgid ""
"An optional boolean. Setting this to ``true`` is equivalent to passing "
":option:`--debug-trycompile <cmake --debug-trycompile>` on the command "
"line."
msgstr ""
"一个可选的布尔值。将此设置为 ``true`` 相当于在命令行上传递:option:`--debug-trycompile <cmake --debug-"
"trycompile>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:360
msgid "``find``"
msgstr "``找到``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:359
msgid ""
"An optional boolean. Setting this to ``true`` is equivalent to passing "
":option:`--debug-find <cmake --debug-find>` on the command line."
msgstr ""
"一个可选的布尔值。将此设置为 ``true`` 相当于在命令行上传递:option:`--debug-find <cmake --debug-find>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:363
msgid "Build Preset"
msgstr "构建预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:365
msgid ""
"Each entry of the ``buildPresets`` array is a JSON object that may contain"
" the following fields:"
msgstr "``buildPresets`` 数组的每个条目都是一个 JSON 对象，可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:369
msgid ""
"A required string representing the machine-friendly name of the preset. "
"This identifier is used in the :ref:`cmake --build --preset <Build Tool "
"Mode>` option. There must not be two build presets in the union of "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` in the same directory "
"with the same name. However, a build preset may have the same name as a "
"configure, test, package, or workflow preset."
msgstr ""
"表示预设的机器友好名称的必需字符串。此标识符用于 :ref:`cmake --build --preset <Build Tool Mode>` "
"选项。在同一目录中的 ``CMakePresets.json`` 和 ``CMakeUserPresets.json`` "
"的联合中不能有两个同名的构建预设。但是，构建预设可能与配置、测试、包或工作流预设具有相同的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:378
msgid ""
"An optional boolean specifying whether or not a preset should be hidden. "
"If a preset is hidden, it cannot be used in the :option:`--preset <cmake "
"--preset>` argument and does not have to have a valid ``configurePreset``,"
" even from inheritance. ``hidden`` presets are intended to be used as a "
"base for other presets to inherit via the ``inherits`` field."
msgstr ""
"一个可选的布尔值，指定是否应隐藏预设。如果预设是隐藏的，则不能在 :option:`--preset <cmake --preset>` "
"参数中使用，并且不必具有有效的 ``configurePreset``，即使是继承。 ``hidden`` 预设旨在用作其他预设通过 "
"``inherits`` 字段继承的基础。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:421
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:582
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:923
msgid ""
"An optional map of environment variables. The key is the variable name "
"(which may not be an empty string), and the value is either ``null`` or a "
"string representing the value of the variable. Each variable is set "
"regardless of whether or not a value was given to it by the process's "
"environment. This field supports macro expansion, and environment "
"variables in this map may reference each other, and may be listed in any "
"order, as long as such references do not cause a cycle (for example, if "
"``ENV_1`` is ``$env{ENV_2}``, ``ENV_2`` may not be ``$env{ENV_1}``.)"
msgstr ""
"环境变量的可选映射。键是变量名（可能不是空字符串），值是“null”或表示变量值的字符串。无论进程环境是否给它赋值，每个变量都会被设置。该字段支持宏扩展，该映射中的环境变量可以相互引用，并且可以以任意顺序列出，只要这样的引用不会导致循环（例如，如果"
" ``ENV_1`` 是 ``$env {ENV_2}``，``ENV_2`` 可能不是``$env{ENV_1}``。）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:439
msgid ""
"For a CMake project using ExternalProject with a configuration preset "
"having environment variables needed in the ExternalProject, use a build "
"preset that inherits that configuration preset or the ExternalProject will"
" not have the environment variables set in the configuration preset. "
"Example: suppose the host defaults to one compiler (say Clang) and the "
"user wishes to use another compiler (say GCC). Set configuration preset "
"environment variables ``CC`` and ``CXX`` and use a build preset that "
"inherits that configuration preset. Otherwise the ExternalProject may use "
"a different (system default) compiler than the top-level CMake project."
msgstr ""
"对于使用具有 ExternalProject 所需环境变量的配置预设的 ExternalProject 的 CMake "
"项目，请使用继承该配置预设的构建预设，否则 ExternalProject 将不会在配置预设中设置环境变量。示例：假设主机默认使用一个编译器（比如 "
"Clang），而用户希望使用另一个编译器（比如 GCC）。设置配置预设环境变量 ``CC`` 和 ``CXX`` "
"并使用继承该配置预设的构建预设。否则，ExternalProject 可能会使用与顶级 CMake 项目不同的（系统默认）编译器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:456
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:604
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:945
msgid "``configurePreset``"
msgstr "``配置预设``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:451
msgid ""
"An optional string specifying the name of a configure preset to associate "
"with this build preset. If ``configurePreset`` is not specified, it must "
"be inherited from the inherits preset (unless this preset is hidden). The "
"build directory is inferred from the configure preset, so the build will "
"take place in the same ``binaryDir`` that the configuration did."
msgstr ""
"一个可选的字符串，指定与此构建预设关联的配置预设的名称。如果未指定 ``configurePreset``，则它必须从 inherits "
"预设继承（除非此预设被隐藏）。构建目录是从配置预设中推断出来的，因此构建将在与配置相同的 ``binaryDir`` 中进行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:462
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:610
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:951
msgid "``inheritConfigureEnvironment``"
msgstr "``继承配置环境``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:459
msgid ""
"An optional boolean that defaults to true. If true, the environment "
"variables from the associated configure preset are inherited after all "
"inherited build preset environments, but before environment variables "
"explicitly specified in this build preset."
msgstr ""
"默认为 true 的可选布尔值。如果为 "
"true，则关联配置预设中的环境变量将在所有继承的构建预设环境之后继承，但在此构建预设中明确指定的环境变量之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:466
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:797
msgid "``jobs``"
msgstr "``工作``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:465
msgid ""
"An optional integer. Equivalent to passing :option:`--parallel <cmake--"
"build --parallel>` or ``-j`` on the command line."
msgstr ""
"一个可选的整数。相当于在命令行上传递 :option:`--parallel <cmake--build --parallel>` 或 ``-j``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:469
msgid ""
"An optional string or array of strings. Equivalent to passing "
":option:`--target <cmake--build --target>` or ``-t`` on the command line. "
"Vendors may ignore the targets property or hide build presets that "
"explicitly specify targets. This field supports macro expansion."
msgstr ""
"一个可选的字符串或字符串数​​组。相当于在命令行上传递:option:`--target <cmake--build --target>` 或 "
"``-t``。供应商可能会忽略目标属性或隐藏明确指定目标的构建预设。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:476
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:614
msgid "``configuration``"
msgstr "``配置``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:475
msgid ""
"An optional string. Equivalent to passing :option:`--config <cmake--build "
"--config>` on the command line."
msgstr "一个可选的字符串。相当于在命令行上传递 :option:`--config <cmake--build --config>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:480
msgid "``cleanFirst``"
msgstr "``cleanFirst``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:479
msgid ""
"An optional bool. If true, equivalent to passing :option:`--clean-first "
"<cmake--build --clean-first>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--clean-first <cmake--build --clean-first>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:514
msgid "``resolvePackageReferences``"
msgstr "``resolvePackageReferences``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:483
msgid ""
"An optional string that specifies the package resolve mode. This is "
"allowed in preset files specifying version ``4`` or above."
msgstr "一个可选的字符串，指定包解析模式。这在指定版本“4”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:486
msgid ""
"Package references are used to define dependencies to packages from "
"external package managers. Currently only NuGet in combination with the "
"Visual Studio generator is supported. If there are no targets that define "
"package references, this option does nothing. Valid values are:"
msgstr ""
"包引用用于定义对来自外部包管理器的包的依赖性。目前仅支持与 Visual Studio 生成器结合使用的 "
"NuGet。如果没有定义包引用的目标，则此选项不执行任何操作。有效值为："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:492
msgid "``on``"
msgstr "``在``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:492
msgid "Causes package references to be resolved before attempting a build."
msgstr "在尝试构建之前导致包引用被解析。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:496
msgid "``off``"
msgstr "``关闭``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:495
msgid ""
"Package references will not be resolved. Note that this may cause errors "
"in some build environments, such as .NET SDK style projects."
msgstr "包引用将不会被解析。请注意，这可能会导致某些构建环境出现错误，例如 .NET SDK 样式项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:499
msgid "``only``"
msgstr "``只有``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:499
msgid "Only resolve package references, but do not perform a build."
msgstr "仅解析包引用，但不执行构建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:503
msgid ""
"The command line parameter :option:`--resolve-package-references <cmake--"
"build --resolve-package-references>` will take priority over this setting."
" If the command line parameter is not provided and this setting is not "
"specified, an environment-specific cache variable will be evaluated to "
"decide, if package restoration should be performed."
msgstr ""
"命令行参数:option:`--resolve-package-references <cmake--build --resolve-package-"
"references>` 将优先于此设置。如果未提供命令行参数且未指定此设置，则将评估特定于环境的缓存变量以决定是否应执行包恢复。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:510
msgid ""
"When using the Visual Studio generator, package references are defined "
"using the :prop_tgt:`VS_PACKAGE_REFERENCES` property. Package references "
"are restored using NuGet. It can be disabled by setting the "
"``CMAKE_VS_NUGET_PACKAGE_RESTORE`` variable to ``OFF``. This can also be "
"done from within a configure preset."
msgstr ""
"使用 Visual Studio 生成器时，包引用是使用 :prop_tgt:`VS_PACKAGE_REFERENCES` 属性定义的。使用 "
"NuGet "
"恢复包引用。可以通过将“CMAKE_VS_NUGET_PACKAGE_RESTORE”变量设置为“OFF”来禁用它。这也可以在配置预设中完成。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:518
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:639
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:979
msgid "``verbose``"
msgstr "``冗长``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:517
msgid ""
"An optional bool. If true, equivalent to passing :option:`--verbose <cmake"
"--build --verbose>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递 :option:`--verbose <cmake--build --verbose>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:522
msgid "``nativeToolOptions``"
msgstr "``nativeToolOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:521
msgid ""
"An optional array of strings. Equivalent to passing options after ``--`` "
"on the command line. The array values support macro expansion."
msgstr "一个可选的字符串数组。相当于在命令行的``--`` 之后传递选项。数组值支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:525
msgid "Test Preset"
msgstr "测试预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:527
msgid ""
"Each entry of the ``testPresets`` array is a JSON object that may contain "
"the following fields:"
msgstr "``testPresets`` 数组的每个条目都是一个 JSON 对象，可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:531
msgid ""
"A required string representing the machine-friendly name of the preset. "
"This identifier is used in the :option:`ctest --preset` option. There must"
" not be two test presets in the union of ``CMakePresets.json`` and "
"``CMakeUserPresets.json`` in the same directory with the same name. "
"However, a test preset may have the same name as a configure, build, "
"package, or workflow preset."
msgstr ""
"表示预设的机器友好名称的必需字符串。此标识符用于 :option:`ctest --preset` 选项。 ``CMakePresets.json``"
" 和``CMakeUserPresets.json`` "
"的并集不能有两个同名的同名测试预设。但是，测试预设可能与配置、构建、包或工作流预设具有相同的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:539
msgid ""
"An optional boolean specifying whether or not a preset should be hidden. "
"If a preset is hidden, it cannot be used in the :option:`--preset <ctest "
"--preset>` argument and does not have to have a valid ``configurePreset``,"
" even from inheritance. ``hidden`` presets are intended to be used as a "
"base for other presets to inherit via the ``inherits`` field."
msgstr ""
"一个可选的布尔值，指定是否应隐藏预设。如果预设是隐藏的，则不能在 :option:`--preset <ctest --preset>` "
"参数中使用，并且不必具有有效的``configurePreset``，即使是继承。 ``hidden`` 预设旨在用作其他预设通过 "
"``inherits`` 字段继承的基础。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:599
msgid ""
"An optional string specifying the name of a configure preset to associate "
"with this test preset. If ``configurePreset`` is not specified, it must be"
" inherited from the inherits preset (unless this preset is hidden). The "
"build directory is inferred from the configure preset, so tests will run "
"in the same ``binaryDir`` that the configuration did and build did."
msgstr ""
"一个可选的字符串，指定与此测试预设关联的配置预设的名称。如果未指定 ``configurePreset``，则它必须从 inherits "
"预设继承（除非此预设被隐藏）。构建目录是从配置预设中推断出来的，因此测试将在与配置和构建相同的 ``binaryDir`` 中运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:607
msgid ""
"An optional boolean that defaults to true. If true, the environment "
"variables from the associated configure preset are inherited after all "
"inherited test preset environments, but before environment variables "
"explicitly specified in this test preset."
msgstr ""
"默认为 true 的可选布尔值。如果为真，则关联配置预设中的环境变量将在所有继承的测试预设环境之后继承，但在此测试预设中明确指定的环境变量之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:613
msgid ""
"An optional string. Equivalent to passing :option:`--build-config <ctest "
"--build-config>` on the command line."
msgstr "一个可选的字符串。相当于在命令行上传递 :option:`--build-config <ctest --build-config>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:620
msgid "``overwriteConfigurationFile``"
msgstr "``覆盖配置文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:617
msgid ""
"An optional array of configuration options to overwrite options specified "
"in the CTest configuration file. Equivalent to passing "
":option:`--overwrite <ctest --overwrite>` for each value in the array. The"
" array values support macro expansion."
msgstr ""
"一个可选的配置选项数组，用于覆盖 CTest 配置文件中指定的选项。相当于为数组中的每个值传递 :option:`--overwrite <ctest"
" --overwrite>`。数组值支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:623
msgid ""
"An optional object specifying output options. The object may contain the "
"following fields."
msgstr "指定输出选项的可选对象。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:628
msgid "``shortProgress``"
msgstr "``shortProgress``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:627
msgid ""
"An optional bool. If true, equivalent to passing :option:`--progress "
"<ctest --progress>` on the command line."
msgstr "一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--progress <ctest --progress>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:643
msgid "``verbosity``"
msgstr "``冗长``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:631
msgid ""
"An optional string specifying verbosity level. Must be one of the "
"following:"
msgstr "指定详细级别的可选字符串。必须是以下之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:635
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:855
msgid "``default``"
msgstr "``默认``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:635
msgid "Equivalent to passing no verbosity flags on the command line."
msgstr "相当于在命令行上不传递详细信息标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:638
msgid ""
"Equivalent to passing :option:`--verbose <ctest --verbose>` on the command"
" line."
msgstr "相当于在命令行上传递 :option:`--verbose <ctest --verbose>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:643
msgid "``extra``"
msgstr "``额外的``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:642
msgid ""
"Equivalent to passing :option:`--extra-verbose <ctest --extra-verbose>` on"
" the command line."
msgstr "相当于在命令行上传递:option:`--extra-verbose <ctest --extra-verbose>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:646
msgid ""
"An optional bool. If true, equivalent to passing :option:`--debug <ctest "
"--debug>` on the command line."
msgstr "一个可选的布尔值。如果为真，相当于在命令行上传递 :option:`--debug <ctest --debug>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:652
msgid "``outputOnFailure``"
msgstr "``outputOnFailure``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:650
msgid ""
"An optional bool. If true, equivalent to passing :option:`--output-on-"
"failure <ctest --output-on-failure>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--output-on-failure <ctest --output-on-"
"failure>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:656
msgid "``quiet``"
msgstr "``安静``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:655
msgid ""
"An optional bool. If true, equivalent to passing :option:`--quiet <ctest "
"--quiet>` on the command line."
msgstr "一个可选的布尔值。如果为真，相当于在命令行上传递 :option:`--quiet <ctest --quiet>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:661
msgid "``outputLogFile``"
msgstr "``输出日志文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:659
msgid ""
"An optional string specifying a path to a log file. Equivalent to passing "
":option:`--output-log <ctest --output-log>` on the command line. This "
"field supports macro expansion."
msgstr ""
"一个可选的字符串，指定日志文件的路径。相当于在命令行上传递:option:`--output-log <ctest --output-"
"log>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:667
msgid "``outputJUnitFile``"
msgstr "``outputJUnitFile``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:664
msgid ""
"An optional string specifying a path to a JUnit file. Equivalent to "
"passing :option:`--output-junit <ctest --output-junit>` on the command "
"line. This field supports macro expansion. This is allowed in preset files"
" specifying version ``6`` or above."
msgstr ""
"指定 JUnit 文件路径的可选字符串。相当于在命令行上传递:option:`--output-junit <ctest --output-"
"junit>`。该字段支持宏扩展。这在指定版本“6”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:672
msgid "``labelSummary``"
msgstr "``标签摘要``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:670
msgid ""
"An optional bool. If false, equivalent to passing :option:`--no-label-"
"summary <ctest --no-label-summary>` on the command line."
msgstr ""
"一个可选的布尔值。如果为假，相当于在命令行上传递:option:`--no-label-summary <ctest --no-label-"
"summary>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:677
msgid "``subprojectSummary``"
msgstr "``子项目摘要``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:675
msgid ""
"An optional bool. If false, equivalent to passing :option:`--no-"
"subproject-summary <ctest --no-subproject-summary>` on the command line."
msgstr ""
"一个可选的布尔值。如果为 false，相当于在命令行上传递:option:`--no-subproject-summary <ctest --no-"
"subproject-summary>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:683
msgid "``maxPassedTestOutputSize``"
msgstr "``maxPassedTestOutputSize``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:680
msgid ""
"An optional integer specifying the maximum output for passed tests in "
"bytes. Equivalent to passing :option:`--test-output-size-passed <ctest "
"--test-output-size-passed>` on the command line."
msgstr ""
"一个可选的整数，以字节为单位指定通过测试的最大输出。相当于在命令行上传递:option:`--test-output-size-passed <ctest "
"--test-output-size-passed>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:689
msgid "``maxFailedTestOutputSize``"
msgstr "``maxFailedTestOutputSize``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:686
msgid ""
"An optional integer specifying the maximum output for failed tests in "
"bytes. Equivalent to passing :option:`--test-output-size-failed <ctest "
"--test-output-size-failed>` on the command line."
msgstr ""
"一个可选的整数，以字节为单位指定失败测试的最大输出。相当于在命令行上传递:option:`--test-output-size-failed <ctest "
"--test-output-size-failed>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:696
msgid "``testOutputTruncation``"
msgstr "``testOutputTruncation``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:692
msgid ""
"An optional string specifying the test output truncation mode. Equivalent "
"to passing :option:`--test-output-truncation <ctest --test-output-"
"truncation>` on the command line. This is allowed in preset files "
"specifying version ``5`` or above."
msgstr ""
"指定测试输出截断模式的可选字符串。相当于在命令行上传递:option:`--test-output-truncation <ctest --test-"
"output-truncation>`。这在指定版本“5”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:701
msgid "``maxTestNameWidth``"
msgstr "``maxTestNameWidth``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:699
msgid ""
"An optional integer specifying the maximum width of a test name to output."
" Equivalent to passing :option:`--max-width <ctest --max-width>` on the "
"command line."
msgstr ""
"一个可选的整数，指定要输出的测试名称的最大宽度。相当于在命令行上传递 :option:`--max-width <ctest --max-"
"width>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:780
msgid "``filter``"
msgstr "``过滤器``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:704
msgid ""
"An optional object specifying how to filter the tests to run. The object "
"may contain the following fields."
msgstr "一个可选对象，指定如何过滤要运行的测试。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:708
msgid ""
"An optional object specifying which tests to include. The object may "
"contain the following fields."
msgstr "一个可选对象，指定要包含的测试。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:712
msgid ""
"An optional string specifying a regex for test names. Equivalent to "
"passing :option:`--tests-regex <ctest --tests-regex>` on the command line."
" This field supports macro expansion. CMake regex syntax is described "
"under :ref:`string(REGEX) <Regex Specification>`."
msgstr ""
"一个可选的字符串，指定测试名称的正则表达式。相当于在命令行上传递:option:`--tests-regex <ctest --tests-"
"regex>`。该字段支持宏扩展。 CMake 正则表达式语法在 :ref:`string(REGEX) <Regex "
"Specification>` 下描述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:720
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:758
msgid "``label``"
msgstr "``标签``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:718
msgid ""
"An optional string specifying a regex for test labels. Equivalent to "
"passing :option:`--label-regex <ctest --label-regex>` on the command line."
" This field supports macro expansion."
msgstr ""
"一个可选的字符串，指定测试标签的正则表达式。相当于在命令行上传递:option:`--label-regex <ctest --label-"
"regex>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:724
msgid "``useUnion``"
msgstr "``使用联合``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:723
msgid ""
"An optional bool. Equivalent to passing :option:`--union <ctest --union>` "
"on the command line."
msgstr "一个可选的布尔值。相当于在命令行上传递 :option:`--union <ctest --union>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:727
msgid ""
"An optional object specifying tests to include by test index. The object "
"may contain the following fields. Can also be an optional string "
"specifying a file with the command line syntax for :option:`--tests-"
"information <ctest --tests-information>`. If specified as a string, this "
"field supports macro expansion."
msgstr ""
"一个可选对象，指定要按测试索引包含的测试。该对象可能包含以下字段。也可以是一个可选的字符串，指定一个文件，其命令行语法为:option:`--tests-"
"information <ctest --tests-information>`。如果指定为字符串，则该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:734
msgid "``start``"
msgstr "``开始``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:734
msgid "An optional integer specifying a test index to start testing at."
msgstr "一个可选的整数，指定开始测试的测试索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:737
msgid "``end``"
msgstr "``结束``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:737
msgid "An optional integer specifying a test index to stop testing at."
msgstr "一个可选的整数，指定要停止测试的测试索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:740
msgid "``stride``"
msgstr "``大步走``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:740
msgid "An optional integer specifying the increment."
msgstr "指定增量的可选整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:744
msgid "``specificTests``"
msgstr "``具体测试``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:743
msgid ""
"An optional array of integers specifying specific test indices to run."
msgstr "一个可选的整数数组，指定要运行的特定测试索引。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:780
msgid "``exclude``"
msgstr "``排除``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:747
msgid ""
"An optional object specifying which tests to exclude. The object may "
"contain the following fields."
msgstr "一个可选对象，指定要排除的测试。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:751
msgid ""
"An optional string specifying a regex for test names. Equivalent to "
"passing :option:`--exclude-regex <ctest --exclude-regex>` on the command "
"line. This field supports macro expansion."
msgstr ""
"一个可选的字符串，指定测试名称的正则表达式。相当于在命令行上传递:option:`--exclude-regex <ctest --exclude-"
"regex>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:756
msgid ""
"An optional string specifying a regex for test labels. Equivalent to "
"passing :option:`--label-exclude <ctest --label-exclude>` on the command "
"line. This field supports macro expansion."
msgstr ""
"一个可选的字符串，指定测试标签的正则表达式。相当于在命令行上传递:option:`--label-exclude <ctest --label-"
"exclude>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:780
msgid "``fixtures``"
msgstr "``固定装置``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:761
msgid ""
"An optional object specifying which fixtures to exclude from adding tests."
" The object may contain the following fields."
msgstr "一个可选对象，指定要从添加测试中排除的固定装置。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:768
msgid "``any``"
msgstr "``任何``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:765
msgid ""
"An optional string specifying a regex for text fixtures to exclude from "
"adding any tests. Equivalent to :option:`--fixture-exclude-any <ctest "
"--fixture-exclude-any>` on the command line. This field supports macro "
"expansion."
msgstr ""
"一个可选的字符串，指定要从添加任何测试中排除的文本装置的正则表达式。相当于命令行上的:option:`--fixture-exclude-any "
"<ctest --fixture-exclude-any>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:774
msgid "``setup``"
msgstr "``设置``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:771
msgid ""
"An optional string specifying a regex for text fixtures to exclude from "
"adding setup tests. Equivalent to :option:`--fixture-exclude-setup <ctest "
"--fixture-exclude-setup>` on the command line. This field supports macro "
"expansion."
msgstr ""
"一个可选的字符串，指定要从添加设置测试中排除的文本装置的正则表达式。相当于命令行上的:option:`--fixture-exclude-setup "
"<ctest --fixture-exclude-setup>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:780
msgid "``cleanup``"
msgstr "``清理``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:777
msgid ""
"An optional string specifying a regex for text fixtures to exclude from "
"adding cleanup tests. Equivalent to :option:`--fixture-exclude-cleanup "
"<ctest --fixture-exclude-cleanup>` on the command line. This field "
"supports macro expansion."
msgstr ""
"一个可选的字符串，指定要从添加清理测试中排除的文本装置的正则表达式。相当于命令行上的:option:`--fixture-exclude-cleanup "
"<ctest --fixture-exclude-cleanup>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:863
msgid "``execution``"
msgstr "``执行``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:783
msgid ""
"An optional object specifying options for test execution. The object may "
"contain the following fields."
msgstr "指定测试执行选项的可选对象。该对象可能包含以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:789
msgid "``stopOnFailure``"
msgstr "``stopOnFailure``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:787
msgid ""
"An optional bool. If true, equivalent to passing :option:`--stop-on-"
"failure <ctest --stop-on-failure>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--stop-on-failure <ctest --stop-on-failure>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:793
msgid "``enableFailover``"
msgstr "``启用故障转移``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:792
msgid ""
"An optional bool. If true, equivalent to passing :option:`-F <ctest -F>` "
"on the command line."
msgstr "一个可选的布尔值。如果为真，相当于在命令行上传递:option:`-F <ctest -F>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:796
msgid ""
"An optional integer. Equivalent to passing :option:`--parallel <ctest "
"--parallel>` on the command line."
msgstr "一个可选的整数。相当于在命令行上传递 :option:`--parallel <ctest --parallel>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:802
msgid "``resourceSpecFile``"
msgstr "``resourceSpecFile``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:800
msgid ""
"An optional string. Equivalent to passing :option:`--resource-spec-file "
"<ctest --resource-spec-file>` on the command line. This field supports "
"macro expansion."
msgstr ""
"一个可选的字符串。相当于在命令行上传递:option:`--resource-spec-file <ctest --resource-spec-"
"file>`。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:806
msgid "``testLoad``"
msgstr "``测试负载``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:805
msgid ""
"An optional integer. Equivalent to passing :option:`--test-load <ctest "
"--test-load>` on the command line."
msgstr "一个可选的整数。相当于在命令行上传递:option:`--test-load <ctest --test-load>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:815
msgid "``showOnly``"
msgstr "``仅显示``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:809
msgid ""
"An optional string. Equivalent to passing :option:`--show-only <ctest "
"--show-only>` on the command line. The string must be one of the following"
" values:"
msgstr ""
"一个可选的字符串。相当于在命令行上传递:option:`--show-only <ctest --show-only>`。该字符串必须是以下值之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:813
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:358
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:196
msgid "``human``"
msgstr "``人类``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:815
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:432
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:199
msgid "``json-v1``"
msgstr "``json-v1``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:832
msgid "``repeat``"
msgstr "``重复``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:818
msgid ""
"An optional object specifying how to repeat tests. Equivalent to passing "
":option:`--repeat <ctest --repeat>` on the command line. The object must "
"have the following fields."
msgstr ""
"一个可选对象，指定如何重复测试。相当于在命令行上传递 :option:`--repeat <ctest --repeat>`。该对象必须具有以下字段。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:829
msgid "``mode``"
msgstr "``模式``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:823
msgid "A required string. Must be one of the following values:"
msgstr "必需的字符串。必须是以下值之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:825
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:297
msgid "``until-fail``"
msgstr "``直到失败``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:827
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:302
msgid "``until-pass``"
msgstr "``直到通过``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:829
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:307
msgid "``after-timeout``"
msgstr "``超时后``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:832
msgid "``count``"
msgstr "``计数``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:832
msgid "A required integer."
msgstr "必需的整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:839
msgid "``interactiveDebugging``"
msgstr "``交互式调试``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:835
msgid ""
"An optional bool. If true, equivalent to passing :option:`--interactive-"
"debug-mode 1 <ctest --interactive-debug-mode>` on the command line. If "
"false, equivalent to passing :option:`--interactive-debug-mode 0 <ctest "
"--interactive-debug-mode>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--interactive-debug-mode 1 <ctest "
"--interactive-debug-mode>`。如果为 false，相当于在命令行上传递 :option:`--interactive-"
"debug-mode 0 <ctest --interactive-debug-mode>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:844
msgid "``scheduleRandom``"
msgstr "``scheduleRandom``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:842
msgid ""
"An optional bool. If true, equivalent to passing :option:`--schedule-"
"random <ctest --schedule-random>` on the command line."
msgstr ""
"一个可选的布尔值。如果为真，相当于在命令行上传递:option:`--schedule-random <ctest --schedule-random>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:848
msgid "``timeout``"
msgstr "``超时``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:847
msgid ""
"An optional integer. Equivalent to passing :option:`--timeout <ctest "
"--timeout>` on the command line."
msgstr "一个可选的整数。相当于在命令行上传递 :option:`--timeout <ctest --timeout>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:863
msgid "``noTestsAction``"
msgstr "``noTestsAction``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:851
msgid ""
"An optional string specifying the behavior if no tests are found. Must be "
"one of the following values:"
msgstr "如果没有找到测试，则指定行为的可选字符串。必须是以下值之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:855
msgid "Equivalent to not passing any value on the command line."
msgstr "相当于在命令行不传递任何值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:859
msgid "``error``"
msgstr "``错误``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:858
msgid ""
"Equivalent to passing :option:`--no-tests=error <ctest --no-tests>` on the"
" command line."
msgstr "相当于在命令行上传递 :option:`--no-tests=error <ctest --no-tests>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:863
msgid "``ignore``"
msgstr "``忽略``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:862
msgid ""
"Equivalent to passing :option:`--no-tests=ignore <ctest --no-tests>` on "
"the command line."
msgstr "相当于在命令行上传递 :option:`--no-tests=ignore <ctest --no-tests>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:866
msgid "Package Preset"
msgstr "包预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:868
msgid ""
"Package presets may be used in schema version ``6`` or above. Each entry "
"of the ``packagePresets`` array is a JSON object that may contain the "
"following fields:"
msgstr ""
"包预设可以在模式版本 ``6`` 或更高版本中使用。 ``packagePresets`` 数组的每个条目都是一个 JSON "
"对象，可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:873
msgid ""
"A required string representing the machine-friendly name of the preset. "
"This identifier is used in the :option:`cpack --preset` option. There must"
" not be two package presets in the union of ``CMakePresets.json`` and "
"``CMakeUserPresets.json`` in the same directory with the same name. "
"However, a package preset may have the same name as a configure, build, "
"test, or workflow preset."
msgstr ""
"表示预设的机器友好名称的必需字符串。此标识符用于 :option:`cpack --preset` 选项。 "
"``CMakePresets.json`` 和 ``CMakeUserPresets.json`` "
"的并集在同一目录中不能有两个同名的包预设。但是，包预设可能与配置、构建、测试或工作流预设具有相同的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:881
msgid ""
"An optional boolean specifying whether or not a preset should be hidden. "
"If a preset is hidden, it cannot be used in the :option:`--preset <cpack "
"--preset>` argument and does not have to have a valid ``configurePreset``,"
" even from inheritance. ``hidden`` presets are intended to be used as a "
"base for other presets to inherit via the ``inherits`` field."
msgstr ""
"一个可选的布尔值，指定是否应隐藏预设。如果预设是隐藏的，它不能在 :option:`--preset <cpack --preset>` "
"参数中使用，并且不必具有有效的``configurePreset``，即使是继承。 ``hidden`` 预设旨在用作其他预设通过 "
"``inherits`` 字段继承的基础。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:906
msgid "An optional `Condition`_ object."
msgstr "一个可选的“条件”对象。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:940
msgid ""
"An optional string specifying the name of a configure preset to associate "
"with this package preset. If ``configurePreset`` is not specified, it must"
" be inherited from the inherits preset (unless this preset is hidden). The"
" build directory is inferred from the configure preset, so packaging will "
"run in the same ``binaryDir`` that the configuration did and build did."
msgstr ""
"一个可选字符串，指定与此包预设关联的配置预设的名称。如果未指定 ``configurePreset``，则它必须从 inherits "
"预设继承（除非此预设被隐藏）。构建目录是从配置预设中推断出来的，因此打包将在与配置和构建相同的 ``binaryDir`` 中运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:948
msgid ""
"An optional boolean that defaults to true. If true, the environment "
"variables from the associated configure preset are inherited after all "
"inherited package preset environments, but before environment variables "
"explicitly specified in this package preset."
msgstr ""
"默认为 true 的可选布尔值。如果为 "
"true，则关联配置预设中的环境变量将在所有继承的包预设环境之后继承，但在此包预设中明确指定的环境变量之前继承。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:954
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:785
msgid "``generators``"
msgstr "``生成器``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:954
msgid ""
"An optional array of strings representing generators for CPack to use."
msgstr "一个可选的字符串数组，表示要使用的 CPack 生成器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:957
msgid ""
"An optional array of strings representing build configurations for CPack "
"to package."
msgstr "一个可选的字符串数组，表示要打包的 CPack 的构建配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:963
msgid "``variables``"
msgstr "``变量``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:961
msgid ""
"An optional map of variables to pass to CPack, equivalent to :option:`-D "
"<cpack -D>` arguments. Each key is the name of a variable, and the value "
"is the string to assign to that variable."
msgstr ""
"要传递给 CPack 的可选变量映射，相当于:option:`-D <cpack -D>` 参数。每个键是一个变量的名称，值是分配给该变量的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:966
msgid "``configFile``"
msgstr "``配置文件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:966
msgid "An optional string representing the config file for CPack to use."
msgstr "一个可选字符串，表示要使用的 CPack 配置文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:969
msgid "An optional object specifying output options. Valid keys are:"
msgstr "指定输出选项的可选对象。有效键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:972
msgid ""
"An optional boolean specifying whether or not to print debug information. "
"A value of ``true`` is equivalent to passing :option:`--debug <cpack "
"--debug>` on the command line."
msgstr ""
"一个可选的布尔值，指定是否打印调试信息。 ``true`` 的值相当于在命令行上传递:option:`--debug <cpack --debug>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:977
msgid ""
"An optional boolean specifying whether or not to print verbosely. A value "
"of ``true`` is equivalent to passing :option:`--verbose <cpack --verbose>`"
" on the command line."
msgstr ""
"一个可选的布尔值，指定是否详细打印。 ``true`` 的值相当于在命令行上传递:option:`--verbose <cpack --verbose>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:982
msgid "``packageName``"
msgstr "``包名``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:982
msgid "An optional string representing the package name."
msgstr "表示包名称的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:985
msgid "``packageVersion``"
msgstr "``包版本``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:985
msgid "An optional string representing the package version."
msgstr "表示包版本的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:988
msgid "``packageDirectory``"
msgstr "``包目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:988
msgid ""
"An optional string representing the directory in which to place the "
"package."
msgstr "一个可选字符串，表示放置包的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:991
msgid "``vendorName``"
msgstr "``供应商名称``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:991
msgid "An optional string representing the vendor name."
msgstr "表示供应商名称的可选字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:996
msgid "Workflow Preset"
msgstr "工作流程预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:998
msgid ""
"Workflow presets may be used in schema version ``6`` or above. Each entry "
"of the ``workflowPresets`` array is a JSON object that may contain the "
"following fields:"
msgstr ""
"工作流预设可以在架构版本“6”或更高版本中使用。 ``workflowPresets`` 数组的每个条目都是一个 JSON 对象，可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1003
msgid ""
"A required string representing the machine-friendly name of the preset. "
"This identifier is used in the :ref:`cmake --workflow --preset <Workflow "
"Mode>` option. There must not be two workflow presets in the union of "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` in the same directory "
"with the same name. However, a workflow preset may have the same name as a"
" configure, build, test, or package preset."
msgstr ""
"表示预设的机器友好名称的必需字符串。此标识符用于 :ref:`cmake --workflow --preset <Workflow Mode>` "
"选项。 ``CMakePresets.json`` 和``CMakeUserPresets.json`` "
"的并集在同一目录下不能有两个同名的工作流预设。但是，工作流预设可能与配置、构建、测试或包预设具有相同的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1029
msgid "``steps``"
msgstr "``步骤``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1018
msgid ""
"A required array of objects describing the steps of the workflow. The "
"first step must be a configure preset, and all subsequent steps must be "
"non- configure presets whose ``configurePreset`` field matches the "
"starting configure preset. Each object may contain the following fields:"
msgstr ""
"描述工作流步骤的必需对象数组。第一步必须是配置预设，所有后续步骤必须是非配置预设，其“configurePreset”字段与起始配置预设匹配。每个对象可能包含以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1024
msgid ""
"A required string. The first step must be ``configure``. Subsequent steps "
"must be either ``build``, ``test``, or ``package``."
msgstr "必需的字符串。第一步必须是“配置”。后续步骤必须是 ``build``、``test`` 或 ``package``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1028
msgid ""
"A required string representing the name of the configure, build, test, or "
"package preset to run as this workflow step."
msgstr "一个必需的字符串，表示作为此工作流步骤运行的配置、构建、测试或包预设的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1032
msgid "Condition"
msgstr "健康）状况"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1034
msgid ""
"The ``condition`` field of a preset, allowed in preset files specifying "
"version ``3`` or above, is used to determine whether or not the preset is "
"enabled. For example, this can be used to disable a preset on platforms "
"other than Windows. ``condition`` may be either a boolean, ``null``, or an"
" object. If it is a boolean, the boolean indicates whether the preset is "
"enabled or disabled. If it is ``null``, the preset is enabled, but the "
"``null`` condition is not inherited by any presets that may inherit from "
"the preset. Sub-conditions (for example in a ``not``, ``anyOf``, or "
"``allOf`` condition) may not be ``null``. If it is an object, it has the "
"following fields:"
msgstr ""
"预设的“条件”字段允许在指定版本“3”或更高版本的预设文件中使用，用于确定是否启用预设。例如，这可用于在 Windows 以外的平台上禁用预设。 "
"``condition`` 可以是布尔值、``null`` "
"或对象。如果它是布尔值，则布尔值指示预设是启用还是禁用。如果为“null”，则启用预设，但“null”条件不会被任何可能从预设继承的预设继承。子条件（例如在"
" ``not``、``anyOf`` 或 ``allOf`` 条件中）可能不是 ``null``。如果它是一个对象，它有以下字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1045
msgid "A required string with one of the following values:"
msgstr "具有以下值之一的必需字符串："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1054
msgid "``\"const\"``"
msgstr "``“常量”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1048
msgid ""
"Indicates that the condition is constant. This is equivalent to using a "
"boolean in place of the object. The condition object will have the "
"following additional fields:"
msgstr "表示条件不变。这相当于使用布尔值代替对象。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1053
msgid ""
"A required boolean which provides a constant value for the condition's "
"evaluation."
msgstr "一个必需的布尔值，它为条件的评估提供一个常量值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1056
msgid "``\"equals\"``"
msgstr "``“等于”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1067
msgid "``\"notEquals\"``"
msgstr "``“不等于”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1059
msgid ""
"Indicates that the condition compares two strings to see if they are equal"
" (or not equal). The condition object will have the following additional "
"fields:"
msgstr "表示条件比较两个字符串，看它们是否相等（或不相等）。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1064
msgid "``lhs``"
msgstr "``lhs``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1064
msgid "First string to compare. This field supports macro expansion."
msgstr "要比较的第一个字符串。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1067
msgid "``rhs``"
msgstr "``右手边``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1067
msgid "Second string to compare. This field supports macro expansion."
msgstr "要比较的第二个字符串。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1069
msgid "``\"inList\"``"
msgstr "``“在列表中”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1080
msgid "``\"notInList\"``"
msgstr "``“notInList”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1072
msgid ""
"Indicates that the condition searches for a string in a list of strings. "
"The condition object will have the following additional fields:"
msgstr "指示条件在字符串列表中搜索字符串。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1076
msgid ""
"A required string to search for. This field supports macro expansion."
msgstr "要搜索的必需字符串。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1080
msgid "``list``"
msgstr "``列表``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1079
msgid ""
"A required array of strings to search. This field supports macro "
"expansion, and uses short-circuit evaluation."
msgstr "要搜索的必需字符串数组。该字段支持宏扩展，并使用短路评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1082
msgid "``\"matches\"``"
msgstr "``“匹配”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1093
msgid "``\"notMatches\"``"
msgstr "``“不匹配”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1085
msgid ""
"Indicates that the condition searches for a regular expression in a "
"string. The condition object will have the following additional fields:"
msgstr "表示条件在字符串中搜索正则表达式。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1089
msgid "A required string to search. This field supports macro expansion."
msgstr "要搜索的必需字符串。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1093
msgid "``regex``"
msgstr "``正则表达式``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1092
msgid ""
"A required regular expression to search for. This field supports macro "
"expansion."
msgstr "要搜索的必需正则表达式。该字段支持宏扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1095
msgid "``\"anyOf\"``"
msgstr "``“任何”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1097
msgid "``\"allOf\"``"
msgstr "``“全部”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1099
msgid ""
"Indicates that the condition is an aggregation of zero or more nested "
"conditions. The condition object will have the following additional "
"fields:"
msgstr "指示该条件是零个或多个嵌套条件的聚合。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1104
msgid "``conditions``"
msgstr "``条件``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1103
msgid ""
"A required array of condition objects. These conditions use short-circuit "
"evaluation."
msgstr "必需的条件对象数组。这些条件使用短路评估。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1111
msgid "``\"not\"``"
msgstr "``“不是”``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1107
msgid ""
"Indicates that the condition is an inversion of another condition. The "
"condition object will have the following additional fields:"
msgstr "表示该条件是另一个条件的反转。条件对象将具有以下附加字段："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1111
msgid "A required condition object."
msgstr "必需的条件对象。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1114
msgid "Macro Expansion"
msgstr "宏扩展"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1116
msgid ""
"As mentioned above, some fields support macro expansion. Macros are "
"recognized in the form ``$<macro-namespace>{<macro-name>}``. All macros "
"are evaluated in the context of the preset being used, even if the macro "
"is in a field that was inherited from another preset. For example, if the "
"``Base`` preset sets variable ``PRESET_NAME`` to ``${presetName}``, and "
"the ``Derived`` preset inherits from ``Base``, ``PRESET_NAME`` will be set"
" to ``Derived``."
msgstr ""
"上面说了一些字段支持宏扩展。宏以 ``$<macro-namespace>{<macro-name>}`` "
"的形式被识别。所有宏都在正在使用的预设的上下文中进行评估，即使宏位于从另一个预设继承的字段中也是如此。例如，如果 ``Base`` 预设将变量 "
"``PRESET_NAME`` 设置为 ``${presetName}``，并且 ``Derived`` 预设继承自 "
"``Base``，``PRESET_NAME`` 将被设置为``Derived``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1124
msgid ""
"It is an error to not put a closing brace at the end of a macro name. For "
"example, ``${sourceDir`` is invalid. A dollar sign (``$``) followed by "
"anything other than a left curly brace (``{``) with a possible namespace "
"is interpreted as a literal dollar sign."
msgstr ""
"不在宏名称末尾放置右大括号是错误的。例如，``${sourceDir`` 是无效的。美元符号 (``$``) 后跟除左大括号 (``{``) "
"之外的任何可能的名称空间都被解释为文字美元符号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1129
msgid "Recognized macros include:"
msgstr "公认的宏包括："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1133
msgid "``${sourceDir}``"
msgstr "``${sourceDir}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1132
msgid ""
"Path to the project source directory (i.e. the same as "
":variable:`CMAKE_SOURCE_DIR`)."
msgstr "项目源目录的路径（即与 :variable:`CMAKE_SOURCE_DIR` 相同）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1136
msgid "``${sourceParentDir}``"
msgstr "``${sourceParentDir}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1136
msgid "Path to the project source directory's parent directory."
msgstr "项目源目录的父目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1140
msgid "``${sourceDirName}``"
msgstr "``${sourceDirName}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1139
msgid ""
"The last filename component of ``${sourceDir}``. For example, if "
"``${sourceDir}`` is ``/path/to/source``, this would be ``source``."
msgstr ""
"``${sourceDir}`` 的最后一个文件名组件。例如，如果 ``${sourceDir}`` 是 "
"``/path/to/source``，这将是 ``source``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1143
msgid "``${presetName}``"
msgstr "``${presetName}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1143
msgid "Name specified in the preset's ``name`` field."
msgstr "在预设的“名称”字段中指定的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1148
msgid "``${generator}``"
msgstr "``${生成器}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1146
msgid ""
"Generator specified in the preset's ``generator`` field. For build and "
"test presets, this will evaluate to the generator specified by "
"``configurePreset``."
msgstr ""
"在预设的“generator”字段中指定的生成器。对于构建和测试预设，这将评估由 ``configurePreset`` 指定的生成器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1153
msgid "``${hostSystemName}``"
msgstr "``${hostSystemName}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1151
msgid ""
"The name of the host operating system. Contains the same value as "
":variable:`CMAKE_HOST_SYSTEM_NAME`. This is allowed in preset files "
"specifying version ``3`` or above."
msgstr "主机操作系统的名称。包含与 CMAKE_HOST_SYSTEM_NAME 相同的值。这在指定版本“3”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1157
msgid "``${fileDir}``"
msgstr "``${fileDir}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1156
msgid ""
"Path to the directory containing the preset file which contains the macro."
" This is allowed in preset files specifying version ``4`` or above."
msgstr "包含宏的预设文件的目录路径。这在指定版本“4”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1160
msgid "``${dollar}``"
msgstr "``${美元}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1160
msgid "A literal dollar sign (``$``)."
msgstr "文字美元符号 (``$``)。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1170
msgid "``${pathListSep}``"
msgstr "``${pathListSep}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1163
msgid ""
"Native character for separating lists of paths, such as ``:`` or ``;``."
msgstr "用于分隔路径列表的本机字符，例如 ``:`` 或 ``;``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1165
msgid ""
"For example, by setting ``PATH`` to "
"``/path/to/ninja/bin${pathListSep}$env{PATH}``, ``${pathListSep}`` will "
"expand to the underlying operating system's character used for "
"concatenation in ``PATH``."
msgstr ""
"例如，通过将 ``PATH`` 设置为 "
"``/path/to/ninja/bin${pathListSep}$env{PATH}``，``${pathListSep}`` "
"将扩展为底层操作系统使用的字符在 ``PATH`` 中连接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1170
msgid "This is allowed in preset files specifying version ``5`` or above."
msgstr "这在指定版本“5”或更高版本的预设文件中是允许的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1182
msgid "``$env{<variable-name>}``"
msgstr "``$env{<变量名>}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1173
msgid ""
"Environment variable with name ``<variable-name>``. The variable name may "
"not be an empty string. If the variable is defined in the ``environment`` "
"field, that value is used instead of the value from the parent "
"environment. If the environment variable is not defined, this evaluates as"
" an empty string."
msgstr ""
"名称为“<variable-name>”的环境变量。变量名不能为空字符串。如果变量是在 ``environment`` "
"字段中定义的，则使用该值而不是父环境中的值。如果未定义环境变量，则此值为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1179
msgid ""
"Note that while Windows environment variable names are case-insensitive, "
"variable names within a preset are still case-sensitive. This may lead to "
"unexpected results when using inconsistent casing. For best results, keep "
"the casing of environment variable names consistent."
msgstr ""
"请注意，虽然 Windows "
"环境变量名称不区分大小写，但预设中的变量名称仍然区分大小写。当使用不一致的大小写时，这可能会导致意想不到的结果。为获得最佳结果，请使环境变量名称的大小写保持一致。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1191
msgid "``$penv{<variable-name>}``"
msgstr "``$penv{<变量名>}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1185
msgid ""
"Similar to ``$env{<variable-name>}``, except that the value only comes "
"from the parent environment, and never from the ``environment`` field. "
"This allows you to prepend or append values to existing environment "
"variables. For example, setting ``PATH`` to "
"``/path/to/ninja/bin:$penv{PATH}`` will prepend ``/path/to/ninja/bin`` to "
"the ``PATH`` environment variable. This is needed because "
"``$env{<variable-name>}`` does not allow circular references."
msgstr ""
"与 ``$env{<variable-name>}`` 类似，除了该值仅来自父环境，而不是来自 ``environment`` "
"字段。这允许您将值添加到现有环境变量中。例如，将 ``PATH`` 设置为 ``/path/to/ninja/bin:$penv{PATH}`` "
"会将 ``/path/to/ninja/bin`` 添加到 ``PATH`` 环境中变量。这是必需的，因为 ``$env{<variable-"
"name>}`` 不允许循环引用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1203
msgid "``$vendor{<macro-name>}``"
msgstr "``$供应商{<宏名称>}``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1194
msgid ""
"An extension point for vendors to insert their own macros. CMake will not "
"be able to use presets which have a ``$vendor{<macro-name>}`` macro, and "
"effectively ignores such presets. However, it will still be able to use "
"other presets from the same file."
msgstr ""
"供应商插入自己的宏的扩展点。 CMake 将无法使用具有 ``$vendor{<macro-name>}`` "
"宏的预设，并有效地忽略此类预设。但是，它仍然可以使用同一文件中的其他预设。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1199
msgid ""
"CMake does not make any attempt to interpret ``$vendor{<macro-name>}`` "
"macros. However, to avoid name collisions, IDE vendors should prefix "
"``<macro-name>`` with a very short (preferably <= 4 characters) vendor "
"identifier prefix, followed by a ``.``, followed by the macro name. For "
"example, the Example IDE could have ``$vendor{xide.ideInstallDir}``."
msgstr ""
"CMake 不会尝试解释 ``$vendor{<macro-name>}`` 宏。但是，为了避免名称冲突，IDE 供应商应该在 ``<macro-"
"name>`` 前加上一个非常短（最好 <= 4 个字符）的供应商标识符前缀，然后是 ``.``，然后是宏名称。例如，示例 IDE 可以有 "
"``$vendor{xide.ideInstallDir}``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1206
msgid "Schema"
msgstr "图式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-presets.7.rst:1208
msgid ""
":download:`This file </manual/presets/schema.json>` provides a machine-"
"readable JSON schema for the ``CMakePresets.json`` format."
msgstr ""
":download:`此文件 </manual/presets/schema.json>` 为 ``CMakePresets.json`` "
"格式提供机器可读的 JSON 模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:4
msgid "cmake-properties(7)"
msgstr "cmake-属性(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:13
msgid "Properties of Global Scope"
msgstr "全局范围的属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:61
msgid "Properties on Directories"
msgstr "目录属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:102
msgid "Properties on Targets"
msgstr "目标属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:490
msgid "Properties on Tests"
msgstr "测试属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:525
msgid "Properties on Source Files"
msgstr "源文件的属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:586
msgid "Properties on Cache Entries"
msgstr "缓存条目的属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:601
msgid "Properties on Installed Files"
msgstr "已安装文件的属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:615
msgid "Deprecated Properties on Directories"
msgstr "目录中弃用的属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:628
msgid "Deprecated Properties on Targets"
msgstr "目标上的弃用属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-properties.7.rst:639
msgid "Deprecated Properties on Source Files"
msgstr "源文件的弃用属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:4
msgid "cmake-qt(7)"
msgstr "cmake-qt(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:13
msgid ""
"CMake can find and use Qt 4 and Qt 5 libraries.  The Qt 4 libraries are "
"found by the :module:`FindQt4` find-module shipped with CMake, whereas the"
" Qt 5 libraries are found using \"Config-file Packages\" shipped with Qt "
"5. See :manual:`cmake-packages(7)` for more information about CMake "
"packages, and see `the Qt cmake manual <https://contribute.qt-"
"project.org/doc/qt-5/cmake-manual.html>`_ for your Qt version."
msgstr ""
"CMake 可以找到并使用 Qt 4 和 Qt 5 库。 Qt 4 库是通过 CMake 附带的:module:`FindQt4` "
"查找模块找到的，而 Qt 5 库是使用 Qt 5 附带的“配置文件包”找到的。参见:manual:`cmake-packages(7 )` 有关 "
"CMake 包的更多信息，请参阅`Qt cmake 手册 <https://contribute.qt-"
"project.org/doc/qt-5/cmake-manual.html>`_ 适用于您的 Qt 版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:20
msgid ""
"Qt 4 and Qt 5 may be used together in the same :manual:`CMake buildsystem "
"<cmake-buildsystem(7)>`:"
msgstr ""
"Qt 4 和 Qt 5 可以在同一个 :manual:`CMake buildsystem <cmake-buildsystem(7)>` "
"中一起使用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:39
msgid ""
"A CMake target may not link to both Qt 4 and Qt 5.  A diagnostic is issued"
" if this is attempted or results from transitive target dependency "
"evaluation."
msgstr "CMake 目标可能不会链接到 Qt 4 和 Qt 5。如果尝试这样做或从传递目标依赖性评估中得到结果，则会发出诊断。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:43
msgid "Qt Build Tools"
msgstr "Qt 构建工具"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:45
msgid ""
"Qt relies on some bundled tools for code generation, such as ``moc`` for "
"meta-object code generation, ``uic`` for widget layout and population, and"
" ``rcc`` for virtual file system content generation.  These tools may be "
"automatically invoked by :manual:`cmake(1)` if the appropriate conditions "
"are met.  The automatic tool invocation may be used with both Qt 4 and Qt "
"5."
msgstr ""
"Qt "
"依赖于一些捆绑的代码生成工具，例如用于元对象代码生成的``moc``，用于小部件布局和填充的``uic``，以及用于虚拟文件系统内容生成的``rcc``。如果满足适当的条件，这些工具可能会被"
" cmake(1) 自动调用。自动工具调用可以与 Qt 4 和 Qt 5 一起使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:54
msgid "AUTOMOC"
msgstr "奥托莫克"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:56
msgid ""
"The :prop_tgt:`AUTOMOC` target property controls whether "
":manual:`cmake(1)` inspects the C++ files in the target to determine if "
"they require ``moc`` to be run, and to create rules to execute ``moc`` at "
"the appropriate time."
msgstr ""
":prop_tgt:`AUTOMOC` 目标属性控制 :manual:`cmake(1)` 是否检查目标中的 C++ 文件以确定它们是否需要运行 "
"``moc``，并创建规则来执行 ``moc ``在适当的时候。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:60
msgid ""
"If a macro from :prop_tgt:`AUTOMOC_MACRO_NAMES` is found in a header file,"
" ``moc`` will be run on the file.  The result will be put into a file "
"named according to ``moc_<basename>.cpp``. If the macro is found in a C++ "
"implementation file, the moc output will be put into a file named "
"according to ``<basename>.moc``, following the Qt conventions.  The "
"``<basename>.moc`` must be included by the user in the C++ implementation "
"file with a preprocessor ``#include``."
msgstr ""
"如果在头文件中找到来自 :prop_tgt:`AUTOMOC_MACRO_NAMES` 的宏，则将在该文件上运行 "
"``moc``。结果将被放入一个根据 ``moc_<basename>.cpp`` 命名的文件中。如果在 C++ 实现文件中找到该宏，则 moc "
"输出将按照 Qt 约定放入根据 ``<basename>.moc`` 命名的文件中。 ``<basename>.moc`` "
"必须由用户使用预处理器``#include`` 包含在 C++ 实现文件中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:69
msgid ""
"Included ``moc_*.cpp`` and ``*.moc`` files will be generated in the "
"``<AUTOGEN_BUILD_DIR>/include`` directory which is automatically added to "
"the target's :prop_tgt:`INCLUDE_DIRECTORIES`."
msgstr ""
"包含的``moc_*.cpp`` 和``*.moc`` 文件将在``<AUTOGEN_BUILD_DIR>/include`` "
"目录中生成，该目录会自动添加到目标的 :prop_tgt:`INCLUDE_DIRECTORIES`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:73
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:133
msgid ""
"This differs from CMake 3.7 and below; see their documentation for "
"details."
msgstr "这与 CMake 3.7 及以下版本不同；有关详细信息，请参阅他们的文档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:75
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:135
msgid ""
"For :prop_gbl:`multi configuration generators "
"<GENERATOR_IS_MULTI_CONFIG>`, the include directory is "
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``."
msgstr ""
"对于 :prop_gbl:`多配置生成器 <GENERATOR_IS_MULTI_CONFIG>`，包含目录为 "
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:78
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:86
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:138
msgid "See :prop_tgt:`AUTOGEN_BUILD_DIR`."
msgstr "请参阅:prop_tgt:`AUTOGEN_BUILD_DIR`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:80
msgid ""
"Not included ``moc_<basename>.cpp`` files will be generated in custom "
"folders to avoid name collisions and included in a separate file which is "
"compiled into the target, named either "
"``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp`` or "
"``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``."
msgstr ""
"不包括 ``moc_<basename>.cpp`` 文件将在自定义文件夹中生成以避免名称冲突，并包含在编译到目标中的单独文件中，命名为 "
"``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp`` "
"或``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:88
msgid ""
"The ``moc`` command line will consume the :prop_tgt:`COMPILE_DEFINITIONS` "
"and :prop_tgt:`INCLUDE_DIRECTORIES` target properties from the target it "
"is being invoked for, and for the appropriate build configuration."
msgstr ""
"``moc`` 命令行将使用它正在调用的目标中的 :prop_tgt:`COMPILE_DEFINITIONS` 和 "
":prop_tgt:`INCLUDE_DIRECTORIES` 目标属性，以及适当的构建配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:92
msgid ""
"The :prop_tgt:`AUTOMOC` target property may be pre-set for all following "
"targets by setting the :variable:`CMAKE_AUTOMOC` variable.  The "
":prop_tgt:`AUTOMOC_MOC_OPTIONS` target property may be populated to set "
"options to pass to ``moc``. The :variable:`CMAKE_AUTOMOC_MOC_OPTIONS` "
"variable may be populated to pre-set the options for all following "
"targets."
msgstr ""
":prop_tgt:`AUTOMOC` 目标属性可以通过设置 :variable:`CMAKE_AUTOMOC` 变量为所有以下目标预先设置。 "
":prop_tgt:`AUTOMOC_MOC_OPTIONS` 目标属性可以被填充以设置传递给``moc`` 的选项。可以填充 "
":variable:`CMAKE_AUTOMOC_MOC_OPTIONS` 变量来为所有以下目标预设选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:98
msgid ""
"Additional macro names to search for can be added to "
":prop_tgt:`AUTOMOC_MACRO_NAMES`."
msgstr "可以将要搜索的其他宏名称添加到 :prop_tgt:`AUTOMOC_MACRO_NAMES`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:101
msgid ""
"Additional ``moc`` dependency file names can be extracted from source code"
" by using :prop_tgt:`AUTOMOC_DEPEND_FILTERS`."
msgstr "可以使用 AUTOMOC_DEPEND_FILTERS 从源代码中提取额外的 ``moc`` 依赖文件名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:104
msgid ""
"Source C++ files can be excluded from :prop_tgt:`AUTOMOC` processing by "
"enabling :prop_sf:`SKIP_AUTOMOC` or the broader :prop_sf:`SKIP_AUTOGEN`."
msgstr ""
"通过启用 :prop_sf:`SKIP_AUTOMOC` 或更广泛的 :prop_sf:`SKIP_AUTOGEN`，可以从 "
":prop_tgt:`AUTOMOC` 处理中排除源 C++ 文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:110
msgid "AUTOUIC"
msgstr "自动档"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:112
msgid ""
"The :prop_tgt:`AUTOUIC` target property controls whether "
":manual:`cmake(1)` inspects the C++ files in the target to determine if "
"they require ``uic`` to be run, and to create rules to execute ``uic`` at "
"the appropriate time."
msgstr ""
":prop_tgt:`AUTOUIC` 目标属性控制 :manual:`cmake(1)` 是否检查目标中的 C++ 文件以确定它们是否需要运行 "
"``uic``，并创建规则来执行 ``uic ``在适当的时候。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:116
msgid ""
"If a preprocessor ``#include`` directive is found which matches "
"``<path>ui_<basename>.h``, and a ``<basename>.ui`` file exists, then "
"``uic`` will be executed to generate the appropriate file. The "
"``<basename>.ui`` file is searched for in the following places"
msgstr ""
"如果找到匹配``<path>ui_<basename>.h`` 的预处理器``#include`` 指令，并且存在``<basename>.ui``"
" 文件，那么``uic`` 将是执行以生成适当的文件。在以下位置搜索 ``<basename>.ui`` 文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:121
msgid "``<source_dir>/<basename>.ui``"
msgstr "``<source_dir>/<basename>.ui``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:122
msgid "``<source_dir>/<path><basename>.ui``"
msgstr "``<source_dir>/<path><basename>.ui``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:123
msgid "``<AUTOUIC_SEARCH_PATHS>/<basename>.ui``"
msgstr "``<AUTOUIC_SEARCH_PATHS>/<basename>.ui``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:124
msgid "``<AUTOUIC_SEARCH_PATHS>/<path><basename>.ui``"
msgstr "``<AUTOUIC_SEARCH_PATHS>/<路径><basename>.ui``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:126
msgid ""
"where ``<source_dir>`` is the directory of the C++ file and "
":prop_tgt:`AUTOUIC_SEARCH_PATHS` is a list of additional search paths."
msgstr ""
"其中 ``<source_dir>`` 是 C++ 文件的目录，而 :prop_tgt:`AUTOUIC_SEARCH_PATHS` "
"是附加搜索路径的列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:129
msgid ""
"The generated generated ``ui_*.h`` files are placed in the "
"``<AUTOGEN_BUILD_DIR>/include`` directory which is automatically added to "
"the target's :prop_tgt:`INCLUDE_DIRECTORIES`."
msgstr ""
"生成的 ``ui_*.h`` 文件放置在``<AUTOGEN_BUILD_DIR>/include`` 目录中，该目录会自动添加到目标的 "
":prop_tgt:`INCLUDE_DIRECTORIES`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:140
msgid ""
"The :prop_tgt:`AUTOUIC` target property may be pre-set for all following "
"targets by setting the :variable:`CMAKE_AUTOUIC` variable.  The "
":prop_tgt:`AUTOUIC_OPTIONS` target property may be populated to set "
"options to pass to ``uic``.  The :variable:`CMAKE_AUTOUIC_OPTIONS` "
"variable may be populated to pre-set the options for all following "
"targets.  The :prop_sf:`AUTOUIC_OPTIONS` source file property may be set "
"on the ``<basename>.ui`` file to set particular options for the file.  "
"This overrides options from the :prop_tgt:`AUTOUIC_OPTIONS` target "
"property."
msgstr ""
":prop_tgt:`AUTOUIC` 目标属性可以通过设置 :variable:`CMAKE_AUTOUIC` "
"变量为所有以下目标预先设置。可以填充 :prop_tgt:`AUTOUIC_OPTIONS` 目标属性以设置要传递给 ``uic`` "
"的选项。可以填充 :variable:`CMAKE_AUTOUIC_OPTIONS` 变量以预先设置所有以下目标的选项。 "
":prop_sf:`AUTOUIC_OPTIONS` 源文件属性可以在 ``<basename>.ui`` "
"文件上设置，以设置文件的特定选项。这会覆盖 :prop_tgt:`AUTOUIC_OPTIONS` 目标属性中的选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:149
msgid ""
"A target may populate the :prop_tgt:`INTERFACE_AUTOUIC_OPTIONS` target "
"property with options that should be used when invoking ``uic``.  This "
"must be consistent with the :prop_tgt:`AUTOUIC_OPTIONS` target property "
"content of the depender target.  The "
":variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable may be used to track "
"the origin target of such :prop_tgt:`INTERFACE_AUTOUIC_OPTIONS`.  This "
"means that a library which provides an alternative translation system for "
"Qt may specify options which should be used when running ``uic``:"
msgstr ""
"目标可以使用调用 uic 时应使用的选项填充 INTERFACE_AUTOUIC_OPTIONS "
"目标属性。这必须与依赖目标的 :prop_tgt:`AUTOUIC_OPTIONS` 目标属性内容一致。 "
":variable:`CMAKE_DEBUG_TARGET_PROPERTIES` 变量可用于跟踪此类 "
":prop_tgt:`INTERFACE_AUTOUIC_OPTIONS` 的原始目标。这意味着为 Qt 提供替代翻译系统的库可以指定运行 "
"``uic`` 时应使用的选项："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:174
msgid ""
"A consuming project linking to the target exported from upstream "
"automatically uses appropriate options when ``uic`` is run by "
":prop_tgt:`AUTOUIC`, as a result of linking with the :prop_tgt:`IMPORTED` "
"target:"
msgstr ""
"当 uic 由 AUTOUIC 运行时，链接到从上游导出的目标的消费项目会自动使用适当的选项，作为与 IMPORTED 目标链接的结果："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:188
msgid ""
"Source files can be excluded from :prop_tgt:`AUTOUIC` processing by "
"enabling :prop_sf:`SKIP_AUTOUIC` or the broader :prop_sf:`SKIP_AUTOGEN`."
msgstr ""
"通过启用 :prop_sf:`SKIP_AUTOUIC` 或更广泛的 :prop_sf:`SKIP_AUTOGEN`，源文件可以从 "
":prop_tgt:`AUTOUIC` 处理中排除。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:194
msgid "AUTORCC"
msgstr "AUTORCC 认证"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:196
msgid ""
"The :prop_tgt:`AUTORCC` target property controls whether "
":manual:`cmake(1)` creates rules to execute ``rcc`` at the appropriate "
"time on source files which have the suffix ``.qrc``."
msgstr ""
":prop_tgt:`AUTORCC` 目标属性控制 :manual:`cmake(1)` 是否创建规则以在适当的时间对后缀为 ``.qrc`` "
"的源文件执行 ``rcc``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:204
msgid ""
"The :prop_tgt:`AUTORCC` target property may be pre-set for all following "
"targets by setting the :variable:`CMAKE_AUTORCC` variable.  The "
":prop_tgt:`AUTORCC_OPTIONS` target property may be populated to set "
"options to pass to ``rcc``.  The :variable:`CMAKE_AUTORCC_OPTIONS` "
"variable may be populated to pre-set the options for all following "
"targets.  The :prop_sf:`AUTORCC_OPTIONS` source file property may be set "
"on the ``<name>.qrc`` file to set particular options for the file.  This "
"overrides options from the :prop_tgt:`AUTORCC_OPTIONS` target property."
msgstr ""
":prop_tgt:`AUTORCC` 目标属性可以通过设置 :variable:`CMAKE_AUTORCC` "
"变量为所有以下目标预先设置。可以填充 :prop_tgt:`AUTORCC_OPTIONS` 目标属性以设置要传递给 ``rcc`` "
"的选项。可以填充 :variable:`CMAKE_AUTORCC_OPTIONS` 变量以预先设置所有以下目标的选项。 "
":prop_sf:`AUTORCC_OPTIONS` 源文件属性可以在 ``<name>.qrc`` 文件上设置，以设置文件的特定选项。这会覆盖来自"
" :prop_tgt:`AUTORCC_OPTIONS` 目标属性的选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:213
msgid ""
"Source files can be excluded from :prop_tgt:`AUTORCC` processing by "
"enabling :prop_sf:`SKIP_AUTORCC` or the broader :prop_sf:`SKIP_AUTOGEN`."
msgstr ""
"通过启用 :prop_sf:`SKIP_AUTORCC` 或更广泛的 :prop_sf:`SKIP_AUTOGEN` 可以将源文件排除在 "
"AUTORCC 处理之外。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:217
msgid "The ``<ORIGIN>_autogen`` target"
msgstr "``<ORIGIN>_autogen`` 目标"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:219
msgid ""
"The ``moc`` and ``uic`` tools are executed as part of a synthesized "
"``<ORIGIN>_autogen`` :command:`custom target <add_custom_target>` "
"generated by CMake.  By default that ``<ORIGIN>_autogen`` target inherits "
"the dependencies of the ``<ORIGIN>`` target (see "
":prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`). Target dependencies may be added to "
"the ``<ORIGIN>_autogen`` target by adding them to the "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS` target property."
msgstr ""
"``moc`` 和 ``uic`` 工具作为合成的 ``<ORIGIN>_autogen`` 的一部分执行 :command:`自定义目标 "
"<add_custom_target>` 由 CMake 生成。默认情况下，``<ORIGIN>_autogen`` "
"目标继承了``<ORIGIN>`` 目标的依赖项（参见:prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`）。通过将目标依赖项添加到"
" :prop_tgt:`AUTOGEN_TARGET_DEPENDS` 目标属性，可以将目标依赖项添加到 ``<ORIGIN>_autogen`` "
"目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:229
msgid ""
"When using the :manual:`Visual Studio generators <cmake-generators(7)>`, "
"CMake generates a ``PRE_BUILD`` :command:`custom command "
"<add_custom_command>` instead of the ``<ORIGIN>_autogen`` :command:`custom"
" target <add_custom_target>` (for :prop_tgt:`AUTOMOC` and "
":prop_tgt:`AUTOUIC`). This isn't always possible though and an "
"``<ORIGIN>_autogen`` :command:`custom target <add_custom_target>` is used,"
" when either"
msgstr ""
"使用 :manual:`Visual Studio 生成器 <cmake-generators(7)>` 时，CMake 生成一个 "
"``PRE_BUILD`` :command:`自定义命令 <add_custom_command>` 而不是 "
"``<ORIGIN>_autogen`` :command:`自定义目标 <add_custom_target>`（用于 "
":prop_tgt:`AUTOMOC` 和 "
":prop_tgt:`AUTOUIC`）。这并不总是可行的，并且使用``<ORIGIN>_autogen``:command:`custom "
"target"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:237
msgid ""
"the ``<ORIGIN>`` target depends on :prop_sf:`GENERATED` files which aren't"
" excluded from :prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` by "
":prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC`, :prop_sf:`SKIP_AUTOGEN` "
"or :policy:`CMP0071`"
msgstr ""
"``<ORIGIN>`` 目标取决于 :prop_sf:`GENERATED` 文件，这些文件没有被 :prop_sf:`SKIP_AUTOMOC`"
" 排除在 :prop_tgt:`AUTOMOC` 和 :prop_tgt:`AUTOUIC` 之外`, "
":prop_sf:`SKIP_AUTOGEN` 或 :policy:`CMP0071`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:241
msgid ":prop_tgt:`AUTOGEN_TARGET_DEPENDS` lists a source file"
msgstr ":prop_tgt:`AUTOGEN_TARGET_DEPENDS` 列出源文件"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:242
msgid ":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` is enabled"
msgstr ":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` 已启用"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:245
msgid "qtmain.lib on Windows"
msgstr "Windows 上的 qtmain.lib"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:247
msgid ""
"The Qt 4 and 5 :prop_tgt:`IMPORTED` targets for the QtGui libraries "
"specify that the qtmain.lib static library shipped with Qt will be linked "
"by all dependent executables which have the :prop_tgt:`WIN32_EXECUTABLE` "
"enabled."
msgstr ""
"QtGui 库的 Qt 4 和 5:prop_tgt:`IMPORTED` 目标指定 Qt 附带的 qtmain.lib "
"静态库将由所有启用了 :prop_tgt:`WIN32_EXECUTABLE` 的依赖可执行文件链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-qt.7.rst:251
msgid ""
"To disable this behavior, enable the ``Qt5_NO_LINK_QTMAIN`` target "
"property for Qt 5 based targets or ``QT4_NO_LINK_QTMAIN`` target property "
"for Qt 4 based targets."
msgstr ""
"要禁用此行为，请为基于 Qt 5 的目标启用“Qt5_NO_LINK_QTMAIN”目标属性，或为基于 Qt 4 "
"的目标启用“QT4_NO_LINK_QTMAIN”目标属性。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-server.7.rst:4
msgid "cmake-server(7)"
msgstr "cmake 服务器(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-server.7.rst:6
msgid ""
"The :manual:`cmake(1)` server mode has been removed since CMake 3.20. "
"Clients should use the :manual:`cmake-file-api(7)` instead."
msgstr ""
":manual:`cmake(1)` 服务器模式从 CMake 3.20 开始被移除。客户应该改用 :manual:`cmake-file-"
"api(7)`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:4
msgid "cmake-toolchains(7)"
msgstr "cmake 工具链(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:13
msgid ""
"CMake uses a toolchain of utilities to compile, link libraries and create "
"archives, and other tasks to drive the build. The toolchain utilities "
"available are determined by the languages enabled. In normal builds, CMake"
" automatically determines the toolchain for host builds based on system "
"introspection and defaults. In cross-compiling scenarios, a toolchain file"
" may be specified with information about compiler and utility paths."
msgstr ""
"CMake 使用实用工具链来编译、链接库和创建存档，以及其他任务来驱动构建。可用的工具链实用程序由启用的语言决定。在正常构建中，CMake "
"会根据系统自检和默认值自动确定主机构建的工具链。在交叉编译场景中，可以使用有关编译器和实用程序路径的信息来指定工具链文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:20
msgid "One may use :manual:`cmake-presets(7)` to specify toolchain files."
msgstr "可以使用 :manual:`cmake-presets(7)` 来指定工具链文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:24
msgid "Languages"
msgstr "语言"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:26
msgid ""
"Languages are enabled by the :command:`project` command.  Language-"
"specific built-in variables, such as :variable:`CMAKE_CXX_COMPILER "
"<CMAKE_<LANG>_COMPILER>`, :variable:`CMAKE_CXX_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` etc are set by invoking the :command:`project`"
" command.  If no project command is in the top-level CMakeLists file, one "
"will be implicitly generated. By default the enabled languages are ``C`` "
"and ``CXX``:"
msgstr ""
"语言由 :command:`project` 命令启用。语言特定的内置变量，例如 :variable:`CMAKE_CXX_COMPILER "
"<CMAKE_<LANG>_COMPILER>`， :variable:`CMAKE_CXX_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` 等是通过调用:command:`project` 命令设置的.如果顶级 CMakeLists"
" 文件中没有项目命令，则会隐式生成一个。默认情况下，启用的语言是“C”和“CXX”："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:38
msgid ""
"A special value of ``NONE`` can also be used with the :command:`project` "
"command to enable no languages:"
msgstr "``NONE`` 的特殊值也可以与 :command:`project` 命令一起使用以启用无语言："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:45
msgid ""
"The :command:`enable_language` command can be used to enable languages "
"after the :command:`project` command:"
msgstr ":command:`enable_language` 命令可用于在 :command:`project` 命令之后启用语言："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:52
msgid ""
"When a language is enabled, CMake finds a compiler for that language, and "
"determines some information, such as the vendor and version of the "
"compiler, the target architecture and bitwidth, the location of "
"corresponding utilities etc."
msgstr ""
"当启用一种语言时，CMake 会找到该语言的编译器，并确定一些信息，例如编译器的供应商和版本、目标体系结构和位宽、相应实用程序的位置等。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:57
msgid ""
"The :prop_gbl:`ENABLED_LANGUAGES` global property contains the languages "
"which are currently enabled."
msgstr ":prop_gbl:`ENABLED_LANGUAGES` 全局属性包含当前启用的语言。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:61
msgid "Variables and Properties"
msgstr "变量和属性"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:63
msgid ""
"Several variables relate to the language components of a toolchain which "
"are enabled:"
msgstr "几个变量与启用的工具链的语言组件相关："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:66
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:160
msgid ":variable:`CMAKE_<LANG>_COMPILER`"
msgstr ":variable:`CMAKE_<LANG>_COMPILER`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:67
msgid "The full path to the compiler used for ``<LANG>``"
msgstr "用于 ``<LANG>`` 的编译器的完整路径"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:68
msgid ":variable:`CMAKE_<LANG>_COMPILER_ID`"
msgstr ":variable:`CMAKE_<LANG>_COMPILER_ID`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:69
msgid "The compiler identifier used by CMake"
msgstr "CMake 使用的编译器标识符"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:70
msgid ":variable:`CMAKE_<LANG>_COMPILER_VERSION`"
msgstr ":variable:`CMAKE_<LANG>_COMPILER_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:71
msgid "The version of the compiler."
msgstr "编译器的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:75
msgid ":variable:`CMAKE_<LANG>_FLAGS`"
msgstr ":variable:`CMAKE_<LANG>_FLAGS`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:73
msgid ""
"The variables and the configuration-specific equivalents contain flags "
"that will be added to the compile command when compiling a file of a "
"particular language."
msgstr "变量和特定于配置的等效项包含在编译特定语言的文件时将添加到编译命令的标志。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:77
msgid ""
"CMake needs a way to determine which compiler to use to invoke the linker."
" This is determined by the :prop_sf:`LANGUAGE` property of source files of"
" the :manual:`target <cmake-buildsystem(7)>`, and in the case of static "
"libraries, the ``LANGUAGE`` of the dependent libraries. The choice CMake "
"makes may be overridden with the :prop_tgt:`LINKER_LANGUAGE` target "
"property."
msgstr ""
"CMake 需要一种方法来确定使用哪个编译器来调用链接器。这由 :manual:`target <cmake-buildsystem(7)>` "
"的源文件的 :prop_sf:`LANGUAGE` 属性决定，在静态库的情况下，依赖库的 ``LANGUAGE`` . CMake "
"所做的选择可能会被 :prop_tgt:`LINKER_LANGUAGE` 目标属性覆盖。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:84
msgid "Toolchain Features"
msgstr "工具链功能"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:86
msgid ""
"CMake provides the :command:`try_compile` command and wrapper macros such "
"as :module:`CheckCXXSourceCompiles`, :module:`CheckCXXSymbolExists` and "
":module:`CheckIncludeFile` to test capability and availability of various "
"toolchain features. These APIs test the toolchain in some way and cache "
"the result so that the test does not have to be performed again the next "
"time CMake runs."
msgstr ""
"CMake 提供 :command:`try_compile` 命令和包装器宏，如 "
":module:`CheckCXXSourceCompiles`、 :module:`CheckCXXSymbolExists` 和 "
":module:`CheckIncludeFile` 来测试各种工具链特性的能力和可用性。这些 API 以某种方式测试工具链并缓存结果，以便下次运行"
" CMake 时不必再次执行测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:93
msgid ""
"Some toolchain features have built-in handling in CMake, and do not "
"require compile-tests. For example, :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"allows specifying that a target should be built as position-independent "
"code, if the compiler supports that feature. The "
":prop_tgt:`<LANG>_VISIBILITY_PRESET` and "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties add flags for "
"hidden visibility, if supported by the compiler."
msgstr ""
"一些工具链功能在 CMake 中具有内置处理，不需要编译测试。例如， :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"允许指定目标应该构建为位置无关代码，如果编译器支持该功能的话。 :prop_tgt:`<LANG>_VISIBILITY_PRESET` 和 "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` 目标属性为隐藏可见性添加标志（如果编译器支持）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:103
msgid "Cross Compiling"
msgstr "交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:105
msgid ""
"If :manual:`cmake(1)` is invoked with the command line parameter "
":option:`--toolchain path/to/file <cmake --toolchain>` or "
":option:`-DCMAKE_TOOLCHAIN_FILE=path/to/file <cmake -D>`, the file will be"
" loaded early to set values for the compilers. The "
":variable:`CMAKE_CROSSCOMPILING` variable is set to true when CMake is "
"cross-compiling."
msgstr ""
"如果使用命令行参数调用 :manual:`cmake(1)` :option:`--toolchain path/to/file <cmake "
"--toolchain>` 或 :option:`-DCMAKE_TOOLCHAIN_FILE=path/to/file < cmake "
"-D>`，该文件将提前加载以设置编译器的值。 :variable:`CMAKE_CROSSCOMPILING` 变量在 CMake 交叉编译时设置为"
" true。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:112
msgid ""
"Note that using the :variable:`CMAKE_SOURCE_DIR` or "
":variable:`CMAKE_BINARY_DIR` variables inside a toolchain file is "
"typically undesirable.  The toolchain file is used in contexts where these"
" variables have different values when used in different places (e.g. as "
"part of a call to :command:`try_compile`).  In most cases, where there is "
"a need to evaluate paths inside a toolchain file, the more appropriate "
"variable to use would be :variable:`CMAKE_CURRENT_LIST_DIR`, since it "
"always has an unambiguous, predictable value."
msgstr ""
"请注意，在工具链文件中使用 :variable:`CMAKE_SOURCE_DIR` 或 :variable:`CMAKE_BINARY_DIR` "
"变量通常是不可取的。工具链文件用于这些变量在不同位置使用时具有不同值的上下文（例如，作为调用 :command:`try_compile` "
"的一部分）。在大多数情况下，需要评估工具链文件内的路径时，更合适使用的变量是 "
":variable:`CMAKE_CURRENT_LIST_DIR`，因为它始终具有明确的、可预测的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:121
msgid "Cross Compiling for Linux"
msgstr "Linux 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:123
msgid "A typical cross-compiling toolchain for Linux has content such as:"
msgstr "一个典型的 Linux 交叉编译工具链有如下内容："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:143
msgid "Where:"
msgstr "在哪里："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:145
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:409
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:493
msgid ":variable:`CMAKE_SYSTEM_NAME`"
msgstr ":variable:`CMAKE_SYSTEM_NAME`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:146
msgid "is the CMake-identifier of the target platform to build for."
msgstr "是要构建的目标平台的 CMake 标识符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:147
msgid ":variable:`CMAKE_SYSTEM_PROCESSOR`"
msgstr ":variable:`CMAKE_SYSTEM_PROCESSOR`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:148
msgid "is the CMake-identifier of the target architecture."
msgstr "是目标架构的 CMake 标识符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:149
msgid ":variable:`CMAKE_SYSROOT`"
msgstr ":variable:`CMAKE_SYSROOT`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:150
msgid "is optional, and may be specified if a sysroot is available."
msgstr "是可选的，如果 sysroot 可用，则可以指定。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:153
msgid ":variable:`CMAKE_STAGING_PREFIX`"
msgstr ":variable:`CMAKE_STAGING_PREFIX`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:152
msgid ""
"is also optional. It may be used to specify a path on the host to install "
"to. The :variable:`CMAKE_INSTALL_PREFIX` is always the runtime "
"installation location, even when cross-compiling."
msgstr ""
"也是可选的。它可用于指定要安装到的主机上的路径。 :variable:`CMAKE_INSTALL_PREFIX` "
"始终是运行时安装位置，即使在交叉编译时也是如此。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:156
msgid ""
"variable may be set to full paths, or to names of compilers to search for "
"in standard locations.  For toolchains that do not support linking "
"binaries without custom flags or scripts one may set the "
":variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable to ``STATIC_LIBRARY`` "
"to tell CMake not to try to link executables during its checks."
msgstr ""
"变量可以设置为完整路径，或设置为在标准位置搜索的编译器名称。对于不支持链接没有自定义标志或脚本的二进制文件的工具链，可以将 "
":variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` 变量设置为 ``STATIC_LIBRARY`` 以告诉 "
"CMake 在检查期间不要尝试链接可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:162
msgid ""
"CMake ``find_*`` commands will look in the sysroot, and the "
":variable:`CMAKE_FIND_ROOT_PATH` entries by default in all cases, as well "
"as looking in the host system root prefix. Although this can be controlled"
" on a case-by-case basis, when cross-compiling, it can be useful to "
"exclude looking in either the host or the target for particular artifacts."
" Generally, includes, libraries and packages should be found in the target"
" system prefixes, whereas executables which must be run as part of the "
"build should be found only on the host and not on the target. This is the "
"purpose of the ``CMAKE_FIND_ROOT_PATH_MODE_*`` variables."
msgstr ""
"在所有情况下，CMake ``find_*`` 命令将在 sysroot 和 :variable:`CMAKE_FIND_ROOT_PATH` "
"条目中查找默认情况下，以及在主机系统根前缀中查找。虽然这可以根据具体情况进行控制，但在交叉编译时，排除在主机或目标中查找特定工件可能很有用。通常，包含、库和包应该在目标系统前缀中找到，而必须作为构建的一部分运行的可执行文件应该只在主机上而不是在目标上找到。这是"
" ``CMAKE_FIND_ROOT_PATH_MODE_*`` 变量的目的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:174
msgid "Cross Compiling for the Cray Linux Environment"
msgstr "Cray Linux 环境的交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:176
msgid ""
"Cross compiling for compute nodes in the Cray Linux Environment can be "
"done without needing a separate toolchain file.  Specifying "
"``-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment`` on the CMake command line "
"will ensure that the appropriate build settings and search paths are "
"configured. The platform will pull its configuration from the current "
"environment variables and will configure a project to use the compiler "
"wrappers from the Cray Programming Environment's ``PrgEnv-*`` modules if "
"present and loaded."
msgstr ""
"无需单独的工具链文件即可在 Cray Linux 环境中对计算节点进行交叉编译。在 CMake "
"命令行上指定“-DCMAKE_SYSTEM_NAME=CrayLinuxEnvironment”将确保配置适当的构建设置和搜索路径。该平台将从当前环境变量中提取其配置，并将配置项目以使用来自"
" Cray 编程环境的“PrgEnv-*”模块（如果存在并已加载）的编译器包装器。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:184
msgid ""
"The default configuration of the Cray Programming Environment is to only "
"support static libraries.  This can be overridden and shared libraries "
"enabled by setting the ``CRAYPE_LINK_TYPE`` environment variable to "
"``dynamic``."
msgstr "Cray 编程环境的默认配置是只支持静态库。这可以通过将“CRAYPE_LINK_TYPE”环境变量设置为“动态”来覆盖和启用共享库。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:189
msgid ""
"Running CMake without specifying :variable:`CMAKE_SYSTEM_NAME` will run "
"the configure step in host mode assuming a standard Linux environment. If "
"not overridden, the ``PrgEnv-*`` compiler wrappers will end up getting "
"used, which if targeting the either the login node or compute node, is "
"likely not the desired behavior.  The exception to this would be if you "
"are building directly on a NID instead of cross-compiling from a login "
"node. If trying to build software for a login node, you will need to "
"either first unload the currently loaded ``PrgEnv-*`` module or explicitly"
" tell CMake to use the system compilers in ``/usr/bin`` instead of the "
"Cray wrappers.  If instead targeting a compute node is desired, just "
"specify the :variable:`CMAKE_SYSTEM_NAME` as mentioned above."
msgstr ""
"在不指定 :variable:`CMAKE_SYSTEM_NAME` 的情况下运行 CMake 将在假设标准 Linux "
"环境的主机模式下运行配置步骤。如果不被覆盖，``PrgEnv-*`` "
"编译器包装器将最终被使用，如果以登录节点或计算节点为目标，这可能不是所需的行为。如果您直接在 NID "
"上构建而不是从登录节点交叉编译，则例外。如果尝试为登录节点构建软件，您需要先卸载当前加载的 ``PrgEnv-*`` 模块或明确告诉 CMake "
"使用 ``/usr/bin`` 中的系统编译器而不是 Cray包装纸。如果需要以计算节点为目标，只需指定 "
":variable:`CMAKE_SYSTEM_NAME` 如上所述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:202
msgid "Cross Compiling using Clang"
msgstr "使用 Clang 进行交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:204
msgid ""
"Some compilers such as Clang are inherently cross compilers. The "
":variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a value to "
"those supported compilers when compiling:"
msgstr ""
"某些编译器（例如 Clang）本质上是交叉编译器。 :variable:`CMAKE_<LANG>_COMPILER_TARGET` "
"可以设置为在编译时将值传递给那些支持的编译器："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:220
msgid ""
"Similarly, some compilers do not ship their own supplementary utilities "
"such as linkers, but provide a way to specify the location of the external"
" toolchain which will be used by the compiler driver. The "
":variable:`CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN` variable can be set "
"in a toolchain file to pass the path to the compiler driver."
msgstr ""
"类似地，一些编译器不提供它们自己的补充实用程序（如链接器），但提供一种方法来指定编译器驱动程序将使用的外部工具链的位置。 "
":variable:`CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN` "
"变量可以在工具链文件中设置，以将路径传递给编译器驱动程序。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:227
msgid "Cross Compiling for QNX"
msgstr "QNX 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:229
msgid ""
"As the Clang compiler the QNX QCC compile is inherently a cross compiler. "
"And the :variable:`CMAKE_<LANG>_COMPILER_TARGET` can be set to pass a "
"value to those supported compilers when compiling:"
msgstr ""
"作为 Clang 编译器，QNX QCC 编译本质上是一个交叉编译器。并且 "
":variable:`CMAKE_<LANG>_COMPILER_TARGET` 可以设置为在编译时将值传递给那些支持的编译器："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:248
msgid "Cross Compiling for Windows CE"
msgstr "Windows CE 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:250
msgid ""
"Cross compiling for Windows CE requires the corresponding SDK being "
"installed on your system.  These SDKs are usually installed under "
"``C:/Program Files (x86)/Windows CE Tools/SDKs``."
msgstr ""
"Windows CE 的交叉编译需要在您的系统上安装相应的 SDK。这些 SDK 通常安装在“C:/Program Files "
"(x86)/Windows CE Tools/SDKs”下。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:254
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows CE may"
" look like this:"
msgstr "为 Windows CE 配置 Visual Studio 生成器的工具链文件可能如下所示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:267
msgid ""
"The :variable:`CMAKE_GENERATOR_PLATFORM` tells the generator which SDK to "
"use. Further :variable:`CMAKE_SYSTEM_VERSION` tells the generator what "
"version of Windows CE to use.  Currently version 8.0 (Windows Embedded "
"Compact 2013) is supported out of the box.  Other versions may require one"
" to set :variable:`CMAKE_GENERATOR_TOOLSET` to the correct value."
msgstr ""
":variable:`CMAKE_GENERATOR_PLATFORM` 告诉生成器要使用哪个 "
"SDK。此外 :variable:`CMAKE_SYSTEM_VERSION` 告诉生成器要使用的 Windows CE 版本。当前版本 8.0 (Windows"
" Embedded Compact 2013) 开箱即用。其他版本可能需要将 :variable:`CMAKE_GENERATOR_TOOLSET`"
" 设置为正确的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:274
msgid "Cross Compiling for Windows 10 Universal Applications"
msgstr "Windows 10 通用应用程序的交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:276
msgid ""
"A toolchain file to configure a Visual Studio generator for a Windows 10 "
"Universal Application may look like this:"
msgstr "为 Windows 10 通用应用程序配置 Visual Studio 生成器的工具链文件可能如下所示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:284
msgid ""
"A Windows 10 Universal Application targets both Windows Store and Windows "
"Phone.  Specify the :variable:`CMAKE_SYSTEM_VERSION` variable to be "
"``10.0`` to build with the latest available Windows 10 SDK. Specify a more"
" specific version (e.g. ``10.0.10240.0`` for RTM) to build with the "
"corresponding SDK."
msgstr ""
"Windows 10 通用应用程序同时针对 Windows 应用商店和 Windows Phone。将 "
":variable:`CMAKE_SYSTEM_VERSION` 变量指定为 ``10.0`` 以使用最新可用的 Windows 10 SDK "
"进行构建。指定一个更具体的版本（例如 ``10.0.10240.0`` 用于 RTM）以使用相应的 SDK 构建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:291
msgid "Cross Compiling for Windows Phone"
msgstr "Windows Phone 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:293
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Phone "
"may look like this:"
msgstr "为 Windows Phone 配置 Visual Studio 生成器的工具链文件可能如下所示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:302
msgid "Cross Compiling for Windows Store"
msgstr "Windows 应用商店的交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:304
msgid ""
"A toolchain file to configure a Visual Studio generator for Windows Store "
"may look like this:"
msgstr "用于为 Windows 应用商店配置 Visual Studio 生成器的工具链文件可能如下所示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:315
msgid "Cross Compiling for ADSP SHARC/Blackfin"
msgstr "ADSP SHARC/Blackfin 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:317
msgid ""
"Cross-compiling for ADSP SHARC or Blackfin can be configured by setting "
"the :variable:`CMAKE_SYSTEM_NAME` variable to ``ADSP`` and the "
":variable:`CMAKE_SYSTEM_PROCESSOR` variable to the \"part number\", "
"excluding the ``ADSP-`` prefix, for example, ``21594``, ``SC589``, etc. "
"This value is case insensitive."
msgstr ""
"ADSP SHARC 或 Blackfin 的交叉编译可以通过将 :variable:`CMAKE_SYSTEM_NAME` 变量设置为 "
"``ADSP`` 并将 :variable:`CMAKE_SYSTEM_PROCESSOR` 变量设置为“部件号”来配置，不包括 ``ADSP-` "
"` 前缀，例如，``21594``、``SC589`` 等。此值不区分大小写。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:324
msgid ""
"CMake will automatically search for CCES or VDSP++ installs in their "
"default install locations and select the most recent version found. CCES "
"will be selected over VDSP++ if both are installed. Custom install paths "
"can be set via the :variable:`CMAKE_ADSP_ROOT` variable or the "
":envvar:`ADSP_ROOT` environment variable."
msgstr ""
"CMake 将自动在默认安装位置搜索 CCES 或 VDSP++ 安装，并选择找到的最新版本。如果两者都安装，将选择 CCES 而不是 "
"VDSP++。可以通过 CMAKE_ADSP_ROOT 变量或 ADSP_ROOT 环境变量设置自定义安装路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:331
msgid ""
"The compiler (``cc21k`` vs. ``ccblkfn``) is selected automatically based "
"on the :variable:`CMAKE_SYSTEM_PROCESSOR` value provided."
msgstr "编译器（``cc21k`` 与 ``ccblkfn``）根据提供的 CMAKE_SYSTEM_PROCESSOR 值自动选择。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:337
msgid "Cross Compiling for Android"
msgstr "安卓交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:339
msgid ""
"A toolchain file may configure cross-compiling for Android by setting the "
":variable:`CMAKE_SYSTEM_NAME` variable to ``Android``.  Further "
"configuration is specific to the Android development environment to be "
"used."
msgstr ""
"工具链文件可以通过将 :variable:`CMAKE_SYSTEM_NAME` 变量设置为 ``Android`` 来为 Android "
"配置交叉编译。进一步配置特定于要使用的 Android 开发环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:343
msgid ""
"For :ref:`Visual Studio Generators`, CMake expects :ref:`NVIDIA Nsight "
"Tegra Visual Studio Edition <Cross Compiling for Android with NVIDIA "
"Nsight Tegra Visual Studio Edition>` or the :ref:`Visual Studio tools for "
"Android <Cross Compiling for Android with the NDK>` to be installed. See "
"those sections for further configuration details."
msgstr ""
"对于 :ref:`Visual Studio Generators`，CMake 期望:ref:`NVIDIA Nsight Tegra "
"Visual Studio Edition <Cross Compiling for Android with NVIDIA Nsight "
"Tegra Visual Studio Edition>` 或 :ref:`Android 的 Visual Studio 工具 <Cross "
"Compiling对于要安装 NDK>` 的 Android。有关更多配置详细信息，请参阅这些部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:349
msgid ""
"For :ref:`Makefile Generators` and the :generator:`Ninja` generator, CMake"
" expects one of these environments:"
msgstr "对于 Makefile Generators 和 Ninja 生成器，CMake 需要以下环境之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:352
msgid ":ref:`NDK <Cross Compiling for Android with the NDK>`"
msgstr ":ref:`NDK <使用 NDK 为 Android 交叉编译>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:353
msgid ""
":ref:`Standalone Toolchain <Cross Compiling for Android with a Standalone "
"Toolchain>`"
msgstr ":ref:`独立工具链 <使用独立工具链为 Android 交叉编译>`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:355
msgid "CMake uses the following steps to select one of the environments:"
msgstr "CMake 使用以下步骤来选择其中一个环境："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:357
msgid ""
"If the :variable:`CMAKE_ANDROID_NDK` variable is set, the NDK at the "
"specified location will be used."
msgstr "如果设置了 :variable:`CMAKE_ANDROID_NDK` 变量，将使用指定位置的 NDK。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:360
msgid ""
"Else, if the :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` variable is "
"set, the Standalone Toolchain at the specified location will be used."
msgstr ""
"否则，如果设置了 :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` 变量，将使用指定位置的独立工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:363
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of "
"the form ``<ndk>/platforms/android-<api>/arch-<arch>``, the ``<ndk>`` part"
" will be used as the value of :variable:`CMAKE_ANDROID_NDK` and the NDK "
"will be used."
msgstr ""
"否则，如果 :variable:`CMAKE_SYSROOT` "
"变量设置为``<ndk>/platforms/android-<api>/arch-<arch>`` 形式的目录，``<ndk>`` 部分将用作 "
":variable:`CMAKE_ANDROID_NDK` 的值，并且将使用 NDK。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:368
msgid ""
"Else, if the :variable:`CMAKE_SYSROOT` variable is set to a directory of "
"the form ``<standalone-toolchain>/sysroot``, the ``<standalone-"
"toolchain>`` part will be used as the value of "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` and the Standalone "
"Toolchain will be used."
msgstr ""
"否则，如果 :variable:`CMAKE_SYSROOT` 变量设置为 ``<standalone-toolchain>/sysroot`` "
"形式的目录，则 ``<standalone-toolchain>`` "
"部分将用作以下值 :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` 将使用独立工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:373
msgid ""
"Else, if a cmake variable ``ANDROID_NDK`` is set it will be used as the "
"value of :variable:`CMAKE_ANDROID_NDK`, and the NDK will be used."
msgstr ""
"否则，如果设置了 cmake 变量 ``ANDROID_NDK``，它将用作 :variable:`CMAKE_ANDROID_NDK` "
"的值，并且将使用 NDK。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:376
msgid ""
"Else, if a cmake variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set, it will"
" be used as the value of :variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, "
"and the Standalone Toolchain will be used."
msgstr ""
"否则，如果设置了 cmake 变量 ``ANDROID_STANDALONE_TOOLCHAIN``，它将用作 "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` 的值，并且将使用独立工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:380
msgid ""
"Else, if an environment variable ``ANDROID_NDK_ROOT`` or ``ANDROID_NDK`` "
"is set, it will be used as the value of :variable:`CMAKE_ANDROID_NDK`, and"
" the NDK will be used."
msgstr ""
"否则，如果设置了环境变量 ``ANDROID_NDK_ROOT`` 或 ``ANDROID_NDK``，它将用作 CMAKE_ANDROID_NDK"
" 的值，并使用 NDK。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:384
msgid ""
"Else, if an environment variable ``ANDROID_STANDALONE_TOOLCHAIN`` is set "
"then it will be used as the value of "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`, and the Standalone "
"Toolchain will be used."
msgstr ""
"否则，如果设置了环境变量 ``ANDROID_STANDALONE_TOOLCHAIN``，那么它将用作 "
":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN` 的值，并且将使用独立工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:389
msgid ""
"Else, an error diagnostic will be issued that neither the NDK or "
"Standalone Toolchain can be found."
msgstr "否则，将发出错误诊断，指出找不到 NDK 或独立工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:392
msgid ""
"If an Android NDK is selected, its version number is reported in the "
":variable:`CMAKE_ANDROID_NDK_VERSION` variable."
msgstr ""
"如果选择了 Android NDK，其版本号将在 :variable:`CMAKE_ANDROID_NDK_VERSION` 变量中报告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:399
msgid "Cross Compiling for Android with the NDK"
msgstr "使用 NDK 为 Android 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:401
msgid ""
"A toolchain file may configure :ref:`Makefile Generators`, :ref:`Ninja "
"Generators`, or :ref:`Visual Studio Generators` to target Android for "
"cross-compiling."
msgstr ""
"工具链文件可以配置 Makefile Generators、Ninja Generators 或 Visual Studio Generators "
"以针对 Android 进行交叉编译。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:405
msgid "Configure use of an Android NDK with the following variables:"
msgstr "使用以下变量配置 Android NDK 的使用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:408
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:492
msgid ""
"Set to ``Android``.  Must be specified to enable cross compiling for "
"Android."
msgstr "设置为“Android”。必须指定才能为 Android 启用交叉编译。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:419
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:514
msgid ":variable:`CMAKE_SYSTEM_VERSION`"
msgstr ":variable:`CMAKE_SYSTEM_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:412
msgid ""
"Set to the Android API level.  If not specified, the value is determined "
"as follows:"
msgstr "设置为 Android API 级别。如果未指定，则按如下方式确定该值："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:415
msgid ""
"If the :variable:`CMAKE_ANDROID_API` variable is set, its value is used as"
" the API level."
msgstr "如果设置了 :variable:`CMAKE_ANDROID_API` 变量，它的值将用作 API 级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:417
msgid ""
"If the :variable:`CMAKE_SYSROOT` variable is set, the API level is "
"detected from the NDK directory structure containing the sysroot."
msgstr ""
"如果设置了 :variable:`CMAKE_SYSROOT` 变量，则会从包含 sysroot 的 NDK 目录结构中检测 API 级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:419
msgid "Otherwise, the latest API level available in the NDK is used."
msgstr "否则，将使用 NDK 中可用的最新 API 级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:428
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:517
msgid ":variable:`CMAKE_ANDROID_ARCH_ABI`"
msgstr ":variable:`CMAKE_ANDROID_ARCH_ABI`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:422
msgid ""
"Set to the Android ABI (architecture).  If not specified, this variable "
"will default to the first supported ABI in the list of ``armeabi``, "
"``armeabi-v7a`` and ``arm64-v8a``. The :variable:`CMAKE_ANDROID_ARCH` "
"variable will be computed from ``CMAKE_ANDROID_ARCH_ABI`` automatically. "
"Also see the :variable:`CMAKE_ANDROID_ARM_MODE` and "
":variable:`CMAKE_ANDROID_ARM_NEON` variables."
msgstr ""
"设置为 Android ABI（架构）。如果未指定，此变量将默认为 ``armeabi``、``armeabi-v7a`` 和 "
"``arm64-v8a`` 列表中第一个支持的 ABI。 :variable:`CMAKE_ANDROID_ARCH` 变量将根据 "
"``CMAKE_ANDROID_ARCH_ABI`` 自动计算。另请参阅 :variable:`CMAKE_ANDROID_ARM_MODE` "
"和 :variable:`CMAKE_ANDROID_ARM_NEON` 变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:433
msgid ":variable:`CMAKE_ANDROID_NDK`"
msgstr ":variable:`CMAKE_ANDROID_NDK`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:431
msgid ""
"Set to the absolute path to the Android NDK root directory. If not "
"specified, a default for this variable will be chosen as specified "
":ref:`above <Cross Compiling for Android>`."
msgstr ""
"设置为 Android NDK 根目录的绝对路径。如果未指定，将选择此变量的默认值，如上文 <Android 交叉编译> 所指定:ref:`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:438
msgid ":variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS`"
msgstr ":variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:436
msgid ""
"Set to a true value to use the deprecated per-api-level headers instead of"
" the unified headers.  If not specified, the default will be false unless "
"using a NDK that does not provide unified headers."
msgstr ""
"设置为 true 值以使用已弃用的 per-api-level 标头而不是统一标头。如果未指定，则默认值为 false，除非使用不提供统一标头的 "
"NDK。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:444
msgid ":variable:`CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION`"
msgstr ":variable:`CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:441
msgid ""
"On NDK r19 or above, this variable must be unset or set to ``clang``. On "
"NDK r18 or below, set this to the version of the NDK toolchain to be "
"selected as the compiler.  If not specified, the default will be the "
"latest available GCC toolchain."
msgstr ""
"在 NDK r19 或更高版本上，此变量必须取消设置或设置为 ``clang``。在 NDK r18 或更低版本上，将此设置为要选择作为编译器的 "
"NDK 工具链的版本。如果未指定，默认将是最新可用的 GCC 工具链。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:448
msgid ":variable:`CMAKE_ANDROID_STL_TYPE`"
msgstr ":variable:`CMAKE_ANDROID_STL_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:447
msgid ""
"Set to specify which C++ standard library to use.  If not specified, a "
"default will be selected as described in the variable documentation."
msgstr "设置以指定要使用的 C++ 标准库。如果未指定，将选择默认值，如变量文档中所述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:450
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:511
msgid "The following variables will be computed and provided automatically:"
msgstr "将自动计算并提供以下变量："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:453
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:520
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`"
msgstr ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:453
msgid "The absolute path prefix to the binutils in the NDK toolchain."
msgstr "NDK 工具链中 binutils 的绝对路径前缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:457
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:523
msgid ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`"
msgstr ":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:456
msgid "The host platform suffix of the binutils in the NDK toolchain."
msgstr "NDK 工具链中 binutils 的主机平台后缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:459
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:525
msgid "For example, a toolchain file might contain:"
msgstr "例如，工具链文件可能包含："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:469
#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:532
msgid "Alternatively one may specify the values without a toolchain file:"
msgstr "或者，可以在没有工具链文件的情况下指定值："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:483
msgid "Cross Compiling for Android with a Standalone Toolchain"
msgstr "使用独立工具链为 Android 进行交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:485
msgid ""
"A toolchain file may configure :ref:`Makefile Generators` or the "
":generator:`Ninja` generator to target Android for cross-compiling using a"
" standalone toolchain."
msgstr ""
"工具链文件可以配置 Makefile Generators 或 Ninja 生成器以使用独立工具链以 Android 为目标进行交叉编译。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:489
msgid ""
"Configure use of an Android standalone toolchain with the following "
"variables:"
msgstr "使用以下变量配置 Android 独立工具链的使用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:500
msgid ":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`"
msgstr ":variable:`CMAKE_ANDROID_STANDALONE_TOOLCHAIN`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:496
msgid ""
"Set to the absolute path to the standalone toolchain root directory. A "
"``${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}/sysroot`` directory must exist. If"
" not specified, a default for this variable will be chosen as specified "
":ref:`above <Cross Compiling for Android>`."
msgstr ""
"设置为独立工具链根目录的绝对路径。 ``${CMAKE_ANDROID_STANDALONE_TOOLCHAIN}/sysroot`` "
"目录必须存在。如果未指定，将选择此变量的默认值，如上文 <Android 交叉编译> 所指定:ref:`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:505
msgid ":variable:`CMAKE_ANDROID_ARM_MODE`"
msgstr ":variable:`CMAKE_ANDROID_ARM_MODE`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:503
msgid ""
"When the standalone toolchain targets ARM, optionally set this to ``ON`` "
"to target 32-bit ARM instead of 16-bit Thumb. See variable documentation "
"for details."
msgstr ""
"当独立工具链以 ARM 为目标时，可选择将其设置为“ON”以以 32 位 ARM 而不是 16 位 Thumb "
"为目标。有关详细信息，请参阅变量文档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:509
msgid ":variable:`CMAKE_ANDROID_ARM_NEON`"
msgstr ":variable:`CMAKE_ANDROID_ARM_NEON`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:508
msgid ""
"When the standalone toolchain targets ARM v7, optionally set thisto ``ON``"
" to target ARM NEON devices.  See variable documentation for details."
msgstr "当独立工具链以 ARM v7 为目标时，可选择将此设置为“ON”以以 ARM NEON 设备为目标。有关详细信息，请参阅变量文档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:514
msgid "The Android API level detected from the standalone toolchain."
msgstr "从独立工具链中检测到的 Android API 级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:517
msgid "The Android ABI detected from the standalone toolchain."
msgstr "从独立工具链中检测到的 Android ABI。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:520
msgid ""
"The absolute path prefix to the ``binutils`` in the standalone toolchain."
msgstr "独立工具链中 ``binutils`` 的绝对路径前缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:523
msgid ""
"The host platform suffix of the ``binutils`` in the standalone toolchain."
msgstr "独立工具链中 ``binutils`` 的主机平台后缀。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:543
msgid ""
"Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition"
msgstr "使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:545
msgid ""
"A toolchain file to configure one of the :ref:`Visual Studio Generators` "
"to build using NVIDIA Nsight Tegra targeting Android may look like this:"
msgstr ""
"用于配置 Visual Studio Generators 之一以使用针对 Android 的 NVIDIA Nsight Tegra "
"构建的工具链文件可能如下所示："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:552
msgid ""
"The :variable:`CMAKE_GENERATOR_TOOLSET` may be set to select the Nsight "
"Tegra \"Toolchain Version\" value."
msgstr ":variable:`CMAKE_GENERATOR_TOOLSET` 可以设置为选择 Nsight Tegra“工具链版本”值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:555
msgid "See also target properties:"
msgstr "另请参阅目标属性："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:557
msgid ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"
msgstr ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:558
msgid ":prop_tgt:`ANDROID_API_MIN`"
msgstr ":prop_tgt:`ANDROID_API_MIN`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:559
msgid ":prop_tgt:`ANDROID_API`"
msgstr ":prop_tgt:`ANDROID_API`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:560
msgid ":prop_tgt:`ANDROID_ARCH`"
msgstr ":prop_tgt:`ANDROID_ARCH`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:561
msgid ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:562
msgid ":prop_tgt:`ANDROID_GUI`"
msgstr ":prop_tgt:`ANDROID_GUI`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:563
msgid ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"
msgstr ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:564
msgid ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:565
msgid ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"
msgstr ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:566
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"
msgstr ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:567
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:568
msgid ":prop_tgt:`ANDROID_PROCESS_MAX`"
msgstr ":prop_tgt:`ANDROID_PROCESS_MAX`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:569
msgid ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"
msgstr ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:570
msgid ":prop_tgt:`ANDROID_PROGUARD`"
msgstr ":prop_tgt:`ANDROID_PROGUARD`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:571
msgid ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"
msgstr ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:572
msgid ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"
msgstr ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:573
msgid ":prop_tgt:`ANDROID_STL_TYPE`"
msgstr ":prop_tgt:`ANDROID_STL_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:578
msgid "Cross Compiling for iOS, tvOS, or watchOS"
msgstr "针对 iOS、tvOS 或 watchOS 的交叉编译"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:580
msgid ""
"For cross-compiling to iOS, tvOS, or watchOS, the :generator:`Xcode` "
"generator is recommended.  The :generator:`Unix Makefiles` or "
":generator:`Ninja` generators can also be used, but they require the "
"project to handle more areas like target CPU selection and code signing."
msgstr ""
"对于 iOS、tvOS 或 watchOS 的交叉编译，推荐使用 Xcode 生成器。 :generator:`Unix Makefiles` 或 "
":generator:`Ninja` 生成器也可以使用，但它们需要项目处理更多领域，例如目标 CPU 选择和代码签名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:585
msgid ""
"Any of the three systems can be targeted by setting the "
":variable:`CMAKE_SYSTEM_NAME` variable to a value from the table below. By"
" default, the latest Device SDK is chosen.  As for all Apple platforms, a "
"different SDK (e.g. a simulator) can be selected by setting the "
":variable:`CMAKE_OSX_SYSROOT` variable, although this should rarely be "
"necessary (see :ref:`Switching Between Device and Simulator` below). A "
"list of available SDKs can be obtained by running ``xcodebuild "
"-showsdks``."
msgstr ""
"可以通过将 :variable:`CMAKE_SYSTEM_NAME` 变量设置为下表中的值来定位这三个系统中的任何一个。默认情况下，会选择最新的 "
"Device SDK。对于所有 Apple 平台，可以通过设置 :variable:`CMAKE_OSX_SYSROOT` 变量来选择不同的 "
"SDK（例如模拟器），尽管很少有必要这样做（参见下面的 :ref:`在设备和模拟器之间切换`）。可以通过运行 xcodebuild "
"-showsdks 获得可用 SDK 的列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:594
msgid "OS"
msgstr "操作系统"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:594
msgid "CMAKE_SYSTEM_NAME"
msgstr "CMAKE_SYSTEM_NAME"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:594
msgid "Device SDK (default)"
msgstr "设备 SDK（默认）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:594
msgid "Simulator SDK"
msgstr "模拟器SDK"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:596
msgid "iOS"
msgstr "iOS"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:596
msgid "iphoneos"
msgstr "苹果手机"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:596
msgid "iphonesimulator"
msgstr "iPhone模拟器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:597
msgid "tvOS"
msgstr "电视操作系统"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:597
msgid "appletvos"
msgstr "小程序"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:597
msgid "appletvsimulator"
msgstr "小程序vs模拟器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:598
msgid "watchOS"
msgstr "watchOS"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:598
msgid "watchos"
msgstr "手表"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:598
msgid "watchsimulator"
msgstr "手表模拟器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:601
msgid ""
"For example, to create a CMake configuration for iOS, the following "
"command is sufficient:"
msgstr "例如，要为 iOS 创建 CMake 配置，以下命令就足够了："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:608
msgid ""
"Variable :variable:`CMAKE_OSX_ARCHITECTURES` can be used to set "
"architectures for both device and simulator. Variable "
":variable:`CMAKE_OSX_DEPLOYMENT_TARGET` can be used to set an "
"iOS/tvOS/watchOS deployment target."
msgstr ""
"变量 :variable:`CMAKE_OSX_ARCHITECTURES` "
"可用于设置设备和模拟器的架构。变量 :variable:`CMAKE_OSX_DEPLOYMENT_TARGET` 可用于设置 iOS/tvOS/watchOS "
"部署目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:612
msgid ""
"Next configuration will install fat 5 architectures iOS library and add "
"the ``-miphoneos-version-min=9.3``/``-mios-simulator-version-min=9.3`` "
"flags to the compiler:"
msgstr ""
"接下来的配置将安装 fat 5 架构 iOS 库，并向编译器添加 ``-miphoneos-version-min=9.3``/``-mios-"
"simulator-version-min=9.3`` 标志："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:626
msgid "Example:"
msgstr "例子："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:636
msgid "Install:"
msgstr "安装："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:642
msgid "Check library:"
msgstr "检查库："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:657
msgid "Code Signing"
msgstr "代码签名"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:659
msgid ""
"Some build artifacts for the embedded Apple platforms require mandatory "
"code signing.  If the :generator:`Xcode` generator is being used and code "
"signing is required or desired, the development team ID can be specified "
"via the ``CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM`` CMake variable. This "
"team ID will then be included in the generated Xcode project. By default, "
"CMake avoids the need for code signing during the internal configuration "
"phase (i.e compiler ID and feature detection)."
msgstr ""
"嵌入式 Apple 平台的一些构建工件需要强制代码签名。如果正在使用 Xcode 生成器并且需要或希望进行代码签名，则可以通过 "
"CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM CMake 变量指定开发团队 ID。然后，这个团队 ID "
"将包含在生成的 Xcode 项目中。默认情况下，CMake 避免在内部配置阶段（即编译器 ID 和功能检测）进行代码签名。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:670
msgid "Switching Between Device and Simulator"
msgstr "在设备和模拟器之间切换"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:672
msgid ""
"When configuring for any of the embedded platforms, one can target either "
"real devices or the simulator.  Both have their own separate SDK, but "
"CMake only supports specifying a single SDK for the configuration phase.  "
"This means the developer must select one or the other at configuration "
"time. When using the :generator:`Xcode` generator, this is less of a "
"limitation because Xcode still allows you to build for either a device or "
"a simulator, even though configuration was only performed for one of the "
"two.  From within the Xcode IDE, builds are performed for the selected "
"\"destination\" platform.  When building from the command line, the "
"desired sdk can be specified directly by passing a ``-sdk`` option to the "
"underlying build tool (``xcodebuild``).  For example:"
msgstr ""
"在为任何嵌入式平台配置时，可以针对真实设备或模拟器。两者都有自己独立的 SDK，但 CMake 只支持在配置阶段指定一个 "
"SDK。这意味着开发人员必须在配置时选择其中之一。使用 :generator:`Xcode` 生成器时，这不是一个限制，因为 Xcode "
"仍然允许您为设备或模拟器构建，即使只为两者之一执行配置。在 Xcode IDE "
"中，构建是针对选定的“目标”平台执行的。从命令行构建时，可以通过将“-sdk”选项传递给底层构建工具（“xcodebuild”）来直接指定所需的 "
"sdk。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:688
msgid ""
"Please note that checks made during configuration were performed against "
"the configure-time SDK and might not hold true for other SDKs.  Commands "
"like :command:`find_package`, :command:`find_library`, etc. store and use "
"details only for the configured SDK/platform, so they can be problematic "
"if wanting to switch between device and simulator builds. You can follow "
"the next rules to make device + simulator configuration work:"
msgstr ""
"请注意，在配置期间进行的检查是针对配置时 SDK 执行的，可能不适用于其他 SDK。 "
":command:`find_package`、 :command:`find_library` 等命令仅为配置的 "
"SDK/平台存储和使用详细信息，因此如果想要在设备和模拟器构建之间切换，它们可能会出现问题。您可以按照以下规则使设备 + 模拟器配置工作："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:695
msgid ""
"Use explicit ``-l`` linker flag, e.g. ``target_link_libraries(foo PUBLIC "
"\"-lz\")``"
msgstr "使用明确的“-l”链接器标志，例如``target_link_libraries(foo PUBLIC \"-lz\")``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:698
msgid ""
"Use explicit ``-framework`` linker flag, e.g. ``target_link_libraries(foo "
"PUBLIC \"-framework CoreFoundation\")``"
msgstr ""
"使用明确的“-framework”链接器标志，例如``target_link_libraries(foo PUBLIC \"-framework "
"CoreFoundation\")``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-toolchains.7.rst:701
msgid ""
"Use :command:`find_package` only for libraries installed with "
":variable:`CMAKE_IOS_INSTALL_COMBINED` feature"
msgstr "仅对使用 CMAKE_IOS_INSTALL_COMBINED 功能安装的库使用 :command:`find_package`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:4
msgid "cmake-variables(7)"
msgstr "cmake 变量(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:10
msgid ""
"This page documents variables that are provided by CMake or have meaning "
"to CMake when set by project code."
msgstr "此页面记录了由 CMake 提供的或在项目代码设置时对 CMake 有意义的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:13
msgid ""
"For general information on variables, see the :ref:`Variables <CMake "
"Language Variables>` section in the cmake-language manual."
msgstr ""
"有关变量的一般信息，请参阅 cmake 语言手册中的 :ref:`Variables <CMake Language Variables>` 部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:20
msgid "Variables that Provide Information"
msgstr "提供信息的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:162
msgid "Variables that Change Behavior"
msgstr "改变行为的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:300
msgid "Variables that Describe the System"
msgstr "描述系统的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:357
msgid "Variables that Control the Build"
msgstr "控制构建的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:549
msgid "Variables for Languages"
msgstr "语言变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:643
msgid "Variables for CTest"
msgstr "CTest 的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:726
msgid "Variables for CPack"
msgstr "CPack 的变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:742
msgid "Variable Expansion Operators"
msgstr "变量扩展运算符"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:751
msgid "Internal Variables"
msgstr "内部变量"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake-variables.7.rst:753
msgid ""
"CMake has many internal variables.  Most of them are undocumented. Some of"
" them, however, were at some point described as normal variables, and "
"therefore may be encountered in legacy code. They are subject to change, "
"and not recommended for use in project code."
msgstr ""
"CMake "
"有很多内部变量。他们中的大多数都没有证件。然而，其中一些在某些时候被描述为普通变量，因此可能会在遗留代码中遇到。它们可能会发生变化，不建议在项目代码中使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:4
msgid "cmake(1)"
msgstr "cmake(1)"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:42
msgid ""
"The :program:`cmake` executable is the command-line interface of the "
"cross-platform buildsystem generator CMake.  The above `Synopsis`_ lists "
"various actions the tool can perform as described in sections below."
msgstr ""
":program:`cmake` 可执行文件是跨平台构建系统生成器 CMake "
"的命令行界面。上面的“概要”列出了该工具可以执行的各种操作，如下文所述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:46
msgid ""
"To build a software project with CMake, `Generate a Project Buildsystem`_."
" Optionally use :program:`cmake` to `Build a Project`_, `Install a "
"Project`_ or just run the corresponding build tool (e.g. ``make``) "
"directly.  :program:`cmake` can also be used to `View Help`_."
msgstr ""
"要使用 CMake 构建软件项目，`Generate a Project Buildsystem`_。可选择使用 :program:`cmake` "
"来 `Build a Project`_、`Install a Project`_ 或直接运行相应的构建工具（例如 ``make``）。 "
":program:`cmake` 也可用于 `View Help`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:51
msgid ""
"The other actions are meant for use by software developers writing scripts"
" in the :manual:`CMake language <cmake-language(7)>` to support their "
"builds."
msgstr ""
"其他操作旨在供使用 :manual:`CMake 语言 <cmake-language(7)>` 编写脚本的软件开发人员使用，以支持他们的构建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:55
msgid ""
"For graphical user interfaces that may be used in place of "
":program:`cmake`, see :manual:`ccmake <ccmake(1)>` and :manual:`cmake-gui "
"<cmake-gui(1)>`. For command-line interfaces to the CMake testing and "
"packaging facilities, see :manual:`ctest <ctest(1)>` and :manual:`cpack "
"<cpack(1)>`."
msgstr ""
"对于可用于代替 :program:`cmake` 的图形用户界面，请参阅:manual:`ccmake <ccmake(1)>` 和 "
":manual:`cmake-gui <cmake-gui(1)>`。有关 CMake 测试和打包工具的命令行界面，请参阅 :manual:`ctest "
"<ctest(1)>` 和 :manual:`cpack <cpack(1)>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:60
msgid ""
"For more information on CMake at large, `see also`_ the links at the end "
"of this manual."
msgstr "有关 CMake 的更多信息，请参见本手册末尾的链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:65
msgid "Introduction to CMake Buildsystems"
msgstr "CMake 构建系统简介"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:67
msgid ""
"A *buildsystem* describes how to build a project's executables and "
"libraries from its source code using a *build tool* to automate the "
"process.  For example, a buildsystem may be a ``Makefile`` for use with a "
"command-line ``make`` tool or a project file for an Integrated Development"
" Environment (IDE).  In order to avoid maintaining multiple such "
"buildsystems, a project may specify its buildsystem abstractly using files"
" written in the :manual:`CMake language <cmake-language(7)>`.  From these "
"files CMake generates a preferred buildsystem locally for each user "
"through a backend called a *generator*."
msgstr ""
"*buildsystem* 描述了如何使用 *build 工具* "
"从项目的源代码构建项目的可执行文件和库以自动化该过程。例如，构建系统可能是一个“Makefile”，用于与命令行“make”工具一起使用，或者是一个用于集成开发环境（IDE）的项目文件。为了避免维护多个这样的构建系统，项目可以使用以"
" :manual:`CMake 语言 <cmake-language(7)>` 编写的文件抽象地指定其构建系统。从这些文件中，CMake 通过称为 "
"*generator* 的后端为每个用户在本地生成一个首选的构建系统。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:77
msgid ""
"To generate a buildsystem with CMake, the following must be selected:"
msgstr "要使用 CMake 生成构建系统，必须选择以下内容："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:84
msgid "Source Tree"
msgstr "源代码树"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:80
msgid ""
"The top-level directory containing source files provided by the project. "
"The project specifies its buildsystem using files as described in the "
":manual:`cmake-language(7)` manual, starting with a top-level file named "
"``CMakeLists.txt``.  These files specify build targets and their "
"dependencies as described in the :manual:`cmake-buildsystem(7)` manual."
msgstr ""
"包含项目提供的源文件的顶级目录。该项目使用 cmake-language(7) 手册中描述的文件指定其构建系统，从名为 CMakeLists.txt"
" 的顶级文件开始。这些文件指定构建目标及其依赖项，如 :manual:`cmake-buildsystem(7)` 手册中所述。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:96
msgid "Build Tree"
msgstr "建树"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:87
msgid ""
"The top-level directory in which buildsystem files and build output "
"artifacts (e.g. executables and libraries) are to be stored. CMake will "
"write a ``CMakeCache.txt`` file to identify the directory as a build tree "
"and store persistent information such as buildsystem configuration "
"options."
msgstr ""
"要存储构建系统文件和构建输出工件（例如可执行文件和库）的顶级目录。 CMake 将编写一个 ``CMakeCache.txt`` "
"文件来将该目录标识为构建树并存储持久性信息，例如构建系统配置选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:93
msgid ""
"To maintain a pristine source tree, perform an *out-of-source* build by "
"using a separate dedicated build tree.  An *in-source* build in which the "
"build tree is placed in the same directory as the source tree is also "
"supported, but discouraged."
msgstr ""
"要维护原始源代码树，请使用单独的专用构建树执行 *out-of-source* 构建。还支持将构建树放置在与源树相同的目录中的 *in-"
"source* 构建，但不鼓励这样做。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:109
msgid "Generator"
msgstr "生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:99
msgid ""
"This chooses the kind of buildsystem to generate.  See the :manual:`cmake-"
"generators(7)` manual for documentation of all generators. Run "
":option:`cmake --help` to see a list of generators available locally. "
"Optionally use the :option:`-G <cmake -G>` option below to specify a "
"generator, or simply accept the default CMake chooses for the current "
"platform."
msgstr ""
"这选择了要生成的构建系统的种类。有关所有生成器的文档，请参阅 :manual:`cmake-generators(7)` 手册。运行 "
":option:`cmake --help` 查看本地可用的生成器列表。可以选择使用下面的 :option:`-G <cmake -G>` "
"选项来指定生成器，或者简单地接受 CMake 为当前平台选择的默认值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:106
msgid ""
"When using one of the :ref:`Command-Line Build Tool Generators` CMake "
"expects that the environment needed by the compiler toolchain is already "
"configured in the shell.  When using one of the :ref:`IDE Build Tool "
"Generators`, no particular environment is needed."
msgstr ""
"当使用 :ref:`Command-Line Build Tool Generators` 之一时，CMake 期望编译器工具链所需的环境已经在 "
"shell 中配置。使用 :ref:`IDE 构建工具生成器` 之一时，不需要特定的环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:114
msgid "Generate a Project Buildsystem"
msgstr "生成项目构建系统"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:116
msgid ""
"Run CMake with one of the following command signatures to specify the "
"source and build trees and generate a buildsystem:"
msgstr "使用以下命令签名之一运行 CMake 以指定源和构建树并生成构建系统："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:130
msgid "``cmake [<options>] <path-to-source>``"
msgstr "``cmake [<options>] <path-to-source>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:120
msgid ""
"Uses the current working directory as the build tree, and ``<path-to-"
"source>`` as the source tree.  The specified path may be absolute or "
"relative to the current working directory. The source tree must contain a "
"``CMakeLists.txt`` file and must *not* contain a ``CMakeCache.txt`` file "
"because the latter identifies an existing build tree.  For example:"
msgstr ""
"使用当前工作目录作为构建树，并将``<path-to-"
"source>``用作源树。指定的路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。源代码树必须包含一个 "
"``CMakeLists.txt`` 文件并且必须 *不* 包含一个 ``CMakeCache.txt`` "
"文件，因为后者标识一个现有的构建树。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:142
msgid "``cmake [<options>] <path-to-existing-build>``"
msgstr "``cmake [<options>] <path-to-existing-build>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:133
msgid ""
"Uses ``<path-to-existing-build>`` as the build tree, and loads the path to"
" the source tree from its ``CMakeCache.txt`` file, which must have already"
" been generated by a previous run of CMake.  The specified path may be "
"absolute or relative to the current working directory. For example:"
msgstr ""
"使用 ``<path-to-existing-build>`` 作为构建树，并从其 ``CMakeCache.txt`` "
"文件加载源树的路径，该文件必须已经由之前运行的 CMake 生成.指定的路径可以是绝对路径，也可以是相对于当前工作目录的相对路径。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:144
msgid "``cmake [<options>] -S <path-to-source> -B <path-to-build>``"
msgstr "``cmake [<options>] -S <path-to-source> -B <path-to-build>``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:148
msgid ""
"Uses ``<path-to-build>`` as the build tree and ``<path-to-source>`` as the"
" source tree.  The specified paths may be absolute or relative to the "
"current working directory.  The source tree must contain a "
"``CMakeLists.txt`` file.  The build tree will be created automatically if "
"it does not already exist.  For example:"
msgstr ""
"使用 ``<path-to-build>`` 作为构建树，使用 ``<path-to-source>`` "
"作为源树。指定的路径可以是相对于当前工作目录的绝对路径或相对路径。源代码树必须包含一个“CMakeLists.txt”文件。如果构建树不存在，将自动创建它。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:158
msgid ""
"In all cases the ``<options>`` may be zero or more of the `Options`_ "
"below."
msgstr "在所有情况下，``<options>`` 可以是零个或多个下面的 `Options`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:160
msgid ""
"The above styles for specifying the source and build trees may be mixed. "
"Paths specified with :option:`-S <cmake -S>` or :option:`-B <cmake -B>` "
"are always classified as source or build trees, respectively.  Paths "
"specified with plain arguments are classified based on their content and "
"the types of paths given earlier.  If only one type of path is given, the "
"current working directory (cwd) is used for the other.  For example:"
msgstr ""
"上述用于指定源代码和构建树的样式可以混合使用。使用 :option:`-S <cmake -S>` 或 :option:`-B <cmake "
"-B>` "
"指定的路径始终分别分类为源树或构建树。使用普通参数指定的路径根据其内容和前面给出的路径类型进行分类。如果只给出了一种类型的路径，则当前工作目录 "
"(cwd) 用于另一种。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:168
msgid "Command Line"
msgstr "命令行"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:168
msgid "Source Dir"
msgstr "源目录"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:168
msgid "Build Dir"
msgstr "构建目录"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:170
msgid "``cmake src``"
msgstr "``cmake 源代码``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:170
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:172
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:173
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:174
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:176
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:177
msgid "``src``"
msgstr "``源代码``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:170
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:172
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:175
msgid "`cwd`"
msgstr "`cwd`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:171
msgid "``cmake build`` (existing)"
msgstr "``cmake 构建``（现有）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:171
msgid "`loaded`"
msgstr "`加载`"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:172
msgid "``cmake -S src``"
msgstr "``cmake -S 源``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:173
msgid "``cmake -S src build``"
msgstr "``cmake -S src build``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:174
msgid "``cmake -S src -B build``"
msgstr "``cmake -S src -B 构建``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:175
msgid "``cmake -B build``"
msgstr "``cmake -B 构建``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:176
msgid "``cmake -B build src``"
msgstr "``cmake -B build src``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:177
msgid "``cmake -B build -S src``"
msgstr "``cmake -B build -S src``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:182
msgid ""
"CMake warns when multiple source paths are specified.  This has never been"
" officially documented or supported, but older versions accidentally "
"accepted multiple source paths and used the last path specified. Avoid "
"passing multiple source path arguments."
msgstr ""
"当指定多个源路径时，CMake 会发出警告。这从未被正式记录或支持，但旧版本意外地接受了多个源路径并使用了最后指定的路径。避免传递多个源路径参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:187
msgid ""
"After generating a buildsystem one may use the corresponding native build "
"tool to build the project.  For example, after using the :generator:`Unix "
"Makefiles` generator one may run ``make`` directly:"
msgstr ""
"生成构建系统后，可以使用相应的本机构建工具来构建项目。例如，在使用 :generator:`Unix Makefiles` 生成器后，可以直接运行 "
"``make``："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:196
msgid ""
"Alternatively, one may use :program:`cmake` to `Build a Project`_ by "
"automatically choosing and invoking the appropriate native build tool."
msgstr "或者，可以使用 :program:`cmake` 通过自动选择和调用适当的本机构建工具来 `Build a Project`_。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:212
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1299
msgid ""
"Perform a fresh configuration of the build tree. This removes any existing"
" ``CMakeCache.txt`` file and associated ``CMakeFiles/`` directory, and "
"recreates them from scratch."
msgstr ""
"执行构建树的全新配置。这将删除任何现有的 ``CMakeCache.txt`` 文件和关联的 ``CMakeFiles/`` "
"目录，并从头开始重新创建它们。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:218
msgid "List non-advanced cached variables."
msgstr "列出非高级缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:220
msgid ""
"List ``CACHE`` variables will run CMake and list all the variables from "
"the CMake ``CACHE`` that are not marked as ``INTERNAL`` or "
":prop_cache:`ADVANCED`. This will effectively display current CMake "
"settings, which can then be changed with :option:`-D <cmake -D>` option.  "
"Changing some of the variables may result in more variables being created."
"  If ``A`` is specified, then it will display also advanced variables.  If"
" ``H`` is specified, it will also display help for each variable."
msgstr ""
"列出 ``CACHE`` 变量将运行 CMake 并列出 CMake ``CACHE`` 中未标记为 ``INTERNAL`` 或 "
":prop_cache:`ADVANCED` 的所有变量。这将有效地显示当前的 CMake 设置，然后可以使用 :option:`-D <cmake"
" -D>` "
"选项进行更改。更改某些变量可能会导致创建更多变量。如果指定了``A``，那么它也会显示高级变量。如果指定了``H``，它还会显示每个变量的帮助。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:230
msgid "View mode only."
msgstr "仅查看模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:232
msgid ""
"Only load the cache.  Do not actually run configure and generate steps."
msgstr "只加载缓存。不要实际运行配置和生成步骤。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:237
msgid ""
"Generate graphviz of dependencies, see :module:`CMakeGraphVizOptions` for "
"more."
msgstr "生成依赖关系的 graphviz，有关更多信息，请参见:module:`CMakeGraphVizOptions`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:239
msgid ""
"Generate a graphviz input file that will contain all the library and "
"executable dependencies in the project.  See the documentation for "
":module:`CMakeGraphVizOptions` for more details."
msgstr ""
"生成一个 graphviz 输入文件，它将包含项目中的所有库和可执行依赖项。有关详细信息，请参阅 "
":module:`CMakeGraphVizOptions` 的文档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:245
msgid "Dump information about this system."
msgstr "转储有关此系统的信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:247
msgid ""
"Dump a wide range of information about the current system.  If run from "
"the top of a binary tree for a CMake project it will dump additional "
"information such as the cache, log files etc."
msgstr "转储有关当前系统的各种信息。如果从 CMake 项目的二叉树的顶部运行，它将转储其他信息，例如缓存、日志文件等。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:253
msgid "Set the log ``<level>``."
msgstr "设置日志``<level>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:255
msgid ""
"The :command:`message` command will only output messages of the specified "
"log level or higher.  The valid log levels are ``ERROR``, ``WARNING``, "
"``NOTICE``, ``STATUS`` (default), ``VERBOSE``, ``DEBUG``, or ``TRACE``."
msgstr ""
":command:`message` "
"命令只会输出指定日志级别或更高级别的消息。有效的日志级别是“ERROR”、“WARNING”、“NOTICE”、“STATUS”（默认）、“VERBOSE”、“DEBUG”或“TRACE”"
" ."

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:259
msgid ""
"To make a log level persist between CMake runs, set "
":variable:`CMAKE_MESSAGE_LOG_LEVEL` as a cache variable instead. If both "
"the command line option and the variable are given, the command line "
"option takes precedence."
msgstr ""
"要在 CMake 运行之间保持日志级别，请将 :variable:`CMAKE_MESSAGE_LOG_LEVEL` "
"设置为缓存变量。如果同时给出了命令行选项和变量，则命令行选项优先。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:264
msgid ""
"For backward compatibility reasons, ``--loglevel`` is also accepted as a "
"synonym for this option."
msgstr "出于向后兼容性的原因，``--loglevel`` 也被接受为该选项的同义词。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:267
msgid ""
"See the :command:`cmake_language` command for a way to :ref:`query the "
"current message logging level <query_message_log_level>`."
msgstr ""
"有关查询当前消息日志级别 <query_message_log_level> 的方法，请参阅 :command:`cmake_language` "
"命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:273
msgid ""
"Enable the :command:`message` command outputting context attached to each "
"message."
msgstr "启用 :command:`message` 命令输出附加到每条消息的上下文。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:276
msgid ""
"This option turns on showing context for the current CMake run only. To "
"make showing the context persistent for all subsequent CMake runs, set "
":variable:`CMAKE_MESSAGE_CONTEXT_SHOW` as a cache variable instead. When "
"this command line option is given, :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` "
"is ignored."
msgstr ""
"此选项打开仅显示当前 CMake 运行的上下文。要显示所有后续 CMake 运行的上下文，请将 "
":variable:`CMAKE_MESSAGE_CONTEXT_SHOW` "
"设置为缓存变量。当给出此命令行选项时， :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` 将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:284
msgid ""
"Do not delete the files and directories created for :command:`try_compile`"
" / :command:`try_run` calls. This is useful in debugging failed checks."
msgstr ""
"不要删除为 :command:`try_compile` / :command:`try_run` "
"调用创建的文件和目录。这在调试失败的检查时很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:288
msgid ""
"Note that some uses of :command:`try_compile` may use the same build tree,"
" which will limit the usefulness of this option if a project executes more"
" than one :command:`try_compile`.  For example, such uses may change "
"results as artifacts from a previous try-compile may cause a different "
"test to either pass or fail incorrectly.  This option is best used only "
"when debugging."
msgstr ""
"请注意:command:`try_compile` 的一些使用可能使用相同的构建树，如果一个项目执行多个 "
":command:`try_compile`，这将限制此选项的有用性。例如，这样的使用可能会改变结果，因为来自先前尝试编译的工件可能会导致不同的测试错误地通过或失败。此选项最好仅在调试时使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:294
msgid ""
"(With respect to the preceding, the :command:`try_run` command is "
"effectively a :command:`try_compile`.  Any combination of the two is "
"subject to the potential issues described.)"
msgstr ""
"（关于前面的内容， :command:`try_run` "
"命令实际上是一个 :command:`try_compile`。两者的任何组合都受所描述的潜在问题的影响。）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:300
msgid ""
"When this option is enabled, every try-compile check prints a log message "
"reporting the directory in which the check is performed."
msgstr "启用此选项后，每次尝试编译检查都会打印一条日志消息，报告执行检查的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:305
msgid "Put cmake in a debug mode."
msgstr "将 cmake 置于调试模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:307
msgid ""
"Print extra information during the cmake run like stack traces with "
":command:`message(SEND_ERROR)` calls."
msgstr "在 cmake 运行期间打印额外信息，例如使用 :command:`message(SEND_ERROR)` 调用的堆栈跟踪。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:312
msgid "Put cmake find commands in a debug mode."
msgstr "将 cmake find 命令置于调试模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:314
msgid ""
"Print extra find call information during the cmake run to standard error. "
"Output is designed for human consumption and not for parsing. See also the"
" :variable:`CMAKE_FIND_DEBUG_MODE` variable for debugging a more local "
"part of the project."
msgstr ""
"在 cmake 运行到标准错误期间打印额外的查找调用信息。输出是为人类消费而设计的，而不是为解析而设计的。另请参阅 "
":variable:`CMAKE_FIND_DEBUG_MODE` 变量以调试项目的更多本地部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:321
msgid ""
"Put cmake find commands in a debug mode when running under calls to "
":command:`find_package(\\<pkg\\>) <find_package>`, where ``<pkg>`` is an "
"entry in the given comma-separated list of case-sensitive package names."
msgstr ""
"在调用 :command:`find_package(\\<pkg\\>) <find_package>` 时将 cmake find "
"命令置于调试模式，其中 ``<pkg>`` 是给定的以逗号分隔的案例列表中的条目-敏感的包名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:326
msgid ""
"Like :option:`--debug-find <cmake --debug-find>`, but limiting scope to "
"the specified packages."
msgstr "类似于 :option:`--debug-find <cmake --debug-find>`，但将范围限制在指定的包中。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:331
msgid ""
"Put cmake find commands in a debug mode when called with ``<var>`` as the "
"result variable, where ``<var>`` is an entry in the given comma-separated "
"list."
msgstr "当使用“<var>”作为结果变量调用时，将 cmake find 命令置于调试模式，其中“<var>”是给定逗号分隔列表中的条目。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:335
msgid ""
"Like :option:`--debug-find <cmake --debug-find>`, but limiting scope to "
"the specified variable names."
msgstr "类似于 :option:`--debug-find <cmake --debug-find>`，但将范围限制为指定的变量名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:340
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:346
msgid "Put cmake in trace mode."
msgstr "将 cmake 置于跟踪模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:342
msgid "Print a trace of all calls made and from where."
msgstr "打印所有呼叫的踪迹以及来自哪里。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:348
msgid "Like :option:`--trace <cmake --trace>`, but with variables expanded."
msgstr "类似于 :option:`--trace <cmake --trace>`，但变量已扩展。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:352
msgid "Put cmake in trace mode and sets the trace output format."
msgstr "将 cmake 置于跟踪模式并设置跟踪输出格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:354
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:192
msgid "``<format>`` can be one of the following values."
msgstr "``<format>`` 可以是以下值之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:357
msgid ""
"Prints each trace line in a human-readable format. This is the default "
"format."
msgstr "以人类可读的格式打印每条跟踪线。这是默认格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:361
msgid ""
"Prints each line as a separate JSON document. Each document is separated "
"by a newline ( ``\\n`` ). It is guaranteed that no newline characters will"
" be present inside a JSON document."
msgstr "将每一行打印为单独的 JSON 文档。每个文档都由换行符 (``\\n``) 分隔。保证 JSON 文档中不会出现换行符。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:365
msgid "JSON trace format"
msgstr "JSON 跟踪格式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:381
msgid ""
"The full path to the CMake source file where the function was called."
msgstr "调用函数的 CMake 源文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:385
msgid "The line in ``file`` where the function call begins."
msgstr "``file`` 中函数调用开始的行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:391
msgid "``line_end``"
msgstr "``line_end``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:388
msgid ""
"If the function call spans multiple lines, this field will be set to the "
"line where the function call ends. If the function calls spans a single "
"line, this field will be unset. This field was added in minor version 2 of"
" the ``json-v1`` format."
msgstr ""
"如果函数调用跨越多行，则此字段将设置为函数调用结束的行。如果函数调用跨越一行，则该字段将被取消设置。该字段是在 ``json-v1`` "
"格式的次要版本 2 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:396
msgid "``defer``"
msgstr "``推迟``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:394
msgid ""
"Optional member that is present when the function call was deferred by "
":command:`cmake_language(DEFER)`.  If present, its value is a string "
"containing the deferred call ``<id>``."
msgstr ""
"当函数调用被 cmake_language(DEFER) 延迟时出现的可选成员。如果存在，它的值是一个包含延迟调用的字符串 ``<id>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:399
msgid "``cmd``"
msgstr "``命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:399
msgid "The name of the function that was called."
msgstr "被调用的函数的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:402
msgid "``args``"
msgstr "``参数``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:402
msgid "A string list of all function parameters."
msgstr "所有函数参数的字符串列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:405
msgid "``time``"
msgstr "``时间``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:405
msgid "Timestamp (seconds since epoch) of the function call."
msgstr "函数调用的时间戳（自纪元以来的秒数）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:409
msgid "``frame``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:408
msgid ""
"Stack frame depth of the function that was called, within the context of "
"the  ``CMakeLists.txt`` being processed currently."
msgstr "在当前正在处理的“CMakeLists.txt”上下文中，被调用函数的堆栈帧深度。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:414
msgid "``global_frame``"
msgstr "``global_frame``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:412
msgid ""
"Stack frame depth of the function that was called, tracked globally across"
" all ``CMakeLists.txt`` files involved in the trace. This field was added "
"in minor version 2 of the ``json-v1`` format."
msgstr ""
"被调用函数的堆栈帧深度，在跟踪中涉及的所有“CMakeLists.txt”文件中进行全局跟踪。该字段是在 ``json-v1`` 格式的次要版本 2"
" 中添加的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:416
msgid ""
"Additionally, the first JSON document outputted contains the ``version`` "
"key for the current major and minor version of the"
msgstr "此外，输出的第一个 JSON 文档包含当前主要和次要版本的 ``version`` 键"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:419
msgid "JSON version format"
msgstr "JSON版本格式"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:432
msgid ""
"Indicates the version of the JSON format. The version has a major and "
"minor components following semantic version conventions."
msgstr "指示 JSON 格式的版本。该版本具有遵循语义版本约定的主要和次要组件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:437
msgid "Put cmake in trace mode, but output only lines of a specified file."
msgstr "将 cmake 置于跟踪模式，但仅输出指定文件的行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:439
msgid "Multiple options are allowed."
msgstr "允许多个选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:443
msgid ""
"Put cmake in trace mode and redirect trace output to a file instead of "
"stderr."
msgstr "将 cmake 置于跟踪模式并将跟踪输出重定向到文件而不是 stderr。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:447
msgid "Warn about uninitialized values."
msgstr "警告未初始化的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:449
msgid "Print a warning when an uninitialized variable is used."
msgstr "使用未初始化的变量时打印警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:453
msgid ""
"Does nothing.  In CMake versions 3.2 and below this enabled warnings about"
" unused variables.  In CMake versions 3.3 through 3.18 the option was "
"broken. In CMake 3.19 and above the option has been removed."
msgstr ""
"什么也没做。在 CMake 3.2 及以下版本中，这启用了有关未使用变量的警告。在 CMake 版本 3.3 到 3.18 中，该选项已损坏。在 "
"CMake 3.19 及更高版本中，该选项已被删除。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:459
msgid "Don't warn about command line options."
msgstr "不要警告命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:461
msgid ""
"Don't find variables that are declared on the command line, but not used."
msgstr "找不到在命令行上声明但未使用的变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:466
msgid "Find problems with variable usage in system files."
msgstr "查找系统文件中变量使用的问题。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:468
msgid ""
"Normally, unused and uninitialized variables are searched for only in "
":variable:`CMAKE_SOURCE_DIR` and :variable:`CMAKE_BINARY_DIR`. This flag "
"tells CMake to warn about other files as well."
msgstr ""
"通常，仅在 CMAKE_SOURCE_DIR 和 CMAKE_BINARY_DIR 中搜索未使用和未初始化的变量。这个标志告诉 CMake "
"对其他文件也发出警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:474
msgid ""
"Ignore target property :prop_tgt:`COMPILE_WARNING_AS_ERROR` and variable "
":variable:`CMAKE_COMPILE_WARNING_AS_ERROR`, preventing warnings from being"
" treated as errors on compile."
msgstr ""
"忽略目标属性 :prop_tgt:`COMPILE_WARNING_AS_ERROR` 和变量 "
":variable:`CMAKE_COMPILE_WARNING_AS_ERROR` ，防止警告被视为编译错误。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:480
msgid ""
"Used in conjunction with :option:`--profiling-format <cmake --profiling-"
"format>` to output to a given path."
msgstr ""
"与 :option:`--profiling-format <cmake --profiling-format>` 结合使用以输出到给定路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:486
msgid ""
"Enable the output of profiling data of CMake script in the given format."
msgstr "启用以给定格式输出 CMake 脚本的分析数据。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:488
msgid ""
"This can aid performance analysis of CMake scripts executed. Third party "
"applications should be used to process the output into human readable "
"format."
msgstr "这有助于对执行的 CMake 脚本进行性能分析。应使用第三方应用程序将输出处理为人类可读的格式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:491
msgid ""
"Currently supported values are: ``google-trace`` Outputs in Google Trace "
"Format, which can be parsed by the about:tracing tab of Google Chrome or "
"using a plugin for a tool like Trace Compass."
msgstr ""
"目前支持的值是： ``google-trace`` Google Trace 格式的输出，可以通过 Google Chrome 的 "
"about:tracing 选项卡或使用 Trace Compass 等工具的插件进行解析。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:498
msgid ""
"Reads a :manual:`preset <cmake-presets(7)>` from ``<path-to-"
"source>/CMakePresets.json`` and ``<path-to-"
"source>/CMakeUserPresets.json``. The preset may specify the generator and "
"the build directory, and a list of variables and other arguments to pass "
"to CMake. The current working directory must contain CMake preset files. "
"The :manual:`CMake GUI <cmake-gui(1)>` can also recognize "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` files. For full "
"details on these files, see :manual:`cmake-presets(7)`."
msgstr ""
"从``<path-to-source>/CMakePresets.json`` 和``<path-to-"
"source>/CMakeUserPresets.json`` 中读取:manual:`preset <cmake-"
"presets(7)>`。预设可以指定生成器和构建目录，以及要传递给 CMake 的变量列表和其他参数。当前工作目录必须包含 CMake 预设文件。"
" :manual:`CMake GUI <cmake-gui(1)>` 也可以识别 ``CMakePresets.json`` 和 "
"``CMakeUserPresets.json`` 文件。有关这些文件的完整详细信息，请参阅 :manual:`cmake-presets(7)`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:507
msgid ""
"The presets are read before all other command line options. The options "
"specified by the preset (variables, generator, etc.) can all be overridden"
" by manually specifying them on the command line. For example, if the "
"preset sets a variable called ``MYVAR`` to ``1``, but the user sets it to "
"``2`` with a ``-D`` argument, the value ``2`` is preferred."
msgstr ""
"在所有其他命令行选项之前读取预设。预设指定的选项（变量、生成器等）都可以通过在命令行上手动指定来覆盖。例如，如果预设将名为“MYVAR”的变量设置为“1”，但用户使用“-D”参数将其设置为“2”，则值“2”是首选。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:515
msgid ""
"Lists the available presets of the specified ``<type>``.  Valid values for"
" ``<type>`` are ``configure``, ``build``, ``test``, ``package``, or "
"``all``. If ``<type>`` is omitted, ``configure`` is assumed.  The current "
"working directory must contain CMake preset files."
msgstr ""
"列出指定的 ``<type>`` 的可用预设。 ``<type>`` "
"的有效值为``configure``、``build``、``test``、``package`` "
"或``all``。如果省略``<type>``，则假定为``configure``。当前工作目录必须包含 CMake 预设文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:523
msgid "Build a Project"
msgstr "建立一个项目"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:527
msgid ""
"CMake provides a command-line signature to build an already-generated "
"project binary tree:"
msgstr "CMake 提供了一个命令行签名来构建一个已经生成的项目二叉树："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:535
msgid ""
"This abstracts a native build tool's command-line interface with the "
"following options:"
msgstr "这使用以下选项抽象了本机构建工具的命令行界面："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:540
msgid ""
"Project binary directory to be built.  This is required (unless a preset "
"is specified) and must be first."
msgstr "要构建的项目二进制目录。这是必需的（除非指定了预设）并且必须是第一个。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:547
msgid ""
"Use a build preset to specify build options. The project binary directory "
"is inferred from the ``configurePreset`` key. The current working "
"directory must contain CMake preset files. See :manual:`preset <cmake-"
"presets(7)>` for more details."
msgstr ""
"使用构建预设来指定构建选项。项目二进制目录是从 ``configurePreset`` 键推断出来的。当前工作目录必须包含 CMake "
"预设文件。有关详细信息，请参阅 :manual:`preset <cmake-presets(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:554
msgid ""
"Lists the available build presets. The current working directory must "
"contain CMake preset files."
msgstr "列出可用的构建预设。当前工作目录必须包含 CMake 预设文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:561
msgid ""
"The maximum number of concurrent processes to use when building. If "
"``<jobs>`` is omitted the native build tool's default number is used."
msgstr "构建时要使用的最大并发进程数。如果省略``<jobs>``，则使用本机构建工具的默认编号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:564
msgid ""
"The :envvar:`CMAKE_BUILD_PARALLEL_LEVEL` environment variable, if set, "
"specifies a default parallel level when this option is not given."
msgstr ":envvar:`CMAKE_BUILD_PARALLEL_LEVEL` 环境变量（如果设置）指定未给出此选项时的默认并行级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:567
msgid ""
"Some native build tools always build in parallel.  The use of ``<jobs>`` "
"value of ``1`` can be used to limit to a single job."
msgstr "一些本机构建工具总是并行构建。使用 ``<jobs>`` 的值 ``1`` 可用于限制为单个作业。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:572
msgid ""
"Build ``<tgt>`` instead of the default target.  Multiple targets may be "
"given, separated by spaces."
msgstr "构建 ``<tgt>`` 而不是默认目标。可以给出多个目标，以空格分隔。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:577
msgid "For multi-configuration tools, choose configuration ``<cfg>``."
msgstr "对于多配置工具，选择配置``<cfg>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:581
msgid ""
"Build target ``clean`` first, then build. (To clean only, use "
":option:`--target clean <cmake--build --target>`.)"
msgstr ""
"首先构建目标 ``clean``，然后构建。 （只清理，使用 :option:`--target clean <cmake--build "
"--target>`。）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:588
msgid ""
"Resolve remote package references from external package managers (e.g. "
"NuGet) before build. When ``<value>`` is set to ``on`` (default), packages"
" will be restored before building a target.  When ``<value>`` is set to "
"``only``, the packages will be restored, but no build will be performed.  "
"When ``<value>`` is set to ``off``, no packages will be restored."
msgstr ""
"在构建之前解析来自外部包管理器（例如 NuGet）的远程包引用。当``<value>`` "
"设置为``on``（默认）时，将在构建目标之前恢复包。当``<value>`` 设置为``only`` "
"时，将恢复包，但不会执行构建。当``<value>`` 设置为``off`` 时，不会恢复任何包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:594
msgid ""
"If the target does not define any package references, this option does "
"nothing."
msgstr "如果目标未定义任何包引用，则此选项不执行任何操作。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:596
msgid ""
"This setting can be specified in a build preset (using "
"``resolvePackageReferences``). The preset setting will be ignored, if this"
" command line option is specified."
msgstr "可以在构建预设中指定此设置（使用“resolvePackageReferences”）。如果指定了此命令行选项，则预设设置将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:600
msgid ""
"If no command line parameter or preset option are provided, an "
"environment- specific cache variable will be evaluated to decide, if "
"package restoration should be performed."
msgstr "如果未提供命令行参数或预设选项，将评估特定于环境的缓存变量以决定是否应执行包恢复。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:604
msgid ""
"When using the Visual Studio generator, package references are defined "
"using the :prop_tgt:`VS_PACKAGE_REFERENCES` property. Package references "
"are restored using NuGet. It can be disabled by setting the "
"``CMAKE_VS_NUGET_PACKAGE_RESTORE`` variable to ``OFF``."
msgstr ""
"使用 Visual Studio 生成器时，包引用是使用 :prop_tgt:`VS_PACKAGE_REFERENCES` 属性定义的。使用 "
"NuGet 恢复包引用。可以通过将“CMAKE_VS_NUGET_PACKAGE_RESTORE”变量设置为“OFF”来禁用它。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:611
msgid "Ignored.  Behavior is default in CMake >= 3.0."
msgstr "忽略。行为在 CMake >= 3.0 中是默认的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:615
msgid ""
"Enable verbose output - if supported - including the build commands to be "
"executed."
msgstr "启用详细输出 - 如果支持 - 包括要执行的构建命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:618
msgid ""
"This option can be omitted if :envvar:`VERBOSE` environment variable or "
":variable:`CMAKE_VERBOSE_MAKEFILE` cached variable is set."
msgstr ""
"如果设置了 :envvar:`VERBOSE` 环境变量或 :variable:`CMAKE_VERBOSE_MAKEFILE` "
"缓存变量，则可以省略此选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:624
msgid "Pass remaining options to the native tool."
msgstr "将剩余选项传递给本机工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:626
msgid "Run :option:`cmake --build` with no options for quick help."
msgstr "不带任何选项运行 :option:`cmake --build` 以获得快速帮助。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:629
msgid "Install a Project"
msgstr "安装项目"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:633
msgid ""
"CMake provides a command-line signature to install an already-generated "
"project binary tree:"
msgstr "CMake 提供了一个命令行签名来安装一个已经生成的项目二叉树："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:640
msgid ""
"This may be used after building a project to run installation without "
"using the generated build system or the native build tool. The options "
"are:"
msgstr "这可以在构建项目后使用，以在不使用生成的构建系统或本机构建工具的情况下运行安装。选项是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:646
msgid ""
"Project binary directory to install. This is required and must be first."
msgstr "要安装的项目二进制目录。这是必需的，必须是第一个。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:652
msgid "For multi-configuration generators, choose configuration ``<cfg>``."
msgstr "对于多配置生成器，选择配置``<cfg>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:656
msgid "Component-based install. Only install component ``<comp>``."
msgstr "基于组件的安装。只安装组件``<comp>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:660
msgid ""
"Default directory install permissions. Permissions in format "
"``<u=rwx,g=rx,o=rx>``."
msgstr "默认目录安装权限。格式为“<u=rwx,g=rx,o=rx>”的权限。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:664
msgid "Override the installation prefix, :variable:`CMAKE_INSTALL_PREFIX`."
msgstr "覆盖安装前缀 :variable:`CMAKE_INSTALL_PREFIX`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:668
msgid "Strip before installing."
msgstr "安装前剥离。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:672
msgid "Enable verbose output."
msgstr "启用详细输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:674
msgid ""
"This option can be omitted if :envvar:`VERBOSE` environment variable is "
"set."
msgstr "如果设置了 VERBOSE 环境变量，则可以省略此选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:676
msgid "Run :option:`cmake --install` with no options for quick help."
msgstr "不带任何选项运行 :option:`cmake --install` 以获得快速帮助。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:679
msgid "Open a Project"
msgstr "打开一个项目"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:687
msgid ""
"Open the generated project in the associated application.  This is only "
"supported by some generators."
msgstr "在关联的应用程序中打开生成的项目。这仅由某些生成器支持。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:694
msgid "Run a Script"
msgstr "运行脚本"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:706
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:714
msgid "Define a variable for script mode."
msgstr "为脚本模式定义一个变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:712
msgid ""
"Process the given cmake file as a script written in the CMake language.  "
"No configure or generate step is performed and the cache is not modified."
"  If variables are defined using ``-D``, this must be done before the "
"``-P`` argument."
msgstr ""
"将给定的 cmake 文件处理为用 CMake "
"语言编写的脚本。没有执行配置或生成步骤，也没有修改缓存。如果使用“-D”定义变量，则必须在“-P”参数之前完成。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:717
msgid ""
"Any options after ``--`` are not parsed by CMake, but they are still "
"included in the set of :variable:`CMAKE_ARGV<n> <CMAKE_ARGV0>` variables "
"passed to the script (including the ``--`` itself)."
msgstr ""
"``--`` 之后的任何选项都不会被 CMake 解析，但它们仍然包含在传递给脚本的 :variable:`CMAKE_ARGV<n> "
"<CMAKE_ARGV0>` 变量集中（包括 ``--``本身）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:725
msgid "Run a Command-Line Tool"
msgstr "运行命令行工具"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:729
msgid "CMake provides builtin command-line tools through the signature"
msgstr "CMake 通过签名提供内置的命令行工具"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:737
msgid "Run ``cmake -E`` or ``cmake -E help`` for a summary of commands."
msgstr "运行“cmake -E”或“cmake -E help”以获得命令摘要。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:741
msgid "Available commands are:"
msgstr "可用的命令是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:747
msgid ""
"Report cmake capabilities in JSON format. The output is a JSON object with"
" the following keys:"
msgstr "以 JSON 格式报告 cmake 功能。输出是一个具有以下键的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:751
msgid "A JSON object with version information. Keys are:"
msgstr "带有版本信息的 JSON 对象。关键是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:754
msgid ""
"The full version string as displayed by cmake :option:`--version <cmake "
"--version>`."
msgstr "cmake :option:`--version <cmake --version>` 显示的完整版本字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:756
msgid "The major version number in integer form."
msgstr "整数形式的主版本号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:758
msgid "The minor version number in integer form."
msgstr "整数形式的次要版本号。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:760
msgid "The patch level in integer form."
msgstr "整数形式的补丁级别。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:762
msgid "The cmake version suffix string."
msgstr "cmake 版本后缀字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:764
msgid "A bool that is set if the cmake build is from a dirty tree."
msgstr "如果 cmake 构建来自脏树，则设置一个布尔值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:767
msgid ""
"A list available generators. Each generator is a JSON object with the "
"following keys:"
msgstr "可用生成器列表。每个生成器都是一个具有以下键的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:771
msgid "A string containing the name of the generator."
msgstr "包含生成器名称的字符串。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:772
msgid "``toolsetSupport``"
msgstr "``工具集支持``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:773
msgid "``true`` if the generator supports toolsets and ``false`` otherwise."
msgstr "如果生成器支持工具集，则为“true”，否则为“false”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:774
msgid "``platformSupport``"
msgstr "``平台支持``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:775
msgid ""
"``true`` if the generator supports platforms and ``false`` otherwise."
msgstr "如果生成器支持平台，则为“true”，否则为“false”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:781
msgid "``supportedPlatforms``"
msgstr "``支持的平台``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:779
msgid ""
"Optional member that may be present when the generator supports platform "
"specification via :variable:`CMAKE_GENERATOR_PLATFORM` (:option:`-A ... "
"<cmake -A>`).  The value is a list of platforms known to be supported."
msgstr ""
"当生成器通过 :variable:`CMAKE_GENERATOR_PLATFORM` (:option:`-A ... <cmake -A>`) "
"支持平台规范时可能存在的可选成员。该值是已知受支持的平台列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:785
msgid "``extraGenerators``"
msgstr "``额外的生成器``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:784
msgid ""
"A list of strings with all the extra generators compatible with the "
"generator."
msgstr "包含与生成器兼容的所有额外生成器的字符串列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:801
msgid "``fileApi``"
msgstr "``fileApi``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:788
msgid ""
"Optional member that is present when the :manual:`cmake-file-api(7)` is "
"available.  The value is a JSON object with one member:"
msgstr "当 :manual:`cmake-file-api(7)` 可用时出现的可选成员。该值是一个具有一个成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:792
msgid ""
"A JSON array containing zero or more supported file-api requests. Each "
"request is a JSON object with members:"
msgstr "包含零个或多个支持的文件 API 请求的 JSON 数组。每个请求都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:796
msgid "Specifies one of the supported :ref:`file-api object kinds`."
msgstr "指定一种受支持的 :ref:`file-api object kinds`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:799
msgid ""
"A JSON array whose elements are each a JSON object containing ``major`` "
"and ``minor`` members specifying non-negative integer version components."
msgstr "一个 JSON 数组，每个元素都是一个 JSON 对象，包含指定非负整数版本组件的“主要”和“次要”成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:805
msgid "``serverMode``"
msgstr "``服务器模式``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:804
msgid ""
"``true`` if cmake supports server-mode and ``false`` otherwise. Always "
"false since CMake 3.20."
msgstr "如果 cmake 支持服务器模式，则为“true”，否则为“false”。自 CMake 3.20 以来始终为 false。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:809
msgid "``tls``"
msgstr "``tls``"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:810
msgid "``true`` if TLS support is enabled and ``false`` otherwise."
msgstr "如果启用了 TLS 支持，则为“true”，否则为“false”。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:816
msgid "Concatenate files and print on the standard output."
msgstr "连接文件并在标准输出上打印。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:824
msgid ""
"Added support for the double dash argument ``--``. This basic "
"implementation of ``cat`` does not support any options, so using a option "
"starting with ``-`` will result in an error. Use ``--`` to indicate the "
"end of options, in case a file starts with ``-``."
msgstr ""
"添加了对双破折号参数“--”的支持。 ``cat`` 的基本实现不支持任何选项，因此使用以 ``-`` 开头的选项将导致错误。使用 ``--`` "
"表示选项的结尾，以防文件以 ``-`` 开头。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:833
msgid "Change the current working directory and run a command."
msgstr "更改当前工作目录并运行命令。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:837
msgid ""
"Check if ``<file1>`` is same as ``<file2>``. If files are the same, then "
"returns ``0``, if not it returns ``1``.  In case of invalid arguments, it "
"returns 2."
msgstr ""
"检查 ``<file1>`` 是否与 ``<file2>`` 相同。如果文件相同，则返回“0”，否则返回“1”。如果参数无效，则返回 2。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:847
msgid ""
"The option implies line-wise comparison and ignores LF/CRLF differences."
msgstr "该选项意味着逐行比较并忽略 LF/CRLF 差异。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:853
msgid ""
"Copy files to ``<destination>`` (either file or directory). If multiple "
"files are specified, or if ``-t`` is specified, the ``<destination>`` must"
" be directory and it must exist. If ``-t`` is not specified, the last "
"argument is assumed to be the ``<destination>``. Wildcards are not "
"supported. ``copy`` does follow symlinks. That means it does not copy "
"symlinks, but the files or directories it point to."
msgstr ""
"将文件复制到 "
"``<destination>``（文件或目录）。如果指定了多个文件，或者指定了“-t”，则“<destination>”必须是目录并且必须存在。如果未指定“-t”，则假定最后一个参数是“<目的地>”。不支持通配符。"
" ``copy`` 确实遵循符号链接。这意味着它不会复制符号链接，而是复制它指向的文件或目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:860
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:897
msgid "Support for multiple input files."
msgstr "支持多个输入文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:863
msgid "Support for ``-t`` argument."
msgstr "支持“-t”参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:868
msgid ""
"Copy content of ``<dir>...`` directories to ``<destination>`` directory. "
"If ``<destination>`` directory does not exist it will be created. "
"``copy_directory`` does follow symlinks."
msgstr ""
"将 ``<dir>...`` 目录的内容复制到 ``<destination>`` 目录。如果 ``<destination>`` "
"目录不存在，它将被创建。 ``copy_directory`` 确实遵循符号链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:872
#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:983
msgid "Support for multiple input directories."
msgstr "支持多个输入目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:875
msgid ""
"The command now fails when the source directory does not exist. Previously"
" it succeeded by creating an empty destination directory."
msgstr "当源目录不存在时，该命令现在失败。以前它通过创建一个空的目标目录成功。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:883
msgid ""
"Copy changed content of ``<dir>...`` directories to ``<destination>`` "
"directory. If ``<destination>`` directory does not exist it will be "
"created."
msgstr ""
"将 ``<dir>...`` 目录的更改内容复制到 ``<destination>`` 目录。如果 ``<destination>`` "
"目录不存在，它将被创建。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:886
msgid ""
"``copy_directory_if_different`` does follow symlinks. The command fails "
"when the source directory does not exist."
msgstr "``copy_directory_if_different`` 确实遵循符号链接。当源目录不存在时，命令失败。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:891
msgid ""
"Copy files to ``<destination>`` (either file or directory) if they have "
"changed. If multiple files are specified, the ``<destination>`` must be "
"directory and it must exist. ``copy_if_different`` does follow symlinks."
msgstr ""
"如果文件已更改，则将文件复制到 ``<destination>``（文件或目录）。如果指定了多个文件，``<destination>`` "
"必须是目录并且它必须存在。 ``copy_if_different`` 确实遵循符号链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:902
msgid "Create a symbolic link ``<new>`` naming ``<old>``."
msgstr "创建一个符号链接 ``<new>`` 命名为 ``<old>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:904
msgid "Support for creating symlinks on Windows."
msgstr "支持在 Windows 上创建符号链接。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:908
msgid ""
"Path to where ``<new>`` symbolic link will be created has to exist "
"beforehand."
msgstr "``<new>`` 符号链接将被创建的路径必须事先存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:914
msgid "Create a hard link ``<new>`` naming ``<old>``."
msgstr "创建一个硬链接 ``<new>`` 命名为 ``<old>``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:917
msgid ""
"Path to where ``<new>`` hard link will be created has to exist beforehand."
" ``<old>`` has to exist beforehand."
msgstr "必须预先存在创建“<new>”硬链接的路径。 ``<old>`` 必须事先存在。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:922
msgid "Displays arguments as text."
msgstr "将参数显示为文本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:926
msgid "Displays arguments as text but no new line."
msgstr "将参数显示为文本但不换行。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:932
msgid "Run command in a modified environment. Options are:"
msgstr "在修改后的环境中运行命令。选项是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:938
msgid "Replaces the current value of ``NAME`` with ``VALUE``."
msgstr "将 ``NAME`` 的当前值替换为 ``VALUE``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:942
msgid "Unsets the current value of ``NAME``."
msgstr "取消设置 ``NAME`` 的当前值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:948
msgid ""
"Apply a single :prop_test:`ENVIRONMENT_MODIFICATION` operation to the "
"modified environment."
msgstr "将单个 :prop_test:`ENVIRONMENT_MODIFICATION` 操作应用于修改后的环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:951
msgid ""
"The ``NAME=VALUE`` and ``--unset=NAME`` options are equivalent to "
"``--modify NAME=set:VALUE`` and ``--modify NAME=unset:``, respectively. "
"Note that ``--modify NAME=reset:`` resets ``NAME`` to the value it had "
"when :program:`cmake` launched (or unsets it), not to the most recent "
"``NAME=VALUE`` option."
msgstr ""
"``NAME=VALUE`` 和 ``--unset=NAME`` 选项分别等同于 ``--modify NAME=set:VALUE`` 和 "
"``--modify NAME=unset:``。请注意，``--modify NAME=reset:`` 将 ``NAME`` 重置为 cmake"
" 启动时的值（或取消设置），而不是最近的 ``NAME=VALUE``选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:961
msgid ""
"Added support for the double dash argument ``--``. Use ``--`` to stop "
"interpreting options/environment variables and treat the next argument as "
"the command, even if it start with ``-`` or contains a ``=``."
msgstr ""
"添加了对双破折号参数“--”的支持。使用``--``停止解释选项/环境变量并将下一个参数视为命令，即使它以``-``开头或包含``=``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:969
msgid "Display the current environment variables."
msgstr "显示当前环境变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:975
msgid "Do nothing, with an exit code of 1."
msgstr "什么也不做，退出代码为 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:979
msgid ""
"Create ``<dir>`` directories.  If necessary, create parent directories "
"too.  If a directory already exists it will be silently ignored."
msgstr "创建``<dir>`` 目录。如有必要，也创建父目录。如果一个目录已经存在，它将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:988
msgid "Create MD5 checksum of files in ``md5sum`` compatible format::"
msgstr "以“md5sum”兼容格式创建文件的 MD5 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:997
msgid "Create SHA1 checksum of files in ``sha1sum`` compatible format::"
msgstr "以 ``sha1sum`` 兼容格式创建文件的 SHA1 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1006
msgid "Create SHA224 checksum of files in ``sha224sum`` compatible format::"
msgstr "以 ``sha224sum`` 兼容格式创建文件的 SHA224 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1015
msgid "Create SHA256 checksum of files in ``sha256sum`` compatible format::"
msgstr "以 ``sha256sum`` 兼容格式创建文件的 SHA256 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1024
msgid "Create SHA384 checksum of files in ``sha384sum`` compatible format::"
msgstr "以 ``sha384sum`` 兼容格式创建文件的 SHA384 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1033
msgid "Create SHA512 checksum of files in ``sha512sum`` compatible format::"
msgstr "以 ``sha512sum`` 兼容格式创建文件的 SHA512 校验和："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1042
msgid ""
"Remove the file(s). The planned behavior was that if any of the listed "
"files already do not exist, the command returns a non-zero exit code, but "
"no message is logged. The ``-f`` option changes the behavior to return a "
"zero exit code (i.e. success) in such situations instead. ``remove`` does "
"not follow symlinks. That means it remove only symlinks and not files it "
"point to."
msgstr ""
"删除文件。计划的行为是，如果任何列出的文件已经不存在，该命令将返回一个非零退出代码，但不会记录任何消息。 ``-f`` "
"选项改变了在这种情况下返回零退出代码（即成功）的行为。 ``remove`` 不遵循符号链接。这意味着它只删除符号链接而不删除它指向的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1049
msgid ""
"The implementation was buggy and always returned 0. It cannot be fixed "
"without breaking backwards compatibility. Use ``rm`` instead."
msgstr "实现有问题，总是返回 0。如果不破坏向后兼容性，就无法修复它。请改用 ``rm``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1056
msgid ""
"Remove ``<dir>`` directories and their contents. If a directory does not "
"exist it will be silently ignored. Use ``rm`` instead."
msgstr "删除 ``<dir>`` 目录及其内容。如果目录不存在，它将被忽略。请改用 ``rm``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1060
msgid "Support for multiple directories."
msgstr "支持多个目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1063
msgid ""
"If ``<dir>`` is a symlink to a directory, just the symlink will be "
"removed."
msgstr "如果 ``<dir>`` 是目录的符号链接，则仅符号链接将被删除。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1068
msgid ""
"Rename a file or directory (on one volume). If file with the ``<newname>``"
" name already exists, then it will be silently replaced."
msgstr "重命名文件或目录（在一个卷上）。如果具有 ``<newname>`` 名称的文件已经存在，那么它将被静默替换。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1075
msgid ""
"Remove the files ``<file>`` or directories ``<dir>``. Use ``-r`` or ``-R``"
" to remove directories and their contents recursively. If any of the "
"listed files/directories do not exist, the command returns a non-zero exit"
" code, but no message is logged. The ``-f`` option changes the behavior to"
" return a zero exit code (i.e. success) in such situations instead. Use "
"``--`` to stop interpreting options and treat all remaining arguments as "
"paths, even if they start with ``-``."
msgstr ""
"删除文件``<file>`` 或目录``<dir>``。使用 ``-r`` 或 ``-R`` "
"递归删除目录及其内容。如果列出的任何文件/目录不存在，该命令将返回一个非零退出代码，但不会记录任何消息。 ``-f`` "
"选项改变了在这种情况下返回零退出代码（即成功）的行为。使用 ``--`` 停止解释选项并将所有剩余参数视为路径，即使它们以 ``-`` 开头。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1087
msgid "Sleep for given number of seconds."
msgstr "睡眠给定的秒数。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1091
msgid "Create or extract a tar or zip archive.  Options are:"
msgstr "创建或提取 tar 或 zip 存档。选项是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1097
msgid ""
"Create a new archive containing the specified files. If used, the "
"``<pathname>...`` argument is mandatory."
msgstr "创建一个包含指定文件的新存档。如果使用，``<pathname>...`` 参数是必需的。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1102
msgid "Extract to disk from the archive."
msgstr "从存档中提取到磁盘。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1104
msgid ""
"The ``<pathname>...`` argument could be used to extract only selected "
"files or directories. When extracting selected files or directories, you "
"must provide their exact names including the path, as printed by list "
"(``-t``)."
msgstr ""
"``<pathname>...`` 参数可用于仅提取选定的文件或目录。提取选定的文件或目录时，您必须提供它们的确切名称，包括路径，如 list "
"(``-t``) 所示。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1112
msgid "List archive contents."
msgstr "列出存档内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1114
msgid ""
"The ``<pathname>...`` argument could be used to list only selected files "
"or directories."
msgstr "``<pathname>...`` 参数可用于仅列出选定的文件或目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1120
msgid "Produce verbose output."
msgstr "产生详细的输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1124
msgid "Compress the resulting archive with gzip."
msgstr "使用 gzip 压缩生成的存档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1128
msgid "Compress the resulting archive with bzip2."
msgstr "使用 bzip2 压缩生成的存档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1134
msgid "Compress the resulting archive with XZ."
msgstr "使用 XZ 压缩生成的存档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1140
msgid "Compress the resulting archive with Zstandard."
msgstr "使用 Zstandard 压缩生成的存档。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1146
msgid ""
"Read file names from the given file, one per line. Blank lines are "
"ignored.  Lines may not start in ``-`` except for ``--add-file=<name>`` to"
" add files whose names start in ``-``."
msgstr ""
"从给定文件中读取文件名，每行一个。空行被忽略。行不能以 ``-`` 开头，除了 ``--add-file=<name>`` 以添加名称以 ``-``"
" 开头的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1155
msgid ""
"Specify the format of the archive to be created. Supported formats are: "
"``7zip``, ``gnutar``, ``pax``, ``paxr`` (restricted pax, default), and "
"``zip``."
msgstr ""
"指定要创建的存档的格式。支持的格式有：``7zip``、``gnutar``、``pax``、``paxr``（限制 pax，默认）和 "
"``zip``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1163
msgid "Specify modification time recorded in tarball entries."
msgstr "指定 tarball 条目中记录的修改时间。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1169
msgid ""
"Use current local timestamp instead of extracting file timestamps from the"
" archive."
msgstr "使用当前本地时间戳而不是从存档中提取文件时间戳。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1176
msgid ""
"Stop interpreting options and treat all remaining arguments as file names,"
" even if they start with ``-``."
msgstr "停止解释选项并将所有剩余参数视为文件名，即使它们以“-”开头。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1179
msgid "LZMA (7zip) support."
msgstr "LZMA (7zip) 支持。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1182
msgid ""
"The command now continues adding files to an archive even if some of the "
"files are not readable.  This behavior is more consistent with the classic"
" ``tar`` tool. The command now also parses all flags, and if an invalid "
"flag was provided, a warning is issued."
msgstr ""
"即使某些文件不可读，该命令现在仍会继续将文件添加到存档中。此行为与经典的“tar”工具更一致。该命令现在还会解析所有标志，如果提供了无效标志，则会发出警告。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1192
msgid "Run command and display elapsed time."
msgstr "运行命令并显示运行时间。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1194
msgid ""
"The command now properly passes arguments with spaces or special "
"characters through to the child process. This may break scripts that "
"worked around the bug with their own extra quoting or escaping."
msgstr "该命令现在可以正确地将带有空格或特殊字符的参数传递给子进程。这可能会破坏使用自己的额外引号或转义来解决该错误的脚本。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1201
msgid ""
"Creates ``<file>`` if file do not exist. If ``<file>`` exists, it is "
"changing ``<file>`` access and modification times."
msgstr "如果文件不存在，则创建 ``<file>``。如果 ``<file>`` 存在，它正在改变 ``<file>`` 访问和修改时间。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1206
msgid ""
"Touch a file if it exists but do not create it.  If a file does not exist "
"it will be silently ignored."
msgstr "如果文件存在但不创建它，请触摸该文件。如果文件不存在，它将被静默忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1213
msgid "Do nothing, with an exit code of 0."
msgstr "什么都不做，退出代码为 0。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1216
msgid "Windows-specific Command-Line Tools"
msgstr "Windows 特定的命令行工具"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1218
msgid "The following ``cmake -E`` commands are available only on Windows:"
msgstr "以下 ``cmake -E`` 命令仅在 Windows 上可用："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1222
msgid "Delete Windows registry value."
msgstr "删除 Windows 注册表值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1228
msgid ""
"Displays a batch file which sets the environment for the provided Windows "
"CE SDK installed in VS2005."
msgstr "显示一个批处理文件，它为安装在 VS2005 中的提供的 Windows CE SDK 设置环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1235
msgid ""
"Displays a batch file which sets the environment for the provided Windows "
"CE SDK installed in VS2008."
msgstr "显示一个批处理文件，它为安装在 VS2008 中的提供的 Windows CE SDK 设置环境。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1240
msgid "Write Windows registry value."
msgstr "写入 Windows 注册表值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1244
msgid "Run the Find-Package Tool"
msgstr "运行查找包工具"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1248
msgid "CMake provides a pkg-config like helper for Makefile-based projects:"
msgstr "CMake 为基于 Makefile 的项目提供了类似 pkg-config 的帮助程序："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1254
msgid ""
"It searches a package using :command:`find_package()` and prints the "
"resulting flags to stdout.  This can be used instead of pkg-config to find"
" installed libraries in plain Makefile-based projects or in autoconf-based"
" projects (via ``share/aclocal/cmake.m4``)."
msgstr ""
"它使用 find_package() 搜索包并将结果标志打印到标准输出。这可以用来代替 pkg-config 在普通的基于 Makefile "
"的项目或基于 autoconf 的项目中查找已安装的库（通过 ``share/aclocal/cmake.m4``）。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1260
msgid ""
"This mode is not well-supported due to some technical limitations. It is "
"kept for compatibility but should not be used in new projects."
msgstr "由于某些技术限制，此模式未得到很好的支持。保留它是为了兼容性，但不应在新项目中使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1266
msgid "Run a Workflow Preset"
msgstr "运行工作流程预设"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1270
msgid ""
":manual:`CMake Presets <cmake-presets(7)>` provides a way to execute "
"multiple build steps in order:"
msgstr ":manual:`CMake Presets <cmake-presets(7)>` 提供了一种按顺序执行多个构建步骤的方法："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1277
msgid "The options are:"
msgstr "选项是："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1281
msgid "Select a :ref:`Workflow Preset` using one of the following options."
msgstr "使用以下选项之一选择 :ref:`Workflow Preset`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1287
msgid ""
"Use a workflow preset to specify a workflow. The project binary directory "
"is inferred from the initial configure preset. The current working "
"directory must contain CMake preset files. See :manual:`preset <cmake-"
"presets(7)>` for more details."
msgstr ""
"使用工作流预设来指定工作流。项目二进制目录是从初始配置预设中推断出来的。当前工作目录必须包含 CMake "
"预设文件。有关详细信息，请参阅 :manual:`preset <cmake-presets(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1294
msgid ""
"Lists the available workflow presets. The current working directory must "
"contain CMake preset files."
msgstr "列出可用的工作流程预设。当前工作目录必须包含 CMake 预设文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1304
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:444
msgid "View Help"
msgstr "查看帮助"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1308
msgid "To print selected pages from the CMake documentation, use"
msgstr "要打印 CMake 文档中的选定页面，请使用"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1314
msgid "with one of the following options:"
msgstr "使用以下选项之一："

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1318
msgid "To view the presets available for a project, use"
msgstr "要查看项目可用的预设，请使用"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1328
msgid "Return Value (Exit Code)"
msgstr "返回值（退出代码）"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1330
msgid ""
"Upon regular termination, the :program:`cmake` executable returns the exit"
" code ``0``."
msgstr "在正常终止时， :program:`cmake` 可执行文件返回退出代码 ``0``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cmake.1.rst:1332
msgid ""
"If termination is caused by the command :command:`message(FATAL_ERROR)`, "
"or another error condition, then a non-zero exit code is returned."
msgstr "如果终止是由命令 :command:`message(FATAL_ERROR)` 或其他错误条件引起的，则返回非零退出代码。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack-generators.7.rst:4
msgid "cpack-generators(7)"
msgstr "cpack 生成器(7)"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack-generators.7.rst:11
msgid "Generators"
msgstr "生成器"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:4
msgid "cpack(1)"
msgstr "cpack(1)"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:16
msgid ""
"The :program:`cpack` executable is the CMake packaging program.  It "
"generates installers and source packages in a variety of formats."
msgstr ":program:`cpack` 可执行文件是 CMake 打包程序。它生成各种格式的安装程序和源包。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:19
msgid ""
"For each installer or package format, :program:`cpack` has a specific "
"backend, called \"generator\". A generator is responsible for generating "
"the required inputs and invoking the specific package creation tools. "
"These installer or package generators are not to be confused with the "
"makefile generators of the :manual:`cmake <cmake(1)>` command."
msgstr ""
"对于每个安装程序或包格式， :program:`cpack` "
"都有一个特定的后端，称为“生成器”。生成器负责生成所需的输入并调用特定的包创建工具。不要将这些安装程序或包生成器与 :manual:`cmake "
"<cmake(1)>` 命令的 makefile 生成器混淆。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:25
msgid ""
"All supported generators are specified in the :manual:`cpack-generators "
"<cpack-generators(7)>` manual.  The command ``cpack --help`` prints a list"
" of generators supported for the target platform.  Which of them are to be"
" used can be selected through the :variable:`CPACK_GENERATOR` variable or "
"through the command-line option :option:`-G <cpack -G>`."
msgstr ""
"所有支持的生成器都在 :manual:`cpack-generators <cpack-generators(7)>` 手册中指定。命令 cpack"
" --help 打印目标平台支持的生成器列表。可以通过 CPACK_GENERATOR 变量或命令行选项 -G <cpack -G> "
"来选择要使用它们中的哪一个。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:31
msgid ""
"The :program:`cpack` program is steered by a configuration file written in"
" the :manual:`CMake language <cmake-language(7)>`. Unless chosen "
"differently through the command-line option :option:`--config <cpack "
"--config>`, the file ``CPackConfig.cmake`` in the current directory is "
"used."
msgstr ""
":program:`cpack` 程序由以 :manual:`CMake 语言 <cmake-language(7)>` "
"编写的配置文件控制。除非通过命令行选项 :option:`--config <cpack --config>` 选择不同，否则使用当前目录中的文件 "
"``CPackConfig.cmake``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:36
msgid ""
"In the standard CMake workflow, the file ``CPackConfig.cmake`` is "
"generated by the :manual:`cmake <cmake(1)>` executable, provided the "
":module:`CPack` module is included by the project's ``CMakeLists.txt`` "
"file."
msgstr ""
"在标准 CMake 工作流程中，文件“CPackConfig.cmake”由 :manual:`cmake <cmake(1)>` "
"可执行文件生成，前提是 CPack 模块包含在项目的“CMakeLists”中.txt`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:47
msgid ""
"``<generators>`` is a :ref:`semicolon-separated list <CMake Language "
"Lists>` of generator names.  :program:`cpack` will iterate through this "
"list and produce package(s) in that generator's format according to the "
"details provided in the ``CPackConfig.cmake`` configuration file.  If this"
" option is not given, the :variable:`CPACK_GENERATOR` variable determines "
"the default set of generators that will be used."
msgstr ""
"``<generators>`` 是 :ref:`分号分隔的生成器名称列表 <CMake Language Lists>`。 "
":program:`cpack` 将遍历此列表并根据 ``CPackConfig.cmake`` "
"配置文件中提供的详细信息以该生成器的格式生成包。如果未给出此选项，CPACK_GENERATOR 变量将确定将使用的默认生成器集。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:56
msgid ""
"Specify the project configuration(s) to be packaged (e.g. ``Debug``, "
"``Release``, etc.), where ``<configs>`` is a :ref:`semicolon-separated "
"list <CMake Language Lists>`. When the CMake project uses a multi-"
"configuration generator such as Xcode or Visual Studio, this option is "
"needed to tell :program:`cpack` which built executables to include in the "
"package. The user is responsible for ensuring that the configuration(s) "
"listed have already been built before invoking :program:`cpack`."
msgstr ""
"指定要打包的项目配置（例如 ``Debug``、``Release`` 等），其中 ``<configs>`` 是 :ref:`分号分隔的列表 "
"<CMake Language Lists >`。当 CMake 项目使用 Xcode 或 Visual Studio "
"等多配置生成器时，需要此选项来告诉 :program:`cpack` 哪个构建的可执行文件包含在包中。用户负责确保在调用 cpack "
"之前已经构建了列出的配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:67
msgid ""
"Set a CPack variable.  This will override any value set for ``<var>`` in "
"the input file read by :program:`cpack`."
msgstr "设置 CPack 变量。这将覆盖 cpack 读取的输入文件中为 ``<var>`` 设置的任何值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:72
msgid ""
"Specify the configuration file read by :program:`cpack` to provide the "
"packaging details.  By default, ``CPackConfig.cmake`` in the current "
"directory will be used."
msgstr ""
"指定 :program:`cpack` 读取的配置文件以提供打包详细信息。默认情况下，将使用当前目录中的``CPackConfig.cmake``。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:78
msgid ""
"Run :program:`cpack` with verbose output.  This can be used to show more "
"details from the package generation tools and is suitable for project "
"developers."
msgstr "运行带有详细输出的 :program:`cpack`。这可用于显示包生成工具的更多详细信息，适合项目开发人员。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:83
msgid ""
"Run :program:`cpack` with debug output.  This option is intended mainly "
"for the developers of :program:`cpack` itself and is not normally needed "
"by project developers."
msgstr ""
"使用调试输出运行 :program:`cpack`。此选项主要供 :program:`cpack` 本身的开发人员使用，项目开发人员通常不需要。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:89
msgid "Put the underlying cmake scripts in trace mode."
msgstr "将底层 cmake 脚本置于跟踪模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:93
msgid "Put the underlying cmake scripts in expanded trace mode."
msgstr "将底层 cmake 脚本置于扩展跟踪模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:97
msgid ""
"Override/define the value of the :variable:`CPACK_PACKAGE_NAME` variable "
"used for packaging.  Any value set for this variable in the "
"``CPackConfig.cmake`` file will then be ignored."
msgstr ""
"覆盖/定义用于打包的 CPACK_PACKAGE_NAME 变量的值。在 CPackConfig.cmake 文件中为此变量设置的任何值都将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:103
msgid ""
"Override/define the value of the :variable:`CPACK_PACKAGE_VERSION` "
"variable used for packaging.  It will override a value set in the "
"``CPackConfig.cmake`` file or one automatically computed from "
":variable:`CPACK_PACKAGE_VERSION_MAJOR`, "
":variable:`CPACK_PACKAGE_VERSION_MINOR` and "
":variable:`CPACK_PACKAGE_VERSION_PATCH`."
msgstr ""
"覆盖/定义用于打包的 CPACK_PACKAGE_VERSION 变量的值。它将覆盖 CPackConfig.cmake 文件中设置的值或从 "
"CPACK_PACKAGE_VERSION_MAJOR 、CPACK_PACKAGE_VERSION_MINOR 和 "
"CPACK_PACKAGE_VERSION_PATCH 自动计算的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:112
msgid ""
"Override/define :variable:`CPACK_PACKAGE_DIRECTORY`, which controls the "
"directory where CPack will perform its packaging work.  The resultant "
"package(s) will be created at this location by default and a "
"``_CPack_Packages`` subdirectory will also be created below this directory"
" to use as a working area during package creation."
msgstr ""
"覆盖/定义 :variable:`CPACK_PACKAGE_DIRECTORY`，它控制 CPack "
"将执行其打包工作的目录。默认情况下，生成的包将在此位置创建，并且还将在此目录下创建一个 ``_CPack_Packages`` "
"子目录，以用作包创建期间的工作区域。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:120
msgid "Override/define :variable:`CPACK_PACKAGE_VENDOR`."
msgstr "覆盖/定义 :variable:`CPACK_PACKAGE_VENDOR`。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:124
msgid "Use a preset from :manual:`cmake-presets(7)`."
msgstr "使用 :manual:`cmake-presets(7)` 中的预设。"

#: ../../cmake-prefix/src/cmake/Help/manual/cpack.1.rst:128
msgid "List presets from :manual:`cmake-presets(7)`."
msgstr "列出来自 :manual:`cmake-presets(7)` 的预设。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:4
msgid "ctest(1)"
msgstr "ctest(1)"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:35
msgid ""
"The :program:`ctest` executable is the CMake test driver program. CMake-"
"generated build trees created for projects that use the "
":command:`enable_testing` and :command:`add_test` commands have testing "
"support. This program will run the tests and report results."
msgstr ""
":program:`ctest` 可执行文件是 CMake 测试驱动程序。为使用 :command:`enable_testing` 和 "
":command:`add_test` 命令的项目创建的 CMake 生成的构建树具有测试支持。该程序将运行测试并报告结果。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:43
msgid "Run Tests"
msgstr "运行测试"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:49
msgid ""
"Use a test preset to specify test options. The project binary directory is"
" inferred from the ``configurePreset`` key. The current working directory "
"must contain CMake preset files. See :manual:`preset <cmake-presets(7)>` "
"for more details."
msgstr ""
"使用测试预设指定测试选项。项目二进制目录是从 ``configurePreset`` 键推断出来的。当前工作目录必须包含 CMake "
"预设文件。有关详细信息，请参阅 :manual:`preset <cmake-presets(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:56
msgid ""
"Lists the available test presets. The current working directory must "
"contain CMake preset files."
msgstr "列出可用的测试预设。当前工作目录必须包含 CMake 预设文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:61
msgid "Choose configuration to test."
msgstr "选择要测试的配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:63
msgid ""
"Some CMake-generated build trees can have multiple build configurations in"
" the same tree.  This option can be used to specify which one should be "
"tested.  Example configurations are ``Debug`` and ``Release``."
msgstr "一些 CMake 生成的构建树可以在同一棵树中有多个构建配置。此选项可用于指定应测试哪一个。示例配置是“调试”和“发布”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:70
msgid "Enable short progress output from tests."
msgstr "启用测试的短期进度输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:72
msgid ""
"When the output of :program:`ctest` is being sent directly to a terminal, "
"the progress through the set of tests is reported by updating the same "
"line rather than printing start and end messages for each test on new "
"lines. This can significantly reduce the verbosity of the test output. "
"Test completion messages are still output on their own line for failed "
"tests and the final test summary will also still be logged."
msgstr ""
"当 :program:`ctest` "
"的输出直接发送到终端时，通过更新同一行而不是在新行上为每个测试打印开始和结束消息来报告测试集的进度。这可以显着降低测试输出的冗长程度。对于失败的测试，测试完成消息仍会在其自己的行上输出，并且最终测试摘要也仍将被记录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:79
msgid ""
"This option can also be enabled by setting the environment variable "
":envvar:`CTEST_PROGRESS_OUTPUT`."
msgstr "也可以通过设置环境变量 CTEST_PROGRESS_OUTPUT 来启用此选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:84
msgid "Enable verbose output from tests."
msgstr "启用测试的详细输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:86
msgid ""
"Test output is normally suppressed and only summary information is "
"displayed.  This option will show all test output."
msgstr "测试输出通常被抑制，只显示摘要信息。此选项将显示所有测试输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:91
msgid "Enable more verbose output from tests."
msgstr "从测试中启用更详细的输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:93
msgid ""
"Test output is normally suppressed and only summary information is "
"displayed.  This option will show even more test output."
msgstr "测试输出通常被抑制，只显示摘要信息。此选项将显示更多测试输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:98
msgid "Displaying more verbose internals of CTest."
msgstr "显示更详细的 CTest 内部结构。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:100
msgid ""
"This feature will result in a large number of output that is mostly useful"
" for debugging dashboard problems."
msgstr "此功能将产生大量输出，这些输出主要用于调试仪表板问题。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:105
msgid ""
"Output anything outputted by the test program if the test should fail. "
"This option can also be enabled by setting the "
":envvar:`CTEST_OUTPUT_ON_FAILURE` environment variable"
msgstr "如果测试失败，则输出测试程序输出的任何内容。也可以通过设置 CTEST_OUTPUT_ON_FAILURE 环境变量来启用此选项"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:111
msgid "Stop running the tests when the first failure happens."
msgstr "当第一次失败发生时停止运行测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:115
msgid "Enable failover."
msgstr "启用故障转移。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:117
msgid ""
"This option allows CTest to resume a test set execution that was "
"previously interrupted.  If no interruption occurred, the ``-F`` option "
"will have no effect."
msgstr "此选项允许 CTest 恢复先前中断的测试集执行。如果没有发生中断，“-F”选项将无效。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:123
msgid "Run the tests in parallel using the given number of jobs."
msgstr "使用给定数量的作业并行运行测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:125
msgid ""
"This option tells CTest to run the tests in parallel using given number of"
" jobs. This option can also be set by setting the "
":envvar:`CTEST_PARALLEL_LEVEL` environment variable."
msgstr ""
"此选项告诉 CTest 使用给定数量的作业并行运行测试。此选项也可以通过设置 CTEST_PARALLEL_LEVEL 环境变量来设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:129
msgid ""
"This option can be used with the :prop_test:`PROCESSORS` test property."
msgstr "此选项可与 :prop_test:`PROCESSORS` 测试属性一起使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:131
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:343
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:353
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1134
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1166
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1220
msgid "See `Label and Subproject Summary`_."
msgstr "请参阅“标签和子项目摘要”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:135
msgid ""
"Run CTest with :ref:`resource allocation <ctest-resource-allocation>` "
"enabled, using the :ref:`resource specification file <ctest-resource-"
"specification-file>` specified in ``<file>``."
msgstr ""
"使用在 ``<file>`` 中指定的:ref:`资源规范文件 <ctest-resource-specification-file>` "
"启用资源分配 <ctest-resource-allocation>` 运行 CTest。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:140
msgid ""
"When :program:`ctest` is run as a `Dashboard Client`_ this sets the "
"``ResourceSpecFile`` option of the `CTest Test Step`_."
msgstr ""
"当 :program:`ctest` 作为 `Dashboard Client`_ 运行时，这会设置 `CTest Test Step`_ 的 "
"``ResourceSpecFile`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:145
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1223
msgid ""
"While running tests in parallel (e.g. with :option:`-j <ctest -j>`), try "
"not to start tests when they may cause the CPU load to pass above a given "
"threshold."
msgstr "在并行运行测试时（例如使用 :option:`-j <ctest -j>`），尽量不要在可能导致 CPU 负载超过给定阈值时开始测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:149
msgid ""
"When :program:`ctest` is run as a `Dashboard Client`_ this sets the "
"``TestLoad`` option of the `CTest Test Step`_."
msgstr ""
"当 :program:`ctest` 作为 `Dashboard Client`_ 运行时，这会设置 `CTest 测试步骤`_ 的 "
"``TestLoad`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:154
msgid "Make CTest quiet."
msgstr "让 CTest 安静下来。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:156
msgid ""
"This option will suppress all the output.  The output log file will still "
"be generated if the :option:`--output-log <ctest --output-log>` is "
"specified.  Options such as :option:`--verbose <ctest --verbose>`, "
":option:`--extra-verbose <ctest --extra-verbose>`, and :option:`--debug "
"<ctest --debug>` are ignored if ``--quiet`` is specified."
msgstr ""
"此选项将抑制所有输出。如果指定了 :option:`--output-log <ctest --output-"
"log>`，输出日志文件仍会生成。选项，例如 :option:`--verbose <ctest "
"--verbose>`、 :option:`--extra-verbose <ctest --extra-verbose>` 和 "
":option:`--debug <ctest --debug >` 如果指定了 ``--quiet`` 将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:165
msgid "Output to log file."
msgstr "输出到日志文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:167
msgid ""
"This option tells CTest to write all its output to a ``<file>`` log file."
msgstr "此选项告诉 CTest 将其所有输出写入 ``<file>`` 日志文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:173
msgid "Write test results in JUnit format."
msgstr "以 JUnit 格式编写测试结果。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:175
msgid ""
"This option tells CTest to write test results to ``<file>`` in JUnit XML "
"format. If ``<file>`` already exists, it will be overwritten. If using the"
" :option:`-S <ctest -S>` option to run a dashboard script, use the "
"``OUTPUT_JUNIT`` keyword with the :command:`ctest_test` command instead."
msgstr ""
"此选项告诉 CTest 以 JUnit XML 格式将测试结果写入``<file>``。如果 ``<file>`` "
"已经存在，它将被覆盖。如果使用 :option:`-S <ctest -S>` "
"选项运行仪表板脚本，请使用带有 :command:`ctest_test` 命令的``OUTPUT_JUNIT`` 关键字。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:182
msgid "Disable actual execution of tests."
msgstr "禁用测试的实际执行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:184
msgid ""
"This option tells CTest to list the tests that would be run but not "
"actually run them.  Useful in conjunction with the :option:`-R <ctest -R>`"
" and :option:`-E <ctest -E>` options."
msgstr ""
"此选项告诉 CTest 列出将要运行但实际上不运行的测试。与 :option:`-R <ctest -R>` 和 :option:`-E "
"<ctest -E>` 选项结合使用很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:190
msgid "The ``--show-only`` option accepts a ``<format>`` value."
msgstr "``--show-only`` 选项接受一个 ``<format>`` 值。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:195
msgid ""
"Human-friendly output.  This is not guaranteed to be stable. This is the "
"default."
msgstr "人性化的输出。这不能保证稳定。这是默认设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:199
msgid ""
"Dump the test information in JSON format. See `Show as JSON Object "
"Model`_."
msgstr "以JSON格式转储测试信息。请参阅“显示为 JSON 对象模型”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:204
msgid ""
"Run tests with labels matching regular expression as described under "
":ref:`string(REGEX) <Regex Specification>`."
msgstr "如 :ref:`string(REGEX) <Regex Specification>` 中所述，使用与正则表达式匹配的标签运行测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:207
msgid ""
"This option tells CTest to run only the tests whose labels match the given"
" regular expression.  When more than one ``-L`` option is given, a test "
"will only be run if each regular expression matches at least one of the "
"test's labels (i.e. the multiple ``-L`` labels form an ``AND`` "
"relationship).  See `Label Matching`_."
msgstr ""
"此选项告诉 CTest "
"仅运行标签与给定正则表达式匹配的测试。当给出多个“-L”选项时，只有当每个正则表达式至少匹配一个测试标签（即多个“-L”标签形成一个“AND”）时，测试才会运行关系）。请参阅“标签匹配”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:215
msgid "Run tests matching regular expression."
msgstr "运行匹配正则表达式的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:217
msgid ""
"This option tells CTest to run only the tests whose names match the given "
"regular expression."
msgstr "此选项告诉 CTest 仅运行名称与给定正则表达式匹配的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:222
msgid "Exclude tests matching regular expression."
msgstr "排除匹配正则表达式的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:224
msgid ""
"This option tells CTest to NOT run the tests whose names match the given "
"regular expression."
msgstr "此选项告诉 CTest 不要运行名称与给定正则表达式匹配的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:229
msgid "Exclude tests with labels matching regular expression."
msgstr "排除标签与正则表达式匹配的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:231
msgid ""
"This option tells CTest to NOT run the tests whose labels match the given "
"regular expression.  When more than one ``-LE`` option is given, a test "
"will only be excluded if each regular expression matches at least one of "
"the test's labels (i.e. the multiple ``-LE`` labels form an ``AND`` "
"relationship).  See `Label Matching`_."
msgstr ""
"此选项告诉 CTest 不要运行标签与给定正则表达式匹配的测试。当给出多个 ``-LE`` 选项时，仅当每个正则表达式匹配至少一个测试标签（即多个 "
"``-LE`` 标签形成一个 ``AND`` 时，测试才会被排除关系）。请参阅“标签匹配”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:239
msgid ""
"Exclude fixtures matching ``<regex>`` from automatically adding any tests "
"to the test set."
msgstr "从自动将任何测试添加到测试集中排除匹配``<regex>`` 的装置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:242
msgid ""
"If a test in the set of tests to be executed requires a particular "
"fixture, that fixture's setup and cleanup tests would normally be added to"
" the test set automatically. This option prevents adding setup or cleanup "
"tests for fixtures matching the ``<regex>``. Note that all other fixture "
"behavior is retained, including test dependencies and skipping tests that "
"have fixture setup tests that fail."
msgstr ""
"如果要执行的测试集中的一个测试需要特定的夹具，则该夹具的设置和清理测试通常会自动添加到测试集中。此选项可防止为匹配 ``<regex>`` "
"的装置添加设置或清理测试。请注意，保留所有其他夹具行为，包括测试依赖项和跳过具有失败的夹具设置测试的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:251
msgid ""
"Same as :option:`-FA <ctest -FA>` except only matching setup tests are "
"excluded."
msgstr "与 :option:`-FA <ctest -FA>` 相同，除了仅排除匹配的设置测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:256
msgid ""
"Same as :option:`-FA <ctest -FA>` except only matching cleanup tests are "
"excluded."
msgstr "与 :option:`-FA <ctest -FA>` 相同，除了仅排除匹配的清理测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:261
msgid "Run a specific number of tests by number."
msgstr "按编号运行特定数量的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:263
msgid ""
"This option causes CTest to run tests starting at number ``Start``, ending"
" at number ``End``, and incrementing by ``Stride``.  Any additional "
"numbers after ``Stride`` are considered individual test numbers.  "
"``Start``, ``End``, or ``Stride`` can be empty.  Optionally a file can be "
"given that contains the same syntax as the command line."
msgstr ""
"此选项使 CTest 运行从数字“Start”开始，以“End”结束，并以“Stride”递增的测试。 ``Stride`` "
"之后的任何附加数字都被视为单独的测试数字。 ``Start``、``End`` 或 ``Stride`` "
"可以为空。可以选择提供一个包含与命令行相同语法的文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:271
msgid ""
"Take the Union of :option:`-I <ctest -I>` and :option:`-R <ctest -R>`."
msgstr "采用 :option:`-I <ctest -I>` 和 :option:`-R <ctest -R>` 的联合。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:273
msgid ""
"When both :option:`-R <ctest -R>` and :option:`-I <ctest -I>` are "
"specified by default the intersection of tests are run.  By specifying "
"``-U`` the union of tests is run instead."
msgstr ""
"当同时指定 :option:`-R <ctest -R>` 和 :option:`-I <ctest -I>` 时，默认运行测试的交集。通过指定 "
"``-U`` 测试联合运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:279
msgid "Run only the tests that failed previously."
msgstr "只运行之前失败的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:281
msgid ""
"This option tells CTest to perform only the tests that failed during its "
"previous run.  When this option is specified, CTest ignores all other "
"options intended to modify the list of tests to run ( :option:`-L <ctest "
"-L>`, :option:`-R <ctest -R>`, :option:`-E <ctest -E>`, :option:`-LE "
"<ctest -LE>`, :option:`-I <ctest -I>`, etc).  In the event that CTest runs"
" and no tests fail, subsequent calls to CTest with the ``--rerun-failed`` "
"option will run the set of tests that most recently failed (if any)."
msgstr ""
"此选项告诉 CTest 仅执行在上次运行期间失败的测试。指定此选项时，CTest "
"会忽略所有其他旨在修改要运行的测试列表的选项（ :option:`-L <ctest -L>`, :option:`-R <ctest -R>`, "
":option: `-E <ctest -E>`、 :option:`-LE <ctest -LE>`、 :option:`-I <ctest -I>`"
" 等）。如果 CTest 运行并且没有测试失败，随后使用“--rerun-failed”选项调用 CTest 将运行最近失败的一组测试（如果有）。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:292
msgid ""
"Run tests repeatedly based on the given ``<mode>`` up to ``<n>`` times. "
"The modes are:"
msgstr "根据给定的``<mode>`` 重复运行测试最多``<n>`` 次。这些模式是："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:296
msgid ""
"Require each test to run ``<n>`` times without failing in order to pass. "
"This is useful in finding sporadic failures in test cases."
msgstr "要求每个测试运行 ``<n>`` 次而不失败才能通过。这对于查找测试用例中的零星故障很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:300
msgid ""
"Allow each test to run up to ``<n>`` times in order to pass. Repeats tests"
" if they fail for any reason. This is useful in tolerating sporadic "
"failures in test cases."
msgstr "允许每个测试运行最多 ``<n>`` 次才能通过。如果由于任何原因失败，则重复测试。这对于容忍测试用例中的零星故障很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:305
msgid ""
"Allow each test to run up to ``<n>`` times in order to pass. Repeats tests"
" only if they timeout. This is useful in tolerating sporadic timeouts in "
"test cases on busy machines."
msgstr "允许每个测试运行最多 ``<n>`` 次才能通过。仅在超时时重复测试。这对于容忍繁忙机器上测试用例中的零星超时很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:312
msgid "Equivalent to :option:`--repeat until-fail:\\<n\\> <ctest --repeat>`."
msgstr "相当于:option:`--repeat until-fail:\\<n\\> <ctest --repeat>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:316
msgid "Set the max width for a test name to output."
msgstr "设置要输出的测试名称的最大宽度。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:318
msgid ""
"Set the maximum width for each test name to show in the output. This "
"allows the user to widen the output to avoid clipping the test name which "
"can be very annoying."
msgstr "设置每个测试名称的最大宽度以显示在输出中。这允许用户加宽输出以避免截断非常烦人的测试名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:324
msgid "Set the interactive mode to ``0`` or ``1``."
msgstr "将交互模式设置为“0”或“1”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:326
msgid ""
"This option causes CTest to run tests in either an interactive mode or a "
"non-interactive mode.  In dashboard mode (``Experimental``, ``Nightly``, "
"``Continuous``), the default is non-interactive.  In non-interactive mode,"
" the environment variable :envvar:`DASHBOARD_TEST_FROM_CTEST` is set."
msgstr ""
"此选项使 CTest "
"以交互模式或非交互模式运行测试。在仪表板模式下（``Experimental``、``Nightly``、``Continuous``），默认是非交互式的。在非交互模式下，设置了环境变量:envvar:`DASHBOARD_TEST_FROM_CTEST`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:331
msgid ""
"Prior to CMake 3.11, interactive mode on Windows allowed system debug "
"popup windows to appear.  Now, due to CTest's use of ``libuv`` to launch "
"test processes, all system debug popup windows are always blocked."
msgstr ""
"在 CMake 3.11 之前，Windows 上的交互模式允许出现系统调试弹出窗口。现在，由于 CTest 使用 ``libuv`` "
"启动测试进程，所有系统调试弹出窗口总是被阻止。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:337
msgid "Disable timing summary information for labels."
msgstr "禁用标签的时序摘要信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:339
msgid ""
"This option tells CTest not to print summary information for each label "
"associated with the tests run.  If there are no labels on the tests, "
"nothing extra is printed."
msgstr "此选项告诉 CTest 不要打印与测试运行关联的每个标签的摘要信息。如果测试上没有标签，则不会打印任何额外内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:347
msgid "Disable timing summary information for subprojects."
msgstr "禁用子项目的时序摘要信息。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:349
msgid ""
"This option tells CTest not to print summary information for each "
"subproject associated with the tests run.  If there are no subprojects on "
"the tests, nothing extra is printed."
msgstr "此选项告诉 CTest 不要打印与测试运行关联的每个子项目的摘要信息。如果测试中没有子项目，则不会打印任何额外内容。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:357
msgid "Specify the directory in which to look for tests."
msgstr "指定要在其中查找测试的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:363
msgid "Limit the output for passed tests to ``<size>`` bytes."
msgstr "将通过测试的输出限制为“<size>”字节。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:369
msgid "Limit the output for failed tests to ``<size>`` bytes."
msgstr "将失败测试的输出限制为“<size>”字节。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:375
msgid ""
"Truncate ``tail`` (default), ``middle`` or ``head`` of test output once "
"maximum output size is reached."
msgstr "一旦达到最大输出大小时，截断测试输出的“tail”（默认）、“middle”或“head”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:380
msgid "Overwrite CTest configuration option."
msgstr "覆盖 CTest 配置选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:382
msgid ""
"By default CTest uses configuration options from configuration file. This "
"option will overwrite the configuration option."
msgstr "默认情况下，CTest 使用配置文件中的配置选项。此选项将覆盖配置选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:387
msgid "Run child CTest instances as new processes."
msgstr "将子 CTest 实例作为新进程运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:389
msgid ""
"By default CTest will run child CTest instances within the same process.  "
"If this behavior is not desired, this argument will enforce new processes "
"for child CTest processes."
msgstr "默认情况下，CTest 将在同一进程中运行子 CTest 实例。如果不需要此行为，此参数将为子 CTest 进程强制执行新进程。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:395
msgid "Use a random order for scheduling tests."
msgstr "使用随机顺序安排测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:397
msgid ""
"This option will run the tests in a random order.  It is commonly used to "
"detect implicit dependencies in a test suite."
msgstr "此选项将以随机顺序运行测试。它通常用于检测测试套件中的隐式依赖关系。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:402
msgid "Legacy option for old Dart2 dashboard server feature. Do not use."
msgstr "旧 Dart2 仪表板服务器功能的旧版选项。不使用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:407
msgid "Set the default test timeout."
msgstr "设置默认测试超时。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:409
msgid ""
"This option effectively sets a timeout on all tests that do not already "
"have a timeout set on them via the :prop_test:`TIMEOUT` property."
msgstr "此选项有效地为所有尚未通过 :prop_test:`TIMEOUT` 属性设置超时的测试设置超时。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:415
msgid "Set a time at which all tests should stop running."
msgstr "设置所有测试应停止运行的时间。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:417
msgid ""
"Set a real time of day at which all tests should timeout.  Example: "
"``7:00:00 -0400``.  Any time format understood by the curl date parser is "
"accepted.  Local time is assumed if no timezone is specified."
msgstr ""
"设置一天中所有测试都应超时的实际时间。示例：``7:00:00 -0400``。接受 curl "
"日期解析器理解的任何时间格式。如果未指定时区，则假定为当地时间。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:423
msgid "Print all available test labels."
msgstr "打印所有可用的测试标签。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:425
msgid ""
"This option will not run any tests, it will simply print the list of all "
"labels associated with the test set."
msgstr "此选项不会运行任何测试，它只会打印与测试集关联的所有标签的列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:430
msgid ""
"Regard no tests found either as error (when ``<action>`` is set to "
"``error``) or ignore it (when ``<action>`` is set to ``ignore``)."
msgstr ""
"将未发现的测试视为错误（当``<action>`` 设置为``error`` 时）或忽略它（当``<action>`` 设置为``ignore`` "
"时）。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:433
msgid ""
"If no tests were found, the default behavior of CTest is to always log an "
"error message but to return an error code in script mode only.  This "
"option unifies the behavior of CTest by either returning an error code if "
"no tests were found or by ignoring it."
msgstr ""
"如果未找到测试，CTest 的默认行为是始终记录错误消息，但仅在脚本模式下返回错误代码。此选项通过在未找到测试时返回错误代码或忽略它来统一 "
"CTest 的行为。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:440
msgid ""
"This option can also be set by setting the :envvar:`CTEST_NO_TESTS_ACTION`"
" environment variable."
msgstr "此选项也可以通过设置 CTEST_NO_TESTS_ACTION 环境变量来设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:446
msgid ""
"To print version details or selected pages from the CMake documentation, "
"use one of the following options:"
msgstr "要从 CMake 文档打印版本详细信息或选定页面，请使用以下选项之一："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:454
msgid "Label Matching"
msgstr "标签匹配"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:456
msgid ""
"Tests may have labels attached to them. Tests may be included or excluded "
"from a test run by filtering on the labels. Each individual filter is a "
"regular expression applied to the labels attached to a test."
msgstr ""
"测试可能附有标签。通过对标签进行过滤，可以将测试包含在测试运行中或从测试运行中排除。每个单独的过滤器都是应用于附加到测试的标签的正则表达式。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:461
msgid ""
"When :option:`-L <ctest -L>` is used, in order for a test to be included "
"in a test run, each regular expression must match at least one label.  "
"Using more than one :option:`-L <ctest -L>` option means \"match **all** "
"of these\"."
msgstr ""
"当使用 :option:`-L <ctest -L>` 时，为了将测试包含在测试运行中，每个正则表达式必须至少匹配一个标签。使用多个 "
":option:`-L <ctest -L>` 选项意味着“匹配**所有**这些”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:466
msgid ""
"The :option:`-LE <ctest -LE>` option works just like :option:`-L <ctest "
"-L>`, but excludes tests rather than including them. A test is excluded if"
" each regular expression matches at least one label."
msgstr ""
":option:`-LE <ctest -LE>` 选项的工作方式与 :option:`-L <ctest -L>` "
"一样，但排除测试而不是包括它们。如果每个正则表达式至少匹配一个标签，则排除测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:470
msgid ""
"If a test has no labels attached to it, then :option:`-L <ctest -L>` will "
"never include that test, and :option:`-LE <ctest -LE>` will never exclude "
"that test. As an example of tests with labels, consider five tests, with "
"the following labels:"
msgstr ""
"如果测试没有附加标签，则 :option:`-L <ctest -L>` 将永远不会包含该测试，而 :option:`-LE <ctest -LE>` "
"将永远不会排除该测试。作为带有标签的测试示例，考虑五个测试，带有以下标签："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:475
msgid "*test1* has labels *tuesday* and *production*"
msgstr "*test1* 有标签 *tuesday* 和 *production*"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:476
msgid "*test2* has labels *tuesday* and *test*"
msgstr "*test2* 有标签 *tuesday* 和 *test*"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:477
msgid "*test3* has labels *wednesday* and *production*"
msgstr "*test3* 有标签 *wednesday* 和 *production*"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:478
msgid "*test4* has label *wednesday*"
msgstr "*test4* 有标签 *wednesday*"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:479
msgid "*test5* has labels *friday* and *test*"
msgstr "*test5* 有标签 *friday* 和 *test*"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:481
msgid ""
"Running :program:`ctest` with ``-L tuesday -L test`` will select *test2*, "
"which has both labels. Running CTest with ``-L test`` will select *test2* "
"and *test5*, because both of them have a label that matches that regular "
"expression."
msgstr ""
"使用 ``-L tuesday -L test`` 运行 :program:`ctest` 将选择 *test2*，它有两个标签。使用“-L "
"test”运行 CTest 将选择 *test2* 和 *test5*，因为它们都有一个与该正则表达式匹配的标签。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:486
msgid ""
"Because the matching works with regular expressions, take note that "
"running CTest with ``-L es`` will match all five tests. To select the "
"*tuesday* and *wednesday* tests together, use a single regular expression "
"that matches either of them, like ``-L \"tue|wed\"``."
msgstr ""
"因为匹配适用于正则表达式，请注意使用“-L es”运行 CTest 将匹配所有五个测试。要同时选择 *tuesday* 和 *wednesday* "
"测试，请使用匹配其中任何一个的单个正则表达式，例如 ``-L \"tue|wed\"``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:494
msgid "Label and Subproject Summary"
msgstr "标签和子项目摘要"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:496
msgid ""
"CTest prints timing summary information for each ``LABEL`` and subproject "
"associated with the tests run. The label time summary will not include "
"labels that are mapped to subprojects."
msgstr "CTest 打印与测试运行相关的每个“标签”和子项目的时间摘要信息。标签时间摘要将不包括映射到子项目的标签。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:500
msgid ""
"Labels added dynamically during test execution are also reported in the "
"timing summary.  See :ref:`Additional Labels`."
msgstr "在测试执行期间动态添加的标签也会在时序摘要中报告。请参阅:ref:`附加标签`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:504
msgid ""
"When the :prop_test:`PROCESSORS` test property is set, CTest will display "
"a weighted test timing result in label and subproject summaries. The time "
"is reported with `sec*proc` instead of just `sec`."
msgstr ""
"当设置 :prop_test:`PROCESSORS` 测试属性时，CTest 将在标签和子项目摘要中显示加权测试计时结果。时间是用 "
"sec*proc 报告的，而不仅仅是 sec 。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:508
msgid ""
"The weighted time summary reported for each label or subproject ``j`` is "
"computed as::"
msgstr "为每个标签或子项目“j”报告的加权时间摘要计算如下："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:516
msgid "where:"
msgstr "在哪里："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:518
msgid ""
"``raw_test_time[j,i]``: Wall-clock time for the ``i`` test for the ``j`` "
"label or subproject"
msgstr "``raw_test_time[j,i]``：``j`` 标签或子项目的``i`` 测试的挂钟时间"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:520
msgid ""
"``num_processors[j,i]``: Value of the CTest :prop_test:`PROCESSORS` "
"property for the ``i`` test for the ``j`` label or subproject"
msgstr ""
"``num_processors[j,i]``: ``j`` 标签或子项目的 ``i`` 测试的 CTest "
":prop_test:`PROCESSORS` 属性的值"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:522
msgid ""
"``num_tests[j]``: Number of tests associated with the ``j`` label or "
"subproject"
msgstr "``num_tests[j]``：与 ``j`` 标签或子项目关联的测试数"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:523
msgid ""
"``total``: Total number of labels or subprojects that have at least one "
"test run"
msgstr "``total``：至少有一个测试运行的标签或子项目的总数"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:525
msgid ""
"Therefore, the weighted time summary for each label or subproject "
"represents the amount of time that CTest gave to run the tests for each "
"label or subproject and gives a good representation of the total expense "
"of the tests for each label or subproject when compared to other labels or"
" subprojects."
msgstr ""
"因此，每个标签或子项目的加权时间摘要表示 CTest "
"为每个标签或子项目运行测试所花费的时间，并很好地表示与其他标签相比每个标签或子项目的测试总费用或子项目。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:530
msgid ""
"For example, if ``SubprojectA`` showed ``100 sec*proc`` and "
"``SubprojectB`` showed ``10 sec*proc``, then CTest allocated approximately"
" 10 times the CPU/core time to run the tests for ``SubprojectA`` than for "
"``SubprojectB`` (e.g. so if effort is going to be expended to reduce the "
"cost of the test suite for the whole project, then reducing the cost of "
"the test suite for ``SubprojectA`` would likely have a larger impact than "
"effort to reduce the cost of the test suite for ``SubprojectB``)."
msgstr ""
"例如，如果 ``SubprojectA`` 显示 ``100 sec*proc`` 而 ``SubprojectB`` 显示 ``10 "
"sec*proc``，则 CTest 分配大约 10 倍的 CPU/核心时间来运行测试``SubprojectA`` 而不是 "
"``SubprojectB``（例如，如果要花费精力来降低整个项目的测试套件成本，那么降低 ``SubprojectA`` "
"的测试套件成本将可能比降低 ``SubprojectB`` 的测试套件成本的努力具有更大的影响）。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:541
msgid "Build and Test Mode"
msgstr "构建和测试模式"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:543
msgid ""
"CTest provides a command-line signature to configure (i.e. run cmake on), "
"build, and/or execute a test::"
msgstr "CTest 提供命令行签名来配置（即运行 cmake）、构建和/或执行测试 ::"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:552
msgid ""
"The configure and test steps are optional. The arguments to this command "
"line are the source and binary directories.  The ``--build-generator`` "
"option *must* be provided to use ``--build-and-test``.  If ``--test-"
"command`` is specified then that will be run after the build is complete."
"  Other options that affect this mode include:"
msgstr ""
"配置和测试步骤是可选的。此命令行的参数是源目录和二进制目录。 ``--build-generator`` 选项 *必须* 提供才能使用 "
"``--build-and-test``。如果指定了``--test-command``，那么它将在构建完成后运行。影响此模式的其他选项包括："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:560
msgid "Switch into the build and test mode."
msgstr "切换到构建和测试模式。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:564
msgid ""
"Specify a specific target to build.  The option can be given multiple "
"times with different targets, in which case each target is built in turn. "
"A clean will be done before building each target unless the "
":option:`--build-noclean` option is given."
msgstr ""
"指定要构建的特定目标。可以针对不同的目标多次给出该选项，在这种情况下，依次构建每个目标。除非给出 :option:`--build-noclean`"
" 选项，否则在构建每个目标之前将进行清理。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:569
msgid "If no ``--build-target`` is specified, the ``all`` target is built."
msgstr "如果未指定“--build-target”，则构建“all”目标。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:573
msgid "Run the build without running cmake first."
msgstr "在不先运行 cmake 的情况下运行构建。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:575
msgid "Skip the cmake step."
msgstr "跳过 cmake 步骤。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:579
msgid "Specify directory to run programs from."
msgstr "指定从中运行程序的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:581
msgid "Directory where programs will be after it has been compiled."
msgstr "编译后程序所在的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:585
msgid "Run CMake twice."
msgstr "运行 CMake 两次。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:589
msgid "Specify the directory for the executable."
msgstr "指定可执行文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:593
msgid ""
"Specify the generator to use. See the :manual:`cmake-generators(7)` "
"manual."
msgstr "指定要使用的生成器。请参阅 :manual:`cmake-generators(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:597
msgid "Specify the generator-specific platform."
msgstr "指定特定于生成器的平台。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:601
msgid "Specify the generator-specific toolset."
msgstr "指定特定于生成器的工具集。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:605
msgid "Specify the name of the project to build."
msgstr "指定要构建的项目的名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:609
msgid ""
"Specify the explicit make program to be used by CMake when configuring and"
" building the project. Only applicable for Make and Ninja based "
"generators."
msgstr "指定在配置和构建项目时 CMake 使用的显式 make 程序。仅适用于基于 Make 和 Ninja 的生成器。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:614
msgid "Skip the make clean step."
msgstr "跳过 make clean 步骤。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:618
msgid ""
"A sample executable to use to determine the configuration that should be "
"used.  e.g.  ``Debug``, ``Release`` etc."
msgstr "用于确定应使用的配置的示例可执行文件。例如``调试``，``发布``等。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:623
msgid ""
"Additional options for configuring the build (i.e. for CMake, not for the "
"build tool).  Note that if this is specified, the ``--build-options`` "
"keyword and its arguments must be the last option given on the command "
"line, with the possible exception of ``--test-command``."
msgstr ""
"配置构建的附加选项（即用于 CMake，而不是用于构建工具）。请注意，如果已指定，则 ``--build-options`` "
"关键字及其参数必须是命令行中给出的最后一个选项，但 ``--test-command`` 可能除外。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:630
msgid ""
"The command to run as the test step with the :option:`--build-and-test "
"<ctest --build-and-test>` option. All arguments following this keyword "
"will be assumed to be part of the test command line, so it must be the "
"last option given."
msgstr ""
"作为带有 :option:`--build-and-test <ctest --build-and-test>` "
"选项的测试步骤运行的命令。此关键字后的所有参数都将被假定为测试命令行的一部分，因此它必须是最后给出的选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:637
msgid "The time limit in seconds"
msgstr "以秒为单位的时间限制"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:642
msgid "Dashboard Client"
msgstr "仪表板客户端"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:644
msgid ""
"CTest can operate as a client for the `CDash`_ software quality dashboard "
"application.  As a dashboard client, CTest performs a sequence of steps to"
" configure, build, and test software, and then submits the results to a "
"`CDash`_ server. The command-line signature used to submit to `CDash`_ "
"is::"
msgstr ""
"CTest 可以作为 `CDash`_ 软件质量仪表板应用程序的客户端运行。作为仪表板客户端，CTest "
"执行一系列步骤来配置、构建和测试软件，然后将结果提交到 CDash 服务器。用于提交给 CDash 的命令行签名是："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:654
msgid "Options for Dashboard Client include:"
msgstr "仪表板客户端的选项包括："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:658
msgid "Execute dashboard test."
msgstr "执行仪表板测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:660
msgid ""
"This option tells CTest to act as a CDash client and perform a dashboard "
"test.  All tests are ``<Mode><Test>``, where ``<Mode>`` can be "
"``Experimental``, ``Nightly``, and ``Continuous``, and ``<Test>`` can be "
"``Start``, ``Update``, ``Configure``, ``Build``, ``Test``, ``Coverage``, "
"and ``Submit``."
msgstr ""
"此选项告诉 CTest 作为 CDash 客户端并执行仪表板测试。所有测试都是 ``<Mode><Test>``，其中 ``<Mode>`` 可以是"
" ``Experimental``、``Nightly`` 和 ``Continuous``，以及 ``<Test>` ` 可以是 "
"``Start``、``Update``、``Configure``、``Build``、``Test``、``Coverage`` 和 "
"``Submit``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:666
msgid ""
"If ``<dashboard>`` is not one of the recognized ``<Mode><Test>`` values, "
"this will be treated as a variable definition instead (see the "
":ref:`dashboard-options <Dashboard Options>` further below)."
msgstr ""
"如果 ``<dashboard>`` 不是可识别的 ``<Mode><Test>`` 值之一，这将被视为变量定义（参见 "
":ref:`dashboard-options <Dashboard Options>`下文）。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:672
msgid "Sets the model for a dashboard."
msgstr "设置仪表板的模型。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:674
msgid ""
"This option tells CTest to act as a CDash client where the ``<model>`` can"
" be ``Experimental``, ``Nightly``, and ``Continuous``. Combining ``-M`` "
"and :option:`-T <ctest -T>` is similar to :option:`-D <ctest -D>`."
msgstr ""
"此选项告诉 CTest 充当 CDash 客户端，其中 ``<model>`` 可以是 ``Experimental``、``Nightly`` 和"
" ``Continuous``。结合 ``-M`` 和 :option:`-T <ctest -T>` 类似于 :option:`-D <ctest"
" -D>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:681
msgid "Sets the dashboard action to perform."
msgstr "设置要执行的仪表板操作。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:683
msgid ""
"This option tells CTest to act as a CDash client and perform some action "
"such as ``start``, ``build``, ``test`` etc. See `Dashboard Client Steps`_ "
"for the full list of actions. Combining :option:`-M <ctest -M>` and ``-T``"
" is similar to :option:`-D <ctest -D>`."
msgstr ""
"此选项告诉 CTest 充当 CDash "
"客户端并执行一些操作，例如“开始”、“构建”、“测试”等。有关操作的完整列表，请参阅“仪表板客户端步骤”。组合 :option:`-M <ctest "
"-M>` 和``-T`` 类似于 :option:`-D <ctest -D>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:691
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:701
msgid "Execute a dashboard for a configuration."
msgstr "执行配置的仪表板。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:693
msgid ""
"This option tells CTest to load in a configuration script which sets a "
"number of parameters such as the binary and source directories. Then CTest"
" will do what is required to create and run a dashboard. This option "
"basically sets up a dashboard and then runs :option:`ctest -D` with the "
"appropriate options."
msgstr ""
"此选项告诉 CTest 加载一个配置脚本，该脚本设置了许多参数，例如二进制文件和源目录。然后 CTest "
"将执行创建和运行仪表板所需的操作。此选项基本上设置了一个仪表板，然后使用适当的选项运行 :option:`ctest -D`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:703
msgid ""
"This option does the same operations as :option:`-S <ctest -S>` but it "
"will do them in a separate process.  This is primarily useful in cases "
"where the script may modify the environment and you do not want the "
"modified environment to impact other :option:`-S <ctest -S>` scripts."
msgstr ""
"此选项执行与 :option:`-S <ctest -S>` "
"相同的操作，但它将在单独的进程中执行它们。这主要用于脚本可能修改环境并且您不希望修改后的环境影响其他脚本的情况:option:`-S <ctest "
"-S>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:710
msgid "The available ``<dashboard-options>`` are the following:"
msgstr "可用的 ``<dashboard-options>`` 如下："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:716
msgid ""
"Pass in variable values on the command line.  Use in conjunction with "
":option:`-S <ctest -S>` to pass variable values to a dashboard script. "
"Parsing ``-D`` arguments as variable values is only attempted if the value"
" following ``-D`` does not match any of the known dashboard types."
msgstr ""
"在命令行中传递变量值。与 :option:`-S <ctest -S>` "
"结合使用，将变量值传递给仪表板脚本。仅当“-D”后面的值与任何已知的仪表板类型不匹配时，才会尝试将“-D”参数解析为变量值。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:723
msgid "Specify what group you'd like to submit results to"
msgstr "指定您要将结果提交给哪个组"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:725
msgid ""
"Submit dashboard to specified group instead of default one.  By default, "
"the dashboard is submitted to Nightly, Experimental, or Continuous group, "
"but by specifying this option, the group can be arbitrary."
msgstr ""
"将仪表板提交到指定组而不是默认组。默认情况下，仪表板提交到 Nightly、Experimental 或 Continuous "
"组，但通过指定此选项，组可以是任意的。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:730
msgid ""
"This replaces the deprecated option ``--track``. Despite the name change "
"its behavior is unchanged."
msgstr "这取代了已弃用的选项“--track”。尽管名称改变了，但它的行为没有改变。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:735
msgid "Add a notes file with submission."
msgstr "提交时添加注释文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:737
msgid ""
"This option tells CTest to include a notes file when submitting dashboard."
msgstr "此选项告诉 CTest 在提交仪表板时包含注释文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:742
msgid "``Nightly`` or ``Experimental`` starts with next day tag."
msgstr "``Nightly`` 或 ``Experimental`` 从第二天标签开始。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:744
msgid "This is useful if the build will not finish in one day."
msgstr "如果构建不会在一天内完成，这将很有用。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:748
msgid "Submit extra files to the dashboard."
msgstr "将额外的文件提交到仪表板。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:750
msgid "This option will submit extra files to the dashboard."
msgstr "此选项会将额外的文件提交到仪表板。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:754
msgid "Submit using `HTTP 1.0`."
msgstr "使用 HTTP 1.0 提交。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:756
msgid ""
"This option will force CTest to use `HTTP 1.0` to submit files to the "
"dashboard, instead of `HTTP 1.1`."
msgstr "此选项将强制 CTest 使用 `HTTP 1.0` 将文件提交到仪表板，而不是 `HTTP 1.1`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:761
msgid "Do not compress test output when submitting."
msgstr "提交时不要压缩测试输出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:763
msgid ""
"This flag will turn off automatic compression of test output.  Use this to"
" maintain compatibility with an older version of CDash which doesn't "
"support compressed test output."
msgstr "该标志将关闭测试输出的自动压缩。使用它来保持与不支持压缩测试输出的旧版本 CDash 的兼容性。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:768
msgid "Dashboard Client Steps"
msgstr "仪表板客户端步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:770
msgid ""
"CTest defines an ordered list of testing steps of which some or all may be"
" run as a dashboard client:"
msgstr "CTest 定义了一个有序的测试步骤列表，其中一些或全部可以作为仪表板客户端运行："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:776
msgid "``Start``"
msgstr "``开始``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:774
msgid ""
"Start a new dashboard submission to be composed of results recorded by the"
" following steps. See the `CTest Start Step`_ section below."
msgstr "启动一个新的仪表板提交，由以下步骤记录的结果组成。请参阅下面的“CTest 开始步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:781
msgid "``Update``"
msgstr "``更新``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:779
msgid ""
"Update the source tree from its version control repository. Record the old"
" and new versions and the list of updated source files. See the `CTest "
"Update Step`_ section below."
msgstr "从其版本控制存储库更新源代码树。记录新旧版本和更新的源文件列表。请参阅下面的“CTest 更新步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:786
msgid "``Configure``"
msgstr "``配置``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:784
msgid ""
"Configure the software by running a command in the build tree. Record the "
"configuration output log. See the `CTest Configure Step`_ section below."
msgstr "通过在构建树中运行命令来配置软件。记录配置输出日志。请参阅下面的“CTest 配置步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:791
msgid "``Build``"
msgstr "``构建``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:789
msgid ""
"Build the software by running a command in the build tree. Record the "
"build output log and detect warnings and errors. See the `CTest Build "
"Step`_ section below."
msgstr "通过在构建树中运行命令来构建软件。记录构建输出日志并检测警告和错误。请参阅下面的“CTest 构建步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:797
msgid "``Test``"
msgstr "``测试``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:794
msgid ""
"Test the software by loading a ``CTestTestfile.cmake`` from the build tree"
" and executing the defined tests. Record the output and result of each "
"test. See the `CTest Test Step`_ section below."
msgstr ""
"通过从构建树加载“CTestTestfile.cmake”并执行定义的测试来测试软件。记录每次测试的输出和结果。请参阅下面的“CTest "
"测试步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:802
msgid "``Coverage``"
msgstr "``覆盖范围``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:800
msgid ""
"Compute coverage of the source code by running a coverage analysis tool "
"and recording its output. See the `CTest Coverage Step`_ section below."
msgstr "通过运行覆盖率分析工具并记录其输出来计算源代码的覆盖率。请参阅下面的“CTest 覆盖步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:807
msgid "``MemCheck``"
msgstr "``内存检查``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:805
msgid ""
"Run the software test suite through a memory check tool. Record the test "
"output, results, and issues reported by the tool. See the `CTest MemCheck "
"Step`_ section below."
msgstr "通过内存检查工具运行软件测试套件。记录工具报告的测试输出、结果和问题。请参阅下面的“CTest MemCheck Step”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:812
msgid "``Submit``"
msgstr "``提交``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:810
msgid ""
"Submit results recorded from other testing steps to the software quality "
"dashboard server. See the `CTest Submit Step`_ section below."
msgstr "将其他测试步骤记录的结果提交到软件质量仪表板服务器。请参阅下面的“CTest 提交步骤”部分。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:815
msgid "Dashboard Client Modes"
msgstr "仪表板客户端模式"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:817
msgid "CTest defines three modes of operation as a dashboard client:"
msgstr "CTest 定义了三种操作模式作为仪表板客户端："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:823
msgid "``Nightly``"
msgstr "``每晚``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:820
msgid ""
"This mode is intended to be invoked once per day, typically at night. It "
"enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``, "
"``Coverage``, and ``Submit`` steps by default.  Selected steps run even if"
" the ``Update`` step reports no changes to the source tree."
msgstr ""
"此模式旨在每天调用一次，通常是在晚上。它默认启用“开始”、“更新”、“配置”、“构建”、“测试”、“覆盖”和“提交”步骤。即使 ``Update``"
" 步骤报告源代码树没有变化，选定的步骤也会运行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:829
msgid "``Continuous``"
msgstr "``连续``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:826
msgid ""
"This mode is intended to be invoked repeatedly throughout the day. It "
"enables the ``Start``, ``Update``, ``Configure``, ``Build``, ``Test``, "
"``Coverage``, and ``Submit`` steps by default, but exits after the "
"``Update`` step if it reports no changes to the source tree."
msgstr ""
"此模式旨在全天重复调用。它默认启用“开始”、“更新”、“配置”、“构建”、“测试”、“覆盖”和“提交”步骤，但是如果报告没有对源代码树进行任何更改，则在“更新”步骤之后退出。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:834
msgid "``Experimental``"
msgstr "``实验性的``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:832
msgid ""
"This mode is intended to be invoked by a developer to test local changes. "
"It enables the ``Start``, ``Configure``, ``Build``, ``Test``, "
"``Coverage``, and ``Submit`` steps by default."
msgstr "此模式旨在由开发人员调用以测试本地更改。它默认启用“开始”、“配置”、“构建”、“测试”、“覆盖”和“提交”步骤。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:837
msgid "Dashboard Client via CTest Command-Line"
msgstr "通过 CTest 命令行的仪表板客户端"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:839
msgid ""
"CTest can perform testing on an already-generated build tree. Run the "
":program:`ctest` command with the current working directory set to the "
"build tree and use one of these signatures::"
msgstr ""
"CTest 可以对已经生成的构建树执行测试。运行 :program:`ctest` 命令，将当前工作目录设置为构建树，并使用以下签名之一："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:846
msgid ""
"The ``<mode>`` must be one of the above `Dashboard Client Modes`_, and "
"each ``<step>`` must be one of the above `Dashboard Client Steps`_."
msgstr ""
"``<mode>`` 必须是上述 `Dashboard Client Modes`_ 之一，每个 ``<step>`` 必须是上述 "
"`Dashboard Client Steps`_ 之一。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:849
msgid ""
"CTest reads the `Dashboard Client Configuration`_ settings from a file in "
"the build tree called either ``CTestConfiguration.ini`` or "
"``DartConfiguration.tcl`` (the names are historical).  The format of the "
"file is::"
msgstr ""
"CTest "
"从构建树中名为“CTestConfiguration.ini”或“DartConfiguration.tcl”（名称是历史名称）的文件中读取“仪表板客户端配置”设置。文件格式为：："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:858
msgid ""
"where ``<setting>`` is the setting name and ``<value>`` is the setting "
"value."
msgstr "其中 ``<setting>`` 是设置名称，``<value>`` 是设置值。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:861
msgid ""
"In build trees generated by CMake, this configuration file is generated by"
" the :module:`CTest` module if included by the project. The module uses "
"variables to obtain a value for each setting as documented with the "
"settings below."
msgstr ""
"在 CMake 生成的构建树中，如果包含在项目中，则此配置文件由 CTest 模块生成。该模块使用变量来获取每个设置的值，如下面的设置所示。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:869
msgid "Dashboard Client via CTest Script"
msgstr "通过 CTest 脚本的仪表板客户端"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:871
msgid ""
"CTest can perform testing driven by a :manual:`cmake-language(7)` script "
"that creates and maintains the source and build tree as well as performing"
" the testing steps.  Run the :program:`ctest` command with the current "
"working directory set outside of any build tree and use one of these "
"signatures::"
msgstr ""
"CTest 可以执行由 :manual:`cmake-language(7)` "
"脚本驱动的测试，该脚本创建和维护源代码和构建树以及执行测试步骤。使用在任何构建树之外设置的当前工作目录运行 :program:`ctest` "
"命令，并使用以下签名之一："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:880
msgid ""
"The ``<script>`` file must call :ref:`CTest Commands` commands to run "
"testing steps explicitly as documented below.  The commands obtain "
"`Dashboard Client Configuration`_ settings from their arguments or from "
"variables set in the script."
msgstr ""
"``<script>`` 文件必须调用:ref:`CTest 命令` "
"命令来显式运行测试步骤，如下所述。这些命令从它们的参数或脚本中设置的变量中获取“仪表板客户端配置”设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:886
msgid "Dashboard Client Configuration"
msgstr "仪表板客户端配置"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:888
msgid ""
"The `Dashboard Client Steps`_ may be configured by named settings as "
"documented in the following sections."
msgstr "`Dashboard Client Steps`_ 可以通过以下部分中记录的命名设置进行配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:894
msgid "CTest Start Step"
msgstr "CTest 开始步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:896
msgid ""
"Start a new dashboard submission to be composed of results recorded by the"
" following steps."
msgstr "启动一个新的仪表板提交，由以下步骤记录的结果组成。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:899
msgid ""
"In a `CTest Script`_, the :command:`ctest_start` command runs this step. "
"Arguments to the command may specify some of the step settings. The "
"command first runs the command-line specified by the "
"``CTEST_CHECKOUT_COMMAND`` variable, if set, to initialize the source "
"directory."
msgstr ""
"在 `CTest Script`_ 中， :command:`ctest_start` "
"命令运行此步骤。命令的参数可以指定一些步骤设置。该命令首先运行由“CTEST_CHECKOUT_COMMAND”变量指定的命令行（如果已设置）来初始化源目录。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:905
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1115
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1144
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1201
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1247
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1273
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1375
msgid "Configuration settings include:"
msgstr "配置设置包括："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:911
msgid "``BuildDirectory``"
msgstr "``构建目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:908
msgid "The full path to the project build tree."
msgstr "项目构建树的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:910
msgid "`CTest Script`_ variable: :variable:`CTEST_BINARY_DIRECTORY`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_BINARY_DIRECTORY`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:911
msgid ":module:`CTest` module variable: :variable:`PROJECT_BINARY_DIR`"
msgstr ":module:`CTest` 模块变量： :variable:`PROJECT_BINARY_DIR`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:917
msgid "``SourceDirectory``"
msgstr "``源目录``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:914
msgid "The full path to the project source tree."
msgstr "项目源代码树的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:916
msgid "`CTest Script`_ variable: :variable:`CTEST_SOURCE_DIRECTORY`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SOURCE_DIRECTORY`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:917
msgid ":module:`CTest` module variable: :variable:`PROJECT_SOURCE_DIR`"
msgstr ":module:`CTest` 模块变量： :variable:`PROJECT_SOURCE_DIR`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:922
msgid "CTest Update Step"
msgstr "CTest 更新步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:924
msgid ""
"In a `CTest Script`_, the :command:`ctest_update` command runs this step. "
"Arguments to the command may specify some of the step settings."
msgstr "在 `CTest 脚本`_ 中， :command:`ctest_update` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:927
msgid "Configuration settings to specify the version control tool include:"
msgstr "指定版本控制工具的配置设置包括："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:933
msgid "``BZRCommand``"
msgstr "``BZRCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:930
msgid ""
"``bzr`` command-line tool to use if source tree is managed by Bazaar."
msgstr "如果源代码树由 Bazaar 管理，则使用 ``bzr`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:932
msgid "`CTest Script`_ variable: :variable:`CTEST_BZR_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_BZR_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:933
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:939
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:988
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:994
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1316
msgid ":module:`CTest` module variable: none"
msgstr ":module:`CTest` 模块变量：无"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:939
msgid "``BZRUpdateOptions``"
msgstr "``BZRUpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:936
msgid "Command-line options to the ``BZRCommand`` when updating the source."
msgstr "更新源代码时 ``BZRCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:938
msgid "`CTest Script`_ variable: :variable:`CTEST_BZR_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_BZR_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:945
msgid "``CVSCommand``"
msgstr "``CVS 命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:942
msgid "``cvs`` command-line tool to use if source tree is managed by CVS."
msgstr "如果源代码树由 CVS 管理，则使用 ``cvs`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:944
msgid "`CTest Script`_ variable: :variable:`CTEST_CVS_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_CVS_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:945
msgid ":module:`CTest` module variable: ``CVSCOMMAND``"
msgstr ":module:`CTest` 模块变量：``CVSCOMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:951
msgid "``CVSUpdateOptions``"
msgstr "``CVSUpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:948
msgid "Command-line options to the ``CVSCommand`` when updating the source."
msgstr "更新源代码时 ``CVSCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:950
msgid "`CTest Script`_ variable: :variable:`CTEST_CVS_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_CVS_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:951
msgid ":module:`CTest` module variable: ``CVS_UPDATE_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CVS_UPDATE_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:962
msgid "``GITCommand``"
msgstr "``GIT 命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:954
msgid "``git`` command-line tool to use if source tree is managed by Git."
msgstr "如果源代码树由 Git 管理，则使用 ``git`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:956
msgid "`CTest Script`_ variable: :variable:`CTEST_GIT_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_GIT_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:957
msgid ":module:`CTest` module variable: ``GITCOMMAND``"
msgstr ":module:`CTest` 模块变量：``GITCOMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:959
msgid ""
"The source tree is updated by ``git fetch`` followed by ``git reset "
"--hard`` to the ``FETCH_HEAD``.  The result is the same as ``git pull`` "
"except that any local modifications are overwritten. Use "
"``GITUpdateCustom`` to specify a different approach."
msgstr ""
"源代码树由 ``git fetch`` 和 ``git reset --hard`` 更新到 ``FETCH_HEAD``。结果与 ``git "
"pull`` 相同，只是任何本地修改都被覆盖了。使用 ``GITUpdateCustom`` 指定不同的方法。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:968
msgid "``GITInitSubmodules``"
msgstr "``GITInitSubmodules``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:965
msgid ""
"If set, CTest will update the repository's submodules before updating."
msgstr "如果设置，CTest 将在更新之前更新存储库的子模块。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:967
msgid "`CTest Script`_ variable: :variable:`CTEST_GIT_INIT_SUBMODULES`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_GIT_INIT_SUBMODULES`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:968
msgid ":module:`CTest` module variable: ``CTEST_GIT_INIT_SUBMODULES``"
msgstr ":module:`CTest` 模块变量：``CTEST_GIT_INIT_SUBMODULES``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:976
msgid "``GITUpdateCustom``"
msgstr "``GITUpdateCustom``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:971
msgid ""
"Specify a custom command line (as a semicolon-separated list) to run in "
"the source tree (Git work tree) to update it instead of running the "
"``GITCommand``."
msgstr "指定一个自定义命令行（以分号分隔的列表）在源代码树（Git 工作树）中运行以更新它，而不是运行 ``GITCommand``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:975
msgid "`CTest Script`_ variable: :variable:`CTEST_GIT_UPDATE_CUSTOM`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_GIT_UPDATE_CUSTOM`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:976
msgid ":module:`CTest` module variable: ``CTEST_GIT_UPDATE_CUSTOM``"
msgstr ":module:`CTest` 模块变量：``CTEST_GIT_UPDATE_CUSTOM``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:982
msgid "``GITUpdateOptions``"
msgstr "``GITUpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:979
msgid "Command-line options to the ``GITCommand`` when updating the source."
msgstr "更新源代码时 ``GITCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:981
msgid "`CTest Script`_ variable: :variable:`CTEST_GIT_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_GIT_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:982
msgid ":module:`CTest` module variable: ``GIT_UPDATE_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``GIT_UPDATE_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:988
msgid "``HGCommand``"
msgstr "``HGCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:985
msgid ""
"``hg`` command-line tool to use if source tree is managed by Mercurial."
msgstr "如果源代码树由 Mercurial 管理，则使用 ``hg`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:987
msgid "`CTest Script`_ variable: :variable:`CTEST_HG_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_HG_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:994
msgid "``HGUpdateOptions``"
msgstr "``HGUpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:991
msgid "Command-line options to the ``HGCommand`` when updating the source."
msgstr "更新源代码时“HGCommand”的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:993
msgid "`CTest Script`_ variable: :variable:`CTEST_HG_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_HG_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1000
msgid "``P4Client``"
msgstr "``P4Client``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:997
msgid "Value of the ``-c`` option to the ``P4Command``."
msgstr "``P4Command`` 的``-c`` 选项的值。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:999
msgid "`CTest Script`_ variable: :variable:`CTEST_P4_CLIENT`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_P4_CLIENT`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1000
msgid ":module:`CTest` module variable: ``CTEST_P4_CLIENT``"
msgstr ":module:`CTest` 模块变量：``CTEST_P4_CLIENT``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1006
msgid "``P4Command``"
msgstr "``P4Command``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1003
msgid ""
"``p4`` command-line tool to use if source tree is managed by Perforce."
msgstr "如果源代码树由 Perforce 管理，则使用 ``p4`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1005
msgid "`CTest Script`_ variable: :variable:`CTEST_P4_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_P4_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1006
msgid ":module:`CTest` module variable: ``P4COMMAND``"
msgstr ":module:`CTest` 模块变量：``P4COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1012
msgid "``P4Options``"
msgstr "``P4Options``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1009
msgid "Command-line options to the ``P4Command`` for all invocations."
msgstr "所有调用的 ``P4Command`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1011
msgid "`CTest Script`_ variable: :variable:`CTEST_P4_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_P4_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1012
msgid ":module:`CTest` module variable: ``CTEST_P4_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CTEST_P4_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1020
msgid "``P4UpdateCustom``"
msgstr "``P4UpdateCustom``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1015
msgid ""
"Specify a custom command line (as a semicolon-separated list) to run in "
"the source tree (Perforce tree) to update it instead of running the "
"``P4Command``."
msgstr "指定自定义命令行（以分号分隔的列表）在源代码树（Perforce 树）中运行以更新它，而不是运行“P4Command”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1019
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1315
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1322
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1329
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1336
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1343
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1350
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1357
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1364
msgid "`CTest Script`_ variable: none"
msgstr "`CTest 脚本`_ 变量：无"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1020
msgid ":module:`CTest` module variable: ``CTEST_P4_UPDATE_CUSTOM``"
msgstr ":module:`CTest` 模块变量：``CTEST_P4_UPDATE_CUSTOM``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1026
msgid "``P4UpdateOptions``"
msgstr "``P4UpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1023
msgid "Command-line options to the ``P4Command`` when updating the source."
msgstr "更新源代码时“P4Command”的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1025
msgid "`CTest Script`_ variable: :variable:`CTEST_P4_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_P4_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1026
msgid ":module:`CTest` module variable: ``CTEST_P4_UPDATE_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CTEST_P4_UPDATE_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1032
msgid "``SVNCommand``"
msgstr "``SVN 命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1029
msgid ""
"``svn`` command-line tool to use if source tree is managed by Subversion."
msgstr "如果源代码树由 Subversion 管理，则使用 ``svn`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1031
msgid "`CTest Script`_ variable: :variable:`CTEST_SVN_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SVN_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1032
msgid ":module:`CTest` module variable: ``SVNCOMMAND``"
msgstr ":module:`CTest` 模块变量：``SVNCOMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1038
msgid "``SVNOptions``"
msgstr "``SVNOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1035
msgid "Command-line options to the ``SVNCommand`` for all invocations."
msgstr "所有调用的 ``SVNCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1037
msgid "`CTest Script`_ variable: :variable:`CTEST_SVN_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SVN_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1038
msgid ":module:`CTest` module variable: ``CTEST_SVN_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CTEST_SVN_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1044
msgid "``SVNUpdateOptions``"
msgstr "``SVNUpdateOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1041
msgid "Command-line options to the ``SVNCommand`` when updating the source."
msgstr "更新源代码时 ``SVNCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1043
msgid "`CTest Script`_ variable: :variable:`CTEST_SVN_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SVN_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1044
msgid ":module:`CTest` module variable: ``SVN_UPDATE_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``SVN_UPDATE_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1052
msgid "``UpdateCommand``"
msgstr "``更新命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1047
msgid ""
"Specify the version-control command-line tool to use without detecting the"
" VCS that manages the source tree."
msgstr "指定在不检测管理源代码树的 VCS 的情况下使用的版本控制命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1050
msgid "`CTest Script`_ variable: :variable:`CTEST_UPDATE_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_UPDATE_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1051
msgid ""
":module:`CTest` module variable: ``<VCS>COMMAND`` when ``UPDATE_TYPE`` is "
"``<vcs>``, else ``UPDATE_COMMAND``"
msgstr ""
":module:`CTest` 模块变量：``<VCS>COMMAND`` 当``UPDATE_TYPE`` 是``<vcs>`` "
"时，``UPDATE_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1059
msgid "``UpdateOptions``"
msgstr "``更新选项``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1055
msgid "Command-line options to the ``UpdateCommand``."
msgstr "``UpdateCommand`` 的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1057
msgid "`CTest Script`_ variable: :variable:`CTEST_UPDATE_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_UPDATE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1058
msgid ""
":module:`CTest` module variable: ``<VCS>_UPDATE_OPTIONS`` when "
"``UPDATE_TYPE`` is ``<vcs>``, else ``UPDATE_OPTIONS``"
msgstr ""
":module:`CTest` 模块变量：``<VCS>_UPDATE_OPTIONS`` 当 ``UPDATE_TYPE`` 是 "
"``<vcs>`` 时，``UPDATE_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1069
msgid "``UpdateType``"
msgstr "``更新类型``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1062
msgid ""
"Specify the version-control system that manages the source tree if it "
"cannot be detected automatically. The value may be ``bzr``, ``cvs``, "
"``git``, ``hg``, ``p4``, or ``svn``."
msgstr ""
"如果无法自动检测到源代码树，请指定管理源代码树的版本控制系统。该值可能是“bzr”、“cvs”、“git”、“hg”、“p4”或“svn”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1067
msgid "`CTest Script`_ variable: none, detected from source tree"
msgstr "`CTest 脚本`_ 变量：无，从源代码树中检测到"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1068
msgid ""
":module:`CTest` module variable: ``UPDATE_TYPE`` if set, else "
"``CTEST_UPDATE_TYPE``"
msgstr ":module:`CTest` 模块变量：``UPDATE_TYPE`` 如果设置，否则``CTEST_UPDATE_TYPE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1078
msgid "``UpdateVersionOnly``"
msgstr "``仅更新版本``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1074
msgid ""
"Specify that you want the version control update command to only discover "
"the current version that is checked out, and not to update to a different "
"version."
msgstr "指定您希望版本控制更新命令仅发现签出的当前版本，而不更新到其他版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1078
msgid "`CTest Script`_ variable: :variable:`CTEST_UPDATE_VERSION_ONLY`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_UPDATE_VERSION_ONLY`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1091
msgid "``UpdateVersionOverride``"
msgstr "``更新版本覆盖``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1083
msgid "Specify the current version of your source tree."
msgstr "指定源代码树的当前版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1085
msgid ""
"When this variable is set to a non-empty string, CTest will report the "
"value you specified rather than using the update command to discover the "
"current version that is checked out. Use of this variable supersedes "
"``UpdateVersionOnly``. Like ``UpdateVersionOnly``, using this variable "
"tells CTest not to update the source tree to a different version."
msgstr ""
"当此变量设置为非空字符串时，CTest "
"将报告您指定的值，而不是使用更新命令来发现签出的当前版本。使用此变量会取代“UpdateVersionOnly”。与 "
"UpdateVersionOnly 一样，使用此变量告诉 CTest 不要将源代码树更新为不同的版本。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1091
msgid "`CTest Script`_ variable: :variable:`CTEST_UPDATE_VERSION_OVERRIDE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_UPDATE_VERSION_OVERRIDE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1093
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1309
msgid "Additional configuration settings include:"
msgstr "其他配置设置包括："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1105
msgid "``NightlyStartTime``"
msgstr "``每晚开始时间``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1096
msgid ""
"In the ``Nightly`` dashboard mode, specify the \"nightly start time\". "
"With centralized version control systems (``cvs`` and ``svn``), the "
"``Update`` step checks out the version of the software as of this time so "
"that multiple clients choose a common version to test. This is not well-"
"defined in distributed version-control systems so the setting is ignored."
msgstr ""
"在“每晚”仪表板模式下，指定“每晚开始时间”。使用集中式版本控制系统（``cvs`` 和 ``svn``），``Update`` "
"步骤检查此时的软件版本，以便多个客户端选择一个通用版本进行测试。这在分布式版本控制系统中没有明确定义，因此该设置将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1103
msgid "`CTest Script`_ variable: :variable:`CTEST_NIGHTLY_START_TIME`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_NIGHTLY_START_TIME`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1104
msgid ""
":module:`CTest` module variable: ``NIGHTLY_START_TIME`` if set, else "
"``CTEST_NIGHTLY_START_TIME``"
msgstr ""
":module:`CTest` 模块变量：``NIGHTLY_START_TIME`` 如果设置，否则为 "
"``CTEST_NIGHTLY_START_TIME``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1110
msgid "CTest Configure Step"
msgstr "CTest 配置步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1112
msgid ""
"In a `CTest Script`_, the :command:`ctest_configure` command runs this "
"step. Arguments to the command may specify some of the step settings."
msgstr "在 `CTest 脚本`_ 中， :command:`ctest_configure` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1124
msgid "``ConfigureCommand``"
msgstr "``配置命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1118
msgid ""
"Command-line to launch the software configuration process. It will be "
"executed in the location specified by the ``BuildDirectory`` setting."
msgstr "启动软件配置过程的命令行。它将在 ``BuildDirectory`` 设置指定的位置执行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1122
msgid "`CTest Script`_ variable: :variable:`CTEST_CONFIGURE_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_CONFIGURE_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1123
msgid ""
":module:`CTest` module variable: :variable:`CMAKE_COMMAND` followed by "
":variable:`PROJECT_SOURCE_DIR`"
msgstr ""
":module:`CTest` 模块变量： :variable:`CMAKE_COMMAND` "
"后跟 :variable:`PROJECT_SOURCE_DIR`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1134
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1166
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1220
msgid "``LabelsForSubprojects``"
msgstr "``LabelsForSubprojects``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1127
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1159
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1213
msgid ""
"Specify a semicolon-separated list of labels that will be treated as "
"subprojects. This mapping will be passed on to CDash when configure, test "
"or build results are submitted."
msgstr "指定将被视为子项目的以分号分隔的标签列表。当提交配置、测试或构建结果时，此映射将传递给 CDash。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1131
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1163
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1217
msgid "`CTest Script`_ variable: :variable:`CTEST_LABELS_FOR_SUBPROJECTS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_LABELS_FOR_SUBPROJECTS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1132
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1164
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1218
msgid ":module:`CTest` module variable: ``CTEST_LABELS_FOR_SUBPROJECTS``"
msgstr ":module:`CTest` 模块变量：``CTEST_LABELS_FOR_SUBPROJECTS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1139
msgid "CTest Build Step"
msgstr "CTest构建步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1141
msgid ""
"In a `CTest Script`_, the :command:`ctest_build` command runs this step. "
"Arguments to the command may specify some of the step settings."
msgstr "在 `CTest Script`_ 中， :command:`ctest_build` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1156
msgid "``DefaultCTestConfigurationType``"
msgstr "``DefaultCTestConfigurationType``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1147
msgid ""
"When the build system to be launched allows build-time selection of the "
"configuration (e.g. ``Debug``, ``Release``), this specifies the default "
"configuration to be built when no :option:`-C <ctest -C>` option is given "
"to the :program:`ctest` command.  The value will be substituted into the "
"value of ``MakeCommand`` to replace the literal string "
"``${CTEST_CONFIGURATION_TYPE}`` if it appears."
msgstr ""
"当要启动的构建系统允许构建时选择配置（例如``Debug``，``Release``），这指定了在没有时构建的默认配置:option:`-C <ctest "
"-C>` 选项被赋予 :program:`ctest` "
"命令。该值将被替换为“MakeCommand”的值，以替换出现的文字字符串“${CTEST_CONFIGURATION_TYPE}”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1154
msgid "`CTest Script`_ variable: :variable:`CTEST_CONFIGURATION_TYPE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_CONFIGURATION_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1155
msgid ""
":module:`CTest` module variable: ``DEFAULT_CTEST_CONFIGURATION_TYPE``, "
"initialized by the :envvar:`CMAKE_CONFIG_TYPE` environment variable"
msgstr ""
":module:`CTest` 模块变量：``DEFAULT_CTEST_CONFIGURATION_TYPE``，由 "
":envvar:`CMAKE_CONFIG_TYPE` 环境变量初始化"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1175
msgid "``MakeCommand``"
msgstr "``MakeCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1169
msgid ""
"Command-line to launch the software build process. It will be executed in "
"the location specified by the ``BuildDirectory`` setting."
msgstr "启动软件构建过程的命令行。它将在 ``BuildDirectory`` 设置指定的位置执行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1173
msgid "`CTest Script`_ variable: :variable:`CTEST_BUILD_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_BUILD_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1174
msgid ""
":module:`CTest` module variable: ``MAKECOMMAND``, initialized by the "
":command:`build_command` command"
msgstr ""
":module:`CTest` 模块变量：``MAKECOMMAND``，由 :command:`build_command` 命令初始化"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1191
msgid "``UseLaunchers``"
msgstr "``使用启动器``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1178
msgid ""
"For build trees generated by CMake using one of the :ref:`Makefile "
"Generators` or the :generator:`Ninja` generator, specify whether the "
"``CTEST_USE_LAUNCHERS`` feature is enabled by the "
":module:`CTestUseLaunchers` module (also included by the :module:`CTest` "
"module).  When enabled, the generated build system wraps each invocation "
"of the compiler, linker, or custom command line with a \"launcher\" that "
"communicates with CTest via environment variables and files to report "
"granular build warning and error information.  Otherwise, CTest must "
"\"scrape\" the build output log for diagnostics."
msgstr ""
"对于 CMake 使用 Makefile Generators 或 Ninja 生成器之一生成的构建树，请指定 "
"CTEST_USE_LAUNCHERS 功能是否由 CTestUseLaunchers 模块启用（也包括在内）通过 :module:`CTest` "
"模块）。启用后，生成的构建系统使用“启动器”包装编译器、链接器或自定义命令行的每次调用，“启动器”通过环境变量和文件与 CTest "
"通信，以报告详细的构建警告和错误信息。否则，CTest 必须“抓取”构建输出日志以进行诊断。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1190
msgid "`CTest Script`_ variable: :variable:`CTEST_USE_LAUNCHERS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_USE_LAUNCHERS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1191
msgid ":module:`CTest` module variable: ``CTEST_USE_LAUNCHERS``"
msgstr ":module:`CTest` 模块变量：``CTEST_USE_LAUNCHERS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1196
msgid "CTest Test Step"
msgstr "CTest测试步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1198
msgid ""
"In a `CTest Script`_, the :command:`ctest_test` command runs this step. "
"Arguments to the command may specify some of the step settings."
msgstr "在 `CTest Script`_ 中， :command:`ctest_test` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1210
msgid "``ResourceSpecFile``"
msgstr "``ResourceSpecFile``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1204
msgid ""
"Specify a :ref:`resource specification file <ctest-resource-specification-"
"file>`."
msgstr "指定 :ref:`资源规范文件 <ctest-resource-specification-file>`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1207
msgid "`CTest Script`_ variable: :variable:`CTEST_RESOURCE_SPEC_FILE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_RESOURCE_SPEC_FILE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1208
msgid ":module:`CTest` module variable: ``CTEST_RESOURCE_SPEC_FILE``"
msgstr ":module:`CTest` 模块变量：``CTEST_RESOURCE_SPEC_FILE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1210
msgid "See :ref:`ctest-resource-allocation` for more information."
msgstr "有关详细信息，请参阅:ref:`ctest-resource-allocation`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1228
msgid "``TestLoad``"
msgstr "``测试负载``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1227
msgid "`CTest Script`_ variable: :variable:`CTEST_TEST_LOAD`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_TEST_LOAD`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1228
msgid ":module:`CTest` module variable: ``CTEST_TEST_LOAD``"
msgstr ":module:`CTest` 模块变量：``CTEST_TEST_LOAD``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1235
msgid "``TimeOut``"
msgstr "``超时``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1231
msgid ""
"The default timeout for each test if not specified by the "
":prop_test:`TIMEOUT` test property."
msgstr "如果 :prop_test:`TIMEOUT` 测试属性未指定，则每个测试的默认超时。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1234
msgid "`CTest Script`_ variable: :variable:`CTEST_TEST_TIMEOUT`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_TEST_TIMEOUT`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1235
msgid ":module:`CTest` module variable: ``DART_TESTING_TIMEOUT``"
msgstr ":module:`CTest` 模块变量：``DART_TESTING_TIMEOUT``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1237
msgid ""
"To report extra test values to CDash, see :ref:`Additional Test "
"Measurements`."
msgstr "要向 CDash 报告额外的测试值，请参阅 :ref:`Additional Test Measurements`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1242
msgid "CTest Coverage Step"
msgstr "CTest 覆盖步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1244
msgid ""
"In a `CTest Script`_, the :command:`ctest_coverage` command runs this "
"step. Arguments to the command may specify some of the step settings."
msgstr ""
"在 `CTest Script`_ 中， :command:`ctest_coverage` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1255
msgid "``CoverageCommand``"
msgstr "``CoverageCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1250
msgid ""
"Command-line tool to perform software coverage analysis. It will be "
"executed in the location specified by the ``BuildDirectory`` setting."
msgstr "用于执行软件覆盖率分析的命令行工具。它将在 ``BuildDirectory`` 设置指定的位置执行。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1254
msgid "`CTest Script`_ variable: :variable:`CTEST_COVERAGE_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_COVERAGE_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1255
msgid ":module:`CTest` module variable: ``COVERAGE_COMMAND``"
msgstr ":module:`CTest` 模块变量：``COVERAGE_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1263
msgid "``CoverageExtraFlags``"
msgstr "``CoverageExtraFlags``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1258
msgid "Specify command-line options to the ``CoverageCommand`` tool."
msgstr "为“CoverageCommand”工具指定命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1260
msgid "`CTest Script`_ variable: :variable:`CTEST_COVERAGE_EXTRA_FLAGS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_COVERAGE_EXTRA_FLAGS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1261
msgid ":module:`CTest` module variable: ``COVERAGE_EXTRA_FLAGS``"
msgstr ":module:`CTest` 模块变量：``COVERAGE_EXTRA_FLAGS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1263
msgid "These options are the first arguments passed to ``CoverageCommand``."
msgstr "这些选项是传递给“CoverageCommand”的第一个参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1268
msgid "CTest MemCheck Step"
msgstr "CTest MemCheck 步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1270
msgid ""
"In a `CTest Script`_, the :command:`ctest_memcheck` command runs this "
"step. Arguments to the command may specify some of the step settings."
msgstr ""
"在 `CTest Script`_ 中， :command:`ctest_memcheck` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1280
msgid "``MemoryCheckCommand``"
msgstr "``MemoryCheckCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1276
msgid ""
"Command-line tool to perform dynamic analysis.  Test command lines will be"
" launched through this tool."
msgstr "执行动态分析的命令行工具。测试命令行将通过此工具启动。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1279
msgid "`CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_MEMORYCHECK_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1280
msgid ":module:`CTest` module variable: ``MEMORYCHECK_COMMAND``"
msgstr ":module:`CTest` 模块变量：``MEMORYCHECK_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1287
msgid "``MemoryCheckCommandOptions``"
msgstr "``MemoryCheckCommandOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1283
msgid ""
"Specify command-line options to the ``MemoryCheckCommand`` tool. They will"
" be placed prior to the test command line."
msgstr "为“MemoryCheckCommand”工具指定命令行选项。它们将被放置在测试命令行之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1286
msgid ""
"`CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_COMMAND_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_MEMORYCHECK_COMMAND_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1287
msgid ":module:`CTest` module variable: ``MEMORYCHECK_COMMAND_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``MEMORYCHECK_COMMAND_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1293
msgid "``MemoryCheckType``"
msgstr "``MemoryCheckType``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1290
msgid "Specify the type of memory checking to perform."
msgstr "指定要执行的内存检查类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1292
msgid "`CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_TYPE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_MEMORYCHECK_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1293
msgid ":module:`CTest` module variable: ``MEMORYCHECK_TYPE``"
msgstr ":module:`CTest` 模块变量：``MEMORYCHECK_TYPE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1299
msgid "``MemoryCheckSanitizerOptions``"
msgstr "``MemoryCheckSanitizerOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1296
msgid ""
"Specify options to sanitizers when running with a sanitize-enabled build."
msgstr "使用启用清理的构建运行时，指定清理程序的选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1298
msgid ""
"`CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1299
msgid ":module:`CTest` module variable: ``MEMORYCHECK_SANITIZER_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``MEMORYCHECK_SANITIZER_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1307
msgid "``MemoryCheckSuppressionFile``"
msgstr "``MemoryCheckSuppressionFile``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1302
msgid ""
"Specify a file containing suppression rules for the ``MemoryCheckCommand``"
" tool.  It will be passed with options appropriate to the tool."
msgstr "为“MemoryCheckCommand”工具指定包含抑制规则的文件。它将与适合该工具的选项一起传递。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1306
msgid ""
"`CTest Script`_ variable: :variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1307
msgid ":module:`CTest` module variable: ``MEMORYCHECK_SUPPRESSIONS_FILE``"
msgstr ":module:`CTest` 模块变量：``MEMORYCHECK_SUPPRESSIONS_FILE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1316
msgid "``BoundsCheckerCommand``"
msgstr "``BoundsCheckerCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1312
msgid ""
"Specify a ``MemoryCheckCommand`` that is known to be command-line "
"compatible with Bounds Checker."
msgstr "指定已知与边界检查器命令行兼容的“MemoryCheckCommand”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1323
msgid "``PurifyCommand``"
msgstr "``净化命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1319
msgid ""
"Specify a ``MemoryCheckCommand`` that is known to be command-line "
"compatible with Purify."
msgstr "指定已知与 Purify 命令行兼容的“MemoryCheckCommand”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1323
msgid ":module:`CTest` module variable: ``PURIFYCOMMAND``"
msgstr ":module:`CTest` 模块变量：``PURIFYCOMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1330
msgid "``ValgrindCommand``"
msgstr "``Valgrind 命令``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1326
msgid ""
"Specify a ``MemoryCheckCommand`` that is known to be command-line "
"compatible with Valgrind."
msgstr "指定已知与 Valgrind 命令行兼容的“MemoryCheckCommand”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1330
msgid ":module:`CTest` module variable: ``VALGRIND_COMMAND``"
msgstr ":module:`CTest` 模块变量：``VALGRIND_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1337
msgid "``ValgrindCommandOptions``"
msgstr "``ValgrindCommandOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1333
msgid ""
"Specify command-line options to the ``ValgrindCommand`` tool. They will be"
" placed prior to the test command line."
msgstr "为 ``ValgrindCommand`` 工具指定命令行选项。它们将被放置在测试命令行之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1337
msgid ":module:`CTest` module variable: ``VALGRIND_COMMAND_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``VALGRIND_COMMAND_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1344
msgid "``DrMemoryCommand``"
msgstr "``DrMemoryCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1340
msgid ""
"Specify a ``MemoryCheckCommand`` that is known to be a command-line "
"compatible with DrMemory."
msgstr "指定已知为与 DrMemory 兼容的命令行的“MemoryCheckCommand”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1344
msgid ":module:`CTest` module variable: ``DRMEMORY_COMMAND``"
msgstr ":module:`CTest` 模块变量：``DRMEMORY_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1351
msgid "``DrMemoryCommandOptions``"
msgstr "``DrMemoryCommandOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1347
msgid ""
"Specify command-line options to the ``DrMemoryCommand`` tool. They will be"
" placed prior to the test command line."
msgstr "为 ``DrMemoryCommand`` 工具指定命令行选项。它们将被放置在测试命令行之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1351
msgid ":module:`CTest` module variable: ``DRMEMORY_COMMAND_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``DRMEMORY_COMMAND_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1358
msgid "``CudaSanitizerCommand``"
msgstr "``CudaSanitizerCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1354
msgid ""
"Specify a ``MemoryCheckCommand`` that is known to be a command-line "
"compatible with cuda-memcheck or compute-sanitizer."
msgstr ""
"指定已知为与 cuda-memcheck 或 compute-sanitizer 兼容的命令行的“MemoryCheckCommand”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1358
msgid ":module:`CTest` module variable: ``CUDA_SANITIZER_COMMAND``"
msgstr ":module:`CTest` 模块变量：``CUDA_SANITIZER_COMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1365
msgid "``CudaSanitizerCommandOptions``"
msgstr "``CudaSanitizerCommandOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1361
msgid ""
"Specify command-line options to the ``CudaSanitizerCommand`` tool. They "
"will be placed prior to the test command line."
msgstr "为 ``CudaSanitizerCommand`` 工具指定命令行选项。它们将被放置在测试命令行之前。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1365
msgid ":module:`CTest` module variable: ``CUDA_SANITIZER_COMMAND_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CUDA_SANITIZER_COMMAND_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1370
msgid "CTest Submit Step"
msgstr "CTest提交步骤"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1372
msgid ""
"In a `CTest Script`_, the :command:`ctest_submit` command runs this step. "
"Arguments to the command may specify some of the step settings."
msgstr ""
"在 `CTest Script`_ 中， :command:`ctest_submit` 命令运行此步骤。命令的参数可以指定一些步骤设置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1382
msgid "``BuildName``"
msgstr "``BuildName``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1378
msgid ""
"Describe the dashboard client platform with a short string. (Operating "
"system, compiler, etc.)"
msgstr "用简短的字符串描述仪表板客户端平台。 （操作系统、编译器等）"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1381
msgid "`CTest Script`_ variable: :variable:`CTEST_BUILD_NAME`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_BUILD_NAME`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1382
msgid ":module:`CTest` module variable: ``BUILDNAME``"
msgstr ":module:`CTest` 模块变量：``BUILDNAME``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1388
msgid "``CDashVersion``"
msgstr "``CDashVersion``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1385
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1459
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1465
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1494
msgid "Legacy option.  Not used."
msgstr "遗留选项。不曾用过。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1387
msgid "`CTest Script`_ variable: none, detected from server"
msgstr "`CTest 脚本`_ 变量：无，从服务器检测到"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1388
msgid ":module:`CTest` module variable: ``CTEST_CDASH_VERSION``"
msgstr ":module:`CTest` 模块变量：``CTEST_CDASH_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1395
msgid "``CTestSubmitRetryCount``"
msgstr "``CTestSubmitRetryCount``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1391
msgid "Specify a number of attempts to retry submission on network failure."
msgstr "指定网络故障时重试提交的尝试次数。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1393
msgid ""
"`CTest Script`_ variable: none, use the :command:`ctest_submit` "
"``RETRY_COUNT`` option."
msgstr "`CTest 脚本`_ 变量：无，使用 :command:`ctest_submit` ``RETRY_COUNT`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1395
msgid ":module:`CTest` module variable: ``CTEST_SUBMIT_RETRY_COUNT``"
msgstr ":module:`CTest` 模块变量：``CTEST_SUBMIT_RETRY_COUNT``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1402
msgid "``CTestSubmitRetryDelay``"
msgstr "``CTestSubmitRetryDelay``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1398
msgid "Specify a delay before retrying submission on network failure."
msgstr "在网络故障重试提交之前指定延迟。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1400
msgid ""
"`CTest Script`_ variable: none, use the :command:`ctest_submit` "
"``RETRY_DELAY`` option."
msgstr "`CTest 脚本`_ 变量：无，使用 :command:`ctest_submit` ``RETRY_DELAY`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1402
msgid ":module:`CTest` module variable: ``CTEST_SUBMIT_RETRY_DELAY``"
msgstr ":module:`CTest` 模块变量：``CTEST_SUBMIT_RETRY_DELAY``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1411
msgid "``CurlOptions``"
msgstr "``CurlOptions``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1405
msgid ""
"Specify a semicolon-separated list of options to control the Curl library "
"that CTest uses internally to connect to the server.  Possible options are"
" ``CURLOPT_SSL_VERIFYPEER_OFF`` and ``CURLOPT_SSL_VERIFYHOST_OFF``."
msgstr ""
"指定以分号分隔的选项列表，以控制 CTest 在内部用于连接到服务器的 Curl "
"库。可能的选项是“CURLOPT_SSL_VERIFYPEER_OFF”和“CURLOPT_SSL_VERIFYHOST_OFF”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1410
msgid "`CTest Script`_ variable: :variable:`CTEST_CURL_OPTIONS`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_CURL_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1411
msgid ":module:`CTest` module variable: ``CTEST_CURL_OPTIONS``"
msgstr ":module:`CTest` 模块变量：``CTEST_CURL_OPTIONS``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1420
msgid "``DropLocation``"
msgstr "``DropLocation``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1414
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1423
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1432
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1441
#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1450
msgid ""
"Legacy option.  When ``SubmitURL`` is not set, it is constructed from "
"``DropMethod``, ``DropSiteUser``, ``DropSitePassword``, ``DropSite``, and "
"``DropLocation``."
msgstr ""
"遗留选项。当未设置 ``SubmitURL`` 时，它由 "
"``DropMethod``、``DropSiteUser``、``DropSitePassword``、``DropSite`` 和 "
"``DropLocation`` 构造。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1418
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_LOCATION`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_LOCATION`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1419
msgid ""
":module:`CTest` module variable: ``DROP_LOCATION`` if set, else "
"``CTEST_DROP_LOCATION``"
msgstr ""
":module:`CTest` 模块变量：``DROP_LOCATION`` 如果设置，否则为 ``CTEST_DROP_LOCATION``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1429
msgid "``DropMethod``"
msgstr "``DropMethod``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1427
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_METHOD`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_METHOD`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1428
msgid ""
":module:`CTest` module variable: ``DROP_METHOD`` if set, else "
"``CTEST_DROP_METHOD``"
msgstr ":module:`CTest` 模块变量：``DROP_METHOD`` 如果设置，否则为 ``CTEST_DROP_METHOD``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1438
msgid "``DropSite``"
msgstr "``DropSite``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1436
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_SITE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_SITE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1437
msgid ""
":module:`CTest` module variable: ``DROP_SITE`` if set, else "
"``CTEST_DROP_SITE``"
msgstr ":module:`CTest` 模块变量：``DROP_SITE`` 如果设置，否则为 ``CTEST_DROP_SITE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1447
msgid "``DropSitePassword``"
msgstr "``DropSitePassword``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1445
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_SITE_PASSWORD`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_SITE_PASSWORD`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1446
msgid ""
":module:`CTest` module variable: ``DROP_SITE_PASSWORD`` if set, else "
"``CTEST_DROP_SITE_PASWORD``"
msgstr ""
":module:`CTest` 模块变量：``DROP_SITE_PASSWORD`` 如果已设置，否则为 "
"``CTEST_DROP_SITE_PASSWORD``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1456
msgid "``DropSiteUser``"
msgstr "``DropSiteUser``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1454
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_SITE_USER`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_SITE_USER`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1455
msgid ""
":module:`CTest` module variable: ``DROP_SITE_USER`` if set, else "
"``CTEST_DROP_SITE_USER``"
msgstr ""
":module:`CTest` 模块变量：``DROP_SITE_USER`` 如果设置，否则``CTEST_DROP_SITE_USER``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1462
msgid "``IsCDash``"
msgstr "``是CDash``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1461
msgid "`CTest Script`_ variable: :variable:`CTEST_DROP_SITE_CDASH`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_DROP_SITE_CDASH`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1462
msgid ":module:`CTest` module variable: ``CTEST_DROP_SITE_CDASH``"
msgstr ":module:`CTest` 模块变量：``CTEST_DROP_SITE_CDASH``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1468
msgid "``ScpCommand``"
msgstr "``ScpCommand``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1467
msgid "`CTest Script`_ variable: :variable:`CTEST_SCP_COMMAND`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SCP_COMMAND`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1468
msgid ":module:`CTest` module variable: ``SCPCOMMAND``"
msgstr ":module:`CTest` 模块变量：``SCPCOMMAND``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1476
msgid "``Site``"
msgstr "``网站``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1471
msgid ""
"Describe the dashboard client host site with a short string. (Hostname, "
"domain, etc.)"
msgstr "用短字符串描述仪表板客户端主机站点。 （主机名、域等）"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1474
msgid "`CTest Script`_ variable: :variable:`CTEST_SITE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SITE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1475
msgid ""
":module:`CTest` module variable: ``SITE``, initialized by the "
":command:`site_name` command"
msgstr ":module:`CTest` 模块变量：``SITE``，由 :command:`site_name` 命令初始化"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1484
msgid "``SubmitURL``"
msgstr "``提交网址``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1479
msgid ""
"The ``http`` or ``https`` URL of the dashboard server to send the "
"submission to."
msgstr "要将提交发送到的仪表板服务器的 ``http`` 或 ``https`` URL。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1482
msgid "`CTest Script`_ variable: :variable:`CTEST_SUBMIT_URL`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SUBMIT_URL`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1483
msgid ""
":module:`CTest` module variable: ``SUBMIT_URL`` if set, else "
"``CTEST_SUBMIT_URL``"
msgstr ":module:`CTest` 模块变量：``SUBMIT_URL`` 如果设置，否则为 ``CTEST_SUBMIT_URL``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1491
msgid "``SubmitInactivityTimeout``"
msgstr "``提交不活动超时``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1487
msgid ""
"The time to wait for the submission after which it is canceled if not "
"completed. Specify a zero value to disable timeout."
msgstr "等待提交的时间，如果未完成则取消提交。指定零值以禁用超时。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1490
msgid ""
"`CTest Script`_ variable: :variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1491
msgid ":module:`CTest` module variable: ``CTEST_SUBMIT_INACTIVITY_TIMEOUT``"
msgstr ":module:`CTest` 模块变量：``CTEST_SUBMIT_INACTIVITY_TIMEOUT``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1498
msgid "``TriggerSite``"
msgstr "``触发站点``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1496
msgid "`CTest Script`_ variable: :variable:`CTEST_TRIGGER_SITE`"
msgstr "`CTest 脚本`_ 变量： :variable:`CTEST_TRIGGER_SITE`"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1497
msgid ""
":module:`CTest` module variable: ``TRIGGER_SITE`` if set, else "
"``CTEST_TRIGGER_SITE``"
msgstr ""
":module:`CTest` 模块变量：``TRIGGER_SITE`` 如果设置，否则为 ``CTEST_TRIGGER_SITE``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1503
msgid "Show as JSON Object Model"
msgstr "显示为 JSON 对象模型"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1507
msgid ""
"When the ``--show-only=json-v1`` command line option is given, the test "
"information is output in JSON format.  Version 1.0 of the JSON object "
"model is defined as follows:"
msgstr ""
"当给出 ``--show-only=json-v1`` 命令行选项时，测试信息以 JSON 格式输出。 1.0版本的JSON对象模型定义如下："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1512
msgid "The string \"ctestInfo\"."
msgstr "字符串“ctestInfo”。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1515
msgid "A JSON object specifying the version components.  Its members are"
msgstr "指定版本组件的 JSON 对象。它的成员是"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1518
msgid "A non-negative integer specifying the major version component."
msgstr "指定主要版本组件的非负整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1520
msgid "A non-negative integer specifying the minor version component."
msgstr "指定次要版本组件的非负整数。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1523
msgid ""
"JSON object representing backtrace information with the following members:"
msgstr "表示具有以下成员的回溯信息的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1527
msgid "List of command names."
msgstr "命令名称列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1529
msgid "List of file names."
msgstr "文件名列表。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1531
msgid "List of node JSON objects with members:"
msgstr "具有成员的节点 JSON 对象列表："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1534
msgid "Index into the ``commands`` member of the ``backtraceGraph``."
msgstr "索引到 ``backtraceGraph`` 的``commands`` 成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1536
msgid "Index into the ``files`` member of the ``backtraceGraph``."
msgstr "索引到 backtraceGraph 的 files 成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1538
msgid "Line number in the file where the backtrace was added."
msgstr "添加回溯的文件中的行号。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1540
msgid ""
"Index into the ``nodes`` member of the ``backtraceGraph`` representing the"
" parent in the graph."
msgstr "索引到表示图中父级的 ``backtraceGraph`` 的``nodes`` 成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1559
msgid "``tests``"
msgstr "``测试``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1544
msgid ""
"A JSON array listing information about each test.  Each entry is a JSON "
"object with members:"
msgstr "列出有关每个测试的信息的 JSON 数组。每个条目都是一个包含成员的 JSON 对象："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1548
msgid "Test name."
msgstr "测试名称。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1550
msgid "``config``"
msgstr "``配置``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1550
msgid ""
"Configuration that the test can run on. Empty string means any config."
msgstr "测试可以运行的配置。空字符串表示任何配置。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1553
msgid ""
"List where the first element is the test command and the remaining "
"elements are the command arguments."
msgstr "列表，其中第一个元素是测试命令，其余元素是命令参数。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1556
msgid "Index into the ``nodes`` member of the ``backtraceGraph``."
msgstr "索引到 ``backtraceGraph`` 的``nodes`` 成员。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1558
msgid ""
"Test properties. Can contain keys for each of the supported test "
"properties."
msgstr "测试属性。可以包含每个受支持的测试属性的键。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1564
msgid "Resource Allocation"
msgstr "资源分配"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1566
msgid ""
"CTest provides a mechanism for tests to specify the resources that they "
"need in a fine-grained way, and for users to specify the resources "
"available on the running machine. This allows CTest to internally keep "
"track of which resources are in use and which are free, scheduling tests "
"in a way that prevents them from trying to claim resources that are not "
"available."
msgstr ""
"CTest 为测试提供了一种机制，以细粒度的方式指定它们需要的资源，并为用户指定运行机器上可用的资源。这允许 CTest "
"在内部跟踪哪些资源正在使用中，哪些资源是免费的，以防止它们尝试声明不可用资源的方式安排测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1572
msgid ""
"When the resource allocation feature is used, CTest will not oversubscribe"
" resources. For example, if a resource has 8 slots, CTest will not run "
"tests that collectively use more than 8 slots at a time. This has the "
"effect of limiting how many tests can run at any given time, even if a "
"high ``-j`` argument is used, if those tests all use some slots from the "
"same resource. In addition, it means that a single test that uses more of "
"a resource than is available on a machine will not run at all (and will be"
" reported as ``Not Run``)."
msgstr ""
"当使用资源分配特性时，CTest 不会超额订阅资源。例如，如果一个资源有 8 个槽，CTest 将不会运行一次总共使用超过 8 "
"个槽的测试。这具有限制在任何给定时间可以运行多少测试的效果，即使使用高“-j”参数，如果这些测试都使用来自同一资源的一些插槽。此外，这意味着单个测试使用的资源多于机器上可用的资源，将根本无法运行（并将报告为“未运行”）。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1581
msgid ""
"A common use case for this feature is for tests that require the use of a "
"GPU. Multiple tests can simultaneously allocate memory from a GPU, but if "
"too many tests try to do this at once, some of them will fail to allocate,"
" resulting in a failed test, even though the test would have succeeded if "
"it had the memory it needed. By using the resource allocation feature, "
"each test can specify how much memory it requires from a GPU, allowing "
"CTest to schedule tests in a way that running several of these tests at "
"once does not exhaust the GPU's memory pool."
msgstr ""
"此功能的一个常见用例是用于需要使用 GPU 的测试。多个测试可以同时从一个 GPU "
"分配内存，但是如果有太多测试试图同时执行此操作，其中一些将无法分配，从而导致测试失败，即使如果它具有所需的内存，测试本可以成功.通过使用资源分配功能，每个测试都可以指定它需要从"
" GPU 获得多少内存，从而允许 CTest 以一种方式安排测试，即一次运行多个测试不会耗尽 GPU 的内存池。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1590
msgid ""
"Please note that CTest has no concept of what a GPU is or how much memory "
"it has, nor does it have any way of communicating with a GPU to retrieve "
"this information or perform any memory management. CTest simply keeps "
"track of a list of abstract resource types, each of which has a certain "
"number of slots available for tests to use. Each test specifies the number"
" of slots that it requires from a certain resource, and CTest then "
"schedules them in a way that prevents the total number of slots in use "
"from exceeding the listed capacity. When a test is executed, and slots "
"from a resource are allocated to that test, tests may assume that they "
"have exclusive use of those slots for the duration of the test's process."
msgstr ""
"请注意，CTest 不知道什么是 GPU 或它有多少内存，也没有任何与 GPU 通信的方式来检索此信息或执行任何内存管理。 CTest "
"简单地跟踪一个抽象资源类型列表，每个资源类型都有一定数量的插槽可供测试使用。每个测试指定它需要从特定资源获得的槽数，然后 CTest "
"以防止使用的槽总数超过列出的容量的方式安排它们。当一个测试被执行，并且资源中的槽被分配给该测试时，测试可能会假设它们在测试过程的持续时间内独占使用这些槽。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1601
msgid "The CTest resource allocation feature consists of two inputs:"
msgstr "CTest 资源分配功能包含两个输入："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1603
msgid ""
"The :ref:`resource specification file <ctest-resource-specification-"
"file>`, described below, which describes the resources available on the "
"system."
msgstr ""
":ref:`资源规范文件 <ctest-resource-specification-file>`，如下所述，它描述了系统上可用的资源。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1605
msgid ""
"The :prop_test:`RESOURCE_GROUPS` property of tests, which describes the "
"resources required by the test."
msgstr "测试的 :prop_test:`RESOURCE_GROUPS` 属性，它描述了测试所需的资源。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1608
msgid ""
"When CTest runs a test, the resources allocated to that test are passed in"
" the form of a set of :ref:`environment variables <ctest-resource-"
"environment-variables>` as described below. Using this information to "
"decide which resource to connect to is left to the test writer."
msgstr ""
"当 CTest 运行测试时，分配给该测试的资源以一组 :ref:`环境变量 <ctest-resource-environment-"
"variables>` 的形式传递，如下所述。使用此信息来决定连接到哪个资源留给测试编写者。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1614
msgid ""
"The ``RESOURCE_GROUPS`` property tells CTest what resources a test expects"
" to use grouped in a way meaningful to the test.  The test itself must "
"read the :ref:`environment variables <ctest-resource-environment-"
"variables>` to determine which resources have been allocated to each "
"group.  For example, each group may correspond to a process the test will "
"spawn when executed."
msgstr ""
"``RESOURCE_GROUPS`` 属性告诉 CTest 测试期望以对测试有意义的方式分组使用哪些资源。测试本身必须读取 :ref:`环境变量 "
"<ctest-resource-environment-variables>` "
"以确定已将哪些资源分配给每个组。例如，每个组可能对应于测试将在执行时生成的进程。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1620
msgid ""
"Note that even if a test specifies a ``RESOURCE_GROUPS`` property, it is "
"still possible for that to test to run without any resource allocation "
"(and without the corresponding :ref:`environment variables <ctest-"
"resource-environment-variables>`) if the user does not pass a resource "
"specification file. Passing this file, either through the ``--resource-"
"spec-file`` command-line argument or the ``RESOURCE_SPEC_FILE`` argument "
"to :command:`ctest_test`, is what activates the resource allocation "
"feature. Tests should check the ``CTEST_RESOURCE_GROUP_COUNT`` environment"
" variable to find out whether or not resource allocation is activated. "
"This variable will always (and only) be defined if resource allocation is "
"activated. If resource allocation is not activated, then the "
"``CTEST_RESOURCE_GROUP_COUNT`` variable will not exist, even if it exists "
"for the parent :program:`ctest` process. If a test absolutely must have "
"resource allocation, then it can return a failing exit code or use the "
":prop_test:`SKIP_RETURN_CODE` or :prop_test:`SKIP_REGULAR_EXPRESSION` "
"properties to indicate a skipped test."
msgstr ""
"请注意，即使测试指定了 ``RESOURCE_GROUPS`` 属性，该测试仍然可以在没有任何资源分配的情况下运行（并且没有相应的 "
":ref:`环境变量 <ctest-resource-environment-variables>` ) 如果用户没有传递资源规范文件。通过 "
"``--resource-spec-file`` 命令行参数或 ``RESOURCE_SPEC_FILE`` "
"参数将此文件传递给 :command:`ctest_test`，激活资源分配功能。测试应该检查``CTEST_RESOURCE_GROUP_COUNT``"
" 环境变量以查明资源分配是否被激活。如果激活资源分配，则将始终（且仅）定义此变量。如果未激活资源分配，则 "
"CTEST_RESOURCE_GROUP_COUNT 变量将不存在，即使它存在于父 ctest "
"进程中。如果测试绝对必须有资源分配，那么它可以返回失败的退出代码或使用 :prop_test:`SKIP_RETURN_CODE` 或 "
":prop_test:`SKIP_REGULAR_EXPRESSION` 属性来指示跳过的测试。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1640
msgid "Resource Specification File"
msgstr "资源规范文件"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1642
msgid ""
"The resource specification file is a JSON file which is passed to CTest, "
"either on the command line as :option:`ctest --resource-spec-file`, or as "
"the ``RESOURCE_SPEC_FILE`` argument of :command:`ctest_test`. If a "
"dashboard script is used and ``RESOURCE_SPEC_FILE`` is not specified, the "
"value of :variable:`CTEST_RESOURCE_SPEC_FILE` in the dashboard script is "
"used instead. If :option:`--resource-spec-file <ctest --resource-spec-"
"file>`, ``RESOURCE_SPEC_FILE``, and :variable:`CTEST_RESOURCE_SPEC_FILE` "
"in the dashboard script are not specified, the value of "
":variable:`CTEST_RESOURCE_SPEC_FILE` in the CMake build is used instead. "
"If none of these are specified, no resource spec file is used."
msgstr ""
"资源规范文件是一个传递给 CTest 的 JSON 文件，可以在命令行上作为 :option:`ctest --resource-spec-"
"file`，或者作为 :command:`ctest_test` 的``RESOURCE_SPEC_FILE`` 参数.如果使用仪表板脚本且未指定 "
"``RESOURCE_SPEC_FILE``，则使用仪表板脚本中的 CTEST_RESOURCE_SPEC_FILE "
"的值代替。如果仪表板脚本中的 :option:`--resource-spec-file <ctest --resource-spec-"
"file>`、``RESOURCE_SPEC_FILE`` 和 :variable:`CTEST_RESOURCE_SPEC_FILE` "
"未指定，则 :variable 的值：改为使用 CMake 构建中的 "
"CTEST_RESOURCE_SPEC_FILE。如果未指定这些，则不使用资源规范文件。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1652
msgid ""
"The resource specification file must be a JSON object. All examples in "
"this document assume the following resource specification file:"
msgstr "资源规范文件必须是 JSON 对象。本文档中的所有示例均采用以下资源规范文件："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1694
msgid ""
"An object containing a ``major`` integer field and a ``minor`` integer "
"field. Currently, the only supported version is major ``1``, minor ``0``. "
"Any other value is an error."
msgstr "包含一个“主要”整数字段和一个“次要”整数字段的对象。目前，唯一支持的版本是主要的“1”，次要的“0”。任何其他值都是错误的。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1738
msgid "``local``"
msgstr "``本地``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1699
msgid ""
"A JSON array of resource sets present on the system.  Currently, this "
"array is restricted to being of size 1."
msgstr "系统上存在的资源集的 JSON 数组。目前，此数组的大小限制为 1。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1702
msgid ""
"Each array element is a JSON object with members whose names are equal to "
"the desired resource types, such as ``gpus``. These names must start with "
"a lowercase letter or an underscore, and subsequent characters can be a "
"lowercase letter, a digit, or an underscore. Uppercase letters are not "
"allowed, because certain platforms have case-insensitive environment "
"variables. See the `Environment Variables`_ section below for more "
"information. It is recommended that the resource type name be the plural "
"of a noun, such as ``gpus`` or ``crypto_chips`` (and not ``gpu`` or "
"``crypto_chip``.)"
msgstr ""
"每个数组元素都是一个 JSON 对象，其成员的名称等于所需的资源类型，例如 "
"``gpus``。这些名称必须以小写字母或下划线开头，后面的字符可以是小写字母、数字或下划线。不允许使用大写字母，因为某些平台具有不区分大小写的环境变量。有关详细信息，请参阅下面的“环境变量”部分。建议资源类型名称是名词的复数形式，例如"
" ``gpus`` 或 ``crypto_chips``（而不是 ``gpu`` 或 ``crypto_chip``。）"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1712
msgid ""
"Please note that the names ``gpus`` and ``crypto_chips`` are just "
"examples, and CTest does not interpret them in any way. You are free to "
"make up any resource type you want to meet your own requirements."
msgstr ""
"请注意，名称 ``gpus`` 和 ``crypto_chips`` 只是示例，CTest "
"不会以任何方式解释它们。您可以自由组合您想要满足自己要求的任何资源类型。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1716
msgid ""
"The value for each resource type is a JSON array consisting of JSON "
"objects, each of which describe a specific instance of the specified "
"resource. These objects have the following members:"
msgstr "每个资源类型的值都是一个由 JSON 对象组成的 JSON 数组，每个对象都描述了指定资源的一个特定实例。这些对象具有以下成员："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1721
msgid ""
"A string consisting of an identifier for the resource. Each character in "
"the identifier can be a lowercase letter, a digit, or an underscore. "
"Uppercase letters are not allowed."
msgstr "由资源标识符组成的字符串。标识符中的每个字符可以是小写字母、数字或下划线。不允许使用大写字母。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1725
msgid ""
"Identifiers must be unique within a resource type. However, they do not "
"have to be unique across resource types. For example, it is valid to have "
"a ``gpus`` resource named ``0`` and a ``crypto_chips`` resource named "
"``0``, but not two ``gpus`` resources both named ``0``."
msgstr ""
"标识符在资源类型中必须是唯一的。但是，它们不必在各种资源类型中是唯一的。例如，有一个名为 ``0`` 的 ``gpus`` 资源和一个名为 "
"``0`` 的 ``crypto_chips`` 资源是有效的，但两个 ``gpus`` 资源都命名为 ``0 是有效的``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1730
msgid ""
"Please note that the IDs ``0``, ``1``, ``2``, ``3``, and ``card0`` are "
"just examples, and CTest does not interpret them in any way. You are free "
"to make up any IDs you want to meet your own requirements."
msgstr ""
"请注意，ID ``0``、``1``、``2``、``3`` 和 ``card0`` 只是示例，CTest "
"不会以任何方式解释它们。您可以根据自己的要求随意编造任何 ID。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1738
msgid "``slots``"
msgstr "``插槽``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1735
msgid ""
"An optional unsigned number specifying the number of slots available on "
"the resource. For example, this could be megabytes of RAM on a GPU, or "
"cryptography units available on a cryptography chip. If ``slots`` is not "
"specified, a default value of ``1`` is assumed."
msgstr ""
"一个可选的无符号数字，指定资源上可用的插槽数。例如，这可能是 GPU 上的兆字节 RAM，或加密芯片上可用的加密单元。如果未指定 "
"``slots``，则假定默认值为 ``1``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1740
msgid ""
"In the example file above, there are four GPUs with ID's 0 through 3. GPU "
"0 has 2 slots, GPU 1 has 4, GPU 2 has 2, and GPU 3 has a default of 1 "
"slot. There is also one cryptography chip with 4 slots."
msgstr ""
"在上面的示例文件中，有四个 ID 从 0 到 3 的 GPU。GPU 0 有 2 个插槽，GPU 1 有 4 个，GPU 2 有 2 个，GPU 3"
" 默认有 1 个插槽。还有一个带 4 个插槽的加密芯片。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1745
msgid "``RESOURCE_GROUPS`` Property"
msgstr "``RESOURCE_GROUPS`` 属性"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1747
msgid "See :prop_test:`RESOURCE_GROUPS` for a description of this property."
msgstr "有关此属性的说明，请参阅 :prop_test:`RESOURCE_GROUPS`。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1754
msgid ""
"Once CTest has decided which resources to allocate to a test, it passes "
"this information to the test executable as a series of environment "
"variables. For each example below, we will assume that the test in "
"question has a :prop_test:`RESOURCE_GROUPS` property of "
"``2,gpus:2;gpus:4,gpus:1,crypto_chips:2``."
msgstr ""
"一旦 CTest 决定将哪些资源分配给测试，它会将此信息作为一系列环境变量传递给测试可执行文件。对于下面的每个示例，我们将假设所讨论的测试具有 "
":prop_test:`RESOURCE_GROUPS` 属性 ``2,gpus:2;gpus:4,gpus:1,crypto_chips:2``。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1760
msgid "The following variables are passed to the test process:"
msgstr "以下变量被传递给测试过程："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1764
msgid ""
"The total number of groups specified by the :prop_test:`RESOURCE_GROUPS` "
"property. For example:"
msgstr ":prop_test:`RESOURCE_GROUPS` 属性指定的组总数。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1767
msgid "``CTEST_RESOURCE_GROUP_COUNT=3``"
msgstr "``CTEST_RESOURCE_GROUP_COUNT=3``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1769
msgid ""
"This variable will only be defined if :manual:`ctest(1)` has been given a "
"``--resource-spec-file``, or if :command:`ctest_test` has been given a "
"``RESOURCE_SPEC_FILE``. If no resource specification file has been given, "
"this variable will not be defined."
msgstr ""
"这个变量只有在 :manual:`ctest(1)` 被赋予了``--resource-spec-"
"file``，或者 :command:`ctest_test` 被赋予了``RESOURCE_SPEC_FILE`` "
"时才会被定义。如果没有给出资源规范文件，则不会定义该变量。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1776
msgid ""
"The list of resource types allocated to each group, with each item "
"separated by a comma. ``<num>`` is a number from zero to "
"``CTEST_RESOURCE_GROUP_COUNT`` minus one. ``CTEST_RESOURCE_GROUP_<num>`` "
"is defined for each ``<num>`` in this range. For example:"
msgstr ""
"分配给每个组的资源类型列表，每个项目以逗号分隔。 ``<num>`` 是从零到 ``CTEST_RESOURCE_GROUP_COUNT`` "
"减一的数字。 ``CTEST_RESOURCE_GROUP_<num>`` 是为此范围内的每个 ``<num>`` 定义的。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1781
msgid "``CTEST_RESOURCE_GROUP_0=gpus``"
msgstr "``CTEST_RESOURCE_GROUP_0=gpus``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1782
msgid "``CTEST_RESOURCE_GROUP_1=gpus``"
msgstr "``CTEST_RESOURCE_GROUP_1=gpus``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1783
msgid "``CTEST_RESOURCE_GROUP_2=crypto_chips,gpus``"
msgstr "``CTEST_RESOURCE_GROUP_2=crypto_chips,gpus``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1787
msgid ""
"The list of resource IDs and number of slots from each ID allocated to "
"each group for a given resource type. This variable consists of a series "
"of pairs, each pair separated by a semicolon, and with the two items in "
"the pair separated by a comma. The first item in each pair is ``id:`` "
"followed by the ID of a resource of type ``<resource-type>``, and the "
"second item is ``slots:`` followed by the number of slots from that "
"resource allocated to the given group. For example:"
msgstr ""
"资源 ID 列表和每个 ID 分配给给定资源类型的每个组的槽数。此变量由一系列对组成，每对由分号分隔，并且对中的两个项目由逗号分隔。每对中的第一项是"
" ``id:`` 后跟类型为 ``<resource-type>`` 的资源 ID，第二项是 ``slots:`` "
"后跟来自的插槽数分配给给定组的资源。例如："

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1795
msgid "``CTEST_RESOURCE_GROUP_0_GPUS=id:0,slots:2``"
msgstr "``CTEST_RESOURCE_GROUP_0_GPUS=id:0,slots:2``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1796
msgid "``CTEST_RESOURCE_GROUP_1_GPUS=id:2,slots:2``"
msgstr "``CTEST_RESOURCE_GROUP_1_GPUS=id:2,slots:2``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1797
msgid "``CTEST_RESOURCE_GROUP_2_GPUS=id:1,slots:4;id:3,slots:1``"
msgstr "``CTEST_RESOURCE_GROUP_2_GPUS=id:1,slots:4;id:3,slots:1``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1798
msgid "``CTEST_RESOURCE_GROUP_2_CRYPTO_CHIPS=id:card0,slots:2``"
msgstr "``CTEST_RESOURCE_GROUP_2_CRYPTO_CHIPS=id:card0,slots:2``"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1800
msgid ""
"In this example, group 0 gets 2 slots from GPU ``0``, group 1 gets 2 slots"
" from GPU ``2``, and group 2 gets 4 slots from GPU ``1``, 1 slot from GPU "
"``3``, and 2 slots from cryptography chip ``card0``."
msgstr ""
"在此示例中，第 0 组从 GPU ``0`` 获得 2 个插槽，第 1 组从 GPU ``2`` 获得 2 个插槽，第 2 组从 GPU ``1``"
" 获得 4 个插槽，从 GPU `` 获得 1 个插槽3``，以及来自密码芯片``card0`` 的 2 个插槽。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1804
msgid ""
"``<num>`` is a number from zero to ``CTEST_RESOURCE_GROUP_COUNT`` minus "
"one. ``<resource-type>`` is the name of a resource type, converted to "
"uppercase. ``CTEST_RESOURCE_GROUP_<num>_<resource-type>`` is defined for "
"the product of each ``<num>`` in the range listed above and each resource "
"type listed in ``CTEST_RESOURCE_GROUP_<num>``."
msgstr ""
"``<num>`` 是从零到 ``CTEST_RESOURCE_GROUP_COUNT`` 减一的数字。 ``<resource-type>`` "
"是资源类型的名称，转换为大写。 ``CTEST_RESOURCE_GROUP_<num>_<resource-type>`` "
"是为上面列出的范围内的每个``<num>`` 和``CTEST_RESOURCE_GROUP_<num>`` 中列出的每个资源类型的乘积定义的。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1810
msgid ""
"Because some platforms have case-insensitive names for environment "
"variables, the names of resource types may not clash in a case-insensitive"
" environment. Because of this, for the sake of simplicity, all resource "
"types must be listed in all lowercase in the :ref:`resource specification "
"file <ctest-resource-specification-file>` and in the "
":prop_test:`RESOURCE_GROUPS` property, and they are converted to all "
"uppercase in the ``CTEST_RESOURCE_GROUP_<num>_<resource-type>`` "
"environment variable."
msgstr ""
"由于某些平台的环境变量名称不区分大小写，因此资源类型的名称在不区分大小写的环境中可能不会发生冲突。因此，为了简单起见，资源规范文件 <ctest-"
"resource-specification-file> 和 RESOURCE_GROUPS 属性中的所有资源类型都必须全部小写，并且它们在 "
"CTEST_RESOURCE_GROUP_<num>_<resource-type> 环境变量中全部转换为大写。"

#: ../../cmake-prefix/src/cmake/Help/manual/ctest.1.rst:1824
msgid "_`CDash`: https://cdash.org"
msgstr "_`CDash`:https://cdash.org"
