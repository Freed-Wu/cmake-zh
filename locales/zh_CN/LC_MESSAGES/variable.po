# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.12.1\n"

#: ../../cmake-prefix/src/cmake/Help/variable/ANDROID.rst:2
msgid "ANDROID"
msgstr "安卓"

#: ../../cmake-prefix/src/cmake/Help/variable/ANDROID.rst:6
msgid ""
"Set to ``1`` when the target system (:variable:`CMAKE_SYSTEM_NAME`) is "
"``Android``."
msgstr "当目标系统 (:variable:`CMAKE_SYSTEM_NAME`) 为 ``Android`` 时设置为 ``1``。"

#: ../../cmake-prefix/src/cmake/Help/variable/APPLE.rst:2
msgid "APPLE"
msgstr "苹果"

#: ../../cmake-prefix/src/cmake/Help/variable/APPLE.rst:4
msgid ""
"Set to ``True`` when the target system is an Apple platform (macOS, iOS, "
"tvOS or watchOS)."
msgstr "当目标系统是 Apple 平台（macOS、iOS、tvOS 或 watchOS）时设置为“True”。"

#: ../../cmake-prefix/src/cmake/Help/variable/BORLAND.rst:2
msgid "BORLAND"
msgstr "宝兰"

#: ../../cmake-prefix/src/cmake/Help/variable/BORLAND.rst:4
msgid "``True`` if the Borland compiler is being used."
msgstr "如果正在使用 Borland 编译器，则为 True。"

#: ../../cmake-prefix/src/cmake/Help/variable/BORLAND.rst:6
msgid "This is set to ``true`` if the Borland compiler is being used."
msgstr "如果正在使用 Borland 编译器，则此设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/BSD.rst:2
msgid "BSD"
msgstr "BSD"

#: ../../cmake-prefix/src/cmake/Help/variable/BSD.rst:6
msgid ""
"Set to a string value when the target system is BSD. This value can be one"
" of the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD."
msgstr ""
"当目标系统是 BSD 时设置为字符串值。该值可以是以下之一：DragonFlyBSD、FreeBSD、OpenBSD 或 NetBSD。"

#: ../../cmake-prefix/src/cmake/Help/variable/BUILD_SHARED_LIBS.rst:2
msgid "BUILD_SHARED_LIBS"
msgstr "构建共享库"

#: ../../cmake-prefix/src/cmake/Help/variable/BUILD_SHARED_LIBS.rst:4
msgid ""
"Global flag to cause :command:`add_library` to create shared libraries if "
"on."
msgstr "如果打开，全局标志会导致 :command:`add_library` 创建共享库。"

#: ../../cmake-prefix/src/cmake/Help/variable/BUILD_SHARED_LIBS.rst:6
msgid ""
"If present and true, this will cause all libraries to be built shared "
"unless the library was explicitly added as a static library.  This "
"variable is often added to projects as an :command:`option` so that each "
"user of a project can decide if they want to build the project using "
"shared or static libraries."
msgstr ""
"如果存在且为真，这将导致所有库被共享构建，除非库被显式添加为静态库。此变量通常作为 :command:`option` "
"添加到项目中，以便项目的每个用户都可以决定是否要使用共享库或静态库构建项​​目。"

#: ../../cmake-prefix/src/cmake/Help/variable/CACHE.rst:2
msgid "CACHE"
msgstr "缓存"

#: ../../cmake-prefix/src/cmake/Help/variable/CACHE.rst:6
msgid "Operator to read cache variables."
msgstr "运算符读取缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CACHE.rst:8
msgid ""
"Use the syntax ``$CACHE{VAR}`` to read cache entry ``VAR``. See the "
":ref:`cmake-language(7) variables <CMake Language Variables>` "
"documentation for more complete documentation of the interaction of normal"
" variables and cache entries."
msgstr ""
"使用语法“$CACHE{VAR}”读取缓存条目“VAR”。请参阅 :ref:`cmake-language(7) variables <CMake "
"Language Variables>` 文档以获取有关普通变量和缓存条目交互的更完整文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CACHE.rst:13
msgid ""
"When evaluating :ref:`Variable References` of the form ``${VAR}``, CMake "
"first searches for a normal variable with that name, and if not found "
"CMake will search for a cache entry with that name. The ``$CACHE{VAR}`` "
"syntax can be used to do direct cache lookup and ignore any existing "
"normal variable."
msgstr ""
"在评估 ``${VAR}`` 形式的变量引用时，CMake 首先搜索具有该名称的普通变量，如果未找到，CMake 将搜索具有该名称的缓存条目。 "
"``$CACHE{VAR}`` 语法可用于直接缓存查找并忽略任何现有的普通变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CACHE.rst:19
msgid ""
"See the :command:`set` and :command:`unset` commands to see how to write "
"or remove cache variables."
msgstr "请参阅 :command:`set` 和 :command:`unset` 命令以了解如何写入或删除缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ABSOLUTE_DESTINATION_FILES.rst:2
msgid "CMAKE_ABSOLUTE_DESTINATION_FILES"
msgstr "CMAKE_ABSOLUTE_DESTINATION_FILES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ABSOLUTE_DESTINATION_FILES.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ABSOLUTE_DESTINATION_FILES.rst:4
msgid ""
"List of files which have been installed using an ``ABSOLUTE DESTINATION`` "
"path."
msgstr "使用“绝对目标”路径安装的文件列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ABSOLUTE_DESTINATION_FILES.rst:6
msgid ""
"This variable is defined by CMake-generated ``cmake_install.cmake`` "
"scripts.  It can be used (read-only) by programs or scripts that source "
"those install scripts.  This is used by some CPack generators (e.g.  RPM)."
msgstr ""
"此变量由 CMake 生成的“cmake_install.cmake”脚本定义。它可以由获取这些安装脚本的程序或脚本使用（只读）。这被一些 "
"CPack 生成器（例如 RPM）使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ADSP_ROOT.rst:2
msgid "CMAKE_ADSP_ROOT"
msgstr "CMAKE_ADSP_ROOT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ADSP_ROOT.rst:6
msgid ""
"When :ref:`Cross Compiling for ADSP SHARC/Blackfin`, this variable holds "
"the absolute path to the latest CCES or VDSP++ install. The directory is "
"expected to contain the ``cc21k.exe`` and ``ccblkfn.exe`` compilers. This "
"will be set automatically if a default install of CCES or VDSP++ can be "
"found."
msgstr ""
"当 :ref:`Cross Compiling for ADSP SHARC/Blackfin` 时，此变量保存最新 CCES 或 VDSP++ "
"安装的绝对路径。该目录应包含 ``cc21k.exe`` 和 ``ccblkfn.exe`` 编译器。如果可以找到默认安装的 CCES 或 "
"VDSP++，这将自动设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ADSP_ROOT.rst:11
msgid "See also the :envvar:`ADSP_ROOT` environment variable."
msgstr "另请参阅 :envvar:`ADSP_ROOT` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AIX_EXPORT_ALL_SYMBOLS.rst:2
msgid "CMAKE_AIX_EXPORT_ALL_SYMBOLS"
msgstr "CMAKE_AIX_EXPORT_ALL_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AIX_EXPORT_ALL_SYMBOLS.rst:6
msgid ""
"Default value for :prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` target property. This"
" variable is used to initialize the property on each target as it is "
"created."
msgstr ":prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS.rst:2
msgid "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS"
msgstr "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS` target "
"property. See that target property for additional information."
msgstr ""
":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_API.rst:2
msgid "CMAKE_ANDROID_API"
msgstr "CMAKE_ANDROID_API"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_API.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this variable may be set to specify the default value for"
" the :prop_tgt:`ANDROID_API` target property.  See that target property "
"for additional information."
msgstr ""
"当 :ref:`使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 进行交叉编译` "
"时，可以设置此变量以指定 :prop_tgt:`ANDROID_API` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_API.rst:11
msgid ""
"When :ref:`Cross Compiling for Android`, the "
":variable:`CMAKE_SYSTEM_VERSION` variable represents the Android API "
"version number targeted.  For historical reasons, if a toolchain file sets"
" ``CMAKE_ANDROID_API``, but not ``CMAKE_SYSTEM_VERSION``, the latter will "
"be initialized using the former."
msgstr ""
"当 :ref:`Android 交叉编译` 时， :variable:`CMAKE_SYSTEM_VERSION` 变量表示目标 Android "
"API "
"版本号。由于历史原因，如果工具链文件设置了“CMAKE_ANDROID_API”，但没有设置“CMAKE_SYSTEM_VERSION”，则后者将使用前者进行初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_API_MIN.rst:2
msgid "CMAKE_ANDROID_API_MIN"
msgstr "CMAKE_ANDROID_API_MIN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_API_MIN.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_API_MIN` target property. See "
"that target property for additional information."
msgstr ":prop_tgt:`ANDROID_API_MIN` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:2
msgid "CMAKE_ANDROID_ARCH"
msgstr "CMAKE_ANDROID_ARCH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this variable may be set to specify the default value for"
" the :prop_tgt:`ANDROID_ARCH` target property.  See that target property "
"for additional information."
msgstr ""
"当 :ref:`使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 进行交叉编译` "
"时，可以设置此变量以指定 :prop_tgt:`ANDROID_ARCH` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:11
msgid ""
"Otherwise, when :ref:`Cross Compiling for Android`, this variable provides"
" the name of the Android architecture corresponding to the value of the "
":variable:`CMAKE_ANDROID_ARCH_ABI` variable.  The architecture name may be"
" one of:"
msgstr ""
"否则，当 :ref:`Cross Compiling for Android` 时，此变量提供与 "
":variable:`CMAKE_ANDROID_ARCH_ABI` 变量值对应的 Android 体系结构的名称。体系结构名称可能是以下之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:16
msgid "``arm``"
msgstr "``手臂``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:17
msgid "``arm64``"
msgstr "``arm64``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:13
msgid "``mips``"
msgstr "``mips``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:19
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:14
msgid "``mips64``"
msgstr "``mips64``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:20
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:15
msgid "``x86``"
msgstr "``x86``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH.rst:21
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:16
msgid "``x86_64``"
msgstr "``x86_64``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:2
msgid "CMAKE_ANDROID_ARCH_ABI"
msgstr "CMAKE_ANDROID_ARCH_ABI"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:6
msgid ""
"When :ref:`Cross Compiling for Android`, this variable specifies the "
"target architecture and ABI to be used.  Valid values are:"
msgstr "当 :ref:`Cross Compiling for Android` 时，此变量指定要使用的目标架构和 ABI。有效值为："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:9
msgid "``arm64-v8a``"
msgstr "``arm64-v8a``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:10
msgid "``armeabi-v7a``"
msgstr "``armeabi-v7a``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:11
msgid "``armeabi-v6``"
msgstr "``armeabi-v6``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:12
msgid "``armeabi``"
msgstr "``armeabi``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARCH_ABI.rst:18
msgid ""
"See also the :variable:`CMAKE_ANDROID_ARM_MODE` and "
":variable:`CMAKE_ANDROID_ARM_NEON` variables."
msgstr "另请参阅 :variable:`CMAKE_ANDROID_ARM_MODE` 和 :variable:`CMAKE_ANDROID_ARM_NEON` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARM_MODE.rst:2
msgid "CMAKE_ANDROID_ARM_MODE"
msgstr "CMAKE_ANDROID_ARM_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARM_MODE.rst:6
msgid ""
"When :ref:`Cross Compiling for Android` and "
":variable:`CMAKE_ANDROID_ARCH_ABI` is set to one of the ``armeabi`` "
"architectures, set ``CMAKE_ANDROID_ARM_MODE`` to ``ON`` to target 32-bit "
"ARM processors (``-marm``).  Otherwise, the default is to target the "
"16-bit Thumb processors (``-mthumb``)."
msgstr ""
"当:ref:`Android 交叉编译` 和 :variable:`CMAKE_ANDROID_ARCH_ABI` 设置为 ``armeabi`` 架构之一时，将"
" ``CMAKE_ANDROID_ARM_MODE`` 设置为 ``ON`` 以针对 32 位 ARM 处理器（ "
"``-mar``）。否则，默认是针对 16 位 Thumb 处理器 (``-mthumb``)。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARM_NEON.rst:2
msgid "CMAKE_ANDROID_ARM_NEON"
msgstr "CMAKE_ANDROID_ARM_NEON"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ARM_NEON.rst:6
msgid ""
"When :ref:`Cross Compiling for Android` and "
":variable:`CMAKE_ANDROID_ARCH_ABI` is set to ``armeabi-v7a`` set "
"``CMAKE_ANDROID_ARM_NEON`` to ``ON`` to target ARM NEON devices."
msgstr ""
"当:ref:`Android 交叉编译` 和 :variable:`CMAKE_ANDROID_ARCH_ABI` 设置为``armeabi-v7a`` "
"时，将``CMAKE_ANDROID_ARM_NEON`` 设置为``ON`` 以针对ARM NEON 设备。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ASSETS_DIRECTORIES.rst:2
msgid "CMAKE_ANDROID_ASSETS_DIRECTORIES"
msgstr "CMAKE_ANDROID_ASSETS_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_ASSETS_DIRECTORIES.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_ASSETS_DIRECTORIES` target "
"property. See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_EXCEPTIONS.rst:2
msgid "CMAKE_ANDROID_EXCEPTIONS"
msgstr "CMAKE_ANDROID_EXCEPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_EXCEPTIONS.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable may be"
" set to specify whether exceptions are enabled."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，可以设置此变量以指定是否启用异常。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_GUI.rst:2
msgid "CMAKE_ANDROID_GUI"
msgstr "CMAKE_ANDROID_GUI"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_GUI.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_GUI` target property of "
"executables.  See that target property for additional information."
msgstr "可执行文件的 :prop_tgt:`ANDROID_GUI` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAR_DEPENDENCIES.rst:2
msgid "CMAKE_ANDROID_JAR_DEPENDENCIES"
msgstr "CMAKE_ANDROID_JAR_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAR_DEPENDENCIES.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_JAR_DEPENDENCIES` target "
"property. See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_JAR_DEPENDENCIES` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAR_DIRECTORIES.rst:2
msgid "CMAKE_ANDROID_JAR_DIRECTORIES"
msgstr "CMAKE_ANDROID_JAR_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAR_DIRECTORIES.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_JAR_DIRECTORIES` target property."
" See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_JAR_DIRECTORIES` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAVA_SOURCE_DIR.rst:2
msgid "CMAKE_ANDROID_JAVA_SOURCE_DIR"
msgstr "CMAKE_ANDROID_JAVA_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_JAVA_SOURCE_DIR.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_JAVA_SOURCE_DIR` target property."
" See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES.rst:2
msgid "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES"
msgstr "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES` target "
"property.  See that target property for additional information."
msgstr ""
":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES.rst:2
msgid "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES"
msgstr "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES` target "
"property.  See that target property for additional information."
msgstr ""
":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK.rst:2
msgid "CMAKE_ANDROID_NDK"
msgstr "CMAKE_ANDROID_NDK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable holds "
"the absolute path to the root directory of the NDK.  The directory must "
"contain a ``platforms`` subdirectory holding the ``android-<api>`` "
"directories."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，此变量保存 NDK "
"根目录的绝对路径。该目录必须包含一个包含 ``android-<api>`` 目录的``platforms`` 子目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_DEPRECATED_HEADERS.rst:2
msgid "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS"
msgstr "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_DEPRECATED_HEADERS.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable may be"
" set to specify whether to use the deprecated per-api-level headers "
"instead of the unified headers."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，可以设置此变量以指定是否使用已弃用的 "
"per-api-level 标头而不是统一标头。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_DEPRECATED_HEADERS.rst:10
msgid ""
"If not specified, the default will be *false* if using a NDK version that "
"provides the unified headers and *true* otherwise."
msgstr "如果未指定，如果使用提供统一标头的 NDK 版本，则默认值为 *false*，否则为 *true*。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG.rst:2
msgid "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG"
msgstr "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable "
"provides the NDK's \"host tag\" used to construct the path to prebuilt "
"toolchains that run on the host."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，此变量提供 NDK "
"的“主机标签”，用于构建在主机上运行的预构建工具链的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:2
msgid "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION"
msgstr "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable may be"
" set to specify the version of the toolchain to be used as the compiler."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，可以设置此变量以指定要用作编译器的工具链版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:10
msgid ""
"On NDK r19 or above, this variable must be unset or set to ``clang``."
msgstr "在 NDK r19 或更高版本上，此变量必须取消设置或设置为 ``clang``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:12
msgid ""
"On NDK r18 or below, this variable must be set to one of these forms:"
msgstr "在 NDK r18 或更低版本上，此变量必须设置为以下形式之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:14
msgid "``<major>.<minor>``: GCC of specified version"
msgstr "``<major>.<minor>``：指定版本的GCC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:15
msgid "``clang<major>.<minor>``: Clang of specified version"
msgstr "``clang<major>.<minor>``: 指定版本的 Clang"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:16
msgid "``clang``: Clang of most recent available version"
msgstr "``clang``：最新可用版本的 Clang"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:18
msgid ""
"A toolchain of the requested version will be selected automatically to "
"match the ABI named in the :variable:`CMAKE_ANDROID_ARCH_ABI` variable."
msgstr "将自动选择请求版本的工具链以匹配 CMAKE_ANDROID_ARCH_ABI 变量中命名的 ABI。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION.rst:21
msgid ""
"If not specified, the default will be a value that selects the latest "
"available GCC toolchain."
msgstr "如果未指定，默认值将是一个选择最新可用 GCC 工具链的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_VERSION.rst:2
msgid "CMAKE_ANDROID_NDK_VERSION"
msgstr "CMAKE_ANDROID_NDK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_NDK_VERSION.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK` and using an Android "
"NDK version 11 or higher, this variable is provided by CMake to report the"
" NDK version number."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 并使用 Android NDK 版本 11 "
"或更高版本时，此变量由 CMake 提供以报告 NDK 版本号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROCESS_MAX.rst:2
msgid "CMAKE_ANDROID_PROCESS_MAX"
msgstr "CMAKE_ANDROID_PROCESS_MAX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROCESS_MAX.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_PROCESS_MAX` target property. See"
" that target property for additional information."
msgstr ":prop_tgt:`ANDROID_PROCESS_MAX` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROGUARD.rst:2
msgid "CMAKE_ANDROID_PROGUARD"
msgstr "CMAKE_ANDROID_PROGUARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROGUARD.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_PROGUARD` target property. See "
"that target property for additional information."
msgstr ":prop_tgt:`ANDROID_PROGUARD` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH.rst:2
msgid "CMAKE_ANDROID_PROGUARD_CONFIG_PATH"
msgstr "CMAKE_ANDROID_PROGUARD_CONFIG_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_PROGUARD_CONFIG_PATH.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH` target "
"property. See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_RTTI.rst:2
msgid "CMAKE_ANDROID_RTTI"
msgstr "CMAKE_ANDROID_RTTI"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_RTTI.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable may be"
" set to specify whether RTTI is enabled."
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，可以设置此变量以指定是否启用 RTTI。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_SECURE_PROPS_PATH.rst:2
msgid "CMAKE_ANDROID_SECURE_PROPS_PATH"
msgstr "CMAKE_ANDROID_SECURE_PROPS_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_SECURE_PROPS_PATH.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_SECURE_PROPS_PATH` target "
"property. See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_SECURE_PROPS_PATH` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_SKIP_ANT_STEP.rst:2
msgid "CMAKE_ANDROID_SKIP_ANT_STEP"
msgstr "CMAKE_ANDROID_SKIP_ANT_STEP"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_SKIP_ANT_STEP.rst:6
msgid ""
"Default value for the :prop_tgt:`ANDROID_SKIP_ANT_STEP` target property. "
"See that target property for additional information."
msgstr ":prop_tgt:`ANDROID_SKIP_ANT_STEP` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STANDALONE_TOOLCHAIN.rst:2
msgid "CMAKE_ANDROID_STANDALONE_TOOLCHAIN"
msgstr "CMAKE_ANDROID_STANDALONE_TOOLCHAIN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STANDALONE_TOOLCHAIN.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with a Standalone Toolchain`, this "
"variable holds the absolute path to the root directory of the toolchain. "
"The specified directory must contain a ``sysroot`` subdirectory."
msgstr ""
"当 :ref:`使用独立工具链为 Android 进行交叉编译` 时，此变量保存工具链根目录的绝对路径。指定的目录必须包含一个 "
"``sysroot`` 子目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:2
msgid "CMAKE_ANDROID_STL_TYPE"
msgstr "CMAKE_ANDROID_STL_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this variable may be set to specify the default value for"
" the :prop_tgt:`ANDROID_STL_TYPE` target property.  See that target "
"property for additional information."
msgstr ""
"当 :ref:`使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 进行交叉编译` "
"时，可以设置此变量以指定 :prop_tgt:`ANDROID_STL_TYPE` 目标属性的默认值。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:11
msgid ""
"When :ref:`Cross Compiling for Android with the NDK`, this variable may be"
" set to specify the STL variant to be used.  The value may be one of:"
msgstr ""
"当 :ref:`Cross Compiling for Android with the NDK` 时，可以设置此变量以指定要使用的 STL "
"变体。该值可能是以下之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:14
msgid "``none``"
msgstr "``没有``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:15
msgid "No C++ Support"
msgstr "不支持 C++"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:16
msgid "``system``"
msgstr "``系统``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:17
msgid "Minimal C++ without STL"
msgstr "没有 STL 的最小 C++"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:18
msgid "``gabi++_static``"
msgstr "``gabi++_static``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:19
msgid "GAbi++ Static"
msgstr "GAbi++静态"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:20
msgid "``gabi++_shared``"
msgstr "``gabi++_shared``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:21
msgid "GAbi++ Shared"
msgstr "GAbi++共享"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:22
msgid "``gnustl_static``"
msgstr "``gnustl_static``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:23
msgid "GNU libstdc++ Static"
msgstr "GNU libstdc++ 静态"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:24
msgid "``gnustl_shared``"
msgstr "``gnustl_shared``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:25
msgid "GNU libstdc++ Shared"
msgstr "GNU libstdc++ 共享"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:26
msgid "``c++_static``"
msgstr "``c++_static``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:27
msgid "LLVM libc++ Static"
msgstr "LLVM libc++ 静态"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:28
msgid "``c++_shared``"
msgstr "``c++_shared``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:29
msgid "LLVM libc++ Shared"
msgstr "LLVM libc++ 共享"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:30
msgid "``stlport_static``"
msgstr "``stlport_static``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:31
msgid "STLport Static"
msgstr "STL端口静态"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:33
msgid "``stlport_shared``"
msgstr "``stlport_shared``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:33
msgid "STLport Shared"
msgstr "STL端口共享"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ANDROID_STL_TYPE.rst:35
msgid ""
"The default value is ``gnustl_static`` on NDK versions that provide it and"
" otherwise ``c++_static``.  Note that this default differs from the native"
" NDK build system because CMake may be used to build projects for Android "
"that are not natively implemented for it and use the C++ standard library."
msgstr ""
"在提供它的 NDK 版本上，默认值为 ``gnustl_static``，否则为 ``c++_static``。请注意，此默认设置与原生 NDK "
"构建系统不同，因为 CMake 可用于为 Android 构建非原生实现的项目并使用 C++ 标准库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPBUNDLE_PATH.rst:2
msgid "CMAKE_APPBUNDLE_PATH"
msgstr "CMAKE_APPBUNDLE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPBUNDLE_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for macOS application bundles used by the "
":command:`find_program`, and :command:`find_package` commands."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 目录，指定 :command:`find_program` 和 "
":command:`find_package` 命令使用的 macOS 应用程序包的搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPLE_SILICON_PROCESSOR.rst:2
msgid "CMAKE_APPLE_SILICON_PROCESSOR"
msgstr "CMAKE_APPLE_SILICON_PROCESSOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPLE_SILICON_PROCESSOR.rst:6
msgid ""
"On Apple Silicon hosts running macOS, set this variable to tell CMake what"
" architecture to use for :variable:`CMAKE_HOST_SYSTEM_PROCESSOR`. The "
"value must be either ``arm64`` or ``x86_64``."
msgstr ""
"在运行 macOS 的 Apple Silicon 主机上，设置此变量以告知 CMake 用于 "
":variable:`CMAKE_HOST_SYSTEM_PROCESSOR` 的架构。该值必须是 ``arm64`` 或 ``x86_64``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPLE_SILICON_PROCESSOR.rst:10
msgid ""
"The value of this variable should never be modified by project code. It is"
" meant to be set as a cache entry provided by the user, e.g. via "
"``-DCMAKE_APPLE_SILICON_PROCESSOR=...``."
msgstr ""
"项目代码永远不应修改此变量的值。它旨在被设置为用户提供的缓存条目，例如通过``-DCMAKE_APPLE_SILICON_PROCESSOR=...``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_APPLE_SILICON_PROCESSOR.rst:14
msgid ""
"See also the :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable."
msgstr "另请参阅 :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AR.rst:2
msgid "CMAKE_AR"
msgstr "CMAKE_AR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AR.rst:4
msgid "Name of archiving tool for static libraries."
msgstr "静态库归档工具的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AR.rst:6
msgid ""
"This specifies the name of the program that creates archive or static "
"libraries."
msgstr "这指定了创建存档或静态库的程序的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.rst:2
msgid "CMAKE_ARCHIVE_OUTPUT_DIRECTORY"
msgstr "CMAKE_ARCHIVE_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.rst:4
msgid ""
"Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>` target "
"files when built."
msgstr "构建时放置所有 :ref:`ARCHIVE <Archive Output Artifacts>` 目标文件的位置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY.rst:7
msgid ""
"This variable is used to initialize the "
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` property on all the targets.  See "
"that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:6
msgid ""
"Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>` target "
"files when built for a specific configuration."
msgstr "为特定配置构建时，将所有 :ref:`ARCHIVE <Archive Output Artifacts>` 目标文件放在哪里。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets."
" See that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` "
"属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGC.rst:2
msgid "CMAKE_ARGC"
msgstr "CMAKE_ARGC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGC.rst:4
msgid "Number of command line arguments passed to CMake in script mode."
msgstr "在脚本模式下传递给 CMake 的命令行参数的数量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGC.rst:6
msgid ""
"When run in :ref:`-P <Script Processing Mode>` script mode, CMake sets "
"this variable to the number of command line arguments.  See also "
":variable:`CMAKE_ARGV0`, ``1``, ``2`` ..."
msgstr ""
"当以 :ref:`-P <Script Processing Mode>` 脚本模式运行时，CMake "
"将此变量设置为命令行参数的数量。另请参见 :variable:`CMAKE_ARGV0`、``1``、``2`` ..."

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGV0.rst:2
msgid "CMAKE_ARGV0"
msgstr "CMAKE_ARGV0"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGV0.rst:4
msgid "Command line argument passed to CMake in script mode."
msgstr "在脚本模式下传递给 CMake 的命令行参数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ARGV0.rst:6
msgid ""
"When run in :ref:`-P <Script Processing Mode>` script mode, CMake sets "
"this variable to the first command line argument.  It then also sets "
"``CMAKE_ARGV1``, ``CMAKE_ARGV2``, ... and so on, up to the number of "
"command line arguments given.  See also :variable:`CMAKE_ARGC`."
msgstr ""
"在 :ref:`-P <Script Processing Mode>` 脚本模式下运行时，CMake "
"将此变量设置为第一个命令行参数。然后它还会设置 ``CMAKE_ARGV1``、``CMAKE_ARGV2`` "
"……等等，直到给定的命令行参数的数量。另见 :variable:`CMAKE_ARGC`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS.rst:2
msgid "CMAKE_AUTOGEN_ORIGIN_DEPENDS"
msgstr "CMAKE_AUTOGEN_ORIGIN_DEPENDS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS.rst:6
msgid ""
"Switch for forwarding origin target dependencies to the corresponding "
"``_autogen`` targets."
msgstr "用于将原始目标依赖项转发到相应的 _autogen 目标的开关。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS.rst:9
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`"
" property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOGEN_ORIGIN_DEPENDS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_ORIGIN_DEPENDS.rst:13
msgid "By default ``CMAKE_AUTOGEN_ORIGIN_DEPENDS`` is ``ON``."
msgstr "默认情况下 ``CMAKE_AUTOGEN_ORIGIN_DEPENDS`` 是 ``ON``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_PARALLEL.rst:2
msgid "CMAKE_AUTOGEN_PARALLEL"
msgstr "CMAKE_AUTOGEN_PARALLEL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_PARALLEL.rst:6
msgid ""
"Number of parallel ``moc`` or ``uic`` processes to start when using "
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`."
msgstr "使用 AUTOMOC 和 AUTOUIC 时要启动的并行 ``moc`` 或 ``uic`` 进程数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_PARALLEL.rst:9
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOGEN_PARALLEL` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`AUTOGEN_PARALLEL` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_PARALLEL.rst:12
msgid "By default ``CMAKE_AUTOGEN_PARALLEL`` is unset."
msgstr "默认情况下 ``CMAKE_AUTOGEN_PARALLEL`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_VERBOSE.rst:2
msgid "CMAKE_AUTOGEN_VERBOSE"
msgstr "CMAKE_AUTOGEN_VERBOSE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_VERBOSE.rst:6
msgid ""
"Sets the verbosity of :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and "
":prop_tgt:`AUTORCC`.  A positive integer value or a true boolean value "
"lets the ``AUTO*`` generators output additional processing information."
msgstr ""
"设置 :prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` "
"的详细程度。正整数值或真布尔值让“AUTO*”生成器输出额外的处理信息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_VERBOSE.rst:10
msgid ""
"Setting ``CMAKE_AUTOGEN_VERBOSE`` has the same effect as setting the "
"``VERBOSE`` environment variable during generation (e.g. by calling ``make"
" VERBOSE=1``). The extra verbosity is limited to the ``AUTO*`` generators "
"though."
msgstr ""
"设置“CMAKE_AUTOGEN_VERBOSE”与在生成期间设置“VERBOSE”环境变量具有相同的效果（例如，通过调用“make "
"VERBOSE=1”）。不过，额外的冗长仅限于 ``AUTO*`` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOGEN_VERBOSE.rst:15
msgid "By default ``CMAKE_AUTOGEN_VERBOSE`` is unset."
msgstr "默认情况下 ``CMAKE_AUTOGEN_VERBOSE`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC.rst:2
msgid "CMAKE_AUTOMOC"
msgstr "CMAKE_AUTOMOC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC.rst:4
msgid "Whether to handle ``moc`` automatically for Qt targets."
msgstr "是否为 Qt 目标自动处理 ``moc``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOMOC` property on "
"all the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`AUTOMOC` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_COMPILER_PREDEFINES.rst:2
msgid "CMAKE_AUTOMOC_COMPILER_PREDEFINES"
msgstr "CMAKE_AUTOMOC_COMPILER_PREDEFINES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_COMPILER_PREDEFINES.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES` property on all the targets. See "
"that target property for additional information."
msgstr "此变量用于初始化所有目标上的 AUTOMOC_COMPILER_PREDEFINES 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_COMPILER_PREDEFINES.rst:10
msgid "By default it is ON."
msgstr "默认情况下它是开的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_DEPEND_FILTERS.rst:2
msgid "CMAKE_AUTOMOC_DEPEND_FILTERS"
msgstr "CMAKE_AUTOMOC_DEPEND_FILTERS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_DEPEND_FILTERS.rst:6
msgid ""
"Filter definitions used by :variable:`CMAKE_AUTOMOC` to extract file names"
" from source code as additional dependencies for the ``moc`` file."
msgstr ":variable:`CMAKE_AUTOMOC` 使用的过滤器定义从源代码中提取文件名作为 ``moc`` 文件的附加依赖项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_DEPEND_FILTERS.rst:10
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOMOC_DEPEND_FILTERS`"
" property on all the targets. See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOMOC_DEPEND_FILTERS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_DEPEND_FILTERS.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_SEARCH_PATHS.rst:13
msgid "By default it is empty."
msgstr "默认情况下它是空的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:2
msgid "CMAKE_AUTOMOC_MACRO_NAMES"
msgstr "CMAKE_AUTOMOC_MACRO_NAMES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:6
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` list of macro names"
" used by :variable:`CMAKE_AUTOMOC` to determine if a C++ file needs to be "
"processed by ``moc``."
msgstr ""
":ref:`分号分隔的列表 <CMake 语言列表>` CMAKE_AUTOMOC 使用的宏名称列表，用于确定 C++ 文件是否需要由 "
"``moc`` 处理。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:10
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOMOC_MACRO_NAMES` "
"property on all the targets. See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOMOC_MACRO_NAMES 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:14
msgid ""
"The default value is ``Q_OBJECT;Q_GADGET;Q_NAMESPACE;Q_NAMESPACE_EXPORT``."
msgstr "默认值为``Q_OBJECT;Q_GADGET;Q_NAMESPACE;Q_N​​AMESPACE_EXPORT``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NO_COMPILE_BATCHING.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:19
msgid "Example"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MACRO_NAMES.rst:18
msgid ""
"Let CMake know that source files that contain ``CUSTOM_MACRO`` must be "
"``moc`` processed as well::"
msgstr "让 CMake 知道包含 ``CUSTOM_MACRO`` 的源文件也必须经过 ``moc`` 处理："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MOC_OPTIONS.rst:2
msgid "CMAKE_AUTOMOC_MOC_OPTIONS"
msgstr "CMAKE_AUTOMOC_MOC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MOC_OPTIONS.rst:4
msgid "Additional options for ``moc`` when using :variable:`CMAKE_AUTOMOC`."
msgstr "使用 CMAKE_AUTOMOC 时 ``moc`` 的附加选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_MOC_OPTIONS.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOMOC_MOC_OPTIONS` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOMOC_MOC_OPTIONS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_PATH_PREFIX.rst:2
msgid "CMAKE_AUTOMOC_PATH_PREFIX"
msgstr "CMAKE_AUTOMOC_PATH_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_PATH_PREFIX.rst:6
msgid ""
"Whether to generate the ``-p`` path prefix option for ``moc`` on "
":prop_tgt:`AUTOMOC` enabled Qt targets."
msgstr "是否在 :prop_tgt:`AUTOMOC` 启用的 Qt 目标上为 `moc`` 生成 ``-p`` 路径前缀选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_PATH_PREFIX.rst:9
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOMOC_PATH_PREFIX` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOMOC_PATH_PREFIX 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_PATH_PREFIX.rst:13
msgid "The default value is ``OFF``."
msgstr "默认值为“关闭”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_RELAXED_MODE.rst:2
msgid "CMAKE_AUTOMOC_RELAXED_MODE"
msgstr "CMAKE_AUTOMOC_RELAXED_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_RELAXED_MODE.rst:6
msgid "Switch between strict and relaxed automoc mode."
msgstr "在严格和宽松的 automoc 模式之间切换。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_RELAXED_MODE.rst:8
msgid ""
"By default, :prop_tgt:`AUTOMOC` behaves exactly as described in the "
"documentation of the :prop_tgt:`AUTOMOC` target property.  When set to "
"``TRUE``, it accepts more input and tries to find the correct input file "
"for ``moc`` even if it differs from the documented behavior.  In this mode"
" it e.g.  also checks whether a header file is intended to be processed by"
" moc when a ``\"foo.moc\"`` file has been included."
msgstr ""
"默认情况下， :prop_tgt:`AUTOMOC` 的行为与 :prop_tgt:`AUTOMOC` 目标属性的文档中描述的完全相同。当设置为 "
"``TRUE`` 时，它接受更多输入并尝试为 ``moc`` "
"找到正确的输入文件，即使它与记录的行为不同。在这种模式下，例如当“foo.moc”文件被包含时，还会检查头文件是否打算由 moc 处理。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOMOC_RELAXED_MODE.rst:15
msgid "Relaxed mode has to be enabled for KDE4 compatibility."
msgstr "为了与 KDE4 兼容，必须启用宽松模式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC.rst:2
msgid "CMAKE_AUTORCC"
msgstr "CMAKE_AUTORCC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC.rst:4
msgid "Whether to handle ``rcc`` automatically for Qt targets."
msgstr "是否为 Qt 目标自动处理 ``rcc``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTORCC` property on "
"all the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`AUTORCC` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC_OPTIONS.rst:2
msgid "CMAKE_AUTORCC_OPTIONS"
msgstr "CMAKE_AUTORCC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC_OPTIONS.rst:4
msgid "Additional options for ``rcc`` when using :variable:`CMAKE_AUTORCC`."
msgstr "使用 CMAKE_AUTORCC 时 ``rcc`` 的附加选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC_OPTIONS.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTORCC_OPTIONS` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTORCC_OPTIONS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTORCC_OPTIONS.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_OPTIONS.rst:10
msgid "EXAMPLE"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC.rst:2
msgid "CMAKE_AUTOUIC"
msgstr "CMAKE_AUTOUIC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC.rst:4
msgid "Whether to handle ``uic`` automatically for Qt targets."
msgstr "是否为 Qt 目标自动处理 ``uic``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOUIC` property on "
"all the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`AUTOUIC` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_OPTIONS.rst:2
msgid "CMAKE_AUTOUIC_OPTIONS"
msgstr "CMAKE_AUTOUIC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_OPTIONS.rst:4
msgid "Additional options for ``uic`` when using :variable:`CMAKE_AUTOUIC`."
msgstr "使用 CMAKE_AUTOUIC 时 ``uic`` 的附加选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_OPTIONS.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOUIC_OPTIONS` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`AUTOUIC_OPTIONS` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_SEARCH_PATHS.rst:2
msgid "CMAKE_AUTOUIC_SEARCH_PATHS"
msgstr "CMAKE_AUTOUIC_SEARCH_PATHS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_SEARCH_PATHS.rst:6
msgid ""
"Search path list used by :variable:`CMAKE_AUTOUIC` to find included "
"``.ui`` files."
msgstr "CMAKE_AUTOUIC 用于查找包含的 .ui 文件的搜索路径列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_AUTOUIC_SEARCH_PATHS.rst:9
msgid ""
"This variable is used to initialize the :prop_tgt:`AUTOUIC_SEARCH_PATHS` "
"property on all the targets. See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 AUTOUIC_SEARCH_PATHS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BACKWARDS_COMPATIBILITY.rst:2
msgid "CMAKE_BACKWARDS_COMPATIBILITY"
msgstr "CMAKE_BACKWARDS_COMPATIBILITY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BACKWARDS_COMPATIBILITY.rst:4
msgid "Deprecated.  See CMake Policy :policy:`CMP0001` documentation."
msgstr "已弃用。请参阅 CMake 策略 :policy:`CMP0001` 文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BINARY_DIR.rst:2
msgid "CMAKE_BINARY_DIR"
msgstr "CMAKE_BINARY_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BINARY_DIR.rst:4
msgid "The path to the top level of the build tree."
msgstr "构建树顶层的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BINARY_DIR.rst:6
msgid ""
"This is the full path to the top level of the current CMake build tree.  "
"For an in-source build, this would be the same as "
":variable:`CMAKE_SOURCE_DIR`."
msgstr "这是当前 CMake 构建树顶层的完整路径。对于源代码构建，这与 :variable:`CMAKE_SOURCE_DIR` 相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BINARY_DIR.rst:10
msgid ""
"When run in :option:`cmake -P` script mode, CMake sets the variables "
"``CMAKE_BINARY_DIR``, :variable:`CMAKE_SOURCE_DIR`, "
":variable:`CMAKE_CURRENT_BINARY_DIR` and "
":variable:`CMAKE_CURRENT_SOURCE_DIR` to the current working directory."
msgstr ""
"在 cmake -P 脚本模式下运行时，CMake 将变量 "
"CMAKE_BINARY_DIR、CMAKE_SOURCE_DIR、CMAKE_CURRENT_BINARY_DIR 和 "
"CMAKE_CURRENT_SOURCE_DIR 变量设置为当前工作目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH.rst:2
msgid "CMAKE_BUILD_RPATH"
msgstr "CMAKE_BUILD_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH.rst:6
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` specifying runtime "
"path (``RPATH``) entries to add to binaries linked in the build tree (for "
"platforms that support it).  The entries will *not* be used for binaries "
"in the install tree.  See also the :variable:`CMAKE_INSTALL_RPATH` "
"variable."
msgstr ""
":ref:`分号分隔的列表 <CMake 语言列表>` 指定运行时路径 (``RPATH``) "
"条目以添加到构建树中链接的二进制文件（对于支持它的平台）。这些条目将*不会*用于安装树中的二进制文件。另请参阅 :variable:`CMAKE_INSTALL_RPATH`"
" 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH.rst:11
msgid ""
"This is used to initialize the :prop_tgt:`BUILD_RPATH` target property for"
" all targets."
msgstr "这用于为所有目标初始化 :prop_tgt:`BUILD_RPATH` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH_USE_ORIGIN.rst:2
msgid "CMAKE_BUILD_RPATH_USE_ORIGIN"
msgstr "CMAKE_BUILD_RPATH_USE_ORIGIN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH_USE_ORIGIN.rst:6
msgid "Whether to use relative paths for the build ``RPATH``."
msgstr "是否使用相对路径构建 ``RPATH``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_RPATH_USE_ORIGIN.rst:8
msgid ""
"This is used to initialize the :prop_tgt:`BUILD_RPATH_USE_ORIGIN` target "
"property for all targets, see that property for more details."
msgstr "这用于为所有目标初始化 BUILD_RPATH_USE_ORIGIN 目标属性，有关更多详细信息，请参阅该属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TOOL.rst:2
msgid "CMAKE_BUILD_TOOL"
msgstr "CMAKE_BUILD_TOOL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TOOL.rst:4
msgid ""
"This variable exists only for backwards compatibility. It contains the "
"same value as :variable:`CMAKE_MAKE_PROGRAM`. Use that variable instead."
msgstr "此变量的存在只是为了向后兼容。它包含与 CMAKE_MAKE_PROGRAM 相同的值。请改用该变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TYPE.rst:2
msgid "CMAKE_BUILD_TYPE"
msgstr "CMAKE_BUILD_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TYPE.rst:4
msgid ""
"Specifies the build type on single-configuration generators (e.g. "
":ref:`Makefile Generators` or :generator:`Ninja`).  Typical values include"
" ``Debug``, ``Release``, ``RelWithDebInfo`` and ``MinSizeRel``, but custom"
" build types can also be defined."
msgstr ""
"指定单配置生成器的构建类型（例如:ref:`Makefile Generators` "
"或:generator:`Ninja`）。典型值包括``Debug``、``Release``、``RelWithDebInfo`` "
"和``MinSizeRel``，但也可以定义自定义构建类型。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TYPE.rst:9
msgid ""
"This variable is initialized by the first :command:`project` or "
":command:`enable_language` command called in a project when a new build "
"tree is first created.  If the :envvar:`CMAKE_BUILD_TYPE` environment "
"variable is set, its value is used.  Otherwise, a toolchain-specific "
"default is chosen when a language is enabled.  The default value is often "
"an empty string, but this is usually not desirable and one of the other "
"standard build types is usually more appropriate."
msgstr ""
"当首次创建新构建树时，此变量由项目中调用的第一个 :command:`project` 或 :command:`enable_language` "
"命令初始化。如果设置了 :envvar:`CMAKE_BUILD_TYPE` "
"环境变量，则使用它的值。否则，在启用语言时会选择特定于工具链的默认值。默认值通常是一个空字符串，但这通常是不可取的，而其他标准构建类型之一通常更合适。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TYPE.rst:17
msgid ""
"Depending on the situation, the value of this variable may be treated "
"case-sensitively or case-insensitively.  See :ref:`Build Configurations` "
"for discussion of this and other related topics."
msgstr ""
"根据情况，这个变量的值可能区分大小写或不区分大小写。有关此主题和其他相关主题的讨论，请参阅 :ref:`Build Configurations`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_TYPE.rst:21
msgid ""
"For multi-config generators, see :variable:`CMAKE_CONFIGURATION_TYPES`."
msgstr "对于多配置生成器，请参阅 :variable:`CMAKE_CONFIGURATION_TYPES`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_NAME_DIR.rst:2
msgid "CMAKE_BUILD_WITH_INSTALL_NAME_DIR"
msgstr "CMAKE_BUILD_WITH_INSTALL_NAME_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_NAME_DIR.rst:6
msgid ""
"Whether to use :prop_tgt:`INSTALL_NAME_DIR` on targets in the build tree."
msgstr "是否在构建树中的目标上使用 :prop_tgt:`INSTALL_NAME_DIR`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_NAME_DIR.rst:8
msgid ""
"This variable is used to initialize the "
":prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` property on all targets."
msgstr "此变量用于初始化所有目标上的 BUILD_WITH_INSTALL_NAME_DIR 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.rst:2
msgid "CMAKE_BUILD_WITH_INSTALL_RPATH"
msgstr "CMAKE_BUILD_WITH_INSTALL_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.rst:4
msgid "Use the install path for the ``RPATH``."
msgstr "使用 ``RPATH`` 的安装路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.rst:6
msgid ""
"Normally CMake uses the build tree for the ``RPATH`` when building "
"executables etc on systems that use ``RPATH``.  When the software is "
"installed the executables etc are relinked by CMake to have the install "
"``RPATH``.  If this variable is set to true then the software is always "
"built with the install path for the ``RPATH`` and does not need to be "
"relinked when installed."
msgstr ""
"通常 CMake 在使用 ``RPATH`` 的系统上构建可执行文件等时使用 ``RPATH`` 的构建树。安装软件后，CMake "
"会重新链接可执行文件等以安装“RPATH”。如果此变量设置为 true，则软件始终使用 ``RPATH`` "
"的安装路径构建，并且在安装时不需要重新链接。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_BUILD_WITH_INSTALL_RPATH.rst:13
msgid ""
"This is used to initialize the :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target"
" property for all targets."
msgstr "这用于初始化所有目标的 BUILD_WITH_INSTALL_RPATH 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHEFILE_DIR.rst:2
msgid "CMAKE_CACHEFILE_DIR"
msgstr "CMAKE_CACHEFILE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHEFILE_DIR.rst:4
msgid ""
"This variable is used internally by CMake, and may not be set during the "
"first configuration of a build tree.  When it is set, it has the same "
"value as :variable:`CMAKE_BINARY_DIR`.  Use that variable instead."
msgstr ""
"此变量由 CMake 在内部使用，并且可能不会在构建树的第一次配置期间设置。设置后，它与 :variable:`CMAKE_BINARY_DIR` "
"具有相同的值。请改用该变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MAJOR_VERSION.rst:2
msgid "CMAKE_CACHE_MAJOR_VERSION"
msgstr "CMAKE_CACHE_MAJOR_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MAJOR_VERSION.rst:4
msgid "Major version of CMake used to create the ``CMakeCache.txt`` file"
msgstr "用于创建“CMakeCache.txt”文件的 CMake 主要版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MAJOR_VERSION.rst:6
msgid ""
"This stores the major version of CMake used to write a CMake cache file.  "
"It is only different when a different version of CMake is run on a "
"previously created cache file."
msgstr "这存储用于编写 CMake 缓存文件的 CMake 的主要版本。只有在先前创建的缓存文件上运行不同版本的 CMake 时才会有所不同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MINOR_VERSION.rst:2
msgid "CMAKE_CACHE_MINOR_VERSION"
msgstr "CMAKE_CACHE_MINOR_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MINOR_VERSION.rst:4
msgid "Minor version of CMake used to create the ``CMakeCache.txt`` file"
msgstr "用于创建“CMakeCache.txt”文件的 CMake 次要版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_MINOR_VERSION.rst:6
msgid ""
"This stores the minor version of CMake used to write a CMake cache file.  "
"It is only different when a different version of CMake is run on a "
"previously created cache file."
msgstr "这存储用于编写 CMake 缓存文件的 CMake 次要版本。只有在先前创建的缓存文件上运行不同版本的 CMake 时才会有所不同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_PATCH_VERSION.rst:2
msgid "CMAKE_CACHE_PATCH_VERSION"
msgstr "CMAKE_CACHE_PATCH_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_PATCH_VERSION.rst:4
msgid "Patch version of CMake used to create the ``CMakeCache.txt`` file"
msgstr "用于创建“CMakeCache.txt”文件的 CMake 补丁版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CACHE_PATCH_VERSION.rst:6
msgid ""
"This stores the patch version of CMake used to write a CMake cache file.  "
"It is only different when a different version of CMake is run on a "
"previously created cache file."
msgstr "这存储用于编写 CMake 缓存文件的 CMake 补丁版本。只有在先前创建的缓存文件上运行不同版本的 CMake 时才会有所不同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:2
msgid "CMAKE_CFG_INTDIR"
msgstr "CMAKE_CFG_INTDIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:6
msgid ""
"This variable has poor support on :generator:`Ninja Multi-Config`, and "
"predates the existence of the :genex:`$<CONFIG>` generator expression. Use"
" ``$<CONFIG>`` instead."
msgstr ""
"此变量对 :generator:`Ninja Multi-Config` 的支持很差，并且早于 :genex:`$<CONFIG>` "
"生成器表达式的存在。请改用 ``$<CONFIG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:10
msgid "Build-time reference to per-configuration output subdirectory."
msgstr "构建时对每个配置输出子目录的引用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:12
msgid ""
"For native build systems supporting multiple configurations in the build "
"tree (such as :ref:`Visual Studio Generators` and :generator:`Xcode`), the"
" value is a reference to a build-time variable specifying the name of the "
"per-configuration output subdirectory.  On :ref:`Makefile Generators` this"
" evaluates to `.` because there is only one configuration in a build tree."
" Example values:"
msgstr ""
"对于在构建树中支持多种配置的本机构建系统（例如 Visual Studio Generators 和 "
"Xcode），该值是对指定每个配置名称的构建时变量的引用输出子目录。在 :ref:`Makefile Generators` 这评估为 `.` "
"因为在构建树中只有一个配置。示例值："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:28
msgid ""
"Since these values are evaluated by the native build system, this variable"
" is suitable only for use in command lines that will be evaluated at build"
" time.  Example of intended usage:"
msgstr "由于这些值由本机构建系统评估，因此此变量仅适用于将在构建时评估的命令行。预期用途示例："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:43
msgid ""
"Note that ``CMAKE_CFG_INTDIR`` is no longer necessary for this purpose but"
" has been left for compatibility with existing projects.  Instead "
":command:`add_custom_command` recognizes executable target names in its "
"``COMMAND`` option, so "
"``${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool`` can be replaced"
" by just ``mytool``."
msgstr ""
"请注意，``CMAKE_CFG_INTDIR`` "
"不再需要用于此目的，但已保留以与现有项目兼容。相反， :command:`add_custom_command` 在其 ``COMMAND`` "
"选项中识别可执行目标名称，因此 ``${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool``"
" 可以仅替换为 ``mytool``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CFG_INTDIR.rst:50
msgid ""
"This variable is read-only.  Setting it is undefined behavior.  In multi-"
"configuration build systems the value of this variable is passed as the "
"value of preprocessor symbol ``CMAKE_INTDIR`` to the compilation of all "
"source files."
msgstr ""
"该变量是只读的。设置它是未定义的行为。在多配置构建系统中，此变量的值作为预处理器符号 CMAKE_INTDIR 的值传递给所有源文件的编译。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CLANG_VFS_OVERLAY.rst:2
msgid "CMAKE_CLANG_VFS_OVERLAY"
msgstr "CMAKE_CLANG_VFS_OVERLAY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CLANG_VFS_OVERLAY.rst:6
msgid ""
"When cross compiling for windows with clang-cl, this variable can be an "
"absolute path pointing to a clang virtual file system yaml file, which "
"will enable clang-cl to resolve windows header names on a case sensitive "
"file system."
msgstr ""
"当使用 clang-cl 为 windows 进行交叉编译时，此变量可以是指向 clang 虚拟文件系统 yaml 文件的绝对路径，这将使 "
"clang-cl 能够解析区分大小写的文件系统上的 windows 标头名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CL_64.rst:2
msgid "CMAKE_CL_64"
msgstr "CMAKE_CL_64"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CL_64.rst:4
msgid "Discouraged.  Use :variable:`CMAKE_SIZEOF_VOID_P` instead."
msgstr "灰心。请改用 :variable:`CMAKE_SIZEOF_VOID_P`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CL_64.rst:6
msgid ""
"Set to a true value when using a Microsoft Visual Studio ``cl`` compiler "
"that *targets* a 64-bit architecture."
msgstr "使用 Microsoft Visual Studio ``cl`` 编译器*目标* 64 位架构时设置为真值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_COMPILER_ID.rst:2
msgid "CMAKE_CODEBLOCKS_COMPILER_ID"
msgstr "CMAKE_CODEBLOCKS_COMPILER_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_COMPILER_ID.rst:6
msgid "Change the compiler id in the generated CodeBlocks project files."
msgstr "更改生成的 CodeBlocks 项目文件中的编译器 ID。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_COMPILER_ID.rst:8
msgid ""
"CodeBlocks uses its own compiler id string which differs from "
":variable:`CMAKE_<LANG>_COMPILER_ID`.  If this variable is left empty, "
"CMake tries to recognize the CodeBlocks compiler id automatically. "
"Otherwise the specified string is used in the CodeBlocks project file. See"
" the CodeBlocks documentation for valid compiler id strings."
msgstr ""
"CodeBlocks 使用它自己的编译器 ID 字符串，它不同于 "
":variable:`CMAKE_<LANG>_COMPILER_ID`。如果此变量留空，CMake 会尝试自动识别 CodeBlocks 编译器 "
"ID。否则在 CodeBlocks 项目文件中使用指定的字符串。有关有效的编译器 ID 字符串，请参阅 CodeBlocks 文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_COMPILER_ID.rst:14
msgid ""
"Other IDEs like QtCreator that also use the CodeBlocks generator may "
"ignore this setting."
msgstr "其他也使用 CodeBlocks 生成器的 IDE（如 QtCreator）可能会忽略此设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES.rst:2
msgid "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES"
msgstr "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES.rst:6
msgid "Change the way the CodeBlocks generator creates project files."
msgstr "更改 CodeBlocks 生成器创建项目文件的方式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES.rst:8
msgid ""
"If this variable evaluates to ``ON`` the generator excludes from the "
"project file any files that are located outside the project root."
msgstr "如果此变量的计算结果为“ON”，则生成器将从项目文件中排除位于项目根目录之外的任何文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODELITE_USE_TARGETS.rst:2
msgid "CMAKE_CODELITE_USE_TARGETS"
msgstr "CMAKE_CODELITE_USE_TARGETS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODELITE_USE_TARGETS.rst:6
msgid "Change the way the CodeLite generator creates projectfiles."
msgstr "更改 CodeLite 生成器创建项目文件的方式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CODELITE_USE_TARGETS.rst:8
msgid ""
"If this variable evaluates to ``ON`` at the end of the top-level "
"``CMakeLists.txt`` file, the generator creates projectfiles based on "
"targets rather than projects."
msgstr "如果此变量在顶级“CMakeLists.txt”文件末尾的计算结果为“ON”，则生成器会根据目标而不是项目创建项目文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:2
msgid "CMAKE_COLOR_DIAGNOSTICS"
msgstr "CMAKE_COLOR_DIAGNOSTICS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:6
msgid "Enable color diagnostics throughout."
msgstr "始终启用颜色诊断。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:8
msgid "This variable uses three states: ``ON``, ``OFF`` and not defined."
msgstr "此变量使用三种状态：``ON``、``OFF`` 和未定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:10
msgid "When not defined:"
msgstr "未定义时："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:12
msgid ""
":ref:`Makefile Generators` initialize the :variable:`CMAKE_COLOR_MAKEFILE`"
" variable to ``ON``.  It controls color buildsystem messages."
msgstr ""
":ref:`Makefile Generators` 将 :variable:`CMAKE_COLOR_MAKEFILE` 变量初始化为 "
"``ON``。它控制颜色构建系统消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:15
msgid "GNU/Clang compilers are not invoked with any color diagnostics flag."
msgstr "GNU/Clang 编译器不使用任何颜色诊断标志调用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:17
msgid "When ``ON``:"
msgstr "当``ON``时："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:19
msgid ""
":ref:`Makefile Generators` produce color buildsystem messages by default. "
":variable:`CMAKE_COLOR_MAKEFILE` is not initialized, but may be explicitly"
" set to ``OFF`` to disable color buildsystem messages."
msgstr ""
":ref:`Makefile Generators` 默认生成彩色构建系统消息。 :variable:`CMAKE_COLOR_MAKEFILE` "
"未初始化，但可以显式设置为 ``OFF`` 以禁用颜色构建系统消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:23
msgid ""
"GNU/Clang compilers are invoked with a flag enabling color diagnostics "
"(``-fcolor-diagnostics``)."
msgstr "GNU/Clang 编译器使用启用颜色诊断的标志调用（``-fcolor-diagnostics``）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:26
msgid "When ``OFF``:"
msgstr "当``OFF``时："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:28
msgid ""
":ref:`Makefile Generators` do not produce color buildsystem messages by "
"default.  :variable:`CMAKE_COLOR_MAKEFILE` is not initialized, but may be "
"explicitly set to ``ON`` to enable color buildsystem messages."
msgstr ""
":ref:`Makefile Generators` 默认情况下不生成彩色构建系统消息。 :variable:`CMAKE_COLOR_MAKEFILE` "
"未初始化，但可以显式设置为 ``ON`` 以启用颜色构建系统消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:32
msgid ""
"GNU/Clang compilers are invoked with a flag disabling color diagnostics "
"(``-fno-color-diagnostics``)."
msgstr "GNU/Clang 编译器使用禁用颜色诊断的标志调用（``-fno-color-diagnostics``）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_DIAGNOSTICS.rst:35
msgid ""
"If the :envvar:`CMAKE_COLOR_DIAGNOSTICS` environment variable is set, its "
"value is used.  Otherwise, ``CMAKE_COLOR_DIAGNOSTICS`` is not defined by "
"default."
msgstr ""
"如果设置了 :envvar:`CMAKE_COLOR_DIAGNOSTICS` 环境变量，则使用它的值。否则，默认情况下未定义 "
"CMAKE_COLOR_DIAGNOSTICS。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_MAKEFILE.rst:2
msgid "CMAKE_COLOR_MAKEFILE"
msgstr "CMAKE_COLOR_MAKEFILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_MAKEFILE.rst:4
msgid "Enables color output when using the :ref:`Makefile Generators`."
msgstr "使用 Makefile Generators 时启用颜色输出。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COLOR_MAKEFILE.rst:6
msgid ""
"When enabled, the generated Makefiles will produce colored output. Default"
" is ``ON``."
msgstr "启用后，生成的 Makefile 将产生彩色输出。默认为``ON``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMMAND.rst:2
msgid "CMAKE_COMMAND"
msgstr "CMAKE_COMMAND 命令"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMMAND.rst:4
msgid "The full path to the :manual:`cmake(1)` executable."
msgstr ":manual:`cmake(1)` 可执行文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMMAND.rst:6
msgid ""
"This is the full path to the CMake executable :manual:`cmake(1)` which is "
"useful from custom commands that want to use the :option:`cmake -E` option"
" for portable system commands.  (e.g.  ``/usr/local/bin/cmake``)"
msgstr ""
"这是 CMake 可执行文件 :manual:`cmake(1)` 的完整路径，对于希望使用 :option:`cmake -E` "
"选项的可移植系统命令的自定义命令很有用。 （例如``/usr/local/bin/cmake``）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_2005.rst:2
msgid "CMAKE_COMPILER_2005"
msgstr "CMAKE_COMPILER_2005"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_2005.rst:4
msgid "Using the Visual Studio 2005 compiler from Microsoft"
msgstr "使用 Microsoft 的 Visual Studio 2005 编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_2005.rst:6
msgid ""
"Set to true when using the Visual Studio 2005 compiler from Microsoft."
msgstr "使用 Microsoft 的 Visual Studio 2005 编译器时设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCC.rst:2
msgid "CMAKE_COMPILER_IS_GNUCC"
msgstr "CMAKE_COMPILER_IS_GNUCC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCC.rst:4
msgid "True if the ``C`` compiler is GNU."
msgstr "如果“C”编译器是 GNU，则为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCC.rst:6
msgid ""
"This variable is deprecated.  Use :variable:`CMAKE_C_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` instead."
msgstr ""
"此变量已弃用。使用 :variable:`CMAKE_C_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` 代替。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCXX.rst:2
msgid "CMAKE_COMPILER_IS_GNUCXX"
msgstr "CMAKE_COMPILER_IS_GNUCXX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCXX.rst:4
msgid "True if the C++ (``CXX``) compiler is GNU."
msgstr "如果 C++ (``CXX``) 编译器是 GNU，则为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUCXX.rst:6
msgid ""
"This variable is deprecated.  Use :variable:`CMAKE_CXX_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` instead."
msgstr ""
"此变量已弃用。使用 :variable:`CMAKE_CXX_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` 代替。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUG77.rst:2
msgid "CMAKE_COMPILER_IS_GNUG77"
msgstr "CMAKE_COMPILER_IS_GNUG77"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUG77.rst:4
msgid "True if the ``Fortran`` compiler is GNU."
msgstr "如果“Fortran”编译器是 GNU，则为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILER_IS_GNUG77.rst:6
msgid ""
"This variable is deprecated.  Use :variable:`CMAKE_Fortran_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` instead."
msgstr ""
"此变量已弃用。请改用 :variable:`CMAKE_Fortran_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.rst:2
msgid "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY"
msgstr "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.rst:6
msgid ""
"Output directory for MS debug symbol ``.pdb`` files generated by the "
"compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号 ``.pdb`` 文件的输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` property on all the targets."
msgstr "此变量用于初始化所有目标上的 COMPILE_PDB_OUTPUT_DIRECTORY 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:6
msgid ""
"Per-configuration output directory for MS debug symbol ``.pdb`` files "
"generated by the compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号“.pdb”文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:9
msgid ""
"This is a per-configuration version of "
":variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY`. This variable is used to "
"initialize the :prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>` property "
"on all the targets."
msgstr ""
"这是 CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY 的每个配置版本。此变量用于初始化所有目标上的 "
"COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG> 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_WARNING_AS_ERROR.rst:2
msgid "CMAKE_COMPILE_WARNING_AS_ERROR"
msgstr "CMAKE_COMPILE_WARNING_AS_ERROR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_WARNING_AS_ERROR.rst:6
msgid "Specify whether to treat warnings on compile as errors."
msgstr "指定是否将编译时的警告视为错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_COMPILE_WARNING_AS_ERROR.rst:8
msgid ""
"This variable is used to initialize the "
":prop_tgt:`COMPILE_WARNING_AS_ERROR` property on all the targets."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`COMPILE_WARNING_AS_ERROR` 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIGURATION_TYPES.rst:2
msgid "CMAKE_CONFIGURATION_TYPES"
msgstr "CMAKE_CONFIGURATION_TYPES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIGURATION_TYPES.rst:4
msgid ""
"Specifies the available build types (configurations) on multi-config "
"generators (e.g. :ref:`Visual Studio <Visual Studio Generators>`, "
":generator:`Xcode`, or :generator:`Ninja Multi-Config`) as a "
":ref:`semicolon-separated list <CMake Language Lists>`.  Typical entries "
"include ``Debug``, ``Release``, ``RelWithDebInfo`` and ``MinSizeRel``, but"
" custom build types can also be defined."
msgstr ""
"将多配置生成器（例如 :ref:`Visual Studio <Visual Studio "
"Generators>`、 :generator:`Xcode` 或 :generator:`Ninja Multi-"
"Config`）上的可用构建类型（配置）指定为 :ref :`分号分隔的列表 <CMake "
"语言列表>`。典型条目包括``Debug``、``Release``、``RelWithDebInfo`` "
"和``MinSizeRel``，但也可以定义自定义构建类型。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIGURATION_TYPES.rst:11
msgid ""
"This variable is initialized by the first :command:`project` or "
":command:`enable_language` command called in a project when a new build "
"tree is first created.  If the :envvar:`CMAKE_CONFIGURATION_TYPES` "
"environment variable is set, its value is used.  Otherwise, the default "
"value is generator-specific."
msgstr ""
"当首次创建新构建树时，此变量由项目中调用的第一个 :command:`project` 或 :command:`enable_language` "
"命令初始化。如果设置了 :envvar:`CMAKE_CONFIGURATION_TYPES` "
"环境变量，则使用它的值。否则，默认值是特定于生成器的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIGURATION_TYPES.rst:17
msgid ""
"Depending on the situation, the values in this variable may be treated "
"case-sensitively or case-insensitively.  See :ref:`Build Configurations` "
"for discussion of this and other related topics."
msgstr ""
"根据情况，此变量中的值可能区分大小写或不区分大小写。有关此主题和其他相关主题的讨论，请参阅 :ref:`Build Configurations`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIGURATION_TYPES.rst:21
msgid "For single-config generators, see :variable:`CMAKE_BUILD_TYPE`."
msgstr "对于单配置生成器，请参阅 :variable:`CMAKE_BUILD_TYPE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIG_POSTFIX.rst:2
msgid "CMAKE_<CONFIG>_POSTFIX"
msgstr "CMAKE_<配置>_POSTFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIG_POSTFIX.rst:4
msgid ""
"Default filename postfix for libraries under configuration ``<CONFIG>``."
msgstr "配置``<CONFIG>``下库的默认文件名后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CONFIG_POSTFIX.rst:6
msgid ""
"When a non-executable target is created its :prop_tgt:`<CONFIG>_POSTFIX` "
"target property is initialized with the value of this variable if it is "
"set."
msgstr ""
"当一个不可执行的目标被创建时，它的 :prop_tgt:`<CONFIG>_POSTFIX` 目标属性被初始化为这个变量的值（如果它被设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CPACK_COMMAND.rst:2
msgid "CMAKE_CPACK_COMMAND"
msgstr "CMAKE_CPACK_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CPACK_COMMAND.rst:6
msgid "Full path to :manual:`cpack(1)` command installed with CMake."
msgstr "与 CMake 一起安装的 :manual:`cpack(1)` 命令的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CPACK_COMMAND.rst:8
msgid ""
"This is the full path to the CPack executable :manual:`cpack(1)` that can "
"be used for custom commands or tests to invoke CPack commands."
msgstr "这是 CPack 可执行文件 :manual:`cpack(1)` 的完整路径，可用于自定义命令或测试以调用 CPack 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING.rst:2
msgid "CMAKE_CROSSCOMPILING"
msgstr "CMAKE_CROSSCOMPILING"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING.rst:4
msgid ""
"Intended to indicate whether CMake is cross compiling, but note "
"limitations discussed below."
msgstr "旨在表明 CMake 是否正在交叉编译，但请注意下面讨论的限制。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING.rst:7
msgid ""
"This variable will be set to true by CMake if the "
":variable:`CMAKE_SYSTEM_NAME` variable has been set manually (i.e. in a "
"toolchain file or as a cache entry from the :manual:`cmake <cmake(1)>` "
"command line). In most cases, manually setting "
":variable:`CMAKE_SYSTEM_NAME` will only be done when cross compiling, "
"since it will otherwise be given the same value as "
":variable:`CMAKE_HOST_SYSTEM_NAME` if not manually set, which is correct "
"for the non-cross-compiling case. In the event that "
":variable:`CMAKE_SYSTEM_NAME` is manually set to the same value as "
":variable:`CMAKE_HOST_SYSTEM_NAME`, then ``CMAKE_CROSSCOMPILING`` will "
"still be set to true."
msgstr ""
"如果 :variable:`CMAKE_SYSTEM_NAME` 变量已被手动设置（即在工具链文件中或作为来自 :manual:`cmake "
"<cmake(1)>` 命令行的缓存条目），则此变量将由 CMake 设置为 true .在大多数情况下，手动设置 "
":variable:`CMAKE_SYSTEM_NAME` 只会在交叉编译时完成，因为如果不手动设置，它将被赋予与 "
":variable:`CMAKE_HOST_SYSTEM_NAME` 相同的值，这对于非交叉编译是正确的编译案例。如果 "
":variable:`CMAKE_SYSTEM_NAME` 手动设置为与 :variable:`CMAKE_HOST_SYSTEM_NAME` "
"相同的值，则 ``CMAKE_CROSSCOMPILING`` 仍将设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING.rst:17
msgid ""
"Another case to be aware of is that builds targeting Apple platforms other"
" than macOS are handled differently to other cross compiling scenarios. "
"Rather than relying on :variable:`CMAKE_SYSTEM_NAME` to select the target "
"platform, Apple device builds use :variable:`CMAKE_OSX_SYSROOT` to select "
"the appropriate SDK, which indirectly determines the target platform. "
"Furthermore, when using the :generator:`Xcode` generator, developers can "
"switch between device and simulator builds at build time rather than "
"having a single choice at configure time, so the concept of whether the "
"build is cross compiling or not is more complex. Therefore, the use of "
"``CMAKE_CROSSCOMPILING`` is not recommended for projects targeting Apple "
"devices."
msgstr ""
"另一种需要注意的情况是，针对 macOS 以外的 Apple 平台构建的处理方式与其他交叉编译场景不同。 Apple 设备构建不是依赖 "
"CMAKE_SYSTEM_NAME 选择目标平台，而是使用 CMAKE_OSX_SYSROOT 选择合适的 SDK，间接确定目标平台。此外，当使用 "
"Xcode "
"生成器时，开发人员可以在构建时在设备构建和模拟器构建之间切换，而不是在配置时只能进行单一选择，因此构建是否交叉编译的概念更加复杂。因此，不建议针对 "
"Apple 设备的项目使用 ``CMAKE_CROSSCOMPILING``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING_EMULATOR.rst:2
msgid "CMAKE_CROSSCOMPILING_EMULATOR"
msgstr "CMAKE_CROSSCOMPILING_EMULATOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING_EMULATOR.rst:6
msgid ""
"This variable is only used when :variable:`CMAKE_CROSSCOMPILING` is on. It"
" should point to a command on the host system that can run executable "
"built for the target system."
msgstr ""
"此变量仅在 :variable:`CMAKE_CROSSCOMPILING` "
"打开时使用。它应该指向主机系统上的一个命令，该命令可以运行为目标系统构建的可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING_EMULATOR.rst:10
msgid ""
"If this variable contains a :ref:`semicolon-separated list <CMake Language"
" Lists>`, then the first value is the command and remaining values are its"
" arguments."
msgstr "如果此变量包含 :ref:`分号分隔列表 <CMake Language Lists>`，则第一个值是命令，其余值是其参数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING_EMULATOR.rst:15
msgid ""
"The command will be used to run :command:`try_run` generated executables, "
"which avoids manual population of the ``TryRunResults.cmake`` file."
msgstr ""
"该命令将用于运行 :command:`try_run` 生成的可执行文件，这避免了手动填充 ``TryRunResults.cmake`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSSCOMPILING_EMULATOR.rst:18
msgid ""
"It is also used as the default value for the "
":prop_tgt:`CROSSCOMPILING_EMULATOR` target property of executables."
msgstr "它还用作可执行文件的 CROSSCOMPILING_EMULATOR 目标属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSS_CONFIGS.rst:2
msgid "CMAKE_CROSS_CONFIGS"
msgstr "CMAKE_CROSS_CONFIGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSS_CONFIGS.rst:6
msgid ""
"Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of "
"configurations available from all ``build-<Config>.ninja`` files in the "
":generator:`Ninja Multi-Config` generator.  This variable activates cross-"
"config mode. Targets from each config specified in this variable can be "
"built from any ``build-<Config>.ninja`` file. Custom commands will use the"
" configuration native to ``build-<Config>.ninja``. If it is set to "
"``all``, all configurations from :variable:`CMAKE_CONFIGURATION_TYPES` are"
" cross-configs. If it is not specified, or empty, each "
"``build-<Config>.ninja`` file will only contain build rules for its own "
"configuration."
msgstr ""
"指定 :ref:`分号分隔列表 <CMake Language Lists>` 可从 :generator:`Ninja Multi-Config`"
" 生成器中的所有 ``build-<Config>.ninja`` "
"文件中获得的配置。此变量激活交叉配置模式。可以从任何``build-<Config>.ninja`` "
"文件构建此变量中指定的每个配置的目标。自定义命令将使用 ``build-<Config>.ninja`` 的原生配置。如果设置为 "
"``all``，来自 CMAKE_CONFIGURATION_TYPES 的所有配置都是交叉配置。如果未指定或为空，则每个 "
"``build-<Config>.ninja`` 文件将仅包含其自身配置的构建规则。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CROSS_CONFIGS.rst:16
msgid ""
"The value of this variable must be a subset of "
":variable:`CMAKE_CONFIGURATION_TYPES`."
msgstr "此变量的值必须是 CMAKE_CONFIGURATION_TYPES 的子集。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CTEST_ARGUMENTS.rst:2
msgid "CMAKE_CTEST_ARGUMENTS"
msgstr "CMAKE_CTEST_ARGUMENTS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CTEST_ARGUMENTS.rst:6
msgid ""
"Set this to a :ref:`semicolon-separated list <CMake Language Lists>` of "
"command-line arguments to pass to :manual:`ctest(1)` when running tests "
"through the ``test`` (or ``RUN_TESTS``) target of the generated build "
"system."
msgstr ""
"将此设置为:ref:`分号分隔的列表 <CMake Language Lists>` "
"在通过``test``（或``RUN_TESTS）运行测试时传递给:manual:`ctest(1)`的命令行参数``) 生成的构建系统的目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CTEST_COMMAND.rst:2
msgid "CMAKE_CTEST_COMMAND"
msgstr "CMAKE_CTEST_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CTEST_COMMAND.rst:4
msgid "Full path to :manual:`ctest(1)` command installed with CMake."
msgstr "与 CMake 一起安装的 :manual:`ctest(1)` 命令的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CTEST_COMMAND.rst:6
msgid ""
"This is the full path to the CTest executable :manual:`ctest(1)` that can "
"be used for custom commands or tests to invoke CTest commands."
msgstr "这是 CTest 可执行文件 :manual:`ctest(1)` 的完整路径，可用于自定义命令或测试以调用 CTest 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:2
msgid "CMAKE_CUDA_ARCHITECTURES"
msgstr "CMAKE_CUDA_架构"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_ARCHITECTURES` property of targets."
msgstr "目标的 CUDA_ARCHITECTURES 属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:8
msgid ""
"Initialized by the :envvar:`CUDAARCHS` environment variable if set. "
"Otherwise as follows depending on :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>`:"
msgstr ""
"如果已设置，则由 CUDAARCHS 环境变量初始化。否则如下取决于 :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>`："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:11
msgid "For ``Clang``: the oldest architecture that works."
msgstr "对于 ``Clang``：最古老的架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:13
msgid ""
"For ``NVIDIA``: the default architecture chosen by the compiler. See "
"policy :policy:`CMP0104`."
msgstr "对于“NVIDIA”：编译器选择的默认架构。请参阅政策:policy:`CMP0104`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:16
msgid ""
"Users are encouraged to override this, as the default varies across "
"compilers and compiler versions."
msgstr "鼓励用户覆盖它，因为默认值因编译器和编译器版本而异。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:19
msgid ""
"This variable is used to initialize the :prop_tgt:`CUDA_ARCHITECTURES` "
"property on all targets. See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`CUDA_ARCHITECTURES` 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:24
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:58
msgid "Examples"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_ARCHITECTURES.rst:35
msgid ""
"``CMAKE_CUDA_ARCHITECTURES`` will default to ``75`` unless overridden by "
"the user."
msgstr "``CMAKE_CUDA_ARCHITECTURES`` 将默认为 ``75`` 除非被用户覆盖。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_COMPILE_FEATURES.rst:2
msgid "CMAKE_CUDA_COMPILE_FEATURES"
msgstr "CMAKE_CUDA_COMPILE_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_COMPILE_FEATURES.rst:6
msgid "List of features known to the CUDA compiler"
msgstr "CUDA 编译器已知的特性列表"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_COMPILE_FEATURES.rst:8
msgid ""
"These features are known to be available for use with the CUDA compiler. "
"This list is a subset of the features listed in the "
":prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES` global property."
msgstr ""
"众所周知，这些功能可用于 CUDA 编译器。此列表是 :prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES` "
"全局属性中列出的功能的子集。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_COMPILE_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD_REQUIRED.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_COMPILE_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD_REQUIRED.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_COMPILE_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD_REQUIRED.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD_REQUIRED.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:19
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD_REQUIRED.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_EXTENSIONS.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD_REQUIRED.rst:9
msgid ""
"See the :manual:`cmake-compile-features(7)` manual for information on "
"compile features and a list of supported compilers."
msgstr "有关编译功能的信息和支持的编译器列表，请参阅 :manual:`cmake-compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_EXTENSIONS.rst:2
msgid "CMAKE_CUDA_EXTENSIONS"
msgstr "CMAKE_CUDA_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_EXTENSIONS` target property if set when "
"a target is created."
msgstr ":prop_tgt:`CUDA_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:2
msgid "CMAKE_CUDA_HOST_COMPILER"
msgstr "CMAKE_CUDA_HOST_COMPILER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:6
msgid ""
"When :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is "
"``NVIDIA``, ``CMAKE_CUDA_HOST_COMPILER`` selects the compiler executable "
"to use when compiling host code for ``CUDA`` language files. This maps to "
"the ``nvcc -ccbin`` option."
msgstr ""
"当 :variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` 为 "
"``NVIDIA`` 时，``CMAKE_CUDA_HOST_COMPILER`` 选择编译器可执行文件以在为 ``CUDA`` "
"语言文件编译主机代码时使用。这映射到 ``nvcc -ccbin`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:11
msgid ""
"The ``CMAKE_CUDA_HOST_COMPILER`` variable may be set explicitly before "
"CUDA is first enabled by a :command:`project` or "
":command:`enable_language` command. This can be done via "
"``-DCMAKE_CUDA_HOST_COMPILER=...`` on the command line or in a "
":ref:`toolchain file <Cross Compiling Toolchain>`.  Or, one may set the "
":envvar:`CUDAHOSTCXX` environment variable to provide a default value."
msgstr ""
"``CMAKE_CUDA_HOST_COMPILER`` 变量可以在 CUDA 首次通过 :command:`project` 或 "
":command:`enable_language` "
"命令启用之前显式设置。这可以通过命令行上的“-DCMAKE_CUDA_HOST_COMPILER=...”或在工具链文件 <Cross "
"Compiling Toolchain> 中完成。或者，可以设置 CUDAHOSTCXX 环境变量以提供默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:17
msgid ""
"Once the CUDA language is enabled, the ``CMAKE_CUDA_HOST_COMPILER`` "
"variable is read-only and changes to it are undefined behavior."
msgstr "启用 CUDA 语言后，``CMAKE_CUDA_HOST_COMPILER`` 变量是只读的，对其进行更改是未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:22
msgid ""
"Since ``CMAKE_CUDA_HOST_COMPILER`` is meaningful only when the "
":variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is "
"``NVIDIA``, it does not make sense to set ``CMAKE_CUDA_HOST_COMPILER`` "
"without also setting ``CMAKE_CUDA_COMPILER`` to NVCC."
msgstr ""
"由于 ``CMAKE_CUDA_HOST_COMPILER`` 仅当 :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` 为 ``NVIDIA`` 时才有意义，因此在不设置 "
"``CMAKE_CUDA_COMPILER` 的情况下设置 ``CMAKE_CUDA_HOST_COMPILER`` 是没有意义的` 到 NVCC。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_HOST_COMPILER.rst:29
msgid "Ignored when using :ref:`Visual Studio Generators`."
msgstr "使用 :ref:`Visual Studio Generators` 时被忽略。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS.rst:2
msgid "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS"
msgstr "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target property "
"when defined. By default this variable is not defined."
msgstr "CUDA_RESOLVE_DEVICE_SYMBOLS 目标属性在定义时的默认值。默认情况下，此变量未定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS.rst:9
msgid ""
"This variable is used to initialize the property on each target as it is "
"created."
msgstr "此变量用于在创建每个目标时初始化其属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:2
msgid "CMAKE_CUDA_RUNTIME_LIBRARY"
msgstr "CMAKE_CUDA_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the CUDA runtime library for use when compiling and linking CUDA. "
"This variable is used to initialize the :prop_tgt:`CUDA_RUNTIME_LIBRARY` "
"property on all targets as they are created."
msgstr ""
"选择编译和链接 CUDA 时要使用的 CUDA 运行时库。此变量用于在创建所有目标时初始化所有目标上的 CUDA_RUNTIME_LIBRARY "
"属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:10
msgid "The allowed case insensitive values are:"
msgstr "允许的不区分大小写的值是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:2
msgid "``None``"
msgstr "``没有``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Link with ``-cudart=none`` or equivalent flag(s) to use no CUDA runtime "
"library."
msgstr "与“-cudart=none”或等效标志链接以不使用 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:5
msgid "``Shared``"
msgstr "``共享``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Link with ``-cudart=shared`` or equivalent flag(s) to use a dynamically-"
"linked CUDA runtime library."
msgstr "与“-cudart=shared”或等效标志链接以使用动态链接的 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:9
msgid "``Static``"
msgstr "``静态``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:8
msgid ""
"Link with ``-cudart=static`` or equivalent flag(s) to use a statically-"
"linked CUDA runtime library."
msgstr "与“-cudart=static”或等效标志链接以使用静态链接的 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:14
msgid ""
"Contents of ``CMAKE_CUDA_RUNTIME_LIBRARY`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``CMAKE_CUDA_RUNTIME_LIBRARY`` 的内容可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:17
msgid ""
"If this variable is not set then the :prop_tgt:`CUDA_RUNTIME_LIBRARY` "
"target property will not be set automatically.  If that property is not "
"set then CMake uses an appropriate default value based on the compiler to "
"select the CUDA runtime library."
msgstr ""
"如果未设置此变量，则不会自动设置 :prop_tgt:`CUDA_RUNTIME_LIBRARY` 目标属性。如果未设置该属性，则 CMake "
"根据编译器使用适当的默认值来选择 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_RUNTIME_LIBRARY.rst:24
msgid ""
"This property has effect only when the ``CUDA`` language is enabled. To "
"control the CUDA runtime linking when only using the CUDA SDK with the "
"``C`` or ``C++`` language we recommend using the :module:`FindCUDAToolkit`"
" module."
msgstr ""
"此属性仅在启用 ``CUDA`` 语言时有效。要在仅使用带有“C”或“C++”语言的 CUDA SDK 时控制 CUDA 运行时链接，我们建议使用 "
"FindCUDAToolkit 模块。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_SEPARABLE_COMPILATION.rst:2
msgid "CMAKE_CUDA_SEPARABLE_COMPILATION"
msgstr "CMAKE_CUDA_SEPARABLE_COMPILATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_SEPARABLE_COMPILATION.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_SEPARABLE_COMPILATION` target property. "
"This variable is used to initialize the property on each target as it is "
"created."
msgstr ""
":prop_tgt:`CUDA_SEPARABLE_COMPILATION` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD.rst:2
msgid "CMAKE_CUDA_STANDARD"
msgstr "CMAKE_CUDA_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_STANDARD` target property if set when a "
"target is created."
msgstr ":prop_tgt:`CUDA_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD_REQUIRED.rst:2
msgid "CMAKE_CUDA_STANDARD_REQUIRED"
msgstr "CMAKE_CUDA_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`CUDA_STANDARD_REQUIRED` target property if "
"set when a target is created."
msgstr ":prop_tgt:`CUDA_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES.rst:2
msgid "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES"
msgstr "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES.rst:6
msgid ""
"When the ``CUDA`` language has been enabled, this provides a "
":ref:`semicolon-separated list <CMake Language Lists>` of include "
"directories provided by the CUDA Toolkit.  The value may be useful for C++"
" source files to include CUDA headers."
msgstr ""
"启用 ``CUDA`` 语言后，这会提供 :ref:`分号分隔的列表 <CMake Language Lists>`，其中包含 CUDA "
"工具包提供的包含目录。该值对于包含 CUDA 标头的 C++ 源文件可能很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_BINARY_DIR.rst:2
msgid "CMAKE_CURRENT_BINARY_DIR"
msgstr "CMAKE_CURRENT_BINARY_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_BINARY_DIR.rst:4
msgid "The path to the binary directory currently being processed."
msgstr "当前正在处理的二进制目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_BINARY_DIR.rst:6
msgid ""
"This is the full path to the build directory that is currently being "
"processed by cmake.  Each directory added by :command:`add_subdirectory` "
"will create a binary directory in the build tree, and as it is being "
"processed this variable will be set.  For in-source builds this is the "
"current source directory being processed."
msgstr ""
"这是 cmake 当前正在处理的构建目录的完整路径。 :command:`add_subdirectory` "
"添加的每个目录都将在构建树中创建一个二进制目录，并且在处理时将设置此变量。对于源内构建，这是正在处理的当前源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_BINARY_DIR.rst:12
msgid ""
"When run in :option:`cmake -P` script mode, CMake sets the variables "
":variable:`CMAKE_BINARY_DIR`, :variable:`CMAKE_SOURCE_DIR`, "
"``CMAKE_CURRENT_BINARY_DIR`` and :variable:`CMAKE_CURRENT_SOURCE_DIR` to "
"the current working directory."
msgstr ""
"在 cmake -P 脚本模式下运行时，CMake 将变量 "
"CMAKE_BINARY_DIR、CMAKE_SOURCE_DIR、CMAKE_CURRENT_BINARY_DIR 和 "
"CMAKE_CURRENT_SOURCE_DIR 变量设置为当前工作目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION.rst:2
msgid "CMAKE_CURRENT_FUNCTION"
msgstr "CMAKE_CURRENT_FUNCTION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION.rst:6
msgid ""
"When executing code inside a :command:`function`, this variable contains "
"the name of the current function.  It can be useful for diagnostic or "
"debug messages."
msgstr "在 :command:`function` 中执行代码时，此变量包含当前函数的名称。它对于诊断或调试消息很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION.rst:10
msgid ""
"See also :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`, "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE` and "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`."
msgstr ""
"另见 :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`、 :variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`"
" 和 :variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst:2
msgid "CMAKE_CURRENT_FUNCTION_LIST_DIR"
msgstr "CMAKE_CURRENT_FUNCTION_LIST_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst:6
msgid ""
"When executing code inside a :command:`function`, this variable contains "
"the full directory of the listfile that defined the current function."
msgstr "在 :command:`function` 中执行代码时，此变量包含定义当前函数的列表文件的完整目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst:9
msgid ""
"It is quite common practice in CMake for modules to use some additional "
"files, such as templates to be copied in after substituting CMake "
"variables. In such cases, a function needs to know where to locate those "
"files in a way that doesn't depend on where the function is called.  "
"Without ``CMAKE_CURRENT_FUNCTION_LIST_DIR``, the code to do that would "
"typically use the following pattern:"
msgstr ""
"在 CMake 中，模块使用一些额外的文件是很常见的做法，例如在替换 CMake "
"变量后要复制的模板。在这种情况下，函数需要以一种不依赖于函数调用位置的方式知道在哪里找到这些文件。如果没有 "
"``CMAKE_CURRENT_FUNCTION_LIST_DIR``，执行此操作的代码通常会使用以下模式："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst:27
msgid ""
"Using ``CMAKE_CURRENT_FUNCTION_LIST_DIR`` inside the function instead "
"eliminates the need for the extra variable which would otherwise be "
"visible outside the function's scope. The above example can be written in "
"the more concise and more robust form:"
msgstr ""
"在函数内部使用 ``CMAKE_CURRENT_FUNCTION_LIST_DIR`` "
"可以消除对额外变量的需求，否则这些变量在函数范围之外是可见的。上面的例子可以写成更简洁、更健壮的形式："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_DIR.rst:41
msgid ""
"See also :variable:`CMAKE_CURRENT_FUNCTION`, "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE` and "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`."
msgstr ""
"另见 :variable:`CMAKE_CURRENT_FUNCTION`、 :variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE` "
"和 :variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_FILE.rst:2
msgid "CMAKE_CURRENT_FUNCTION_LIST_FILE"
msgstr "CMAKE_CURRENT_FUNCTION_LIST_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_FILE.rst:6
msgid ""
"When executing code inside a :command:`function`, this variable contains "
"the full path to the listfile that defined the current function."
msgstr "在 :command:`function` 中执行代码时，此变量包含定义当前函数的列表文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_FILE.rst:9
msgid ""
"See also :variable:`CMAKE_CURRENT_FUNCTION`, "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` and "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`."
msgstr ""
"另见 :variable:`CMAKE_CURRENT_FUNCTION`、 :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` "
"和 :variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_LINE.rst:2
msgid "CMAKE_CURRENT_FUNCTION_LIST_LINE"
msgstr "CMAKE_CURRENT_FUNCTION_LIST_LINE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_LINE.rst:6
msgid ""
"When executing code inside a :command:`function`, this variable contains "
"the line number in the listfile where the current function was defined."
msgstr "在 :command:`function` 中执行代码时，此变量包含列表文件中定义当前函数的行号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_FUNCTION_LIST_LINE.rst:10
msgid ""
"See also :variable:`CMAKE_CURRENT_FUNCTION`, "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` and "
":variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`."
msgstr ""
"另见 :variable:`CMAKE_CURRENT_FUNCTION`、 :variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR` "
"和 :variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_DIR.rst:2
msgid "CMAKE_CURRENT_LIST_DIR"
msgstr "CMAKE_CURRENT_LIST_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_DIR.rst:4
msgid "Full directory of the listfile currently being processed."
msgstr "当前正在处理的列表文件的完整目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_DIR.rst:6
msgid ""
"As CMake processes the listfiles in your project this variable will always"
" be set to the directory where the listfile which is currently being "
"processed (:variable:`CMAKE_CURRENT_LIST_FILE`) is located.  The value has"
" dynamic scope.  When CMake starts processing commands in a source file it"
" sets this variable to the directory where this file is located. When "
"CMake finishes processing commands from the file it restores the previous "
"value.  Therefore the value of the variable inside a macro or function is "
"the directory of the file invoking the bottom-most entry on the call "
"stack, not the directory of the file containing the macro or function "
"definition."
msgstr ""
"当 CMake 处理项目中的列表文件时，此变量将始终设置为当前正在处理的列表文件 "
"(:variable:`CMAKE_CURRENT_LIST_FILE`) 所在的目录。该值具有动态范围。当 CMake "
"开始处理源文件中的命令时，它会将此变量设置为该文件所在的目录。当 CMake "
"完成处理文件中的命令时，它会恢复以前的值。因此，宏或函数中变量的值是调用调用堆栈最底部条目的文件的目录，而不是包含宏或函数定义的文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_DIR.rst:17
msgid "See also :variable:`CMAKE_CURRENT_LIST_FILE`."
msgstr "另见 :variable:`CMAKE_CURRENT_LIST_FILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_FILE.rst:2
msgid "CMAKE_CURRENT_LIST_FILE"
msgstr "CMAKE_CURRENT_LIST_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_FILE.rst:4
msgid "Full path to the listfile currently being processed."
msgstr "当前正在处理的列表文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_FILE.rst:6
msgid ""
"As CMake processes the listfiles in your project this variable will always"
" be set to the one currently being processed.  The value has dynamic "
"scope.  When CMake starts processing commands in a source file it sets "
"this variable to the location of the file.  When CMake finishes processing"
" commands from the file it restores the previous value.  Therefore the "
"value of the variable inside a macro or function is the file invoking the "
"bottom-most entry on the call stack, not the file containing the macro or "
"function definition."
msgstr ""
"当 CMake 处理项目中的列表文件时，此变量将始终设置为当前正在处理的那个。该值具有动态范围。当 CMake "
"开始处理源文件中的命令时，它会将此变量设置为文件的位置。当 CMake "
"完成处理文件中的命令时，它会恢复以前的值。因此，宏或函数中变量的值是调用调用堆栈最底部条目的文件，而不是包含宏或函数定义的文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_FILE.rst:15
msgid "See also :variable:`CMAKE_PARENT_LIST_FILE`."
msgstr "另见 :variable:`CMAKE_PARENT_LIST_FILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_LINE.rst:2
msgid "CMAKE_CURRENT_LIST_LINE"
msgstr "CMAKE_CURRENT_LIST_LINE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_LINE.rst:4
msgid "The line number of the current file being processed."
msgstr "当前正在处理的文件的行号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_LINE.rst:6
msgid ""
"This is the line number of the file currently being processed by cmake."
msgstr "这是 cmake 当前正在处理的文件的行号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_LIST_LINE.rst:9
msgid ""
"If CMake is currently processing deferred calls scheduled by the "
":command:`cmake_language(DEFER)` command, this variable evaluates to "
"``DEFERRED`` instead of a specific line number."
msgstr ""
"如果 CMake 当前正在处理由 :command:`cmake_language(DEFER)` 命令安排的延迟调用，则此变量的计算结果为 "
"``DEFERRED`` 而不是特定的行号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_SOURCE_DIR.rst:2
msgid "CMAKE_CURRENT_SOURCE_DIR"
msgstr "CMAKE_CURRENT_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_SOURCE_DIR.rst:4
msgid "The path to the source directory currently being processed."
msgstr "当前正在处理的源目录的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_SOURCE_DIR.rst:6
msgid ""
"This is the full path to the source directory that is currently being "
"processed by cmake."
msgstr "这是 cmake 当前正在处理的源目录的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CURRENT_SOURCE_DIR.rst:9
msgid ""
"When run in :option:`cmake -P` script mode, CMake sets the variables "
":variable:`CMAKE_BINARY_DIR`, :variable:`CMAKE_SOURCE_DIR`, "
":variable:`CMAKE_CURRENT_BINARY_DIR` and ``CMAKE_CURRENT_SOURCE_DIR`` to "
"the current working directory."
msgstr ""
"在 cmake -P 脚本模式下运行时，CMake 将变量 "
"CMAKE_BINARY_DIR、CMAKE_SOURCE_DIR、CMAKE_CURRENT_BINARY_DIR 和 "
"CMAKE_CURRENT_SOURCE_DIR 设置为当前工作目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_COMPILE_FEATURES.rst:2
msgid "CMAKE_CXX_COMPILE_FEATURES"
msgstr "CMAKE_CXX_COMPILE_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_COMPILE_FEATURES.rst:6
msgid "List of features known to the C++ compiler"
msgstr "C++ 编译器已知的特性列表"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_COMPILE_FEATURES.rst:8
msgid ""
"These features are known to be available for use with the C++ compiler. "
"This list is a subset of the features listed in the "
":prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global property."
msgstr ""
"众所周知，这些功能可用于 C++ 编译器。此列表是 :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` "
"全局属性中列出的功能的子集。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_EXTENSIONS.rst:2
msgid "CMAKE_CXX_EXTENSIONS"
msgstr "CMAKE_CXX_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`CXX_EXTENSIONS` target property if set when a"
" target is created."
msgstr ":prop_tgt:`CXX_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_SCAN_FOR_MODULES.rst:2
msgid "CMAKE_CXX_SCAN_FOR_MODULES"
msgstr "CMAKE_CXX_SCAN_FOR_MODULES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_SCAN_FOR_MODULES.rst:6
msgid "Whether to scan C++ source files for module dependencies."
msgstr "是否扫描 C++ 源文件以查找模块依赖项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_SCAN_FOR_MODULES.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`CXX_SCAN_FOR_MODULES` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 CXX_SCAN_FOR_MODULES 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_SCAN_FOR_MODULES.rst:14
msgid ""
"This setting is meaningful only when experimental support for C++ modules "
"has been enabled by the ``CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API`` gate."
msgstr ""
"仅当“CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API”门启用了对 C++ 模块的实验性支持时，此设置才有意义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD.rst:2
msgid "CMAKE_CXX_STANDARD"
msgstr "CMAKE_CXX_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`CXX_STANDARD` target property if set when a "
"target is created."
msgstr ":prop_tgt:`CXX_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD_REQUIRED.rst:2
msgid "CMAKE_CXX_STANDARD_REQUIRED"
msgstr "CMAKE_CXX_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_CXX_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`CXX_STANDARD_REQUIRED` target property if set"
" when a target is created."
msgstr ":prop_tgt:`CXX_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_COMPILE_FEATURES.rst:2
msgid "CMAKE_C_COMPILE_FEATURES"
msgstr "CMAKE_C_COMPILE_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_COMPILE_FEATURES.rst:6
msgid "List of features known to the C compiler"
msgstr "C 编译器已知的特性列表"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_COMPILE_FEATURES.rst:8
msgid ""
"These features are known to be available for use with the C compiler. This"
" list is a subset of the features listed in the "
":prop_gbl:`CMAKE_C_KNOWN_FEATURES` global property."
msgstr ""
"众所周知，这些功能可用于 C 编译器。此列表是 :prop_gbl:`CMAKE_C_KNOWN_FEATURES` 全局属性中列出的功能的子集。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_EXTENSIONS.rst:2
msgid "CMAKE_C_EXTENSIONS"
msgstr "CMAKE_C_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`C_EXTENSIONS` target property if set when a "
"target is created."
msgstr ":prop_tgt:`C_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD.rst:2
msgid "CMAKE_C_STANDARD"
msgstr "CMAKE_C_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`C_STANDARD` target property if set when a "
"target is created."
msgstr ":prop_tgt:`C_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD_REQUIRED.rst:2
msgid "CMAKE_C_STANDARD_REQUIRED"
msgstr "CMAKE_C_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_C_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`C_STANDARD_REQUIRED` target property if set "
"when a target is created."
msgstr ":prop_tgt:`C_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_POSTFIX.rst:2
msgid "CMAKE_DEBUG_POSTFIX"
msgstr "CMAKE_DEBUG_POSTFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_POSTFIX.rst:4
msgid "See variable :variable:`CMAKE_<CONFIG>_POSTFIX`."
msgstr "请参阅变量 :variable:`CMAKE_<CONFIG>_POSTFIX`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_POSTFIX.rst:6
msgid ""
"This variable is a special case of the more-general "
":variable:`CMAKE_<CONFIG>_POSTFIX` variable for the `DEBUG` configuration."
msgstr "这个变量是更通用的 CMAKE_<CONFIG>_POSTFIX 变量的特例，用于 `DEBUG` 配置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:2
msgid "CMAKE_DEBUG_TARGET_PROPERTIES"
msgstr "CMAKE_DEBUG_TARGET_PROPERTIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:4
msgid "Enables tracing output for target properties."
msgstr "启用目标属性的跟踪输出。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:6
msgid ""
"This variable can be populated with a list of properties to generate debug"
" output for when evaluating target properties.  Currently it can only be "
"used when evaluating:"
msgstr "可以使用属性列表填充此变量，以便在评估目标属性时生成调试输出。目前它只能在评估时使用："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:10
msgid ":prop_tgt:`AUTOUIC_OPTIONS`"
msgstr ":prop_tgt:`AUTOUIC_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:11
msgid ":prop_tgt:`COMPILE_DEFINITIONS`"
msgstr ":prop_tgt:`COMPILE_DEFINITIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:12
msgid ":prop_tgt:`COMPILE_FEATURES`"
msgstr ":prop_tgt:`COMPILE_FEATURES`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:13
msgid ":prop_tgt:`COMPILE_OPTIONS`"
msgstr ":prop_tgt:`COMPILE_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:14
msgid ":prop_tgt:`INCLUDE_DIRECTORIES`"
msgstr ":prop_tgt:`INCLUDE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:15
msgid ":prop_tgt:`LINK_DIRECTORIES`"
msgstr ":prop_tgt:`LINK_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:16
msgid ":prop_tgt:`LINK_OPTIONS`"
msgstr ":prop_tgt:`LINK_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:17
msgid ":prop_tgt:`POSITION_INDEPENDENT_CODE`"
msgstr ":prop_tgt:`POSITION_INDEPENDENT_CODE`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:18
msgid ":prop_tgt:`SOURCES`"
msgstr ":prop_tgt:`来源`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEBUG_TARGET_PROPERTIES.rst:20
msgid ""
"target properties and any other property listed in "
":prop_tgt:`COMPATIBLE_INTERFACE_STRING` and other "
"``COMPATIBLE_INTERFACE_`` properties.  It outputs an origin for each entry"
" in the target property.  Default is unset."
msgstr ""
"目标属性和 :prop_tgt:`COMPATIBLE_INTERFACE_STRING` 中列出的任何其他属性和其他 "
"``COMPATIBLE_INTERFACE_`` 属性。它为目标属性中的每个条目输出一个来源。默认未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_BUILD_TYPE.rst:2
msgid "CMAKE_DEFAULT_BUILD_TYPE"
msgstr "CMAKE_DEFAULT_BUILD_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_BUILD_TYPE.rst:6
msgid ""
"Specifies the configuration to use by default in a ``build.ninja`` file in"
" the :generator:`Ninja Multi-Config` generator. If this variable is "
"specified, ``build.ninja`` uses build rules from ``build-<Config>.ninja`` "
"by default. All custom commands are executed with this configuration. If "
"the variable is not specified, the first item from "
":variable:`CMAKE_CONFIGURATION_TYPES` is used instead."
msgstr ""
"指定在 :generator:`Ninja Multi-Config` 生成器的 ``build.ninja`` "
"文件中默认使用的配置。如果指定了此变量，``build.ninja`` 默认使用来自``build-<Config>.ninja`` "
"的构建规则。所有自定义命令都使用此配置执行。如果未指定变量，则使用 :variable:`CMAKE_CONFIGURATION_TYPES` "
"中的第一项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_BUILD_TYPE.rst:13
msgid ""
"The value of this variable must be one of the items from "
":variable:`CMAKE_CONFIGURATION_TYPES`."
msgstr "此变量的值必须是 CMAKE_CONFIGURATION_TYPES 中的一项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_CONFIGS.rst:2
msgid "CMAKE_DEFAULT_CONFIGS"
msgstr "CMAKE_DEFAULT_CONFIGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_CONFIGS.rst:6
msgid ""
"Specifies a :ref:`semicolon-separated list <CMake Language Lists>` of "
"configurations to build for a target in ``build.ninja`` if no "
"``:<Config>`` suffix is specified in the :generator:`Ninja Multi-Config` "
"generator. If it is set to ``all``, all configurations from "
":variable:`CMAKE_CROSS_CONFIGS` are used. If it is not specified, it "
"defaults to :variable:`CMAKE_DEFAULT_BUILD_TYPE`."
msgstr ""
"如果在 :generator: 中未指定 ``:<Config>`` 后缀，则指定要在 `build.ninja`` 中为目标构建的配置的 "
":ref:`分号分隔列表 <CMake Language Lists>` Ninja Multi-Config` 生成器。如果它设置为 "
"``all``，则使用 CMAKE_CROSS_CONFIGS "
"中的所有配置。如果未指定，则默认为 :variable:`CMAKE_DEFAULT_BUILD_TYPE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_CONFIGS.rst:12
msgid ""
"For example, if you set :variable:`CMAKE_DEFAULT_BUILD_TYPE` to "
"``Release``, but set ``CMAKE_DEFAULT_CONFIGS`` to ``Debug`` or ``all``, "
"all ``<target>`` aliases in ``build.ninja`` will resolve to "
"``<target>:Debug`` or ``<target>:all``, but custom commands will still use"
" the ``Release`` configuration."
msgstr ""
"例如，如果您将 :variable:`CMAKE_DEFAULT_BUILD_TYPE` 设置为 ``Release``，但将 "
"``CMAKE_DEFAULT_CONFIGS`` 设置为 ``Debug`` 或 ``all``，则所有 ``<target>`` "
"中的别名`build.ninja`` 将解析为 ``<target>:Debug`` 或 ``<target>:all``，但自定义命令仍将使用 "
"``Release`` 配置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEFAULT_CONFIGS.rst:18
msgid ""
"The value of this variable must be a subset of "
":variable:`CMAKE_CROSS_CONFIGS` or be the same as "
":variable:`CMAKE_DEFAULT_BUILD_TYPE`. It must not be specified if "
":variable:`CMAKE_DEFAULT_BUILD_TYPE` or :variable:`CMAKE_CROSS_CONFIGS` is"
" not used."
msgstr ""
"此变量的值必须是 CMAKE_CROSS_CONFIGS 的子集或与 CMAKE_DEFAULT_BUILD_TYPE 相同。如果未使用 "
":variable:`CMAKE_DEFAULT_BUILD_TYPE` 或 :variable:`CMAKE_CROSS_CONFIGS` "
"则不得指定。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEPENDS_IN_PROJECT_ONLY.rst:2
msgid "CMAKE_DEPENDS_IN_PROJECT_ONLY"
msgstr "CMAKE_DEPENDS_IN_PROJECT_ONLY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEPENDS_IN_PROJECT_ONLY.rst:6
msgid ""
"When set to ``TRUE`` in a directory, the build system produced by the "
":ref:`Makefile Generators` is set up to only consider dependencies on "
"source files that appear either in the source or in the binary "
"directories.  Changes to source files outside of these directories will "
"not cause rebuilds."
msgstr ""
"当在目录中设置为 ``TRUE`` 时，由 Makefile Generators "
"生成的构建系统被设置为仅考虑对出现在源目录或二进制目录中的源文件的依赖性。对这些目录之外的源文件的更改不会导致重建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEPENDS_IN_PROJECT_ONLY.rst:11
msgid ""
"This should be used carefully in cases where some source files are picked "
"up through external headers during the build."
msgstr "如果在构建过程中通过外部标头获取某些源文件，则应谨慎使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEPENDS_USE_COMPILER.rst:2
msgid "CMAKE_DEPENDS_USE_COMPILER"
msgstr "CMAKE_DEPENDS_USE_COMPILER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DEPENDS_USE_COMPILER.rst:6
msgid ""
"For the :ref:`Makefile Generators`, source dependencies are now, for a "
"selection of compilers, generated by the compiler itself. By defining this"
" variable with value ``FALSE``, you can restore the legacy behavior (i.e. "
"using CMake for dependencies discovery)."
msgstr ""
"对于 :ref:`Makefile "
"Generators`，对于选择的编译器，源依赖项现在由编译器本身生成。通过使用值“FALSE”定义此变量，您可以恢复遗留行为（即使用 CMake "
"进行依赖项发现）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DIRECTORY_LABELS.rst:2
msgid "CMAKE_DIRECTORY_LABELS"
msgstr "CMAKE_DIRECTORY_LABELS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DIRECTORY_LABELS.rst:6
msgid "Specify labels for the current directory."
msgstr "为当前目录指定标签。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DIRECTORY_LABELS.rst:8
msgid ""
"This is used to initialize the :prop_dir:`LABELS` directory property."
msgstr "这用于初始化 :prop_dir:`LABELS` 目录属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst:2
msgid "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>"
msgstr "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst:4
msgid "Variable for disabling :command:`find_package` calls."
msgstr "用于禁用 :command:`find_package` 调用的变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst:6
msgid ""
"Every non-``REQUIRED`` :command:`find_package` call in a project can be "
"disabled by setting the variable "
"``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` to ``TRUE``. This can be used"
" to build a project without an optional package, although that package is "
"installed."
msgstr ""
"可以通过将变量 CMAKE_DISABLE_FIND_PACKAGE_<PackageName> 设置为 TRUE 来禁用项目中的每个非 "
"``REQUIRED`` :command:`find_package` 调用。这可用于构建没有可选包的项目，尽管该包已安装。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst:12
msgid ""
"This switch should be used during the initial CMake run.  Otherwise if the"
" package has already been found in a previous CMake run, the variables "
"which have been stored in the cache will still be there.  In that case it "
"is recommended to remove the cache variables for this package from the "
"cache using the cache editor or :option:`cmake -U`."
msgstr ""
"应在初始 CMake 运行期间使用此开关。否则，如果在之前的 CMake "
"运行中已经找到该包，则存储在缓存中的变量仍将存在。在这种情况下，建议使用缓存编辑器或 :option:`cmake -U` "
"从缓存中删除此包的缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.rst:18
msgid ""
"See also the :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` "
"variable."
msgstr "另请参阅 :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_PRECOMPILE_HEADERS.rst:2
msgid "CMAKE_DISABLE_PRECOMPILE_HEADERS"
msgstr "CMAKE_DISABLE_PRECOMPILE_HEADERS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_PRECOMPILE_HEADERS.rst:6
msgid "Default value for :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` of targets."
msgstr "目标的 :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DISABLE_PRECOMPILE_HEADERS.rst:8
msgid "By default ``CMAKE_DISABLE_PRECOMPILE_HEADERS`` is ``OFF``."
msgstr "默认情况下 ``CMAKE_DISABLE_PRECOMPILE_HEADERS`` 是 ``OFF``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DL_LIBS.rst:2
msgid "CMAKE_DL_LIBS"
msgstr "CMAKE_DL_LIBS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DL_LIBS.rst:4
msgid "Name of library containing ``dlopen`` and ``dlclose``."
msgstr "包含“dlopen”和“dlclose”的库名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DL_LIBS.rst:6
msgid ""
"The name of the library that has ``dlopen`` and ``dlclose`` in it, usually"
" ``-ldl`` on most UNIX machines."
msgstr "包含 ``dlopen`` 和 ``dlclose`` 的库的名称，在大多数 UNIX 机器上通常为 ``-ldl``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_SDK.rst:2
msgid "CMAKE_DOTNET_SDK"
msgstr "CMAKE_DOTNET_SDK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_SDK.rst:6
msgid "Default value for :prop_tgt:`DOTNET_SDK` property of targets."
msgstr "目标的 :prop_tgt:`DOTNET_SDK` 属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_SDK.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`DOTNET_SDK` property on"
" all targets. See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 DOTNET_SDK 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst:2
msgid "CMAKE_DOTNET_TARGET_FRAMEWORK"
msgstr "CMAKE_DOTNET_TARGET_FRAMEWORK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst:6
msgid ""
"Default value for :prop_tgt:`DOTNET_TARGET_FRAMEWORK` property  of "
"targets."
msgstr "目标的 :prop_tgt:`DOTNET_TARGET_FRAMEWORK` 属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK` property on all targets. See that "
"target property for additional information."
msgstr "此变量用于初始化所有目标上的 DOTNET_TARGET_FRAMEWORK 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst:13
msgid ""
"Setting ``CMAKE_DOTNET_TARGET_FRAMEWORK`` may be necessary when working "
"with ``C#`` and newer .NET framework versions to avoid referencing errors "
"with the ``ALL_BUILD`` CMake target."
msgstr ""
"在使用 ``C#`` 和较新的 .NET 框架版本时，可能需要设置 ``CMAKE_DOTNET_TARGET_FRAMEWORK`` 以避免引用 "
"``ALL_BUILD`` CMake 目标的错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst:21
msgid ""
"This variable is only evaluated for :ref:`Visual Studio Generators` VS "
"2010 and above."
msgstr "此变量仅针对 Visual Studio Generators VS 2010 及更高版本进行评估。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst:2
msgid "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION"
msgstr "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst:6
msgid ""
"Default value for :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` property of "
"targets."
msgstr "目标的 DOTNET_TARGET_FRAMEWORK_VERSION 属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` property on all targets. See "
"that target property for additional information. When set, "
":variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` takes precednece over this "
"variable. See that variable or the associated target property "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK` for additional information."
msgstr ""
"此变量用于初始化所有目标上的 DOTNET_TARGET_FRAMEWORK_VERSION "
"属性。有关其他信息，请参阅该目标属性。设置后， :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` "
"优先于此变量。有关其他信息，请参阅该变量或关联的目标属性:prop_tgt:`DOTNET_TARGET_FRAMEWORK`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION.rst:17
msgid ""
"Setting ``CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`` may be necessary when "
"working with ``C#`` and newer .NET framework versions to avoid referencing"
" errors with the ``ALL_BUILD`` CMake target."
msgstr ""
"在使用 ``C#`` 和更新的 .NET 框架版本时，可能需要设置 "
"``CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`` 以避免引用 ``ALL_BUILD`` CMake 目标的错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES.rst:2
msgid "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES"
msgstr "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_MAKE_ARGUMENTS.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_VERSION.rst:6
msgid ""
"This cache variable is used by the Eclipse project generator.  See "
":manual:`cmake-generators(7)`."
msgstr "这个缓存变量由 Eclipse 项目生成器使用。请参阅 :manual:`cmake-generators(7)`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES.rst:9
msgid ""
"The Eclipse project generator generates so-called linked resources e.g. to"
" the subproject root dirs in the source tree or to the source files of "
"targets. This can be disabled by setting this variable to FALSE."
msgstr "Eclipse 项目生成器生成所谓的链接资源，例如到源树中的子项目根目录或目标的源文件。这可以通过将此变量设置为 FALSE 来禁用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT.rst:2
msgid "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT"
msgstr "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT.rst:9
msgid ""
"If this variable is set to TRUE, the Eclipse project generator will "
"generate an Eclipse project in :variable:`CMAKE_SOURCE_DIR` . This project"
" can then be used in Eclipse e.g. for the version control functionality. "
"``CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT`` defaults to ``FALSE``; so "
"nothing is written into the source directory."
msgstr ""
"如果此变量设置为 TRUE，Eclipse 项目生成器将在 :variable:`CMAKE_SOURCE_DIR` 中生成一个 Eclipse "
"项目。然后可以在 Eclipse 中使用该项目，例如用于版本控制功能。 "
"``CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT`` 默认为 ``FALSE``；因此没有任何内容写入源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_MAKE_ARGUMENTS.rst:2
msgid "CMAKE_ECLIPSE_MAKE_ARGUMENTS"
msgstr "CMAKE_ECLIPSE_MAKE_ARGUMENTS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_MAKE_ARGUMENTS.rst:9
msgid ""
"This variable holds arguments which are used when Eclipse invokes the make"
" tool. By default it is initialized to hold flags to enable parallel "
"builds (using -j typically)."
msgstr "该变量包含 Eclipse 调用 make 工具时使用的参数。默认情况下，它被初始化为保存标志以启用并行构建（通常使用 -j）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_RESOURCE_ENCODING.rst:2
msgid "CMAKE_ECLIPSE_RESOURCE_ENCODING"
msgstr "CMAKE_ECLIPSE_RESOURCE_ENCODING"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_RESOURCE_ENCODING.rst:6
msgid ""
"This cache variable tells the :generator:`Eclipse CDT4` project generator "
"to set the resource encoding to the given value in generated project "
"files. If no value is given, no encoding will be set."
msgstr "此缓存变量告诉 Eclipse CDT4 项目生成器将资源编码设置为生成的项目文件中的给定值。如果没有给出值，则不会设置编码。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_VERSION.rst:2
msgid "CMAKE_ECLIPSE_VERSION"
msgstr "CMAKE_ECLIPSE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ECLIPSE_VERSION.rst:9
msgid ""
"When using the Eclipse project generator, CMake tries to find the Eclipse "
"executable and detect the version of it. Depending on the version it "
"finds, some features are enabled or disabled. If CMake doesn't find "
"Eclipse, it assumes the oldest supported version, Eclipse Callisto (3.2)."
msgstr ""
"使用 Eclipse 项目生成器时，CMake 会尝试查找 Eclipse 可执行文件并检测其版本。根据它找到的版本，启用或禁用某些功能。如果 "
"CMake 没有找到 Eclipse，它会采用最旧的受支持版本 Eclipse Callisto (3.2)。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EDIT_COMMAND.rst:2
msgid "CMAKE_EDIT_COMMAND"
msgstr "CMAKE_EDIT_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EDIT_COMMAND.rst:4
msgid ""
"Full path to :manual:`cmake-gui(1)` or :manual:`ccmake(1)`.  Defined only "
"for :ref:`Makefile Generators` when not using an \"extra\" generator for "
"an IDE."
msgstr ""
":manual:`cmake-gui(1)` 或 :manual:`ccmake(1)` 的完整路径。仅在不为 IDE 使用“额外”生成器时为 "
"Makefile 生成器定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EDIT_COMMAND.rst:7
msgid ""
"This is the full path to the CMake executable that can graphically edit "
"the cache.  For example, :manual:`cmake-gui(1)` or :manual:`ccmake(1)`."
msgstr ""
"这是可以图形化编辑缓存的 CMake 可执行文件的完整路径。例如， :manual:`cmake-gui(1)` 或 "
":manual:`ccmake(1)`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ENABLE_EXPORTS.rst:2
msgid "CMAKE_ENABLE_EXPORTS"
msgstr "CMAKE_ENABLE_EXPORTS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ENABLE_EXPORTS.rst:6
msgid "Specify whether executables export symbols for loadable modules."
msgstr "指定可执行文件是否导出可加载模块的符号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ENABLE_EXPORTS.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`ENABLE_EXPORTS` target "
"property for executable targets when they are created by calls to the "
":command:`add_executable` command.  See the property documentation for "
"details."
msgstr ""
"当通过调用 :command:`add_executable` 命令创建可执行目标时，此变量用于初始化可执行目标的 ENABLE_EXPORTS "
"目标属性。有关详细信息，请参阅属性文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_DEPRECATED.rst:2
msgid "CMAKE_ERROR_DEPRECATED"
msgstr "CMAKE_ERROR_DEPRECATED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_DEPRECATED.rst:4
msgid "Whether to issue errors for deprecated functionality."
msgstr "是否为已弃用的功能发出错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_DEPRECATED.rst:6
msgid ""
"If ``TRUE``, use of deprecated functionality will issue fatal errors. If "
"this variable is not set, CMake behaves as if it were set to ``FALSE``."
msgstr "如果为“真”，则使用已弃用的功能将引发致命错误。如果未设置此变量，CMake 的行为就像将其设置为“FALSE”一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:2
msgid "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION"
msgstr "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:4
msgid ""
"Ask ``cmake_install.cmake`` script to error out as soon as a file with "
"absolute ``INSTALL DESTINATION`` is encountered."
msgstr ""
"要求 ``cmake_install.cmake`` 脚本在遇到具有绝对 ``INSTALL DESTINATION`` 的文件时立即出错。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:7
msgid ""
"The fatal error is emitted before the installation of the offending file "
"takes place.  This variable is used by CMake-generated "
"``cmake_install.cmake`` scripts.  If one sets this variable to ``ON`` "
"while running the script, it may get fatal error messages from the script."
msgstr ""
"在安装有问题的文件之前发出致命错误。此变量由 CMake "
"生成的“cmake_install.cmake”脚本使用。如果在运行脚本时将此变量设置为“ON”，则可能会从脚本中收到致命错误消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX.rst:2
msgid "CMAKE_EXECUTABLE_SUFFIX"
msgstr "CMAKE_EXECUTABLE_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX.rst:4
msgid "The suffix for executables on this platform."
msgstr "此平台上可执行文件的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of an executable filename if any, ``.exe`` "
"on Windows."
msgstr "用于可执行文件名结尾的后缀（如果有），Windows 上为“.exe”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX.rst:9
msgid ""
":variable:`CMAKE_EXECUTABLE_SUFFIX_<LANG>` overrides this for language "
"``<LANG>``."
msgstr ":variable:`CMAKE_EXECUTABLE_SUFFIX_<LANG>` 覆盖语言 ``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX_LANG.rst:2
msgid "CMAKE_EXECUTABLE_SUFFIX_<LANG>"
msgstr "CMAKE_EXECUTABLE_SUFFIX_<语言>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX_LANG.rst:4
msgid ""
"The suffix to use for the end of an executable filename of ``<LANG>`` "
"compiler target architecture, if any."
msgstr "用于“<LANG>”编译器目标体系结构（如果有）的可执行文件名结尾的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTABLE_SUFFIX_LANG.rst:7
msgid ""
"It overrides :variable:`CMAKE_EXECUTABLE_SUFFIX` for language ``<LANG>``."
msgstr "它覆盖语言 ``<LANG>`` 的 :variable:`CMAKE_EXECUTABLE_SUFFIX`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTE_PROCESS_COMMAND_ECHO.rst:2
msgid "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO"
msgstr "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXECUTE_PROCESS_COMMAND_ECHO.rst:6
msgid ""
"If this variable is set to ``STDERR``, ``STDOUT`` or ``NONE`` then "
"commands in :command:`execute_process` calls will be printed to either "
"stderr or stdout or not at all."
msgstr ""
"如果此变量设置为 ``STDERR``、``STDOUT`` 或 ``NONE``，则 :command:`execute_process` "
"调用中的命令将打印到 stderr 或 stdout 或根本不打印。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS.rst:2
msgid "CMAKE_EXE_LINKER_FLAGS"
msgstr "CMAKE_EXE_LINKER_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS.rst:4
msgid "Linker flags to be used to create executables."
msgstr "用于创建可执行文件的链接器标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS.rst:6
msgid "These flags will be used by the linker when creating an executable."
msgstr "链接器在创建可执行文件时将使用这些标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.rst:2
msgid "CMAKE_EXE_LINKER_FLAGS_<CONFIG>"
msgstr "CMAKE_EXE_LINKER_FLAGS_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.rst:4
msgid "Flags to be used when linking an executable."
msgstr "链接可执行文件时要使用的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG.rst:6
msgid ""
"Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating "
"executables."
msgstr "与 CMAKE_C_FLAGS_* 相同，但在创建可执行文件时由链接器使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT.rst:2
msgid "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT"
msgstr "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_EXE_LINKER_FLAGS_<CONFIG>` "
"cache entry the first time a build tree is configured. This variable is "
"meant to be set by a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  "
"CMake may prepend or append content to the value based on the environment "
"and target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_EXE_LINKER_FLAGS_<CONFIG> 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_CONFIG_INIT.rst:12
msgid "See also :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`."
msgstr "另见 :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_INIT.rst:2
msgid "CMAKE_EXE_LINKER_FLAGS_INIT"
msgstr "CMAKE_EXE_LINKER_FLAGS_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_EXE_LINKER_FLAGS` cache "
"entry the first time a build tree is configured. This variable is meant to"
" be set by a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may"
" prepend or append content to the value based on the environment and "
"target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_EXE_LINKER_FLAGS 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXE_LINKER_FLAGS_INIT.rst:12
msgid ""
"See also the configuration-specific variable "
":variable:`CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT`."
msgstr "另请参阅特定于配置的变量 :variable:`CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:2
msgid "CMAKE_EXPORT_COMPILE_COMMANDS"
msgstr "CMAKE_EXPORT_COMPILE_COMMANDS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:6
msgid "Enable/Disable output of compile commands during generation."
msgstr "在生成期间启用/禁用编译命令的输出。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:8
msgid ""
"If enabled, generates a ``compile_commands.json`` file containing the "
"exact compiler calls for all translation units of the project in machine-"
"readable form.  The format of the JSON file looks like:"
msgstr ""
"如果启用，将生成一个 ``compile_commands.json`` 文件，其中包含机器可读形式的项目所有翻译单元的确切编译器调用。 JSON "
"文件的格式如下所示："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:30
msgid ""
"This is initialized by the :envvar:`CMAKE_EXPORT_COMPILE_COMMANDS` "
"environment variable, and initializes the "
":prop_tgt:`EXPORT_COMPILE_COMMANDS` target property for all targets."
msgstr ""
"这由 :envvar:`CMAKE_EXPORT_COMPILE_COMMANDS` 环境变量初始化，并为所有目标初始化 "
":prop_tgt:`EXPORT_COMPILE_COMMANDS` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:35
msgid ""
"This option is implemented only by :ref:`Makefile Generators` and "
":ref:`Ninja Generators`.  It is ignored on other generators."
msgstr "此选项仅由 Makefile Generators 和 Ninja Generators 实现。它在其他生成器上被忽略。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_COMPILE_COMMANDS.rst:38
msgid ""
"This option currently does not work well in combination with the "
":prop_tgt:`UNITY_BUILD` target property or the "
":variable:`CMAKE_UNITY_BUILD` variable."
msgstr ""
"此选项目前不能很好地与 :prop_tgt:`UNITY_BUILD` 目标属性或 :variable:`CMAKE_UNITY_BUILD` "
"变量结合使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_EXPORT_NO_PACKAGE_REGISTRY"
msgstr "CMAKE_EXPORT_NO_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst:6
msgid ""
"Disable the :command:`export(PACKAGE)` command when :policy:`CMP0090` is "
"not set to ``NEW``."
msgstr "当 CMP0090 未设置为 NEW 时，禁用 export(PACKAGE) 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst:9
msgid ""
"In some cases, for example for packaging and for system wide "
"installations, it is not desirable to write the user package registry. If "
"the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable is enabled, the "
":command:`export(PACKAGE)` command will do nothing."
msgstr ""
"在某些情况下，例如打包和系统范围的安装，不希望编写用户包注册表。如果启用了 ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY``"
" 变量，则 :command:`export(PACKAGE)` 命令将不执行任何操作。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst:14
msgid ""
"If :policy:`CMP0090` is set to ``NEW`` this variable does nothing, and the"
" :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` variable controls the behavior "
"instead."
msgstr ""
"如果 :policy:`CMP0090` 设置为 ``NEW`` 这个变量什么都不做，而 "
":variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` 变量控制行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_NO_PACKAGE_REGISTRY.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:26
msgid "See also :ref:`Disabling the Package Registry`."
msgstr "另见:ref:`禁用包注册表`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_EXPORT_PACKAGE_REGISTRY"
msgstr "CMAKE_EXPORT_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst:6
msgid ""
"Enables the :command:`export(PACKAGE)` command when :policy:`CMP0090` is "
"set to ``NEW``."
msgstr "当 CMP0090 设置为 NEW 时，启用 export(PACKAGE) 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst:9
msgid ""
"The :command:`export(PACKAGE)` command does nothing by default.  In some "
"cases it is desirable to write to the user package registry, so the "
"``CMAKE_EXPORT_PACKAGE_REGISTRY`` variable may be set to enable it."
msgstr ""
":command:`export(PACKAGE)` 命令默认不执行任何操作。在某些情况下，需要写入用户包注册表，因此可以设置 "
"CMAKE_EXPORT_PACKAGE_REGISTRY 变量以启用它。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXPORT_PACKAGE_REGISTRY.rst:13
msgid ""
"If :policy:`CMP0090` is *not* set to ``NEW`` this variable does nothing, "
"and the :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable controls the"
" behavior instead."
msgstr ""
"如果 :policy:`CMP0090` "
"*没有*设置为``NEW``，这个变量什么都不做，而 :variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` "
"变量控制行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_GENERATOR.rst:2
msgid "CMAKE_EXTRA_GENERATOR"
msgstr "CMAKE_EXTRA_GENERATOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_GENERATOR.rst:4
msgid ""
"The extra generator used to build the project.  See :manual:`cmake-"
"generators(7)`."
msgstr "用于构建项目的额外生成器。请参阅 :manual:`cmake-generators(7)`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_GENERATOR.rst:7
msgid ""
"When using the Eclipse, CodeBlocks, CodeLite, Kate or Sublime generators, "
"CMake generates Makefiles (:variable:`CMAKE_GENERATOR`) and additionally "
"project files for the respective IDE.  This IDE project file generator is "
"stored in ``CMAKE_EXTRA_GENERATOR`` (e.g.  ``Eclipse CDT4``)."
msgstr ""
"使用 Eclipse、CodeBlocks、CodeLite、Kate 或 Sublime 生成器时，CMake 会生成 Makefiles "
"(:variable:`CMAKE_GENERATOR`) 以及相应 IDE 的额外项目文件。此 IDE "
"项目文件生成器存储在“CMAKE_EXTRA_GENERATOR”（例如“Eclipse CDT4”）中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.rst:2
msgid "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES"
msgstr "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.rst:4
msgid "Additional suffixes for shared libraries."
msgstr "共享库的附加后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES.rst:6
msgid ""
"Extensions for shared libraries other than that specified by "
":variable:`CMAKE_SHARED_LIBRARY_SUFFIX`, if any.  CMake uses this to "
"recognize external shared library files during analysis of libraries "
"linked by a target."
msgstr ""
"共享库的扩展，而不是 CMAKE_SHARED_LIBRARY_SUFFIX 指定的扩展，如果有的话。 CMake "
"在分析目标链接的库期间使用它来识别外部共享库文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:2
msgid "CMAKE_FIND_APPBUNDLE"
msgstr "CMAKE_FIND_APPBUNDLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:6
msgid ""
"This variable affects how ``find_*`` commands choose between macOS "
"Application Bundles and unix-style package components."
msgstr "这个变量会影响 ``find_*`` 命令如何在 macOS 应用程序包和 unix 风格的包组件之间进行选择。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:9
msgid ""
"On Darwin or systems supporting macOS Application Bundles, the "
"``CMAKE_FIND_APPBUNDLE`` variable can be set to empty or one of the "
"following:"
msgstr ""
"在 Darwin 或支持 macOS 应用程序包的系统上，``CMAKE_FIND_APPBUNDLE`` 变量可以设置为空或以下之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:15
msgid "``FIRST``"
msgstr "``第一``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:14
msgid ""
"Try to find application bundles before standard programs. This is the "
"default on Darwin."
msgstr "尝试在标准程序之前查找应用程序包。这是达尔文的默认设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:18
msgid "``LAST``"
msgstr "``最后``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:18
msgid "Try to find application bundles after standard programs."
msgstr "尝试在标准程序之后查找应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:21
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:21
msgid "``ONLY``"
msgstr "``只有``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:21
msgid "Only try to find application bundles."
msgstr "只尝试查找应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:28
msgid "``NEVER``"
msgstr "``从来没有``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_APPBUNDLE.rst:24
msgid "Never try to find application bundles."
msgstr "永远不要试图寻找应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:2
msgid "CMAKE_FIND_DEBUG_MODE"
msgstr "CMAKE_FIND_DEBUG_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:6
msgid ""
"Print extra find call information for the following commands to standard "
"error:"
msgstr "将以下命令的额外查找调用信息打印到标准错误："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:9
msgid ":command:`find_program`"
msgstr ":command:`find_program`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:10
msgid ":command:`find_library`"
msgstr ":command:`find_library`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:11
msgid ":command:`find_file`"
msgstr ":command:`find_file`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:12
msgid ":command:`find_path`"
msgstr ":command:`find_path`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:26
msgid ":command:`find_package`"
msgstr ":command:`find_package`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:15
msgid ""
"Output is designed for human consumption and not for parsing. Enabling "
"this variable is equivalent to using :option:`cmake --debug-find` with the"
" added ability to enable debugging for a subset of find calls."
msgstr ""
"输出是为人类消费而设计的，而不是为解析而设计的。启用此变量等同于使用 :option:`cmake --debug-find` 并增加了为 find"
" 调用的子集启用调试的能力。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_DEBUG_MODE.rst:25
msgid "Default is unset."
msgstr "默认未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:2
msgid "CMAKE_FIND_FRAMEWORK"
msgstr "CMAKE_FIND_FRAMEWORK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:6
msgid ""
"This variable affects how ``find_*`` commands choose between macOS "
"Frameworks and unix-style package components."
msgstr "此变量会影响 ``find_*`` 命令如何在 macOS 框架和 unix 风格的包组件之间进行选择。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:9
msgid ""
"On Darwin or systems supporting macOS Frameworks, the "
"``CMAKE_FIND_FRAMEWORK`` variable can be set to empty or one of the "
"following:"
msgstr "在 Darwin 或支持 macOS 框架的系统上，``CMAKE_FIND_FRAMEWORK`` 变量可以设置为空或以下之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:14
msgid ""
"Try to find frameworks before standard libraries or headers. This is the "
"default on Darwin."
msgstr "尝试在标准库或标头之前查找框架。这是达尔文的默认设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:18
msgid "Try to find frameworks after standard libraries or headers."
msgstr "尝试在标准库或标头之后查找框架。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:21
msgid "Only try to find frameworks."
msgstr "只尝试找到框架。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_FRAMEWORK.rst:24
msgid "Never try to find frameworks."
msgstr "永远不要试图寻找框架。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:2
msgid "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX"
msgstr "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:6
msgid ""
"Specify a ``<suffix>`` to tell the :command:`find_library` command to "
"search in a ``lib<suffix>`` directory before each ``lib`` directory that "
"would normally be searched."
msgstr ""
"指定一个 ``<suffix>`` 来告诉 :command:`find_library` 命令在通常搜索的每个 ``lib`` 目录之前的 "
"``lib<suffix>`` 目录中搜索。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:10
msgid "This overrides the behavior of related global properties:"
msgstr "这会覆盖相关全局属性的行为："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:12
msgid ":prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS`"
msgstr ":prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:13
msgid ":prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS`"
msgstr ":prop_gbl:`FIND_LIBRARY_USE_LIB64_PATHS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX.rst:14
msgid ":prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS`"
msgstr ":prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_PREFIXES.rst:2
msgid "CMAKE_FIND_LIBRARY_PREFIXES"
msgstr "CMAKE_FIND_LIBRARY_PREFIXES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_PREFIXES.rst:4
msgid "Prefixes to prepend when looking for libraries."
msgstr "查找库时要添加的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_PREFIXES.rst:6
msgid ""
"This specifies what prefixes to add to library names when the "
":command:`find_library` command looks for libraries.  On UNIX systems this"
" is typically ``lib``, meaning that when trying to find the ``foo`` "
"library it will look for ``libfoo``."
msgstr ""
"这指定在 :command:`find_library` 命令查找库时要添加到库名称的前缀。在 UNIX 系统上，这通常是 "
"``lib``，这意味着当尝试查找 ``foo`` 库时，它将查找 ``libfoo``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_SUFFIXES.rst:2
msgid "CMAKE_FIND_LIBRARY_SUFFIXES"
msgstr "CMAKE_FIND_LIBRARY_SUFFIXES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_SUFFIXES.rst:4
msgid "Suffixes to append when looking for libraries."
msgstr "查找库时要追加的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_LIBRARY_SUFFIXES.rst:6
msgid ""
"This specifies what suffixes to add to library names when the "
":command:`find_library` command looks for libraries.  On Windows systems "
"this is typically ``.lib`` and, depending on the compiler, ``.dll.a``, "
"``.a`` (e.g. GCC and Clang), so when it tries to find the ``foo`` library,"
" it will look for ``[<prefix>]foo.lib`` and/or ``[<prefix>]foo[.dll].a``, "
"depending on the compiler used and the ``<prefix>`` specified in the "
":variable:`CMAKE_FIND_LIBRARY_PREFIXES`."
msgstr ""
"这指定了当 :command:`find_library` 命令查找库时要添加到库名称的后缀。在 Windows 系统上，这通常是 "
"``.lib``，并且根据编译器，``.dll.a``、``.a``（例如 GCC 和 Clang），所以当它试图找到 `` foo`` "
"库，它将寻找``[<prefix>]foo.lib`` 和/或``[<prefix>]foo[.dll].a``，这取决于使用的编译器和`` "
"<prefix>`` 在 :variable:`CMAKE_FIND_LIBRARY_PREFIXES` 中指定。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_NO_INSTALL_PREFIX.rst:2
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:22
msgid "CMAKE_FIND_NO_INSTALL_PREFIX"
msgstr "CMAKE_FIND_NO_INSTALL_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_NO_INSTALL_PREFIX.rst:4
msgid ""
"Exclude the values of the :variable:`CMAKE_INSTALL_PREFIX` and "
":variable:`CMAKE_STAGING_PREFIX` variables from "
":variable:`CMAKE_SYSTEM_PREFIX_PATH`.  CMake adds these project-"
"destination prefixes to :variable:`CMAKE_SYSTEM_PREFIX_PATH` by default in"
" order to support building a series of dependent packages and installing "
"them into a common prefix.  Set ``CMAKE_FIND_NO_INSTALL_PREFIX`` to "
"``TRUE`` to suppress this behavior."
msgstr ""
"从 CMAKE_SYSTEM_PREFIX_PATH 中排除 CMAKE_INSTALL_PREFIX 和 CMAKE_STAGING_PREFIX"
" 变量的值。 CMake 默认将这些项目目标前缀添加到 :variable:`CMAKE_SYSTEM_PREFIX_PATH` "
"以支持构建一系列依赖包并将它们安装到公共前缀中。将“CMAKE_FIND_NO_INSTALL_PREFIX”设置为“TRUE”以抑制此行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_NO_INSTALL_PREFIX.rst:12
msgid ""
"The :variable:`CMAKE_SYSTEM_PREFIX_PATH` is initialized on the first call "
"to a :command:`project` or :command:`enable_language` command.  Therefore "
"one must set ``CMAKE_FIND_NO_INSTALL_PREFIX`` before this in order to take"
" effect.  A user may set the variable as a cache entry on the command line"
" to achieve this."
msgstr ""
":variable:`CMAKE_SYSTEM_PREFIX_PATH` 在第一次调用 :command:`project` 或 "
":command:`enable_language` "
"命令时初始化。因此必须在此之前设置``CMAKE_FIND_NO_INSTALL_PREFIX`` "
"才能生效。用户可以将变量设置为命令行上的缓存条目以实现此目的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_NO_INSTALL_PREFIX.rst:17
msgid ""
"Note that the prefix(es) may still be searched for other reasons, such as "
"being the same prefix as the CMake installation, or for being a built-in "
"system prefix."
msgstr "请注意，可能仍会出于其他原因搜索前缀，例如与 CMake 安装相同的前缀，或者作为内置系统前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NAME.rst:2
msgid "CMAKE_FIND_PACKAGE_NAME"
msgstr "CMAKE_FIND_PACKAGE_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NAME.rst:6
msgid ""
"Defined by the :command:`find_package` command while loading a find module"
" to record the caller-specified package name. See command documentation "
"for details."
msgstr "由 :command:`find_package` 命令定义，同时加载查找模块以记录调用者指定的包名称。有关详细信息，请参阅命令文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY"
msgstr "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:8
msgid ""
"Use the :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable instead."
msgstr "请改用 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:10
msgid ""
"By default this variable is not set. If neither "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` nor "
"``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` is set, then "
":command:`find_package()` will use the :ref:`User Package Registry` unless"
" the ``NO_CMAKE_PACKAGE_REGISTRY`` option is provided."
msgstr ""
"默认情况下未设置此变量。如果 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 和 "
"``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` 均未设置，则 "
":command:`find_package()` 将使用 :ref:`User Package Registry`，除非提供了 "
"``NO_CMAKE_PACKAGE_REGISTRY`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:16
msgid ""
"``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` is ignored if "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` is set."
msgstr ""
"如果设置了 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`，则忽略``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY.rst:19
msgid ""
"In some cases, for example to locate only system wide installations, it is"
" not desirable to use the :ref:`User Package Registry` when searching for "
"packages. If the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` variable is "
"``TRUE``, all the :command:`find_package` commands will skip the "
":ref:`User Package Registry` as if they were called with the "
"``NO_CMAKE_PACKAGE_REGISTRY`` argument."
msgstr ""
"在某些情况下，例如仅定位系统范围的安装，在搜索包时不希望使用 :ref:`User Package Registry`。如果 "
"``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` 变量为 ``TRUE``，则所有 "
":command:`find_package` 命令都将跳过 :ref:`User Package Registry`，就好像它们是使用 "
"``NO_CMAKE_PACKAGE_REGISTRY`` 参数调用的一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY"
msgstr "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:8
msgid ""
"Use the :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variable "
"instead."
msgstr "请改用 :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:10
msgid ""
"By default this variable is not set. If neither "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` nor "
"``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` is set, then "
":command:`find_package()` will use the :ref:`System Package Registry` "
"unless the ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` option is provided."
msgstr ""
"默认情况下未设置此变量。如果 CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY 和 "
"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY 均未设置，则 find_package() 将使用 "
"System Package Registry，除非提供了 NO_CMAKE_SYSTEM_PACKAGE_REGISTRY 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:16
msgid ""
"``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` is ignored if "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` is set."
msgstr ""
"如果设置了 CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY，则忽略 "
"CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY.rst:19
msgid ""
"In some cases, it is not desirable to use the :ref:`System Package "
"Registry` when searching for packages. If the "
"``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` variable is ``TRUE``, "
"all the :command:`find_package` commands will skip the :ref:`System "
"Package Registry` as if they were called with the "
"``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument."
msgstr ""
"在某些情况下，搜索包时不希望使用 :ref:`System Package Registry`。如果 "
"``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` 变量为 ``TRUE``，则所有 "
":command:`find_package` 命令都将跳过 :ref:`System Package Registry`，就好像它们是使用 "
"``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` 参数调用的一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:2
msgid "CMAKE_FIND_PACKAGE_PREFER_CONFIG"
msgstr "CMAKE_FIND_PACKAGE_PREFER_CONFIG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:6
msgid ""
"Tell :command:`find_package` to try \"Config\" mode before \"Module\" mode"
" if no mode was specified."
msgstr "如果未指定模式，请告诉 :command:`find_package` 在“模块”模式之前尝试“配置”模式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:9
msgid ""
"The command :command:`find_package` operates without an explicit mode when"
" the reduced signature is used without the ``MODULE`` option. In this "
"case, by default, CMake first tries Module mode by searching for a "
"``Find<pkg>.cmake`` module.  If it fails, CMake then searches for the "
"package using Config mode."
msgstr ""
"当在没有 ``MODULE`` 选项的情况下使用简化签名时，命令 :command:`find_package` "
"在没有显式模式的情况下运行。在这种情况下，默认情况下，CMake "
"首先通过搜索“Find<pkg>.cmake”模块来尝试模块模式。如果失败，CMake 会使用 Config 模式搜索包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:15
msgid ""
"Set ``CMAKE_FIND_PACKAGE_PREFER_CONFIG`` to ``TRUE`` to tell "
":command:`find_package` to first search using Config mode before falling "
"back to Module mode."
msgstr ""
"将 ``CMAKE_FIND_PACKAGE_PREFER_CONFIG`` 设置为 ``TRUE`` 以告诉 "
":command:`find_package` 在回退到模块模式之前首先使用配置模式进行搜索。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:19
msgid ""
"This variable may be useful when a developer has compiled a custom version"
" of a common library and wishes to link it to a dependent project.  If "
"this variable is set to ``TRUE``, it would prevent a dependent project's "
"call to :command:`find_package` from selecting the default library located"
" by the system's ``Find<pkg>.cmake`` module before finding the developer's"
" custom built library."
msgstr ""
"当开发人员编译了公共库的自定义版本并希望将其链接到依赖项目时，此变量可能很有用。如果此变量设置为 ``TRUE``，它将阻止依赖项目调用 "
":command:`find_package` 在找到开发人员的之前选择系统的 ``Find<pkg>.cmake`` 模块所在的默认库定制的库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.rst:26
msgid ""
"Once this variable is set, it is the responsibility of the exported "
"``<pkg>Config.cmake`` files to provide the same result variables as the "
"``Find<pkg>.cmake`` modules so that dependent projects can use them "
"interchangeably."
msgstr ""
"一旦设置了这个变量，导出的``<pkg>Config.cmake`` 文件就有责任提供与``Find<pkg>.cmake`` "
"模块相同的结果变量，以便相关项目可以使用它们可互换地。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst:2
msgid "CMAKE_FIND_PACKAGE_REDIRECTS_DIR"
msgstr "CMAKE_FIND_PACKAGE_REDIRECTS_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst:6
msgid ""
"This read-only variable specifies a directory that the "
":command:`find_package` command will check first before searching anywhere"
" else for a module or config package file.  A config package file in this "
"directory will always be found in preference to any other Find module file"
" or config package file."
msgstr ""
"这个只读变量指定一个目录， :command:`find_package` "
"命令在搜索模块或配置包文件的任何其他地方之前将首先检查该目录。此目录中的配置包文件将始终优先于任何其他查找模块文件或配置包文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst:11
msgid ""
"The primary purpose of this variable is to facilitate integration between "
":command:`find_package` and :command:`FetchContent_MakeAvailable`.  The "
"latter command may create files in the "
"``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` directory when it populates a "
"dependency.  This allows subsequent calls to :command:`find_package` for "
"the same dependency to re-use the populated contents instead of trying to "
"satisfy the dependency from somewhere external to the build.  Projects may"
" also want to write files into this directory in some situations (see "
":ref:`FetchContent-find_package-integration-examples` for examples)."
msgstr ""
"此变量的主要目的是促进 :command:`find_package` 和 "
":command:`FetchContent_MakeAvailable` "
"之间的集成。后一个命令在填充依赖项时可能会在“CMAKE_FIND_PACKAGE_REDIRECTS_DIR”目录中创建文件。这允许后续调用 "
":command:`find_package` "
"以获取相同的依赖项以重新使用填充的内容，而不是尝试从构建外部的某个地方满足依赖项。在某些情况下，项目可能还想将文件写入此目录（有关示例，请参见 "
"FetchContent-find_package-integration-examples）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst:21
msgid ""
"The directory that ``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` points to will "
"always be erased and recreated empty at the start of every CMake run.  Any"
" files written into this directory during the CMake run will be lost the "
"next time CMake configures the project."
msgstr ""
"``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` 指向的目录将始终在每次 CMake 运行开始时被擦除并重新创建为空。在 "
"CMake 运行期间写入此目录的任何文件都将在下次 CMake 配置项目时丢失。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_REDIRECTS_DIR.rst:26
msgid ""
"``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` is only set in CMake project mode. It"
" is not set when CMake is run in script mode (i.e. :option:`cmake -P`)."
msgstr ""
"``CMAKE_FIND_PACKAGE_REDIRECTS_DIR`` 仅在 CMake 项目模式下设置。当 CMake 以脚本模式运行时（即 "
":option:`cmake -P`），它不会被设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS.rst:2
msgid "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS"
msgstr "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS.rst:6
msgid ""
"Set to ``TRUE`` to tell :command:`find_package` calls to resolve symbolic "
"links in the value of ``<PackageName>_DIR``."
msgstr ""
"设置为 ``TRUE`` 以告诉 :command:`find_package` 调用解析 ``<PackageName>_DIR`` 值中的符号链接。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS.rst:9
msgid ""
"This is helpful in use cases where the package search path points at a "
"proxy directory in which symlinks to the real package locations appear. "
"This is not enabled by default because there are also common use cases in "
"which the symlinks should be preserved."
msgstr ""
"这在包搜索路径指向代理目录的用例中很有用，在该代理目录中出现指向真实包位置的符号链接。默认情况下未启用此功能，因为还有一些常见用例应保留符号链接。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:2
msgid "CMAKE_FIND_PACKAGE_SORT_DIRECTION"
msgstr "CMAKE_FIND_PACKAGE_SORT_DIRECTION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:6
msgid ""
"The sorting direction used by :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER`. "
"It can assume one of the following values:"
msgstr "CMAKE_FIND_PACKAGE_SORT_ORDER 使用的排序方向。它可以采用以下值之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:11
msgid "``DEC``"
msgstr "``十二月``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:10
msgid ""
"Default.  Ordering is done in descending mode. The highest folder found "
"will be tested first."
msgstr "默认。排序以降序方式完成。找到的最高文件夹将首先被测试。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:15
msgid "``ASC``"
msgstr "``升序``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:14
msgid ""
"Ordering is done in ascending mode. The lowest folder found will be tested"
" first."
msgstr "排序以升序方式完成。找到的最低文件夹将首先被测试。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_DIRECTION.rst:17
msgid ""
"If :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` is not set or is set to "
"``NONE`` this variable has no effect."
msgstr "如果 :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` 未设置或设置为 ``NONE`` 此变量无效。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:2
msgid "CMAKE_FIND_PACKAGE_SORT_ORDER"
msgstr "CMAKE_FIND_PACKAGE_SORT_ORDER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:6
msgid ""
"The default order for sorting packages found using "
":command:`find_package`. It can assume one of the following values:"
msgstr "使用 :command:`find_package` 找到的包排序的默认顺序。它可以采用以下值之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:11
msgid "``NONE``"
msgstr "``没有``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:10
msgid ""
"Default.  No attempt is done to sort packages. The first valid package "
"found will be selected."
msgstr "默认。不会尝试对包进行排序。将选择找到的第一个有效包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:14
msgid "``NAME``"
msgstr "``名字``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:14
msgid "Sort packages lexicographically before selecting one."
msgstr "在选择一个包之前按字典顺序对包进行排序。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:18
msgid "``NATURAL``"
msgstr "``自然``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:17
msgid ""
"Sort packages using natural order (see ``strverscmp(3)`` manual), i.e. "
"such that contiguous digits are compared as whole numbers."
msgstr "使用自然顺序对包进行排序（参见 ``strverscmp(3)`` 手册），即将连续数字作为整数进行比较。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:20
msgid ""
"Natural sorting can be employed to return the highest version when "
"multiple versions of the same library are found by "
":command:`find_package`.  For example suppose that the following libraries"
" have been found:"
msgstr "当 :command:`find_package` 找到同一个库的多个版本时，可以采用自然排序返回最高版本。例如，假设已找到以下库："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:24
msgid "libX-1.1.0"
msgstr "libX-1.1.0"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:25
msgid "libX-1.2.9"
msgstr "libX-1.2.9"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:26
msgid "libX-1.2.10"
msgstr "libX-1.2.10"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:28
msgid ""
"By setting ``NATURAL`` order we can select the one with the highest "
"version number ``libX-1.2.10``."
msgstr "通过设置“NATURAL”顺序，我们可以选择版本号最高的“libX-1.2.10”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_SORT_ORDER.rst:36
msgid ""
"The sort direction can be controlled using the "
":variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` variable (by default "
"decrescent, e.g. lib-B will be tested before lib-A)."
msgstr ""
"可以使用 :variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` 变量控制排序方向（默认递减，例如 lib-B "
"将在 lib-A 之前测试）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.rst:2
msgid "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL"
msgstr "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.rst:6
msgid ""
"Setting to ``TRUE`` promotes all :prop_tgt:`IMPORTED` targets discoverd by"
" :command:`find_package` to a ``GLOBAL`` scope."
msgstr ""
"设置为 ``TRUE`` 会将 :command:`find_package` 发现的所有 :prop_tgt:`IMPORTED` 目标提升到 "
"``GLOBAL`` 范围。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_TARGETS_GLOBAL.rst:10
msgid ""
"Setting this to ``TRUE`` is akin to specifying ``GLOBAL`` as an argument "
"to :command:`find_package`. Default value is ``OFF``."
msgstr ""
"将其设置为 ``TRUE`` 类似于将 ``GLOBAL`` 指定为 :command:`find_package` 的参数。默认值为“关闭”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst:2
msgid "CMAKE_FIND_PACKAGE_WARN_NO_MODULE"
msgstr "CMAKE_FIND_PACKAGE_WARN_NO_MODULE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst:4
msgid ""
"Tell :command:`find_package` to warn if called without an explicit mode."
msgstr "告诉 :command:`find_package` 在没有显式模式的情况下调用时发出警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst:6
msgid ""
"If :command:`find_package` is called without an explicit mode option "
"(``MODULE``, ``CONFIG``, or ``NO_MODULE``) and no ``Find<pkg>.cmake`` "
"module is in :variable:`CMAKE_MODULE_PATH` then CMake implicitly assumes "
"that the caller intends to search for a package configuration file.  If no"
" package configuration file is found then the wording of the failure "
"message must account for both the case that the package is really missing "
"and the case that the project has a bug and failed to provide the intended"
" Find module.  If instead the caller specifies an explicit mode option "
"then the failure message can be more specific."
msgstr ""
"如果调用 :command:`find_package` 时没有显式模式选项（``MODULE``、``CONFIG`` 或 "
"``NO_MODULE``）并且没有 ``Find<pkg>.cmake`` 模块： variable:`CMAKE_MODULE_PATH` 然后"
" CMake "
"隐含地假定调用者打算搜索包配置文件。如果未找到包配置文件，则失败消息的措辞必须说明包确实丢失的情况以及项目存在错误且未能提供预期的查找模块的情况。相反，如果调用者指定了显式模式选项，则失败消息可以更具体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst:16
msgid ""
"Set ``CMAKE_FIND_PACKAGE_WARN_NO_MODULE`` to ``TRUE`` to tell "
":command:`find_package` to warn when it implicitly assumes Config mode.  "
"This helps developers enforce use of an explicit mode in all calls to "
":command:`find_package` within a project."
msgstr ""
"将 ``CMAKE_FIND_PACKAGE_WARN_NO_MODULE`` 设置为 ``TRUE`` 以告知 :command:`find_package`"
" 在隐式采用配置模式时发出警告。这有助于开发人员在项目中对 :command:`find_package` 的所有调用中强制使用显式模式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_PACKAGE_WARN_NO_MODULE.rst:21
msgid ""
"This variable has no effect if "
":variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` is set to ``TRUE``."
msgstr "如果 CMAKE_FIND_PACKAGE_PREFER_CONFIG 设置为 TRUE，则此变量无效。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH.rst:2
msgid "CMAKE_FIND_ROOT_PATH"
msgstr "CMAKE_FIND_ROOT_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of root paths to "
"search on the filesystem."
msgstr ":ref: 要在文件系统上搜索的根路径的分号分隔列表 <CMake Language Lists>。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH.rst:6
msgid ""
"This variable is most useful when cross-compiling. CMake uses the paths in"
" this list as alternative roots to find filesystem items with "
":command:`find_package`, :command:`find_library` etc."
msgstr ""
"这个变量在交叉编译时最有用。 CMake "
"使用此列表中的路径作为替代根来查找文件系统项:command:`find_package`、 :command:`find_library` 等。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.rst:2
msgid "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
msgstr "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt:1
msgid ""
"This variable controls whether the :variable:`CMAKE_FIND_ROOT_PATH` and "
":variable:`CMAKE_SYSROOT` are used by |FIND_XXX|."
msgstr ""
"此变量控制 :variable:`CMAKE_FIND_ROOT_PATH` 和 :variable:`CMAKE_SYSROOT` 是否被 "
"|FIND_XXX| 使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_XXX.txt:4
msgid ""
"If set to ``ONLY``, then only the roots in "
":variable:`CMAKE_FIND_ROOT_PATH` will be searched. If set to ``NEVER``, "
"then the roots in :variable:`CMAKE_FIND_ROOT_PATH` will be ignored and "
"only the host system root will be used. If set to ``BOTH``, then the host "
"system paths and the paths in :variable:`CMAKE_FIND_ROOT_PATH` will be "
"searched."
msgstr ""
"如果设置为 ``ONLY``，那么只会搜索 :variable:`CMAKE_FIND_ROOT_PATH` 中的根。如果设置为 "
"``NEVER``，则 :variable:`CMAKE_FIND_ROOT_PATH` 中的根目录将被忽略，仅使用主机系统根目录。如果设置为 "
"``BOTH``，则主机系统路径和 :variable:`CMAKE_FIND_ROOT_PATH` 中的路径将被搜索。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_LIBRARY.rst:2
msgid "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"
msgstr "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_PACKAGE.rst:2
msgid "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE"
msgstr "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_ROOT_PATH_MODE_PROGRAM.rst:2
msgid "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
msgstr "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:2
msgid "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH"
msgstr "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search paths provided by cmake-specific environment variables:"
msgstr "控制以下命令的默认行为是否搜索特定于 cmake 的环境变量提供的路径："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:15
msgid "This is useful in cross-compiling environments."
msgstr "这在交叉编译环境中很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:17
msgid ""
"By default this variable is not set, which is equivalent to it having a "
"value of ``TRUE``.  Explicit options given to the above commands take "
"precedence over this variable."
msgstr "默认情况下，此变量未设置，相当于它的值为“TRUE”。为上述命令提供的显式选项优先于此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH.rst:21
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另请参见 :variable:`CMAKE_FIND_USE_CMAKE_PATH`、 :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`、 :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`、 :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE"
" _REGISTRY`、 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 和 :variable:` "
"CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:2
msgid "CMAKE_FIND_USE_CMAKE_PATH"
msgstr "CMAKE_FIND_USE_CMAKE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search paths provided by cmake-specific cache variables:"
msgstr "控制以下命令的默认行为是否搜索 cmake 特定缓存变量提供的路径："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_PATH.rst:21
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另见 :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`， :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`， :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`， :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`， :variable:`CMAKE_FIND"
" _USE_PACKAGE_REGISTRY` 和 :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:2
msgid "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH"
msgstr "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search paths provided by platform-specific cmake variables:"
msgstr "控制以下命令的默认行为是否搜索特定于平台的 cmake 变量提供的路径："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_CMAKE_SYSTEM_PATH.rst:21
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另请参见 :variable:`CMAKE_FIND_USE_CMAKE_PATH`、 :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`、 :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_SYSTEM_P"
" ACKAGE_REGISTRY`、 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 和 :variable:` "
"CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:2
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:22
msgid "CMAKE_FIND_USE_INSTALL_PREFIX"
msgstr "CMAKE_FIND_USE_INSTALL_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search the locations in the :variable:`CMAKE_INSTALL_PREFIX` and "
":variable:`CMAKE_STAGING_PREFIX` variables."
msgstr "控制以下命令的默认行为是否搜索 CMAKE_INSTALL_PREFIX 和 CMAKE_STAGING_PREFIX 变量中的位置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:18
msgid ""
"Due to backwards compatibility with "
":variable:`CMAKE_FIND_NO_INSTALL_PREFIX`, the behavior of the find command"
" change based on if this variable exists."
msgstr ""
"由于与 :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` 的向后兼容性，查找命令的行为会根据此变量是否存在而改变。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:22
msgid "Search"
msgstr "搜索"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:24
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:25
msgid "Not Defined"
msgstr "没有定义的"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:24
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:28
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:29
msgid "On"
msgstr "在"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:24
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:27
msgid "NO"
msgstr "不"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:25
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:27
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:29
msgid "Off || Not Defined"
msgstr "关闭 ||没有定义的"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:25
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:28
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:29
msgid "YES"
msgstr "是的"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:27
msgid "Off"
msgstr "离开"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:32
msgid ""
"By default this variable is not defined. Explicit options given to the "
"above commands take precedence over this variable."
msgstr "默认情况下，此变量未定义。为上述命令提供的显式选项优先于此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_INSTALL_PREFIX.rst:35
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另见 :variable:`CMAKE_FIND_USE_CMAKE_PATH`， :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`， :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`， :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`， :variable:`CMAKE_FIND_USE_"
" PACKAGE_REGISTRY` 和 :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_FIND_USE_PACKAGE_REGISTRY"
msgstr "CMAKE_FIND_USE_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:6
msgid ""
"Controls the default behavior of the :command:`find_package` command for "
"whether or not to search paths provided by the :ref:`User Package "
"Registry`."
msgstr ""
"控制 :command:`find_package` 命令的默认行为是否搜索 :ref:`User Package Registry` 提供的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:9
msgid ""
"By default this variable is not set and the behavior will fall back to "
"that determined by the deprecated "
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` variable.  If that is "
"also not set, then :command:`find_package` will use the :ref:`User Package"
" Registry` unless the ``NO_CMAKE_PACKAGE_REGISTRY`` option is provided."
msgstr ""
"默认情况下，此变量未设置，行为将回退到由已弃用的 CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY "
"变量确定的行为。如果也未设置，则:command:`find_package` 将使用:ref:`User Package "
"Registry`，除非提供了 ``NO_CMAKE_PACKAGE_REGISTRY`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:16
msgid ""
"This variable takes precedence over "
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` when both are set."
msgstr "当两者都设置时，此变量优先于 CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY 。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:19
msgid ""
"In some cases, for example to locate only system wide installations, it is"
" not desirable to use the :ref:`User Package Registry` when searching for "
"packages.  If the ``CMAKE_FIND_USE_PACKAGE_REGISTRY`` variable is "
"``FALSE``, all the :command:`find_package` commands will skip the "
":ref:`User Package Registry` as if they were called with the "
"``NO_CMAKE_PACKAGE_REGISTRY`` argument."
msgstr ""
"在某些情况下，例如仅定位系统范围的安装，在搜索包时不希望使用 :ref:`User Package Registry`。如果 "
"``CMAKE_FIND_USE_PACKAGE_REGISTRY`` 变量为 ``FALSE``，则所有 "
":command:`find_package` 命令都将跳过 :ref:`User Package Registry`，就好像它们是使用 "
"``NO_CMAKE_PACKAGE_REGISTRY`` 参数调用的一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_REGISTRY.rst:26
msgid ""
"See also :ref:`Disabling the Package Registry` and the "
":variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另见:ref:`禁用包注册表`和 :variable:`CMAKE_FIND_USE_CMAKE_PATH`， :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`， :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`， :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`， :variable:`CM"
" "
"AKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`，：变量 :`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`"
" 和 :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:2
msgid "CMAKE_FIND_USE_PACKAGE_ROOT_PATH"
msgstr "CMAKE_FIND_USE_PACKAGE_ROOT_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search paths provided by :variable:`<PackageName>_ROOT` variables:"
msgstr "控制以下命令的默认行为是否搜索 :variable:`<PackageName>_ROOT` 变量提供的路径："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_PACKAGE_ROOT_PATH.rst:19
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variables."
msgstr ""
"另请参见 :variable:`CMAKE_FIND_USE_CMAKE_PATH`、 :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`、 :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`、 :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRON"
" MENT_PATH`、 :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` 和 :variable:` "
"CMAKE_FIND_USE_PACKAGE_REGISTRY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:2
msgid "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH"
msgstr "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:6
msgid ""
"Controls the default behavior of the following commands for whether or not"
" to search paths provided by standard system environment variables:"
msgstr "控制以下命令的默认行为是否搜索标准系统环境变量提供的路径："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH.rst:21
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH`, and "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_FIND_USE_CMAKE_PATH`、 :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`、 :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`、 :variable:`CMAKE_FIND_USE_PACKAGE_REG"
" ISTRY`、 :variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 和 :variable:` "
"CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:2
msgid "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY"
msgstr "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:6
msgid ""
"Controls searching the :ref:`System Package Registry` by the "
":command:`find_package` command."
msgstr "通过 :command:`find_package` 命令控制搜索 :ref:`System Package Registry`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:9
msgid ""
"By default this variable is not set and the behavior will fall back to "
"that determined by the deprecated "
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` variable. If "
"that is also not set, then :command:`find_package()` will use the "
":ref:`System Package Registry` unless the "
"``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` option is provided."
msgstr ""
"默认情况下，此变量未设置，行为将回退到由已弃用的 "
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` "
"变量确定的行为。如果也未设置，则:command:`find_package()` 将使用 :ref:`System Package "
"Registry`，除非提供了 ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:16
msgid ""
"This variable takes precedence over "
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` when both are "
"set."
msgstr "当两者都设置时，此变量优先于 :variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:19
msgid ""
"In some cases, for example to locate only user specific installations, it "
"is not desirable to use the :ref:`System Package Registry` when searching "
"for packages. If the ``CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`` variable "
"is ``FALSE``, all the :command:`find_package` commands will skip the "
":ref:`System Package Registry` as if they were called with the "
"``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument."
msgstr ""
"在某些情况下，例如仅定位用户特定的安装，在搜索包时不希望使用 :ref:`System Package Registry`。如果 "
"``CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`` 变量为 ``FALSE``，则所有 "
":command:`find_package` 命令都将跳过 :ref:`System Package Registry`，就好像它们是使用 "
"``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` 参数调用的一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY.rst:28
msgid ""
"See also the :variable:`CMAKE_FIND_USE_CMAKE_PATH`, "
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX`, "
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`, "
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH`, "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY`, and "
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` variables."
msgstr ""
"另请参见 :variable:`CMAKE_FIND_USE_CMAKE_PATH`、 :variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH`、 :variable:`CMAKE_FIND_USE_INSTALL_PREFIX`、 :variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH`、 :variable:`CMAKE_FIND_USE_SYSTEM_ENVIRON"
" MENT_PATH`、 :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 和 :variable:` "
"CMAKE_FIND_USE_PACKAGE_ROOT_PATH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FOLDER.rst:2
msgid "CMAKE_FOLDER"
msgstr "CMAKE_FOLDER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FOLDER.rst:6
msgid "Set the folder name. Use to organize targets in an IDE."
msgstr "设置文件夹名称。用于在 IDE 中组织目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FOLDER.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`FOLDER` property on all"
" the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`FOLDER` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK.rst:2
msgid "CMAKE_FRAMEWORK"
msgstr "CMAKE_FRAMEWORK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK.rst:6
msgid "Default value for :prop_tgt:`FRAMEWORK` of targets."
msgstr "目标的 :prop_tgt:`FRAMEWORK` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`FRAMEWORK` property on "
"all the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`FRAMEWORK` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:2
msgid "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>"
msgstr "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:6
msgid ""
"Default framework filename postfix under configuration ``<CONFIG>`` when "
"using a multi-config generator."
msgstr "使用多配置生成器时，配置``<CONFIG>``下的默认框架文件名后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:9
msgid ""
"When a framework target is created its "
":prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property is "
"initialized with the value of this variable if it is set."
msgstr ""
"创建框架目标时，其 FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG> "
"目标属性将使用此变量的值进行初始化（如果已设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK_PATH.rst:2
msgid "CMAKE_FRAMEWORK_PATH"
msgstr "CMAKE_FRAMEWORK_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_FRAMEWORK_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for macOS frameworks used by the "
":command:`find_library`, :command:`find_package`, :command:`find_path`, "
"and :command:`find_file` commands."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定目录的搜索路径的目录，用于 "
":command:`find_library`、 :command:`find_package`、 :command:`find_path` 和 "
":command :`find_file` 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_FORMAT.rst:2
msgid "CMAKE_Fortran_FORMAT"
msgstr "CMAKE_Fortran_FORMAT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_FORMAT.rst:4
msgid "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout."
msgstr "设置为“FIXED”或“FREE”以指示 Fortran 源布局。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_FORMAT.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`Fortran_FORMAT` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 Fortran_FORMAT 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_DEFAULT.rst:2
msgid "CMAKE_Fortran_MODDIR_DEFAULT"
msgstr "CMAKE_Fortran_MODDIR_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_DEFAULT.rst:4
msgid "Fortran default module output directory."
msgstr "Fortran 默认模块输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_DEFAULT.rst:6
msgid ""
"Most Fortran compilers write ``.mod`` files to the current working "
"directory.  For those that do not, this is set to ``.`` and used when the "
":prop_tgt:`Fortran_MODULE_DIRECTORY` target property is not set."
msgstr ""
"大多数 Fortran 编译器将 ``.mod`` 文件写入当前工作目录。对于那些不这样做的，这被设置为 ``.`` 并在 "
":prop_tgt:`Fortran_MODULE_DIRECTORY` 目标属性未设置时使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_FLAG.rst:2
msgid "CMAKE_Fortran_MODDIR_FLAG"
msgstr "CMAKE_Fortran_MODDIR_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_FLAG.rst:4
msgid "Fortran flag for module output directory."
msgstr "模块输出目录的 Fortran 标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODDIR_FLAG.rst:6
msgid ""
"This stores the flag needed to pass the value of the "
":prop_tgt:`Fortran_MODULE_DIRECTORY` target property to the compiler."
msgstr "这存储了将 Fortran_MODULE_DIRECTORY 目标属性的值传递给编译器所需的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODOUT_FLAG.rst:2
msgid "CMAKE_Fortran_MODOUT_FLAG"
msgstr "CMAKE_Fortran_MODOUT_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODOUT_FLAG.rst:4
msgid "Fortran flag to enable module output."
msgstr "用于启用模块输出的 Fortran 标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODOUT_FLAG.rst:6
msgid ""
"Most Fortran compilers write ``.mod`` files out by default.  For others, "
"this stores the flag needed to enable module output."
msgstr "大多数 Fortran 编译器默认写出 ``.mod`` 文件。对于其他人，这存储启用模块输出所需的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODULE_DIRECTORY.rst:2
msgid "CMAKE_Fortran_MODULE_DIRECTORY"
msgstr "CMAKE_Fortran_MODULE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODULE_DIRECTORY.rst:4
msgid "Fortran module output directory."
msgstr "Fortran 模块输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_MODULE_DIRECTORY.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`Fortran_MODULE_DIRECTORY` property on all the targets.  See "
"that target property for additional information."
msgstr "此变量用于初始化所有目标上的 Fortran_MODULE_DIRECTORY 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_PREPROCESS.rst:2
msgid "CMAKE_Fortran_PREPROCESS"
msgstr "CMAKE_Fortran_PREPROCESS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_PREPROCESS.rst:6
msgid "Default value for :prop_tgt:`Fortran_PREPROCESS` of targets."
msgstr "目标的 :prop_tgt:`Fortran_PREPROCESS` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Fortran_PREPROCESS.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`Fortran_PREPROCESS` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 Fortran_PREPROCESS 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR.rst:2
msgid "CMAKE_GENERATOR"
msgstr "CMAKE_GENERATOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR.rst:4
msgid ""
"The generator used to build the project.  See :manual:`cmake-"
"generators(7)`."
msgstr "用于构建项目的生成器。请参阅 :manual:`cmake-generators(7)`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR.rst:6
msgid ""
"The name of the generator that is being used to generate the build files."
"  (e.g.  ``Unix Makefiles``, ``Ninja``, etc.)"
msgstr "用于生成构建文件的生成器的名称。 （例如 ``Unix Makefiles``、``Ninja`` 等）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR.rst:9
msgid ""
"The value of this variable should never be modified by project code. A "
"generator may be selected via the :option:`cmake -G` option, interactively"
" in :manual:`cmake-gui(1)`, or via the :envvar:`CMAKE_GENERATOR` "
"environment variable."
msgstr ""
"项目代码永远不应修改此变量的值。生成器可以通过 :option:`cmake -G` 选项、在 :manual:`cmake-gui(1)` "
"中交互式选择，或通过 :envvar:`CMAKE_GENERATOR` 环境变量选择。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:2
msgid "CMAKE_GENERATOR_INSTANCE"
msgstr "CMAKE_GENERATOR_INSTANCE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:6
msgid "Generator-specific instance specification provided by user."
msgstr "用户提供的特定于生成器的实例规范。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:8
msgid ""
"Some CMake generators support selection of an instance of the native build"
" system when multiple instances are available.  If the user specifies an "
"instance (e.g. by setting this cache entry or via the "
":envvar:`CMAKE_GENERATOR_INSTANCE` environment variable), or after a "
"default instance is chosen when a build tree is first configured, the "
"value will be available in this variable."
msgstr ""
"当多个实例可用时，一些 CMake 生成器支持选择本机构建系统的一个实例。如果用户指定一个实例（例如，通过设置此缓存条目或通过 "
":envvar:`CMAKE_GENERATOR_INSTANCE` 环境变量），或者在首次配置构建树时选择默认实例后，该值将在此变量中可用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:15
msgid ""
"The value of this variable should never be modified by project code. A "
"toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE` variable "
"may initialize ``CMAKE_GENERATOR_INSTANCE`` as a cache entry. Once a given"
" build tree has been initialized with a particular value for this "
"variable, changing the value has undefined behavior."
msgstr ""
"项目代码永远不应修改此变量的值。 CMAKE_TOOLCHAIN_FILE 变量指定的工具链文件可以将 "
"CMAKE_GENERATOR_INSTANCE 初始化为缓存条目。一旦使用此变量的特定值初始化了给定的构建树，更改该值将具有未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:21
msgid "Instance specification is supported only on specific generators."
msgstr "实例规范仅在特定生成器上受支持。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:24
msgid "Visual Studio Instance Selection"
msgstr "Visual Studio 实例选择"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:26
msgid ""
":ref:`Visual Studio Generators` support instance specification for Visual "
"Studio 2017 and above.  The ``CMAKE_GENERATOR_INSTANCE`` variable may be "
"set as a cache entry selecting an instance of Visual Studio via one of the"
" following forms:"
msgstr ""
":ref:`Visual Studio Generators` 支持 Visual Studio 2017 及更高版本的实例规范。 "
"``CMAKE_GENERATOR_INSTANCE`` 变量可以通过以下形式之一设置为选择 Visual Studio 实例的缓存条目："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:31
msgid "``location``"
msgstr "``位置``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:32
msgid "``location[,key=value]*``"
msgstr "``位置[，键=值] *``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:33
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:34
msgid "``key=value[,key=value]*``"
msgstr "``键=值[，键=值]*``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:35
msgid ""
"The ``location`` specifies the absolute path to the top-level directory of"
" the VS installation."
msgstr "``location``指定了VS安装顶层目录的绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:38
msgid ""
"The ``key=value`` pairs form a comma-separated list of options to specify "
"details of the instance selection. Supported pairs are:"
msgstr "``key=value`` 对形成一个以逗号分隔的选项列表，用于指定实例选择的详细信息。支持的对是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:47
msgid "``version=<major>.<minor>.<date>.<build>``"
msgstr "``version=<major>.<minor>.<date>.<build>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:45
msgid "Specify the 4-component VS Build Version, a.k.a. Build Number."
msgstr "指定 4-component VS Build Version，也就是 Build Number。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:1
msgid "The components are:"
msgstr "这些组件是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:3
msgid "``<major>.<minor>``"
msgstr "``<主要>.<次要>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:5
msgid ""
"The VS major and minor version numbers. These are the same as the release "
"version numbers."
msgstr "VS 主要和次要版本号。这些与发布版本号相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:8
msgid "``<date>``"
msgstr "``<日期>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:10
msgid ""
"A build date in the format ``MMMDD``, where ``MMM`` is a month index since"
" an epoch used by Microsoft, and ``DD`` is a day in that month."
msgstr "格式为“MMMDD”的构建日期，其中“MMM”是自 Microsoft 使用的纪元以来的月份索引，“DD”是该月的一天。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:13
msgid "``<build>``"
msgstr "``<构建>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:15
msgid "A build index on the day represented by ``<date>``."
msgstr "由``<date>`` 表示的那一天的构建索引。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER_COMPONENTS.txt:17
msgid ""
"The build number is reported by ``vswhere`` as ``installationVersion``. "
"For example, VS 16.11.10 has build number ``16.11.32126.315``."
msgstr ""
"内部版本号由“vswhere”报告为“installationVersion”。例如，VS 16.11.10 "
"的内部版本号为“16.11.32126.315”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:51
msgid ""
"A portable VS instance, which is not known to the Visual Studio Installer,"
" may be specified by providing both ``location`` and ``version=``."
msgstr "Visual Studio 安装程序不知道的可移植 VS 实例可以通过同时提供“location”和“version=”来指定。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:54
msgid ""
"If the value of ``CMAKE_GENERATOR_INSTANCE`` is not specified explicitly "
"by the user or a toolchain file, CMake queries the Visual Studio Installer"
" to locate VS instances, chooses one, and sets the variable as a cache "
"entry to hold the value persistently.  If an environment variable of the "
"form ``VS##0COMNTOOLS``, where ``##`` the Visual Studio major version "
"number, is set and points to the ``Common7/Tools`` directory within one of"
" the VS instances, that instance will be used.  Otherwise, if more than "
"one VS instance is installed we do not define which one is chosen by "
"default."
msgstr ""
"如果“CMAKE_GENERATOR_INSTANCE”的值未由用户或工具链文件明确指定，CMake 将查询 Visual Studio "
"安装程序以定位 VS 实例，选择一个，并将变量设置为缓存条目以持久保存该值。如果设置了 ``VS##0COMNTOOLS`` 形式的环境变量，其中 "
"``##`` 是 Visual Studio 主版本号，并指向其中一个 VS 实例中的 ``Common7/Tools`` "
"目录，将使用该实例。否则，如果安装了多个 VS 实例，我们不会定义默认选择哪一个。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_INSTANCE.rst:63
msgid ""
"The VS version build number of the selected VS instance is provided in the"
" :variable:`CMAKE_VS_VERSION_BUILD_NUMBER` variable."
msgstr "所选 VS 实例的 VS 版本内部版本号在 CMAKE_VS_VERSION_BUILD_NUMBER 变量中提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:2
msgid "CMAKE_GENERATOR_PLATFORM"
msgstr "CMAKE_GENERATOR_PLATFORM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:6
msgid "Generator-specific target platform specification provided by user."
msgstr "用户提供的特定于生成器的目标平台规范。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:8
msgid ""
"Some CMake generators support a target platform name to be given to the "
"native build system to choose a compiler toolchain. If the user specifies "
"a platform name (e.g. via the :option:`cmake -A` option or via the "
":envvar:`CMAKE_GENERATOR_PLATFORM` environment variable) the value will be"
" available in this variable."
msgstr ""
"一些 CMake 生成器支持将目标平台名称提供给本机构建系统以选择编译器工具链。如果用户指定平台名称（例如，通过 :option:`cmake "
"-A` 选项或通过 :envvar:`CMAKE_GENERATOR_PLATFORM` 环境变量），该值将在此变量中可用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:14
msgid ""
"The value of this variable should never be modified by project code. A "
"toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE` variable "
"may initialize ``CMAKE_GENERATOR_PLATFORM``.  Once a given build tree has "
"been initialized with a particular value for this variable, changing the "
"value has undefined behavior."
msgstr ""
"项目代码永远不应修改此变量的值。 CMAKE_TOOLCHAIN_FILE 变量指定的工具链文件可以初始化 "
"CMAKE_GENERATOR_PLATFORM。一旦使用此变量的特定值初始化了给定的构建树，更改该值将具有未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:20
msgid "Platform specification is supported only on specific generators:"
msgstr "平台规范仅在特定生成器上受支持："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:22
msgid ""
"For :ref:`Visual Studio Generators` with VS 2005 and above this specifies "
"the target architecture."
msgstr "对于 VS 2005 及更高版本的 Visual Studio Generators，这指定了目标架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:25
msgid ""
"For :generator:`Green Hills MULTI` this specifies the target architecture."
msgstr "对于 :generator:`Green Hills MULTI` 这指定了目标架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:27
msgid "See native build system documentation for allowed platform names."
msgstr "有关允许的平台名称，请参阅本机构建系统文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:30
msgid "Visual Studio Platform Selection"
msgstr "Visual Studio 平台选择"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_PLATFORM.rst:32
msgid ""
"On :ref:`Visual Studio Generators` the selected platform name is provided "
"in the :variable:`CMAKE_VS_PLATFORM_NAME` variable."
msgstr ""
"在 :ref:`Visual Studio Generators` 中，选定的平台名称在 "
":variable:`CMAKE_VS_PLATFORM_NAME` 变量中提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:2
msgid "CMAKE_GENERATOR_TOOLSET"
msgstr "CMAKE_GENERATOR_TOOLSET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:4
msgid "Native build system toolset specification provided by user."
msgstr "用户提供的本机构建系统工具集规范。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:6
msgid ""
"Some CMake generators support a toolset specification to tell the native "
"build system how to choose a compiler.  If the user specifies a toolset "
"(e.g. via the :option:`cmake -T` option or via the "
":envvar:`CMAKE_GENERATOR_TOOLSET` environment variable) the value will be "
"available in this variable."
msgstr ""
"一些 CMake 生成器支持工具集规范来告诉本机构建系统如何选择编译器。如果用户指定了一个工具集（例如，通过 :option:`cmake -T` "
"选项或通过 :envvar:`CMAKE_GENERATOR_TOOLSET` 环境变量），该值将在此变量中可用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:12
msgid ""
"The value of this variable should never be modified by project code. A "
"toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE` variable "
"may initialize ``CMAKE_GENERATOR_TOOLSET``.  Once a given build tree has "
"been initialized with a particular value for this variable, changing the "
"value has undefined behavior."
msgstr ""
"项目代码永远不应修改此变量的值。 CMAKE_TOOLCHAIN_FILE 变量指定的工具链文件可以初始化 "
"CMAKE_GENERATOR_TOOLSET。一旦使用此变量的特定值初始化了给定的构建树，更改该值将具有未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:18
msgid "Toolset specification is supported only on specific generators:"
msgstr "仅特定生成器支持工具集规范："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:20
msgid ":ref:`Visual Studio Generators` for VS 2010 and above"
msgstr ":ref:`Visual Studio Generators` 适用于 VS 2010 及更高版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:21
msgid "The :generator:`Xcode` generator for Xcode 3.0 and above"
msgstr "适用于 Xcode 3.0 及更高版本的 :generator:`Xcode` 生成器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:22
msgid "The :generator:`Green Hills MULTI` generator"
msgstr ":generator:`Green Hills MULTI` 生成器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:24
msgid "See native build system documentation for allowed toolset names."
msgstr "有关允许的工具集名称，请参阅本机构建系统文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:27
msgid "Visual Studio Toolset Selection"
msgstr "Visual Studio 工具集选择"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:29
msgid ""
"The :ref:`Visual Studio Generators` support toolset specification using "
"one of these forms:"
msgstr ":ref:`Visual Studio Generators` 支持使用以下形式之一的工具集规范："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:32
msgid "``toolset``"
msgstr "``工具集``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:33
msgid "``toolset[,key=value]*``"
msgstr "``工具集[，键=值] *``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:36
msgid ""
"The ``toolset`` specifies the toolset name.  The selected toolset name is "
"provided in the :variable:`CMAKE_VS_PLATFORM_TOOLSET` variable."
msgstr "``toolset`` 指定工具集名称。所选工具集名称在 CMAKE_VS_PLATFORM_TOOLSET 变量中提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:39
msgid ""
"The ``key=value`` pairs form a comma-separated list of options to specify "
"generator-specific details of the toolset selection. Supported pairs are:"
msgstr "``key=value`` 对形成一个以逗号分隔的选项列表，用于指定工具集选择的特定于生成器的详细信息。支持的对是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:49
msgid "``cuda=<version>|<path>``"
msgstr "``cuda=<版本>|<路径>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:44
msgid ""
"Specify the CUDA toolkit version to use or the path to a standalone CUDA "
"toolkit directory.  Supported by VS 2010 and above. The version can only "
"be used with the CUDA toolkit VS integration globally installed. See the "
":variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA` and "
":variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR` variables."
msgstr ""
"指定要使用的 CUDA 工具包版本或独立 CUDA 工具包目录的路径。 VS 2010及以上版本支持。该版本只能与全局安装的 CUDA 工具包 VS"
" 集成一起使用。请参阅 :variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA` "
"和 :variable:`CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:55
msgid "``host=<arch>``"
msgstr "``主机=<arch>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:52
msgid ""
"Specify the host tools architecture as ``x64`` or ``x86``. Supported by VS"
" 2013 and above. See the "
":variable:`CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE` variable."
msgstr ""
"将主机工具架构指定为“x64”或“x86”。 VS 2013 "
"及以上版本支持。请参阅 :variable:`CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:60
msgid "``version=<version>``"
msgstr "``版本=<版本>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:58
msgid ""
"Specify the toolset version to use.  Supported by VS 2017 and above with "
"the specified toolset installed. See the "
":variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` variable."
msgstr ""
"指定要使用的工具集版本。安装了指定工具集的 VS 2017 "
"及更高版本支持。请参阅 :variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:65
msgid "``VCTargetsPath=<path>``"
msgstr "``VCTargetsPath=<路径>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:63
msgid ""
"Specify an alternative ``VCTargetsPath`` value for Visual Studio project "
"files.  This allows use of VS platform extension configuration files "
"(``.props`` and ``.targets``) that are not installed with VS."
msgstr ""
"为 Visual Studio 项目文件指定一个替代的“VCTargetsPath”值。这允许使用未随 VS 安装的 VS "
"平台扩展配置文件（``.props`` 和``.targets``）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:68
msgid "Visual Studio Toolset Customization"
msgstr "Visual Studio 工具集自定义"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:70
msgid ""
"**These are unstable interfaces with no compatibility guarantees** because"
" they hook into undocumented internal CMake implementation details. "
"Institutions may use these to internally maintain support for non-public "
"Visual Studio platforms and toolsets, but must accept responsibility to "
"make updates as changes are made to CMake."
msgstr ""
"**这些是没有兼容性保证的不稳定接口**，因为它们挂钩到未记录的内部 CMake 实现细节。机构可以使用这些在内部维护对非公共 Visual "
"Studio 平台和工具集的支持，但必须承担在对 CMake 进行更改时进行更新的责任。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:76
msgid "Additional ``key=value`` pairs are available:"
msgstr "额外的 ``key=value`` 对可用："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:88
msgid "``customFlagTableDir=<path>``"
msgstr "``customFlagTableDir=<路径>``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GENERATOR_TOOLSET.rst:81
msgid ""
"Specify the absolute path to a directory from which to load custom flag "
"tables stored as JSON documents with file names of the form "
"``<platform>_<toolset>_<tool>.json`` or ``<platform>_<tool>.json``, where "
"``<platform>`` is the :variable:`CMAKE_VS_PLATFORM_NAME`, ``<toolset>`` is"
" the :variable:`CMAKE_VS_PLATFORM_TOOLSET`, and ``<tool>`` is the tool for"
" which the flag table is meant. **This naming pattern is an internal CMake"
" implementation detail.** The ``<tool>`` names are undocumented.  The "
"format of the ``.json`` flag table files is undocumented."
msgstr ""
"指定目录的绝对路径，从中加载存储为 JSON 文档的自定义标志表，其文件名格式为 "
"``<platform>_<toolset>_<tool>.json`` 或 ``<platform>_<tool "
">.json``，其中``<platform>`` 是 :variable:`CMAKE_VS_PLATFORM_NAME`，``<toolset>`` "
"是 :variable:`CMAKE_VS_PLATFORM_TOOLSET`，``<tool>`` 是工具标志表的意思。 **此命名模式是内部 CMake "
"实现细节。** ``<tool>`` 名称未记录。 ``.json`` 标志表文件的格式未记录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GHS_NO_SOURCE_GROUP_FILE.rst:2
msgid "CMAKE_GHS_NO_SOURCE_GROUP_FILE"
msgstr "CMAKE_GHS_NO_SOURCE_GROUP_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GHS_NO_SOURCE_GROUP_FILE.rst:6
msgid ""
"``ON`` / ``OFF`` boolean to control if the project file for a target "
"should be one single file or multiple files.  Refer to "
":prop_tgt:`GHS_NO_SOURCE_GROUP_FILE` for further details."
msgstr ""
"``ON`` / ``OFF`` "
"布尔值，用于控制目标的项目文件是一个文件还是多个文件。有关更多详细信息，请参阅:prop_tgt:`GHS_NO_SOURCE_GROUP_FILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:2
msgid "CMAKE_GLOBAL_AUTOGEN_TARGET"
msgstr "CMAKE_GLOBAL_AUTOGEN_TARGET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:6
msgid "Switch to enable generation of a global ``autogen`` target."
msgstr "切换以启用全局“autogen”目标的生成。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:8
msgid ""
"When ``CMAKE_GLOBAL_AUTOGEN_TARGET`` is enabled, a custom target "
"``autogen`` is generated.  This target depends on all :prop_tgt:`AUTOMOC` "
"and :prop_tgt:`AUTOUIC` generated ``<ORIGIN>_autogen`` targets in the "
"project. By building the global ``autogen`` target, all "
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` files in the project will be "
"generated."
msgstr ""
"当启用 CMAKE_GLOBAL_AUTOGEN_TARGET 时，会生成自定义目标 autogen。这个目标依赖于项目中所有 "
":prop_tgt:`AUTOMOC` 和 :prop_tgt:`AUTOUIC` 生成的 ``<ORIGIN>_autogen`` "
"目标。通过构建全局 ``autogen`` 目标，将生成项目中的所有 AUTOMOC 和 AUTOUIC 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:14
msgid ""
"The name of the global ``autogen`` target can be changed by setting "
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`."
msgstr "可以通过设置 CMAKE_GLOBAL_AUTOGEN_TARGET_NAME 来更改全局“autogen”目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:17
msgid "By default ``CMAKE_GLOBAL_AUTOGEN_TARGET`` is unset."
msgstr "默认情况下 ``CMAKE_GLOBAL_AUTOGEN_TARGET`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:19
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:19
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst:14
msgid ""
"See the :manual:`cmake-qt(7)` manual for more information on using CMake "
"with Qt."
msgstr "有关在 Qt 中使用 CMake 的更多信息，请参阅 :manual:`cmake-qt(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:23
msgid "Note"
msgstr "笔记"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET.rst:25
msgid ""
"``<ORIGIN>_autogen`` targets by default inherit their origin target's "
"dependencies.  This might result in unintended dependency target builds "
"when only ``<ORIGIN>_autogen`` targets are built.  A solution is to "
"disable :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS` on the respective origin "
"targets."
msgstr ""
"``<ORIGIN>_autogen`` 目标默认继承其原始目标的依赖项。当仅构建 ``<ORIGIN>_autogen`` "
"目标时，这可能会导致意外的依赖目标构建。一种解决方案是在各自的原始目标上禁用 :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst:2
msgid "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME"
msgstr "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst:6
msgid "Change the name of the global ``autogen`` target."
msgstr "更改全局“autogen”目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst:8
msgid ""
"When :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` is enabled, a global custom "
"target named ``autogen`` is created.  ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME``"
" allows to set a different name for that target."
msgstr ""
"当启用 :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET` 时，将创建一个名为 ``autogen`` "
"的全局自定义目标。 ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` 允许为该目标设置不同的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTOGEN_TARGET_NAME.rst:12
msgid "By default ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` is unset."
msgstr "默认情况下 ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:2
msgid "CMAKE_GLOBAL_AUTORCC_TARGET"
msgstr "CMAKE_GLOBAL_AUTORCC_TARGET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:6
msgid "Switch to enable generation of a global ``autorcc`` target."
msgstr "切换以启用全局“autorcc”目标的生成。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:8
msgid ""
"When ``CMAKE_GLOBAL_AUTORCC_TARGET`` is enabled, a custom target "
"``autorcc`` is generated. This target depends on all :prop_tgt:`AUTORCC` "
"generated ``<ORIGIN>_arcc_<QRC>`` targets in the project. By building the "
"global ``autorcc`` target, all :prop_tgt:`AUTORCC` files in the project "
"will be generated."
msgstr ""
"当启用“CMAKE_GLOBAL_AUTORCC_TARGET”时，会生成一个自定义目标“autorcc”。该目标取决于项目中所有 "
":prop_tgt:`AUTORCC` 生成的 ``<ORIGIN>_arcc_<QRC>`` 目标。通过构建全局 ``autorcc`` "
"目标，将生成项目中的所有 :prop_tgt:`AUTORCC` 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:14
msgid ""
"The name of the global ``autorcc`` target can be changed by setting "
":variable:`CMAKE_GLOBAL_AUTORCC_TARGET_NAME`."
msgstr "可以通过设置 CMAKE_GLOBAL_AUTORCC_TARGET_NAME 来更改全局 ``autorcc`` 目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET.rst:17
msgid "By default ``CMAKE_GLOBAL_AUTORCC_TARGET`` is unset."
msgstr "默认情况下 ``CMAKE_GLOBAL_AUTORCC_TARGET`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst:2
msgid "CMAKE_GLOBAL_AUTORCC_TARGET_NAME"
msgstr "CMAKE_GLOBAL_AUTORCC_TARGET_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst:6
msgid "Change the name of the global ``autorcc`` target."
msgstr "更改全局“autorcc”目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst:8
msgid ""
"When :variable:`CMAKE_GLOBAL_AUTORCC_TARGET` is enabled, a global custom "
"target named ``autorcc`` is created.  ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME``"
" allows to set a different name for that target."
msgstr ""
"当启用 :variable:`CMAKE_GLOBAL_AUTORCC_TARGET` 时，将创建一个名为 ``autorcc`` "
"的全局自定义目标。 ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME`` 允许为该目标设置不同的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GLOBAL_AUTORCC_TARGET_NAME.rst:12
msgid "By default ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME`` is unset."
msgstr "默认情况下 ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GNUtoMS.rst:2
msgid "CMAKE_GNUtoMS"
msgstr "CMAKE_GNUtoMS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GNUtoMS.rst:4
msgid "Convert GNU import libraries (``.dll.a``) to MS format (``.lib``)."
msgstr "将 GNU 导入库 (``.dll.a``) 转换为 MS 格式 (``.lib``)。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_GNUtoMS.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`GNUtoMS` property on "
"targets when they are created.  See that target property for additional "
"information."
msgstr "此变量用于在创建目标时初始化目标上的 :prop_tgt:`GNUtoMS` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_ARCHITECTURES.rst:2
msgid "CMAKE_HIP_ARCHITECTURES"
msgstr "CMAKE_HIP_ARCHITECTURES 架构"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_ARCHITECTURES.rst:6
msgid "Default value for :prop_tgt:`HIP_ARCHITECTURES` property of targets."
msgstr "目标的 :prop_tgt:`HIP_ARCHITECTURES` 属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_ARCHITECTURES.rst:8
msgid ""
"This is initialized to the architectures reported by "
"``rocm_agent_enumerator``, if available, and otherwise to the default "
"chosen by the compiler."
msgstr "这被初始化为 ``rocm_agent_enumerator`` 报告的体系结构（如果可用），否则为编译器选择的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_ARCHITECTURES.rst:11
msgid ""
"This variable is used to initialize the :prop_tgt:`HIP_ARCHITECTURES` "
"property on all targets. See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 HIP_ARCHITECTURES 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_EXTENSIONS.rst:2
msgid "CMAKE_HIP_EXTENSIONS"
msgstr "CMAKE_HIP_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`HIP_EXTENSIONS` target property if set when a"
" target is created."
msgstr ":prop_tgt:`HIP_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD.rst:2
msgid "CMAKE_HIP_STANDARD"
msgstr "CMAKE_HIP_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`HIP_STANDARD` target property if set when a "
"target is created."
msgstr ":prop_tgt:`HIP_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD_REQUIRED.rst:2
msgid "CMAKE_HIP_STANDARD_REQUIRED"
msgstr "CMAKE_HIP_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HIP_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`HIP_STANDARD_REQUIRED` target property if set"
" when a target is created."
msgstr ":prop_tgt:`HIP_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOME_DIRECTORY.rst:2
msgid "CMAKE_HOME_DIRECTORY"
msgstr "CMAKE_HOME_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOME_DIRECTORY.rst:4
msgid "Path to top of source tree. Same as :variable:`CMAKE_SOURCE_DIR`."
msgstr "源代码树顶部的路径。与 :variable:`CMAKE_SOURCE_DIR` 相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOME_DIRECTORY.rst:6
msgid ""
"This is an internal cache entry used to locate the source directory when "
"loading a ``CMakeCache.txt`` from a build tree.  It should not be used in "
"project code.  The variable :variable:`CMAKE_SOURCE_DIR` has the same "
"value and should be preferred."
msgstr ""
"这是一个内部缓存条目，用于在从构建树加载 ``CMakeCache.txt`` 时定位源目录。它不应在项目代码中使用。变量 "
":variable:`CMAKE_SOURCE_DIR` 具有相同的值，应该是首选。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_APPLE.rst:2
msgid "CMAKE_HOST_APPLE"
msgstr "CMAKE_HOST_APPLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_APPLE.rst:4
msgid "``True`` for Apple macOS operating systems."
msgstr "``True`` 适用于 Apple macOS 操作系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_APPLE.rst:6
msgid "Set to ``true`` when the host system is Apple macOS."
msgstr "当主机系统是 Apple macOS 时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_BSD.rst:2
msgid "CMAKE_HOST_BSD"
msgstr "CMAKE_HOST_BSD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_BSD.rst:6
msgid ""
"Set to a string value when the host system is BSD. This value can be one "
"of the following: DragonFlyBSD, FreeBSD, OpenBSD, or NetBSD."
msgstr ""
"当主机系统为 BSD 时设置为字符串值。该值可以是以下之一：DragonFlyBSD、FreeBSD、OpenBSD 或 NetBSD。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_LINUX.rst:2
msgid "CMAKE_HOST_LINUX"
msgstr "CMAKE_HOST_LINUX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_LINUX.rst:6
msgid "Set to true when the host system is Linux."
msgstr "当主机系统是 Linux 时设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SOLARIS.rst:2
msgid "CMAKE_HOST_SOLARIS"
msgstr "CMAKE_HOST_SOLARIS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SOLARIS.rst:6
msgid "``True`` for Oracle Solaris operating systems."
msgstr "``True`` 用于 Oracle Solaris 操作系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SOLARIS.rst:8
msgid "Set to ``true`` when the host system is Oracle Solaris."
msgstr "当主机系统是 Oracle Solaris 时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM.rst:2
msgid "CMAKE_HOST_SYSTEM"
msgstr "CMAKE_HOST_SYSTEM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM.rst:4
msgid "Composite Name of OS CMake is being run on."
msgstr "正在运行的 OS CMake 的复合名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM.rst:6
msgid ""
"This variable is the composite of :variable:`CMAKE_HOST_SYSTEM_NAME` and "
":variable:`CMAKE_HOST_SYSTEM_VERSION`, e.g. "
"``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``.  If "
":variable:`CMAKE_HOST_SYSTEM_VERSION` is not set, then this variable is "
"the same as :variable:`CMAKE_HOST_SYSTEM_NAME`."
msgstr ""
"此变量是 CMAKE_HOST_SYSTEM_NAME 和 CMAKE_HOST_SYSTEM_VERSION "
"的组合，例如``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``。如果未设置 "
":variable:`CMAKE_HOST_SYSTEM_VERSION`，则此变量与 "
":variable:`CMAKE_HOST_SYSTEM_NAME` 相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_NAME.rst:2
msgid "CMAKE_HOST_SYSTEM_NAME"
msgstr "CMAKE_HOST_SYSTEM_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_NAME.rst:4
msgid "Name of the OS CMake is running on."
msgstr "运行 CMake 的操作系统的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_NAME.rst:6
msgid ""
"On systems that have the uname command, this variable is set to the output"
" of ``uname -s``.  ``Linux``, ``Windows``, and ``Darwin`` for macOS are "
"the values found on the big three operating systems."
msgstr ""
"在具有 uname 命令的系统上，此变量设置为 uname -s 的输出。 ``Linux``、``Windows`` 和适用于 macOS 的 "
"``Darwin`` 是三大操作系统的价值观。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:2
msgid "CMAKE_HOST_SYSTEM_PROCESSOR"
msgstr "CMAKE_HOST_SYSTEM_PROCESSOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:4
msgid "The name of the CPU CMake is running on."
msgstr "运行 CMake 的 CPU 的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:7
msgid "Windows Platforms"
msgstr "Windows 平台"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:9
msgid ""
"On Windows, this variable is set to the value of the environment variable "
"``PROCESSOR_ARCHITECTURE``."
msgstr "在 Windows 上，此变量设置为环境变量“PROCESSOR_ARCHITECTURE”的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:13
msgid "Unix Platforms"
msgstr "Unix 平台"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:15
msgid ""
"On systems that support ``uname``, this variable is set to the output of:"
msgstr "在支持 ``uname`` 的系统上，此变量设置为以下输出："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:17
msgid "``uname -m`` on GNU, Linux, Cygwin, Android, or"
msgstr "GNU、Linux、Cygwin、Android 或上的 ``uname -m``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:18
msgid "``arch`` on OpenBSD, or"
msgstr "OpenBSD 上的``arch``，或者"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:19
msgid "on other systems,"
msgstr "在其他系统上，"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:21
msgid "``uname -p`` if its exit code is nonzero, or"
msgstr "``uname -p`` 如果它的退出代码是非零的，或者"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:22
msgid "``uname -m`` otherwise."
msgstr "``uname -m`` 否则。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:25
msgid "macOS Platforms"
msgstr "macOS 平台"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:27
msgid "The value of ``uname -m`` is used by default."
msgstr "默认使用 ``uname -m`` 的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:29
msgid ""
"On Apple Silicon hosts, the architecture printed by ``uname -m`` may vary "
"based on CMake's own architecture and that of the invoking process tree."
msgstr ""
"在 Apple Silicon 主机上，``uname -m`` 打印的架构可能会根据 CMake 自身的架构和调用进程树的架构而有所不同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:34
msgid "On Apple Silicon hosts:"
msgstr "在 Apple Silicon 主机上："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:36
msgid ""
"The :variable:`CMAKE_APPLE_SILICON_PROCESSOR` variable or the "
":envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable may be set to"
" specify the host architecture explicitly."
msgstr ""
":variable:`CMAKE_APPLE_SILICON_PROCESSOR` 变量或 "
":envvar:`CMAKE_APPLE_SILICON_PROCESSOR` 环境变量可以设置为明确指定主机架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_PROCESSOR.rst:40
msgid ""
"If :variable:`CMAKE_OSX_ARCHITECTURES` is not set, CMake adds explicit "
"flags to tell the compiler to build for the host architecture so the "
"toolchain does not have to guess based on the process tree's architecture."
msgstr ""
"如果未设置 :variable:`CMAKE_OSX_ARCHITECTURES`，CMake "
"会添加显式标志以告知编译器针对主机架构进行构建，因此工具链不必根据进程树的架构进行猜测。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_VERSION.rst:2
msgid "CMAKE_HOST_SYSTEM_VERSION"
msgstr "CMAKE_HOST_SYSTEM_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_VERSION.rst:4
msgid "The OS version CMake is running on."
msgstr "运行 CMake 的操作系统版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_SYSTEM_VERSION.rst:6
msgid ""
"A numeric version string for the system.  On systems that support "
"``uname``, this variable is set to the output of ``uname -r``. On other "
"systems this is set to major-minor version numbers."
msgstr ""
"系统的数字版本字符串。在支持 ``uname`` 的系统上，此变量设置为 ``uname -r`` 的输出。在其他系统上，这被设置为主要-"
"次要版本号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_UNIX.rst:2
msgid "CMAKE_HOST_UNIX"
msgstr "CMAKE_HOST_UNIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_UNIX.rst:4
msgid "``True`` for UNIX and UNIX like operating systems."
msgstr "``True`` 用于 UNIX 和类似 UNIX 的操作系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_UNIX.rst:6
msgid ""
"Set to ``true`` when the host system is UNIX or UNIX like (i.e.  APPLE and"
" CYGWIN)."
msgstr "当主机系统是 UNIX 或类似 UNIX（即 APPLE 和 CYGWIN）时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_WIN32.rst:2
msgid "CMAKE_HOST_WIN32"
msgstr "CMAKE_HOST_WIN32"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_WIN32.rst:4
msgid ""
"``True`` if the host system is running Windows, including Windows 64-bit "
"and MSYS."
msgstr "如果主机系统正在运行 Windows，包括 Windows 64 位和 MSYS，则为“真”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_HOST_WIN32.rst:6
msgid "Set to ``false`` on Cygwin."
msgstr "在 Cygwin 上设置为“false”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:2
msgid "CMAKE_IGNORE_PATH"
msgstr "CMAKE_IGNORE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_PATH.txt:1
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories to "
"be ignored by the various ``find...()`` commands."
msgstr ":ref: 以分号分隔的列表 <CMake Language Lists>` 被各种 ``find...()`` 命令忽略的目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_PATH.txt:4
msgid ""
"For :command:`find_program`, :command:`find_library`, "
":command:`find_file`, and :command:`find_path`, any file found in one of "
"the listed directories will be ignored. The listed directories do not "
"apply recursively, so any subdirectories to be ignored must also be "
"explicitly listed. |CMAKE_IGNORE_VAR| does not affect the search "
"*prefixes* used by these four commands. To ignore individual paths under a"
" search prefix (e.g. ``bin``, ``include``, ``lib``, etc.), each path must "
"be listed in |CMAKE_IGNORE_VAR| as a full absolute path. "
"|CMAKE_IGNORE_PREFIX_VAR| provides a more appropriate way to ignore a "
"whole search prefix."
msgstr ""
"对于 :command:`find_program`、 :command:`find_library`、 :command:`find_file` 和 "
":command:`find_path`，在列出的目录之一中找到的任何文件都将被忽略。列出的目录不递归应用，因此任何要忽略的子目录也必须明确列出。 "
"|CMAKE_IGNORE_VAR|不影响这四个命令使用的搜索 *prefixes*。要忽略搜索前缀下的单个路径（例如 "
"``bin``、``include``、``lib`` 等），每个路径必须列在 |CMAKE_IGNORE_VAR| 中作为完整的绝对路径。 "
"|CMAKE_IGNORE_PREFIX_VAR|提供了一种更合适的方法来忽略整个搜索前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_PATH.txt:14
msgid ""
":command:`find_package` is also affected by |CMAKE_IGNORE_VAR|, but only "
"for *Config mode* searches. Any ``<Name>Config.cmake`` or "
"``<name>-config.cmake`` file found in one of the specified directories "
"will be ignored. In addition, any search *prefix* found in "
"|CMAKE_IGNORE_VAR| will be skipped for backward compatibility reasons, but"
" new code should prefer to use |CMAKE_IGNORE_PREFIX_VAR| to ignore "
"prefixes instead."
msgstr ""
":command:`find_package` 也受 |CMAKE_IGNORE_VAR| 的影响，但仅限于 *Config mode* "
"搜索。在指定目录之一中找到的任何 ``<Name>Config.cmake`` 或 ``<name>-config.cmake`` "
"文件都将被忽略。此外，在 |CMAKE_IGNORE_VAR| 中找到的任何搜索 *prefix*出于向后兼容的原因将被跳过，但新代码应该更喜欢使用"
" |CMAKE_IGNORE_PREFIX_VAR|忽略前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_LOCATIONS.txt:1
msgid ""
"Ignoring search locations can be useful in cross-compiling environments "
"where some system directories contain incompatible but possibly linkable "
"libraries. For example, on cross-compiled cluster environments, this "
"allows a user to ignore directories containing libraries meant for the "
"front-end machine."
msgstr ""
"忽略搜索位置在某些系统目录包含不兼容但可能可链接的库的交叉编译环境中可能很有用。例如，在交叉编译的集群环境中，这允许用户忽略包含用于前端机器的库的目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_NONSYSTEM.txt:1
msgid ""
"By default, |CMAKE_IGNORE_VAR| is empty. It is intended to be set by the "
"project or the end user."
msgstr "默认情况下，|CMAKE_IGNORE_VAR|是空的。它旨在由项目或最终用户设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:14
msgid "See also the following variables:"
msgstr "另请参阅以下变量："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:13
msgid ":variable:`CMAKE_IGNORE_PREFIX_PATH`"
msgstr ":variable:`CMAKE_IGNORE_PREFIX_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:16
msgid ":variable:`CMAKE_SYSTEM_IGNORE_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_IGNORE_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:17
msgid ":variable:`CMAKE_PREFIX_PATH`"
msgstr ":variable:`CMAKE_PREFIX_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:18
msgid ":variable:`CMAKE_LIBRARY_PATH`"
msgstr ":variable:`CMAKE_LIBRARY_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:19
msgid ":variable:`CMAKE_INCLUDE_PATH`"
msgstr ":variable:`CMAKE_INCLUDE_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PATH.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:20
msgid ":variable:`CMAKE_PROGRAM_PATH`"
msgstr ":variable:`CMAKE_PROGRAM_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:2
msgid "CMAKE_IGNORE_PREFIX_PATH"
msgstr "CMAKE_IGNORE_PREFIX_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_PREFIX.txt:1
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of search "
"*prefixes* to be ignored by the :command:`find_program`, "
":command:`find_library`, :command:`find_file`, and :command:`find_path` "
"commands. The prefixes are also ignored by the *Config mode* of the "
":command:`find_package` command (*Module mode* is unaffected). To ignore "
"specific directories instead, see |CMAKE_IGNORE_NONPREFIX_VAR|."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` of search *prefixes* 将被 "
":command:`find_program`、 :command:`find_library`、 :command:`find_file` 和 "
":command:` 忽略find_path` 命令。 :command:`find_package` "
"命令的*配置模式*也会忽略前缀（*模块模式*不受影响）。要忽略特定目录，请参阅 |CMAKE_IGNORE_NONPREFIX_VAR|。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:15
msgid ":variable:`CMAKE_IGNORE_PATH`"
msgstr ":variable:`CMAKE_IGNORE_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IGNORE_PREFIX_PATH.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:14
msgid ":variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_PREFIX.rst:2
msgid "CMAKE_IMPORT_LIBRARY_PREFIX"
msgstr "CMAKE_IMPORT_LIBRARY_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_PREFIX.rst:4
msgid "The prefix for import libraries that you link to."
msgstr "您链接到的导入库的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_PREFIX.rst:6
msgid ""
"The prefix to use for the name of an import library if used on this "
"platform."
msgstr "如果在此平台上使用，则用于导入库名称的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_PREFIX.rst:9
msgid ""
"``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.rst:2
msgid "CMAKE_IMPORT_LIBRARY_SUFFIX"
msgstr "CMAKE_IMPORT_LIBRARY_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.rst:4
msgid "The suffix for import libraries that you link to."
msgstr "您链接到的导入库的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of an import library filename if used on "
"this platform."
msgstr "如果在此平台上使用，则用于导入库文件名末尾的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IMPORT_LIBRARY_SUFFIX.rst:9
msgid ""
"``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR.rst:2
msgid "CMAKE_INCLUDE_CURRENT_DIR"
msgstr "CMAKE_INCLUDE_CURRENT_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR.rst:4
msgid ""
"Automatically add the current source and build directories to the include "
"path."
msgstr "自动将当前源和构建目录添加到包含路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR.rst:6
msgid ""
"If this variable is enabled, CMake automatically adds "
":variable:`CMAKE_CURRENT_SOURCE_DIR` and "
":variable:`CMAKE_CURRENT_BINARY_DIR` to the include path for each "
"directory.  These additional include directories do not propagate down to "
"subdirectories.  This is useful mainly for out-of-source builds, where "
"files generated into the build tree are included by files located in the "
"source tree."
msgstr ""
"如果启用此变量，CMake 会自动将 :variable:`CMAKE_CURRENT_SOURCE_DIR` 和 "
":variable:`CMAKE_CURRENT_BINARY_DIR` "
"添加到每个目录的包含路径中。这些额外的包含目录不会向下传播到子目录。这主要用于源外构建，其中生成到构建树中的文件包含在位于源树中的文件中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR.rst:13
msgid "By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``."
msgstr "默认情况下 ``CMAKE_INCLUDE_CURRENT_DIR`` 是 ``OFF``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.rst:2
msgid "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE"
msgstr "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.rst:4
msgid ""
"Automatically add the current source and build directories to the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property."
msgstr "自动将当前源和构建目录添加到 INTERFACE_INCLUDE_DIRECTORIES 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE.rst:7
msgid ""
"If this variable is enabled, CMake automatically adds for each shared "
"library target, static library target, module target and executable "
"target, :variable:`CMAKE_CURRENT_SOURCE_DIR` and "
":variable:`CMAKE_CURRENT_BINARY_DIR` to the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target property.  By default "
"``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` is ``OFF``."
msgstr ""
"如果启用此变量，CMake 会自动为每个共享库目标、静态库目标、模块目标和可执行目标添加 :variable:`CMAKE_CURRENT_SOURCE_DIR`"
" 和 :variable:`CMAKE_CURRENT_BINARY_DIR` "
"到:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` 目标属性。默认情况下 "
"``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` 是 ``OFF``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.rst:2
msgid "CMAKE_INCLUDE_DIRECTORIES_BEFORE"
msgstr "CMAKE_INCLUDE_DIRECTORIES_BEFORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.rst:4
msgid ""
"Whether to append or prepend directories by default in "
":command:`include_directories`."
msgstr "在 :command:`include_directories` 中是否默认追加或前置目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_BEFORE.rst:7
msgid ""
"This variable affects the default behavior of the "
":command:`include_directories` command.  Setting this variable to ``ON`` "
"is equivalent to using the ``BEFORE`` option in all uses of that command."
msgstr ""
"此变量影响 :command:`include_directories` 命令的默认行为。将此变量设置为 ``ON`` "
"等同于在该命令的所有使用中使用 ``BEFORE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.rst:2
msgid "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE"
msgstr "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.rst:4
msgid "Whether to force prepending of project include directories."
msgstr "是否强制项目包含目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE.rst:6
msgid ""
"This variable affects the order of include directories generated in "
"compiler command lines.  If set to ``ON``, it causes the "
":variable:`CMAKE_SOURCE_DIR` and the :variable:`CMAKE_BINARY_DIR` to "
"appear first."
msgstr ""
"此变量影响在编译器命令行中生成的包含目录的顺序。如果设置为 ``ON``，它会导致 :variable:`CMAKE_SOURCE_DIR` 和 "
":variable:`CMAKE_BINARY_DIR` 首先出现。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_PATH.rst:2
msgid "CMAKE_INCLUDE_PATH"
msgstr "CMAKE_INCLUDE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INCLUDE_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_file` and "
":command:`find_path` commands.  By default it is empty, it is intended to "
"be set by the project.  See also :variable:`CMAKE_SYSTEM_INCLUDE_PATH` and"
" :variable:`CMAKE_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_file` 和 "
":command:`find_path` 命令。默认为空，由项目设置。另见 :variable:`CMAKE_SYSTEM_INCLUDE_PATH` "
"和 :variable:`CMAKE_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.rst:2
msgid "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME"
msgstr "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.rst:4
msgid "Default component used in :command:`install` commands."
msgstr ":command:`install` 命令中使用的默认组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_COMPONENT_NAME.rst:6
msgid ""
"If an :command:`install` command is used without the ``COMPONENT`` "
"argument, these files will be grouped into a default component.  The name "
"of this default install component will be taken from this variable.  It "
"defaults to ``Unspecified``."
msgstr ""
"如果在没有 `COMPONENT`` 参数的情况下使用 :command:`install` "
"命令，这些文件将被分组到一个默认组件中。此默认安装组件的名称将从该变量中获取。它默认为“未指定”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:2
msgid "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS"
msgstr "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:6
msgid ""
"Default permissions for directories created implicitly during installation"
" of files by :command:`install` and :command:`file(INSTALL)`."
msgstr ""
"在安装文件期间通过 :command:`install` 和 :command:`file(INSTALL)` 隐式创建的目录的默认权限。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:9
msgid ""
"If ``make install`` is invoked and directories are implicitly created they"
" get permissions set by ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` "
"variable or platform specific default permissions if the variable is not "
"set."
msgstr ""
"如果调用``make "
"install``并隐式创建目录，它们将获得由``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``变量设置的权限或平台特定的默认权限（如果未设置该变量）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:13
msgid ""
"Implicitly created directories are created if they are not explicitly "
"installed by :command:`install` command but are needed to install a file "
"on a certain path. Example of such locations are directories created due "
"to the setting of :variable:`CMAKE_INSTALL_PREFIX`."
msgstr ""
"隐式创建的目录如果未通过 :command:`install` 命令显式安装但需要在特定路径上安装文件时创建。此类位置的示例是由于 "
"CMAKE_INSTALL_PREFIX 的设置而创建的目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:18
msgid ""
"Expected content of the ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` "
"variable is a list of permissions that can be used by :command:`install` "
"command `PERMISSIONS` section."
msgstr ""
"``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` 变量的预期内容是:command:`install`"
" 命令 `PERMISSIONS` 部分可以使用的权限列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:22
msgid "Example usage:"
msgstr "用法示例："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:2
msgid "CMAKE_INSTALL_MESSAGE"
msgstr "CMAKE_INSTALL_MESSAGE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:6
msgid ""
"Specify verbosity of installation script code generated by the "
":command:`install` command (using the :command:`file(INSTALL)` command). "
"For paths that are newly installed or updated, installation may print "
"lines like::"
msgstr ""
"指定由 :command:`install` 命令生成的安装脚本代码的详细程度（使用 :command:`file(INSTALL)` "
"命令）。对于新安装或更新的路径，安装可能会打印如下行："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:13
msgid ""
"For paths that are already up to date, installation may print lines like::"
msgstr "对于已经是最新的路径，安装可能会打印如下行："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:18
msgid ""
"The ``CMAKE_INSTALL_MESSAGE`` variable may be set to control which "
"messages are printed:"
msgstr "可以设置 ``CMAKE_INSTALL_MESSAGE`` 变量来控制打印哪些消息："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:22
msgid "``ALWAYS``"
msgstr "``总是``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:22
msgid "Print both ``Installing`` and ``Up-to-date`` messages."
msgstr "打印“正在安装”和“最新”消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:25
msgid "``LAZY``"
msgstr "``懒惰``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:25
msgid "Print ``Installing`` but not ``Up-to-date`` messages."
msgstr "打印“正在安装”但不打印“最新”消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:28
msgid "Print neither ``Installing`` nor ``Up-to-date`` messages."
msgstr "既不打印“正在安装”也不打印“最新”消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:30
msgid "Other values have undefined behavior and may not be diagnosed."
msgstr "其他值具有未定义的行为，可能无法诊断。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_MESSAGE.rst:32
msgid "If this variable is not set, the default behavior is ``ALWAYS``."
msgstr "如果未设置此变量，则默认行为为“始终”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_NAME_DIR.rst:2
msgid "CMAKE_INSTALL_NAME_DIR"
msgstr "CMAKE_INSTALL_NAME_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_NAME_DIR.rst:4
msgid "Directory name for installed targets on Apple platforms."
msgstr "Apple 平台上已安装目标的目录名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_NAME_DIR.rst:6
msgid ""
"``CMAKE_INSTALL_NAME_DIR`` is used to initialize the "
":prop_tgt:`INSTALL_NAME_DIR` property on all targets.  See that target "
"property for more information."
msgstr ""
"``CMAKE_INSTALL_NAME_DIR`` 用于初始化所有目标上的 :prop_tgt:`INSTALL_NAME_DIR` "
"属性。有关详细信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:2
msgid "CMAKE_INSTALL_PREFIX"
msgstr "CMAKE_INSTALL_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:4
msgid "Install directory used by :command:`install`."
msgstr ":command:`install` 使用的安装目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:6
msgid ""
"If ``make install`` is invoked or ``INSTALL`` is built, this directory is "
"prepended onto all install directories.  This variable defaults to "
"``/usr/local`` on UNIX and ``c:/Program Files/${PROJECT_NAME}`` on "
"Windows. See :variable:`CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT` for "
"how a project might choose its own default."
msgstr ""
"如果调用 ``make install`` 或构建 ``INSTALL``，则此目录将添加到所有安装目录中。此变量在 UNIX "
"上默认为“/usr/local”，在 Windows 上默认为“c:/Program "
"Files/${PROJECT_NAME}”。请参阅 :variable:`CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT`"
" 以了解项目如何选择自己的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:12
msgid ""
"On UNIX one can use the ``DESTDIR`` mechanism in order to relocate the "
"whole installation to a staging area.  See the :envvar:`DESTDIR` "
"environment variable for more information."
msgstr ""
"在 UNIX 上，可以使用 ``DESTDIR`` 机制将整个安装重新定位到暂存区。有关更多信息，请参见:envvar:`DESTDIR` "
"环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:16
msgid ""
"The installation prefix is also added to "
":variable:`CMAKE_SYSTEM_PREFIX_PATH` so that :command:`find_package`, "
":command:`find_program`, :command:`find_library`, :command:`find_path`, "
"and :command:`find_file` will search the prefix for other software. This "
"behavior can be disabled by setting the "
":variable:`CMAKE_FIND_NO_INSTALL_PREFIX` to ``TRUE`` before the first "
":command:`project` invocation."
msgstr ""
"安装前缀也添加到 :variable:`CMAKE_SYSTEM_PREFIX_PATH` 以便 "
":command:`find_package`、 :command:`find_program`、 :command:`find_library`、 :command:`find_path`"
" 和 :command:`find_file`将搜索其他软件的前缀。可以通过在第一次 :command:`project` 调用之前将 "
":variable:`CMAKE_FIND_NO_INSTALL_PREFIX` 设置为 ``TRUE`` 来禁用此行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:25
msgid ""
"Use the :module:`GNUInstallDirs` module to provide GNU-style options for "
"the layout of directories within the installation."
msgstr "使用 GNUInstallDirs 模块为安装中的目录布局提供 GNU 风格的选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX.rst:28
msgid ""
"The ``CMAKE_INSTALL_PREFIX`` may be defined when configuring a build tree "
"to set its installation prefix.  Or, when using the :manual:`cmake(1)` "
"command-line tool's :option:`--install <cmake --install>` mode, one may "
"specify a different prefix using the :option:`--prefix <cmake--install "
"--prefix>` option:"
msgstr ""
"``CMAKE_INSTALL_PREFIX`` 可以在配置构建树以设置其安装前缀时定义。或者，当使用 :manual:`cmake(1)` "
"命令行工具的 :option:`--install <cmake --install>` 模式时，可以使用 :option:`--prefix < "
"指定不同的前缀cmake--install --prefix>` 选项："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT.rst:2
msgid "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT"
msgstr "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT.rst:6
msgid ""
"CMake sets this variable to a ``TRUE`` value when the "
":variable:`CMAKE_INSTALL_PREFIX` has just been initialized to its default "
"value, typically on the first run of CMake within a new build tree.  This "
"can be used by project code to change the default without overriding a "
"user-provided value:"
msgstr ""
"当 CMAKE_INSTALL_PREFIX 刚刚初始化为其默认值时，CMake 将此变量设置为 TRUE 值，通常是在新构建树中首次运行 "
"CMake 时。项目代码可以使用它来更改默认值而不覆盖用户提供的值："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:2
msgid "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH"
msgstr "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:6
msgid ""
"Sets the default for whether toolchain-defined rpaths should be removed "
"during installation."
msgstr "设置是否应在安装期间删除工具链定义的 rpaths 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:9
msgid ""
"``CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH`` is a boolean that provides the "
"default value for the :prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` "
"property of all subsequently created targets."
msgstr ""
"``CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH`` 是一个布尔值，它为所有后续创建的目标的 "
":prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` 属性提供默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH.rst:2
msgid "CMAKE_INSTALL_RPATH"
msgstr "CMAKE_INSTALL_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH.rst:4
msgid "The rpath to use for installed targets."
msgstr "用于已安装目标的 rpath。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH.rst:6
msgid ""
"A semicolon-separated list specifying the rpath to use in installed "
"targets (for platforms that support it).  This is used to initialize the "
"target property :prop_tgt:`INSTALL_RPATH` for all targets."
msgstr ""
"一个以分号分隔的列表，指定要在已安装目标中使用的 "
"rpath（对于支持它的平台）。这用于为所有目标初始化目标属性:prop_tgt:`INSTALL_RPATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.rst:2
msgid "CMAKE_INSTALL_RPATH_USE_LINK_PATH"
msgstr "CMAKE_INSTALL_RPATH_USE_LINK_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.rst:4
msgid "Add paths to linker search and installed rpath."
msgstr "将路径添加到链接器搜索和已安装的 rpath。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.rst:6
msgid ""
"``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``True``"
" will append to the runtime search path (rpath) of installed binaries any "
"directories outside the project that are in the linker search path or "
"contain linked library files.  The directories are appended after the "
"value of the :prop_tgt:`INSTALL_RPATH` target property."
msgstr ""
"``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` 是一个布尔值，如果设置为 ``True`` "
"将附加到已安装二进制文件的运行时搜索路径 (rpath) 中链接器搜索路径中或包含链接库文件的项目外的任何目录。这些目录附加在 "
":prop_tgt:`INSTALL_RPATH` 目标属性的值之后。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INSTALL_RPATH_USE_LINK_PATH.rst:12
msgid ""
"This variable is used to initialize the target property "
":prop_tgt:`INSTALL_RPATH_USE_LINK_PATH` for all targets."
msgstr "此变量用于初始化所有目标的目标属性:prop_tgt:`INSTALL_RPATH_USE_LINK_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERNAL_PLATFORM_ABI.rst:2
msgid "CMAKE_INTERNAL_PLATFORM_ABI"
msgstr "CMAKE_INTERNAL_PLATFORM_ABI"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERNAL_PLATFORM_ABI.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ABI.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ARCHITECTURE_ID.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION_INTERNAL.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_PLATFORM_ID.rst:4
msgid "An internal variable subject to change."
msgstr "可能发生变化的内部变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERNAL_PLATFORM_ABI.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ABI.rst:6
msgid ""
"This is used in determining the compiler ABI and is subject to change."
msgstr "这用于确定编译器 ABI，并且可能会发生变化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION.rst:2
msgid "CMAKE_INTERPROCEDURAL_OPTIMIZATION"
msgstr "CMAKE_INTERPROCEDURAL_OPTIMIZATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION.rst:6
msgid ""
"Default value for :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` of targets."
msgstr "目标的 :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION.rst:8
msgid ""
"This variable is used to initialize the "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` property on all the targets.  See"
" that target property for additional information."
msgstr "此变量用于初始化所有目标上的 INTERPROCEDURAL_OPTIMIZATION 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:2
msgid "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>"
msgstr "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:6
msgid ""
"Default value for :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` of "
"targets."
msgstr "目标的 :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:8
msgid ""
"This variable is used to initialize the "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` property on all the "
"targets.  See that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 INTERPROCEDURAL_OPTIMIZATION_<CONFIG> 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IOS_INSTALL_COMBINED.rst:2
msgid "CMAKE_IOS_INSTALL_COMBINED"
msgstr "CMAKE_IOS_INSTALL_COMBINED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IOS_INSTALL_COMBINED.rst:6
msgid "Default value for :prop_tgt:`IOS_INSTALL_COMBINED` of targets."
msgstr ":prop_tgt:`IOS_INSTALL_COMBINED` 目标的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_IOS_INSTALL_COMBINED.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`IOS_INSTALL_COMBINED` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 IOS_INSTALL_COMBINED 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_DIRECTORY.rst:2
msgid "CMAKE_ISPC_HEADER_DIRECTORY"
msgstr "CMAKE_ISPC_HEADER_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_DIRECTORY.rst:6
msgid "ISPC generated header output directory."
msgstr "ISPC 生成的标题输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_DIRECTORY.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`ISPC_HEADER_DIRECTORY` "
"property on all the targets.  See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`ISPC_HEADER_DIRECTORY` 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_SUFFIX.rst:2
msgid "CMAKE_ISPC_HEADER_SUFFIX"
msgstr "CMAKE_ISPC_HEADER_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_SUFFIX.rst:6
msgid "Output suffix to be used for ISPC generated headers."
msgstr "用于 ISPC 生成的标头的输出后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_HEADER_SUFFIX.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`ISPC_HEADER_SUFFIX` "
"property on all the targets.  See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`ISPC_HEADER_SUFFIX` 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_INSTRUCTION_SETS.rst:2
msgid "CMAKE_ISPC_INSTRUCTION_SETS"
msgstr "CMAKE_ISPC_INSTRUCTION_SETS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_INSTRUCTION_SETS.rst:6
msgid ""
"Default value for :prop_tgt:`ISPC_INSTRUCTION_SETS` property of targets."
msgstr ":prop_tgt:`ISPC_INSTRUCTION_SETS` 目标属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ISPC_INSTRUCTION_SETS.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`ISPC_INSTRUCTION_SETS` "
"property on all targets. See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`ISPC_INSTRUCTION_SETS` 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOLS.rst:2
msgid "CMAKE_JOB_POOLS"
msgstr "CMAKE_JOB_POOLS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOLS.rst:6
msgid ""
"If the :prop_gbl:`JOB_POOLS` global property is not set, the value of this"
" variable is used in its place.  See :prop_gbl:`JOB_POOLS` for additional "
"information."
msgstr ""
"如果 :prop_gbl:`JOB_POOLS` "
"全局属性未设置，则使用此变量的值代替它。有关更多信息，请参阅:prop_gbl:`JOB_POOLS`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_COMPILE.rst:2
msgid "CMAKE_JOB_POOL_COMPILE"
msgstr "CMAKE_JOB_POOL_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_COMPILE.rst:4
msgid ""
"This variable is used to initialize the :prop_tgt:`JOB_POOL_COMPILE` "
"property on all the targets. See :prop_tgt:`JOB_POOL_COMPILE` for "
"additional information."
msgstr ""
"此变量用于初始化所有目标上的 JOB_POOL_COMPILE 属性。有关更多信息，请参阅:prop_tgt:`JOB_POOL_COMPILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_LINK.rst:2
msgid "CMAKE_JOB_POOL_LINK"
msgstr "CMAKE_JOB_POOL_LINK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_LINK.rst:4
msgid ""
"This variable is used to initialize the :prop_tgt:`JOB_POOL_LINK` property"
" on all the targets. See :prop_tgt:`JOB_POOL_LINK` for additional "
"information."
msgstr ""
"此变量用于初始化所有目标上的 JOB_POOL_LINK 属性。有关更多信息，请参阅 :prop_tgt:`JOB_POOL_LINK`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_PRECOMPILE_HEADER.rst:2
msgid "CMAKE_JOB_POOL_PRECOMPILE_HEADER"
msgstr "CMAKE_JOB_POOL_PRECOMPILE_HEADER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_JOB_POOL_PRECOMPILE_HEADER.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`JOB_POOL_PRECOMPILE_HEADER` property on all the targets. See "
":prop_tgt:`JOB_POOL_PRECOMPILE_HEADER` for additional information."
msgstr ""
"此变量用于初始化所有目标上的 JOB_POOL_PRECOMPILE_HEADER "
"属性。有关更多信息，请参阅:prop_tgt:`JOB_POOL_PRECOMPILE_HEADER`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE.rst:2
msgid "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE"
msgstr "CMAKE_<语言>_ANDROID_TOOLCHAIN_MACHINE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE.rst:6
msgid ""
"When :ref:`Cross Compiling for Android` this variable contains the "
"toolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The binutils"
" typically have a ``<machine>-`` prefix on their name."
msgstr ""
"当 :ref:`Cross Compiling for Android` 此变量包含工具链 binutils 机器名称（例如 ``gcc "
"-dumpmachine``）。 binutils 通常在其名称上有一个 ``<machine>-`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_MACHINE.rst:10
msgid ""
"See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX` and "
":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`."
msgstr ""
"另见 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX` "
"和 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX.rst:2
msgid "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX"
msgstr "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX.rst:6
msgid ""
"When :ref:`Cross Compiling for Android` this variable contains the "
"absolute path prefixing the toolchain GNU compiler and its binutils."
msgstr ""
"当 :ref:`Cross Compiling for Android` 时，此变量包含以工具链 GNU 编译器及其 binutils "
"为前缀的绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX.rst:9
msgid ""
"See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX` and "
":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`."
msgstr ""
"另见 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX` "
"和 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_PREFIX.rst:12
msgid "For example, the path to the linker is::"
msgstr "例如，链接器的路径是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX.rst:2
msgid "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX"
msgstr "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX.rst:6
msgid ""
"When :ref:`Cross Compiling for Android` this variable contains the host "
"platform suffix of the toolchain GNU compiler and its binutils."
msgstr ""
"当 :ref:`Cross Compiling for Android` 时，此变量包含工具链 GNU 编译器及其 binutils "
"的主机平台后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ANDROID_TOOLCHAIN_SUFFIX.rst:9
msgid ""
"See also :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX` and "
":variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`."
msgstr ""
"另见 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX` "
"和 :variable:`CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_APPEND.rst:2
msgid "CMAKE_<LANG>_ARCHIVE_APPEND"
msgstr "CMAKE_<LANG>_ARCHIVE_APPEND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_APPEND.rst:4
msgid "Rule variable to append to a static archive."
msgstr "附加到静态存档的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_APPEND.rst:6
msgid ""
"This is a rule variable that tells CMake how to append to a static "
"archive.  It is used in place of "
":variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY` on some platforms in order "
"to support large object counts.  See also "
":variable:`CMAKE_<LANG>_ARCHIVE_CREATE` and "
":variable:`CMAKE_<LANG>_ARCHIVE_FINISH`."
msgstr ""
"这是一个规则变量，告诉 CMake 如何附加到静态存档。它用于代替某些平台上的 CMAKE_<LANG>_CREATE_STATIC_LIBRARY"
" 以支持大对象计数。另见 :variable:`CMAKE_<LANG>_ARCHIVE_CREATE` "
"和 :variable:`CMAKE_<LANG>_ARCHIVE_FINISH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_CREATE.rst:2
msgid "CMAKE_<LANG>_ARCHIVE_CREATE"
msgstr "CMAKE_<语言>_ARCHIVE_CREATE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_CREATE.rst:4
msgid "Rule variable to create a new static archive."
msgstr "用于创建新静态存档的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_CREATE.rst:6
msgid ""
"This is a rule variable that tells CMake how to create a static archive.  "
"It is used in place of :variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY` on "
"some platforms in order to support large object counts.  See also "
":variable:`CMAKE_<LANG>_ARCHIVE_APPEND` and "
":variable:`CMAKE_<LANG>_ARCHIVE_FINISH`."
msgstr ""
"这是一个规则变量，告诉 CMake 如何创建静态存档。它用于代替某些平台上的 CMAKE_<LANG>_CREATE_STATIC_LIBRARY "
"以支持大对象计数。另见 :variable:`CMAKE_<LANG>_ARCHIVE_APPEND` "
"和 :variable:`CMAKE_<LANG>_ARCHIVE_FINISH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_FINISH.rst:2
msgid "CMAKE_<LANG>_ARCHIVE_FINISH"
msgstr "CMAKE_<语言>_ARCHIVE_FINISH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_FINISH.rst:4
msgid "Rule variable to finish an existing static archive."
msgstr "完成现有静态存档的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_ARCHIVE_FINISH.rst:6
msgid ""
"This is a rule variable that tells CMake how to finish a static archive.  "
"It is used in place of :variable:`CMAKE_<LANG>_CREATE_STATIC_LIBRARY` on "
"some platforms in order to support large object counts.  See also "
":variable:`CMAKE_<LANG>_ARCHIVE_CREATE` and "
":variable:`CMAKE_<LANG>_ARCHIVE_APPEND`."
msgstr ""
"这是一个规则变量，告诉 CMake 如何完成静态存档。它用于代替某些平台上的 CMAKE_<LANG>_CREATE_STATIC_LIBRARY "
"以支持大对象计数。另见 :variable:`CMAKE_<LANG>_ARCHIVE_CREATE` "
"和 :variable:`CMAKE_<LANG>_ARCHIVE_APPEND`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:2
msgid "CMAKE_<LANG>_BYTE_ORDER"
msgstr "CMAKE_<LANG>_BYTE_ORDER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:6
msgid ""
"Byte order of ``<LANG>`` compiler target architecture, if known. If "
"defined and not empty, the value is one of:"
msgstr "``<LANG>`` 编译器目标架构的字节顺序，如果已知的话。如果已定义且不为空，则该值为以下之一："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:10
msgid "``BIG_ENDIAN``"
msgstr "``BIG_ENDIAN``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:10
msgid "The target architecture is Big Endian."
msgstr "目标架构是 Big Endian。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:13
msgid "``LITTLE_ENDIAN``"
msgstr "``LITTLE_ENDIAN``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:13
msgid "The target architecture is Little Endian."
msgstr "目标架构是 Little Endian。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:15
msgid ""
"This is defined for languages ``C``, ``CXX``, ``OBJC``, ``OBJCXX``, and "
"``CUDA``."
msgstr "这是为语言“C”、“CXX”、“OBJC”、“OBJCXX”和“CUDA”定义的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_BYTE_ORDER.rst:18
msgid ""
"If :variable:`CMAKE_OSX_ARCHITECTURES` specifies multiple architectures, "
"the value of ``CMAKE_<LANG>_BYTE_ORDER`` is non-empty only if all "
"architectures share the same byte order."
msgstr ""
"如果 :variable:`CMAKE_OSX_ARCHITECTURES` "
"指定了多个体系结构，则仅当所有体系结构共享相同的字节顺序时，``CMAKE_<LANG>_BYTE_ORDER`` 的值才为非空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY.rst:2
msgid "CMAKE_<LANG>_CLANG_TIDY"
msgstr "CMAKE_<LANG>_CLANG_TIDY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_CLANG_TIDY` target property when "
"``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``."
msgstr ""
":prop_tgt:`<LANG>_CLANG_TIDY` 目标属性的默认值，当 ``<LANG>`` 是 "
"``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:9
msgid ""
"This variable is used to initialize the property on each target as it is "
"created.  For example:"
msgstr "此变量用于在创建每个目标时初始化其属性。例如："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:2
msgid "CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR"
msgstr "CMAKE_<语言>_CLANG_TIDY_EXPORT_FIXES_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` target "
"property when ``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``."
msgstr ""
":prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` 目标属性的默认值，当 ``<LANG>`` 是 "
"``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:2
msgid "CMAKE_<LANG>_COMPILER"
msgstr "CMAKE_<语言>_编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:4
msgid "The full path to the compiler for ``LANG``."
msgstr "``LANG`` 编译器的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:6
msgid ""
"This is the command that will be used as the ``<LANG>`` compiler.  Once "
"set, you can not change this variable."
msgstr "这是将用作 ``<LANG>`` 编译器的命令。一旦设置，您不能更改此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:10
msgid "Usage"
msgstr "用法"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:12
msgid ""
"This variable can be set by the user during the first time a build tree is"
" configured."
msgstr "这个变量可以在第一次配置构建树时由用户设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:14
msgid ""
"If a non-full path value is supplied then CMake will resolve the full path"
" of the compiler."
msgstr "如果提供了非完整路径值，则 CMake 将解析编译器的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:17
msgid ""
"The variable could be set in a user supplied toolchain file or via "
":option:`-D <cmake -D>` on the command line."
msgstr "该变量可以在用户提供的工具链文件中设置，也可以通过命令行上的 :option:`-D <cmake -D>` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:21
msgid ""
"Options that are required to make the compiler work correctly can be "
"included as items in a list; they can not be changed."
msgstr "使编译器正常工作所需的选项可以作为列表中的项目包含在内；他们不能改变。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER.rst:29
msgid "or"
msgstr "或者"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ABI.rst:2
msgid "CMAKE_<LANG>_COMPILER_ABI"
msgstr "CMAKE_<LANG>_COMPILER_ABI"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_AR.rst:2
msgid "CMAKE_<LANG>_COMPILER_AR"
msgstr "CMAKE_<LANG>_COMPILER_AR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_AR.rst:6
msgid ""
"A wrapper around ``ar`` adding the appropriate ``--plugin`` option for the"
" compiler."
msgstr "围绕 ``ar`` 的包装器，为编译器添加适当的 ``--plugin`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_AR.rst:9
msgid "See also :variable:`CMAKE_AR`."
msgstr "另见 :variable:`CMAKE_AR`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ARCHITECTURE_ID.rst:2
msgid "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID"
msgstr "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ARCHITECTURE_ID.rst:8
msgid ""
"This is used to identify the variant of a compiler based on its target "
"architecture.  For some compilers this is needed to determine the correct "
"usage."
msgstr "这用于根据目标体系结构识别编译器的变体。对于某些编译器来说，这是确定正确用法所必需的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.rst:2
msgid "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN"
msgstr "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.rst:4
msgid "The external toolchain for cross-compiling, if supported."
msgstr "用于交叉编译的外部工具链（如果支持）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.rst:6
msgid ""
"Some compiler toolchains do not ship their own auxiliary utilities such as"
" archivers and linkers.  The compiler driver may support a command-line "
"argument to specify the location of such tools. "
"``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to the "
"external toolchain and will be passed to the compiler driver if supported."
msgstr ""
"一些编译器工具链不提供它们自己的辅助实用程序，例如存档器和链接器。编译器驱动程序可能支持命令行参数来指定此类工具的位置。 "
"``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` "
"可以设置为外部工具链的路径，如果支持，将传递给编译器驱动程序。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_EXTERNAL_TOOLCHAIN.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_TARGET.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_COMPILE.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_LINK.rst:10
msgid ""
"This variable may only be set in a toolchain file specified by the "
":variable:`CMAKE_TOOLCHAIN_FILE` variable."
msgstr "此变量只能在 CMAKE_TOOLCHAIN_FILE 变量指定的工具链文件中设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst:2
msgid "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT"
msgstr "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst:6
msgid "Identification string of the compiler frontend variant."
msgstr "编译器前端变体的标识字符串。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst:8
msgid ""
"Some compilers have multiple, different frontends for accepting command "
"line options.  (For example ``Clang`` originally only had a frontend "
"compatible with the ``GNU`` compiler but since its port to Windows "
"(``Clang-Cl``) it now also supports a frontend compatible with ``MSVC``.) "
"When CMake detects such a compiler it sets this variable to what would "
"have been the :variable:`CMAKE_<LANG>_COMPILER_ID` for the compiler whose "
"frontend it resembles."
msgstr ""
"一些编译器有多个不同的前端来接受命令行选项。 （例如，``Clang`` 最初只有一个与 ``GNU`` 编译器兼容的前端，但自从它移植到 "
"Windows（``Clang-Cl``）后，它现在也支持与 ``MSVC`` 兼容的前端.) 当 CMake "
"检测到这样的编译器时，它会将此变量设置为其前端类似的编译器的 :variable:`CMAKE_<LANG>_COMPILER_ID`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst:17
msgid ""
"In other words, this variable describes what command line options and "
"language extensions the compiler frontend expects."
msgstr "换句话说，这个变量描述了编译器前端期望的命令行选项和语言扩展。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.rst:20
msgid ""
"This variable is set for ``GNU``, ``MSVC``, and ``AppleClang`` compilers "
"that have only one frontend variant."
msgstr "此变量是为只有一个前端变体的``GNU``、``MSVC`` 和``AppleClang`` 编译器设置的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:2
msgid "CMAKE_<LANG>_COMPILER_ID"
msgstr "CMAKE_<LANG>_COMPILER_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:4
msgid "Compiler identification string."
msgstr "编译器标识字符串。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:6
msgid ""
"A short string unique to the compiler vendor.  Possible values include:"
msgstr "编译器供应商独有的短字符串。可能的值包括："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:10
msgid "Value"
msgstr "价值"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:10
msgid "Name"
msgstr "姓名"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:12
msgid "``Absoft``"
msgstr "``Absoft``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:12
msgid "`Absoft Fortran`_"
msgstr "`Absoft Fortran`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:13
msgid "``ADSP``"
msgstr "``ADSP``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:13
msgid "Analog VisualDSP++"
msgstr "模拟VisualDSP++"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:14
msgid "``AppleClang``"
msgstr "``AppleClang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:14
msgid "Apple Clang"
msgstr "苹果叮当声"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:15
msgid "``ARMCC``"
msgstr "``ARMCC``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:15
msgid "ARM Compiler"
msgstr "ARM 编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:16
msgid "``ARMClang``"
msgstr "``ARMClang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:16
msgid "ARM Compiler based on Clang"
msgstr "基于 Clang 的 ARM 编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:17
msgid "``Bruce``"
msgstr "``布鲁斯``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:17
msgid "Bruce C Compiler"
msgstr "布鲁斯 C 编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:18
msgid "``CCur``"
msgstr "``CCur``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:18
msgid "Concurrent Fortran"
msgstr "并发 Fortran"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:19
msgid "``Clang``"
msgstr "``铛``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:19
msgid "`LLVM Clang`_"
msgstr "`LLVM 铿锵声`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:20
msgid "``Cray``"
msgstr "``克雷``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:20
msgid "Cray Compiler"
msgstr "克雷编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:21
msgid "``Embarcadero``, ``Borland``"
msgstr "``Embarcadero``，``Borland``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:21
msgid "`Embarcadero`_"
msgstr "`Embarcadero`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:22
msgid "``Flang``"
msgstr "``法兰``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:22
msgid "`Classic Flang Fortran Compiler`_"
msgstr "`经典 Flang Fortran 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:23
msgid "``LLVMFlang``"
msgstr "``LLVMFlang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:23
msgid "`LLVM Flang Fortran Compiler`_"
msgstr "`LLVM Flang Fortran 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:24
msgid "``Fujitsu``"
msgstr "``富士通``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:24
msgid "Fujitsu HPC compiler (Trad mode)"
msgstr "Fujitsu HPC 编译器（Trad 模式）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:25
msgid "``FujitsuClang``"
msgstr "``FujitsuClang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:25
msgid "Fujitsu HPC compiler (Clang mode)"
msgstr "富士通 HPC 编译器（Clang 模式）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:26
msgid "``G95``"
msgstr "``G95``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:26
msgid "`G95 Fortran`_"
msgstr "`G95 Fortran`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:27
msgid "``GNU``"
msgstr "``GNU``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:27
msgid "`GNU Compiler Collection`_"
msgstr "`GNU 编译器集合`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:28
msgid "``GHS``"
msgstr "``全球统一制度``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:28
msgid "`Green Hills Software`_"
msgstr "`绿山软件`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:29
msgid "``HP``"
msgstr "``惠普``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:29
msgid "Hewlett-Packard Compiler"
msgstr "惠普编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:30
msgid "``IAR``"
msgstr "``IAR``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:30
msgid "IAR Systems"
msgstr "IAR 系统"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:31
msgid "``Intel``"
msgstr "``英特尔``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:31
msgid "Intel Classic Compiler"
msgstr "英特尔经典编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:32
msgid "``IntelLLVM``"
msgstr "``IntelLLVM``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:32
msgid "`Intel LLVM-Based Compiler`_"
msgstr "`基于英特尔 LLVM 的编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:33
msgid "``LCC``"
msgstr "``低成本航运公司``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:33
msgid "MCST Elbrus C/C++/Fortran Compiler"
msgstr "MCST Elbrus C/C++/Fortran 编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:34
msgid "``MSVC``"
msgstr "``MSVC``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:34
msgid "`Microsoft Visual Studio`_"
msgstr "`Microsoft Visual Studio`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:35
msgid "``NVHPC``"
msgstr "``NVHPC``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:35
msgid "`NVIDIA HPC Compiler`_"
msgstr "`NVIDIA HPC 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:36
msgid "``NVIDIA``"
msgstr "``英伟达``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:36
msgid "`NVIDIA CUDA Compiler`_"
msgstr "`NVIDIA CUDA 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:37
msgid "``OpenWatcom``"
msgstr "``OpenWatcom``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:37
msgid "`Open Watcom`_"
msgstr "`打开 Watcom`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:38
msgid "``PGI``"
msgstr "``PGI``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:38
msgid "The Portland Group"
msgstr "波特兰集团"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:39
msgid "``PathScale``"
msgstr "``PathScale``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:39
msgid "PathScale"
msgstr "路径尺度"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:40
msgid "``SDCC``"
msgstr "``SDCC``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:40
msgid "`Small Device C Compiler`_"
msgstr "`小型设备 C 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:41
msgid "``SunPro``"
msgstr "``SunPro``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:41
msgid "Oracle Solaris Studio"
msgstr "Oracle Solaris Studio"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:42
msgid "``Tasking``"
msgstr "``任务``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:42
msgid "`Tasking Compiler Toolsets`_"
msgstr "`任务编译器工具集`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:43
msgid "``TI``"
msgstr "``TI``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:43
msgid "Texas Instruments"
msgstr "德州仪器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:44
msgid "``TinyCC``"
msgstr "``TinyCC``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:44
msgid "`Tiny C Compiler`_"
msgstr "`微型 C 编译器`_"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:45
msgid "``XL``, ``VisualAge``, ``zOS``"
msgstr "``XL``、``VisualAge``、``zOS``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:45
msgid "IBM XL"
msgstr "IBM XL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:46
msgid "``XLClang``"
msgstr "``XLClang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:46
msgid "IBM Clang-based XL"
msgstr "基于 IBM Clang 的 XL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:47
msgid "``IBMClang``"
msgstr "``IBMClang``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:47
msgid "IBM LLVM-based Compiler"
msgstr "IBM 基于 LLVM 的编译器"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_ID.rst:50
msgid ""
"This variable is not guaranteed to be defined for all compilers or "
"languages."
msgstr "不保证为所有编译器或语言定义此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LAUNCHER.rst:2
msgid "CMAKE_<LANG>_COMPILER_LAUNCHER"
msgstr "CMAKE_<LANG>_COMPILER_LAUNCHER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LAUNCHER.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property. "
"This variable is used to initialize the property on each target as it is "
"created.  This is done only when ``<LANG>`` is ``C``, ``CXX``, "
"``Fortran``, ``HIP``, ``ISPC``, ``OBJC``, ``OBJCXX``, or ``CUDA``."
msgstr ""
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。只有当 "
"``<LANG>`` 是 ``C``, ``CXX``, ``Fortran``, ``HIP``, ``ISPC``, ``OBJC``, ` "
"`OBJCXX`` 或 ``CUDA``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LAUNCHER.rst:11
msgid ""
"This variable is initialized to the "
":envvar:`CMAKE_<LANG>_COMPILER_LAUNCHER` environment variable if it is "
"set."
msgstr "如果已设置，此变量将初始化为 CMAKE_<LANG>_COMPILER_LAUNCHER 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LOADED.rst:2
msgid "CMAKE_<LANG>_COMPILER_LOADED"
msgstr "CMAKE_<LANG>_COMPILER_LOADED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LOADED.rst:4
msgid "Defined to true if the language is enabled."
msgstr "如果启用该语言，则定义为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_LOADED.rst:6
msgid ""
"When language ``<LANG>`` is enabled by :command:`project` or "
":command:`enable_language` this variable is defined to ``1``."
msgstr ""
"当通过 :command:`project` 或 :command:`enable_language` 启用语言 ``<LANG>`` "
"时，此变量定义为 ``1``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_PREDEFINES_COMMAND.rst:2
msgid "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND"
msgstr "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_PREDEFINES_COMMAND.rst:6
msgid "Command that outputs the compiler pre definitions."
msgstr "输出编译器预定义的命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_PREDEFINES_COMMAND.rst:8
msgid ""
"See :prop_tgt:`AUTOMOC` which uses "
":variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "
"<CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` to generate the "
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`."
msgstr ""
"请参阅 :prop_tgt:`AUTOMOC`，它使用 "
":variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "
"<CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` 生成 "
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_RANLIB.rst:2
msgid "CMAKE_<LANG>_COMPILER_RANLIB"
msgstr "CMAKE_<LANG>_COMPILER_RANLIB"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_RANLIB.rst:6
msgid ""
"A wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for"
" the compiler."
msgstr "围绕 ``ranlib`` 的包装器，为编译器添加适当的 ``--plugin`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_RANLIB.rst:9
msgid "See also :variable:`CMAKE_RANLIB`."
msgstr "另见 :variable:`CMAKE_RANLIB`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_TARGET.rst:2
msgid "CMAKE_<LANG>_COMPILER_TARGET"
msgstr "CMAKE_<LANG>_COMPILER_TARGET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_TARGET.rst:4
msgid "The target for cross-compiling, if supported."
msgstr "交叉编译的目标（如果支持）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_TARGET.rst:6
msgid ""
"Some compiler drivers are inherently cross-compilers, such as clang and "
"QNX qcc. These compiler drivers support a command-line argument to specify"
" the target to cross-compile for."
msgstr "一些编译器驱动程序本身就是交叉编译器，例如 clang 和 QNX qcc。这些编译器驱动程序支持命令行参数来指定要交叉编译的目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION.rst:2
msgid "CMAKE_<LANG>_COMPILER_VERSION"
msgstr "CMAKE_<LANG>_COMPILER_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION.rst:4
msgid "Compiler version string."
msgstr "编译器版本字符串。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION.rst:6
msgid ""
"Compiler version in major[.minor[.patch[.tweak]]] format.  This variable "
"is not guaranteed to be defined for all compilers or languages."
msgstr "major[.minor[.patch[.tweak]]] 格式的编译器版本。不保证为所有编译器或语言定义此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION.rst:10
msgid ""
"For example ``CMAKE_C_COMPILER_VERSION`` and "
"``CMAKE_CXX_COMPILER_VERSION`` might indicate the respective C and C++ "
"compiler version."
msgstr ""
"例如 ``CMAKE_C_COMPILER_VERSION`` 和 ``CMAKE_CXX_COMPILER_VERSION`` 可能表示各自的 C"
" 和 C++ 编译器版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION_INTERNAL.rst:2
msgid "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL"
msgstr "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILER_VERSION_INTERNAL.rst:8
msgid ""
"This is used to identify the variant of a compiler based on an internal "
"version number.  For some compilers this is needed to determine the "
"correct usage."
msgstr "这用于根据内部版本号识别编译器的变体。对于某些编译器来说，这是确定正确用法所必需的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILE_OBJECT.rst:2
msgid "CMAKE_<LANG>_COMPILE_OBJECT"
msgstr "CMAKE_<LANG>_COMPILE_OBJECT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILE_OBJECT.rst:4
msgid "Rule variable to compile a single object file."
msgstr "编译单个目标文件的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_COMPILE_OBJECT.rst:6
msgid ""
"This is a rule variable that tells CMake how to compile a single object "
"file for the language ``<LANG>``."
msgstr "这是一个规则变量，它告诉 CMake 如何为语言“<LANG>”编译单个目标文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CPPCHECK.rst:2
msgid "CMAKE_<LANG>_CPPCHECK"
msgstr "CMAKE_<语言>_CPPCHECK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CPPCHECK.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_CPPCHECK` target property. This "
"variable is used to initialize the property on each target as it is "
"created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``."
msgstr ""
":prop_tgt:`<LANG>_CPPCHECK` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。仅当 ``<LANG>`` 为 "
"``C`` 或 ``CXX`` 时才会这样做。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CPPLINT.rst:2
msgid "CMAKE_<LANG>_CPPLINT"
msgstr "CMAKE_<语言>_CPPLINT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CPPLINT.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_CPPLINT` target property. This "
"variable is used to initialize the property on each target as it is "
"created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``."
msgstr ""
":prop_tgt:`<LANG>_CPPLINT` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。仅当 ``<LANG>`` 为 "
"``C`` 或 ``CXX`` 时才会这样做。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.rst:2
msgid "CMAKE_<LANG>_CREATE_SHARED_LIBRARY"
msgstr "CMAKE_<语言>_CREATE_SHARED_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.rst:4
msgid "Rule variable to create a shared library."
msgstr "用于创建共享库的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_LIBRARY.rst:6
msgid ""
"This is a rule variable that tells CMake how to create a shared library "
"for the language ``<LANG>``.  This rule variable is a ``;`` delimited list"
" of commands to run to perform the linking step."
msgstr ""
"这是一个规则变量，它告诉 CMake 如何为语言“<LANG>”创建一个共享库。此规则变量是一个以 ``;`` "
"分隔的命令列表，要运行以执行链接步骤。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_MODULE.rst:2
msgid "CMAKE_<LANG>_CREATE_SHARED_MODULE"
msgstr "CMAKE_<LANG>_CREATE_SHARED_MODULE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_MODULE.rst:4
msgid "Rule variable to create a shared module."
msgstr "用于创建共享模块的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_SHARED_MODULE.rst:6
msgid ""
"This is a rule variable that tells CMake how to create a shared library "
"for the language ``<LANG>``.  This rule variable is a ``;`` delimited list"
" of commands to run."
msgstr "这是一个规则变量，它告诉 CMake 如何为语言“<LANG>”创建一个共享库。这个规则变量是一个用``;``分隔的要运行的命令列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.rst:2
msgid "CMAKE_<LANG>_CREATE_STATIC_LIBRARY"
msgstr "CMAKE_<语言>_CREATE_STATIC_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.rst:4
msgid "Rule variable to create a static library."
msgstr "创建静态库的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_CREATE_STATIC_LIBRARY.rst:6
msgid ""
"This is a rule variable that tells CMake how to create a static library "
"for the language ``<LANG>``."
msgstr "这是一个规则变量，它告诉 CMake 如何为语言“<LANG>”创建静态库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:2
msgid "CMAKE_<LANG>_EXTENSIONS"
msgstr "CMAKE_<语言>_扩展"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:4
msgid "The variations are:"
msgstr "变化是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:6
msgid ":variable:`CMAKE_C_EXTENSIONS`"
msgstr ":variable:`CMAKE_C_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:7
msgid ":variable:`CMAKE_CXX_EXTENSIONS`"
msgstr ":variable:`CMAKE_CXX_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:8
msgid ":variable:`CMAKE_CUDA_EXTENSIONS`"
msgstr ":variable:`CMAKE_CUDA_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:9
msgid ":variable:`CMAKE_HIP_EXTENSIONS`"
msgstr ":variable:`CMAKE_HIP_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:10
msgid ":variable:`CMAKE_OBJC_EXTENSIONS`"
msgstr ":variable:`CMAKE_OBJC_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:11
msgid ":variable:`CMAKE_OBJCXX_EXTENSIONS`"
msgstr ":variable:`CMAKE_OBJCXX_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:13
msgid ""
"Default values for :prop_tgt:`<LANG>_EXTENSIONS` target properties if set "
"when a target is created.  For the compiler's default setting see "
":variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`."
msgstr ""
":prop_tgt:`<LANG>_EXTENSIONS` "
"目标属性的默认值（如果在创建目标时设置）。对于编译器的默认设置，请参阅 :variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:16
msgid "For supported CMake versions see the respective pages."
msgstr "有关受支持的 CMake 版本，请参阅相应页面。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS_DEFAULT.rst:2
msgid "CMAKE_<LANG>_EXTENSIONS_DEFAULT"
msgstr "CMAKE_<LANG>_EXTENSIONS_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS_DEFAULT.rst:6
msgid ""
"Compiler's default extensions mode. Used as the default for the "
":prop_tgt:`<LANG>_EXTENSIONS` target property when "
":variable:`CMAKE_<LANG>_EXTENSIONS` is not set (see :policy:`CMP0128`)."
msgstr ""
"编译器的默认扩展模式。当 :variable:`CMAKE_<LANG>_EXTENSIONS` 未设置时用作 "
":prop_tgt:`<LANG>_EXTENSIONS` 目标属性的默认值（参见 :policy:`CMP0128`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_EXTENSIONS_DEFAULT.rst:10
msgid "This variable is read-only.  Modifying it is undefined behavior."
msgstr "该变量是只读的。修改它是未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:2
msgid "CMAKE_<LANG>_FLAGS"
msgstr "CMAKE_<LANG>_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:4
msgid "Flags for all build types."
msgstr "所有构建类型的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:6
msgid ""
"``<LANG>`` flags used regardless of the value of "
":variable:`CMAKE_BUILD_TYPE`."
msgstr "无论 :variable:`CMAKE_BUILD_TYPE` 的值如何，都会使用``<LANG>`` 标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:8
msgid ""
"For each language, if this variable is not defined, it is initialized and "
"stored in the cache using values from environment variables in combination"
" with CMake's builtin defaults for the toolchain:"
msgstr "对于每种语言，如果未定义此变量，则会使用环境变量的值结合 CMake 工具链的内置默认值对其进行初始化并存储在缓存中："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:12
msgid ""
"``CMAKE_C_FLAGS``: Initialized by the :envvar:`CFLAGS` environment "
"variable."
msgstr "``CMAKE_C_FLAGS``：由 CFLAGS 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:14
msgid ""
"``CMAKE_CXX_FLAGS``: Initialized by the :envvar:`CXXFLAGS` environment "
"variable."
msgstr "``CMAKE_CXX_FLAGS``：由 CXXFLAGS 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:16
msgid ""
"``CMAKE_CUDA_FLAGS``: Initialized by the :envvar:`CUDAFLAGS` environment "
"variable."
msgstr "``CMAKE_CUDA_FLAGS``：由 :envvar:`CUDAFLAGS` 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:18
msgid ""
"``CMAKE_Fortran_FLAGS``: Initialized by the :envvar:`FFLAGS` environment "
"variable."
msgstr "``CMAKE_Fortran_FLAGS``：由 FFLAGS 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:20
msgid ""
"``CMAKE_CSharp_FLAGS``: Initialized by the :envvar:`CSFLAGS` environment "
"variable."
msgstr "``CMAKE_CSharp_FLAGS``：由:envvar:`CSFLAGS` 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:22
msgid ""
"``CMAKE_HIP_FLAGS``: Initialized by the :envvar:`HIPFLAGS` environment "
"variable."
msgstr "``CMAKE_HIP_FLAGS``：由 HIPFLAGS 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:24
msgid ""
"``CMAKE_ISPC_FLAGS``: Initialized by the :envvar:`ISPCFLAGS` environment "
"variable."
msgstr "``CMAKE_ISPC_FLAGS``：由 ISPCFLAGS 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:27
msgid ""
"This value is a command-line string fragment. Therefore, multiple options "
"should be separated by spaces, and options with spaces should be quoted."
msgstr "该值是一个命令行字符串片段。因此，多个选项要用空格隔开，带空格的选项要用引号引起来。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS.rst:30
msgid ""
"The flags in this variable will be passed to the compiler before those in "
"the per-configuration :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variant, and"
" before flags added by the :command:`add_compile_options` or "
":command:`target_compile_options` commands."
msgstr "此变量中的标志将在每个配置中的标志之前传递给编译器target_compile_options` 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG.rst:2
msgid "CMAKE_<LANG>_FLAGS_<CONFIG>"
msgstr "CMAKE_<语言>_FLAGS_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG.rst:4
msgid ""
"Flags for language ``<LANG>`` when building for the ``<CONFIG>`` "
"configuration."
msgstr "为``<CONFIG>``配置构建时语言``<LANG>``的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG.rst:6
msgid ""
"The flags in this variable will be passed to the compiler after those in "
"the :variable:`CMAKE_<LANG>_FLAGS` variable, but before flags added by the"
" :command:`add_compile_options` or :command:`target_compile_options` "
"commands."
msgstr ""
"此变量中的标志将在 :variable:`CMAKE_<LANG>_FLAGS` 变量中的标志之后但在 "
":command:`add_compile_options` 或 :command:`target_compile_options` "
"命令添加的标志之前传递给编译器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT"
msgstr "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` cache"
" entry the first time a build tree is configured for language ``<LANG>``. "
"This variable is meant to be set by a :variable:`toolchain file "
"<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to the value"
" based on the environment and target platform."
msgstr ""
"用于初始化 :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` 缓存条目的值，这是第一次为语言 ``<LANG>`` "
"配置构建树。此变量旨在由 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` 设置。 CMake "
"可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_CONFIG_INIT.rst:12
msgid "See also :variable:`CMAKE_<LANG>_FLAGS_INIT`."
msgstr "另见 :variable:`CMAKE_<LANG>_FLAGS_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_DEBUG.rst:2
msgid "CMAKE_<LANG>_FLAGS_DEBUG"
msgstr "CMAKE_<LANG>_FLAGS_DEBUG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_DEBUG.rst:4
msgid ""
"This variable is the ``Debug`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG> 变量的“Debug”变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_DEBUG_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_DEBUG_INIT"
msgstr "CMAKE_<LANG>_FLAGS_DEBUG_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_DEBUG_INIT.rst:6
msgid ""
"This variable is the ``Debug`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 变量的“Debug”变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_INIT"
msgstr "CMAKE_<LANG>_FLAGS_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_<LANG>_FLAGS` cache entry "
"the first time a build tree is configured for language ``<LANG>``. This "
"variable is meant to be set by a :variable:`toolchain file "
"<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to the value"
" based on the environment and target platform.  For example, the contents "
"of a ``xxxFLAGS`` environment variable will be prepended, where ``xxx`` "
"will be language-specific but not necessarily the same as ``<LANG>`` (e.g."
" :envvar:`CXXFLAGS` for ``CXX``, :envvar:`FFLAGS` for ``Fortran``, and so "
"on). This value is a command-line string fragment. Therefore, multiple "
"options should be separated by spaces, and options with spaces should be "
"quoted."
msgstr ""
"第一次为语言 ``<LANG>`` 配置构建树时，用于初始化 CMAKE_<LANG>_FLAGS 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。例如，``xxxFLAGS`` "
"环境变量的内容将被添加到前面，其中 ``xxx`` 将是特定于语言的，但不一定与 ``<LANG>`` "
"相同（例如:envvar:`CXXFLAGS`对于 ``CXX``， :envvar:`FFLAGS` 用于 "
"``Fortran``，等等）。该值是一个命令行字符串片段。因此，多个选项要用空格隔开，带空格的选项要用引号引起来。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_INIT.rst:18
msgid ""
"See also the configuration-specific "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable."
msgstr "另请参阅特定于配置的 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL.rst:2
msgid "CMAKE_<LANG>_FLAGS_MINSIZEREL"
msgstr "CMAKE_<语言>_FLAGS_MINSIZEREL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL.rst:4
msgid ""
"This variable is the ``MinSizeRel`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG> 变量的 MinSizeRel 变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT"
msgstr "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_MINSIZEREL_INIT.rst:6
msgid ""
"This variable is the ``MinSizeRel`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 变量的 MinSizeRel 变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELEASE.rst:2
msgid "CMAKE_<LANG>_FLAGS_RELEASE"
msgstr "CMAKE_<语言>_FLAGS_RELEASE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELEASE.rst:4
msgid ""
"This variable is the ``Release`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG> 变量的“Release”变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELEASE_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_RELEASE_INIT"
msgstr "CMAKE_<语言>_FLAGS_RELEASE_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELEASE_INIT.rst:6
msgid ""
"This variable is the ``Release`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 变量的“Release”变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO.rst:2
msgid "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO"
msgstr "CMAKE_<语言>_FLAGS_RELWITHDEBINFO"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO.rst:4
msgid ""
"This variable is the ``RelWithDebInfo`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG> 变量的 ``RelWithDebInfo`` 变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT.rst:2
msgid "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT"
msgstr "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_FLAGS_RELWITHDEBINFO_INIT.rst:6
msgid ""
"This variable is the ``RelWithDebInfo`` variant of the "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>_INIT` variable."
msgstr "此变量是 CMAKE_<LANG>_FLAGS_<CONFIG>_INIT 变量的“RelWithDebInfo”变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IGNORE_EXTENSIONS.rst:2
msgid "CMAKE_<LANG>_IGNORE_EXTENSIONS"
msgstr "CMAKE_<LANG>_IGNORE_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IGNORE_EXTENSIONS.rst:4
msgid "File extensions that should be ignored by the build."
msgstr "构建应忽略的文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IGNORE_EXTENSIONS.rst:6
msgid ""
"This is a list of file extensions that may be part of a project for a "
"given language but are not compiled."
msgstr "这是一个文件扩展名列表，这些文件扩展名可能是给定语言的项目的一部分，但未编译。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.rst:2
msgid "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES"
msgstr "CMAKE_<语言>_IMPLICIT_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.rst:4
msgid "Directories implicitly searched by the compiler for header files."
msgstr "编译器隐式搜索头文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.rst:6
msgid ""
"CMake does not explicitly specify these directories on compiler command "
"lines for language ``<LANG>``.  This prevents system include directories "
"from being treated as user include directories on some compilers, which is"
" important for ``C``, ``CXX``, and ``CUDA`` to avoid overriding standard "
"library headers."
msgstr ""
"CMake "
"没有在语言“<LANG>”的编译器命令行上明确指定这些目录。这可以防止系统包含目录在某些编译器上被视为用户包含目录，这对于“C”、“CXX”和“CUDA”以避免覆盖标准库头文件很重要。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_INCLUDE_DIRECTORIES.rst:12
msgid ""
"This value is not used for ``Fortran`` because it has no standard library "
"headers and some compilers do not search their implicit include "
"directories for module ``.mod`` files."
msgstr "此值不用于“Fortran”，因为它没有标准库标头，并且某些编译器不会在其隐式包含目录中搜索模块“.mod”文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:2
msgid "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES"
msgstr "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:4
msgid "Implicit linker search path detected for language ``<LANG>``."
msgstr "检测到语言“<LANG>”的隐式链接器搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:6
msgid ""
"Compilers typically pass directories containing language runtime libraries"
" and default library search paths when they invoke a linker. These paths "
"are implicit linker search directories for the compiler's language.  For "
"each language enabled by the :command:`project` or "
":command:`enable_language` command, CMake automatically detects these "
"directories and reports the results in this variable."
msgstr ""
"编译器在调用链接器时通常会传递包含语言运行时库和默认库搜索路径的目录。这些路径是编译器语言的隐式链接器搜索目录。对于 "
":command:`project` 或 :command:`enable_language` 命令启用的每种语言，CMake "
"会自动检测这些目录并在此变量中报告结果。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:13
msgid ""
"When linking to a static library, CMake adds the implicit link directories"
" from this variable for each language used in the static library (except "
"the language whose compiler is used to drive linking).  In the case of an "
"imported static library, the :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`"
" target property lists the languages whose implicit link information is "
"needed.  If any of the languages is not enabled, its value for the "
"``CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES`` variable may instead be "
"provided by the project.  Or, a :variable:`toolchain file "
"<CMAKE_TOOLCHAIN_FILE>` may set the variable to a value known for the "
"specified toolchain.  It will either be overridden when the language is "
"enabled, or used as a fallback."
msgstr ""
"链接到静态库时，CMake "
"会从该变量为静态库中使用的每种语言添加隐式链接目录（除了其编译器用于驱动链接的语言）。在导入静态库的情况下， :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`"
" 目标属性列出了需要其隐式链接信息的语言。如果任何一种语言未启用，其 CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES "
"变量的值可能由项目提供。或者，一个 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` "
"可以将变量设置为指定工具链已知的值。它将在启用语言时被覆盖，或用作后备。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:24
msgid ""
"Some toolchains read implicit directories from an environment variable "
"such as ``LIBRARY_PATH``.  If using such an environment variable, keep its"
" value consistent when operating in a given build tree because CMake saves"
" the value detected when first creating a build tree."
msgstr ""
"一些工具链从环境变量中读取隐式目录，例如 ``LIBRARY_PATH``。如果使用这样的环境变量，请在给定构建树中操作时保持其值一致，因为 "
"CMake 会保存首次创建构建树时检测到的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:29
msgid ""
"If policy :policy:`CMP0060` is not set to ``NEW``, then when a library in "
"one of these directories is given by full path to "
":command:`target_link_libraries` CMake will generate the ``-l<name>`` form"
" on link lines for historical purposes."
msgstr ""
"如果策略 :policy:`CMP0060` 未设置为 ``NEW``，则当这些目录之一中的库由 "
":command:`target_link_libraries` 的完整路径给出时，CMake 将生成 ``-l<name> `` "
"出于历史目的在链接线上形成。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_DIRECTORIES.rst:34
msgid ""
"See also the :variable:`CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES` variable."
msgstr "另请参阅 :variable:`CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.rst:2
msgid "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES"
msgstr "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.rst:4
msgid ""
"Implicit linker framework search path detected for language ``<LANG>``."
msgstr "检测到语言“<LANG>”的隐式链接器框架搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES.rst:6
msgid ""
"These paths are implicit linker framework search directories for the "
"compiler's language.  CMake automatically detects these directories for "
"each language and reports the results in this variable."
msgstr "这些路径是编译器语言的隐式链接器框架搜索目录。 CMake 会自动检测每种语言的这些目录，并在此变量中报告结果。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst:2
msgid "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES"
msgstr "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst:4
msgid "Implicit link libraries and flags detected for language ``<LANG>``."
msgstr "检测到语言“<LANG>”的隐式链接库和标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst:6
msgid ""
"Compilers typically pass language runtime library names and other flags "
"when they invoke a linker.  These flags are implicit link options for the "
"compiler's language.  For each language enabled by the :command:`project` "
"or :command:`enable_language` command, CMake automatically detects these "
"libraries and flags and reports the results in this variable."
msgstr ""
"编译器通常在调用链接器时传递语言运行时库名称和其他标志。这些标志是编译器语言的隐式链接选项。对于 :command:`project` 或 "
":command:`enable_language` 命令启用的每种语言，CMake 会自动检测这些库和标志，并在此变量中报告结果。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst:13
msgid ""
"When linking to a static library, CMake adds the implicit link libraries "
"and flags from this variable for each language used in the static library "
"(except the language whose compiler is used to drive linking).  In the "
"case of an imported static library, the "
":prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES` target property lists the "
"languages whose implicit link information is needed.  If any of the "
"languages is not enabled, its value for the "
"``CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES`` variable may instead be provided "
"by the project.  Or, a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>` "
"may set the variable to a value known for the specified toolchain.  It "
"will either be overridden when the language is enabled, or used as a "
"fallback."
msgstr ""
"当链接到静态库时，CMake "
"为静态库中使用的每种语言添加隐式链接库和来自该变量的标志（除了其编译器用于驱动链接的语言）。在导入静态库的情况下， :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`"
" 目标属性列出了需要其隐式链接信息的语言。如果任何一种语言未启用，其 CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES "
"变量的值可能由项目提供。或者，一个 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` "
"可以将变量设置为指定工具链已知的值。它将在启用语言时被覆盖，或用作后备。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_IMPLICIT_LINK_LIBRARIES.rst:24
msgid ""
"See also the :variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES` variable."
msgstr "另请参阅 :variable:`CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE.rst:2
msgid "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE"
msgstr "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_INCLUDE_WHAT_YOU_USE.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` target property."
" This variable is used to initialize the property on each target as it is "
"created.  This is done only when ``<LANG>`` is ``C`` or ``CXX``."
msgstr ""
":prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。仅当 "
"``<LANG>`` 为 ``C`` 或 ``CXX`` 时才会这样做。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.rst:2
msgid "CMAKE_<LANG>_LIBRARY_ARCHITECTURE"
msgstr "CMAKE_<语言>_LIBRARY_ARCHITECTURE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.rst:4
msgid "Target architecture library directory name detected for ``<LANG>``."
msgstr "检测到“<LANG>”的目标体系结构库目录名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LIBRARY_ARCHITECTURE.rst:6
msgid ""
"If the ``<LANG>`` compiler passes to the linker an architecture-specific "
"system library search directory such as ``<prefix>/lib/<arch>`` this "
"variable contains the ``<arch>`` name if/as detected by CMake."
msgstr ""
"如果``<LANG>`` 编译器传递给链接器一个特定于体系结构的系统库搜索目录，例如``<prefix>/lib/<arch>`` "
"这个变量包含``<arch>`` 名称如果/ 由 CMake 检测到。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_LAUNCHER.rst:2
msgid "CMAKE_<LANG>_LINKER_LAUNCHER"
msgstr "CMAKE_<LANG>_LINKER_LAUNCHER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_LAUNCHER.rst:6
msgid ""
"Default value for :prop_tgt:`<LANG>_LINKER_LAUNCHER` target property. This"
" variable is used to initialize the property on each target as it is "
"created. This is done only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC``, or"
" ``OBJCXX``."
msgstr ""
":prop_tgt:`<LANG>_LINKER_LAUNCHER` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。仅当 "
"``<LANG>`` 是 ``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时才会这样做。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_LAUNCHER.rst:10
msgid ""
"This variable is initialized to the :envvar:`CMAKE_<LANG>_LINKER_LAUNCHER`"
" environment variable if it is set."
msgstr "如果已设置，此变量将初始化为 :envvar:`CMAKE_<LANG>_LINKER_LAUNCHER` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE.rst:2
msgid "CMAKE_<LANG>_LINKER_PREFERENCE"
msgstr "CMAKE_<LANG>_LINKER_PREFERENCE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE.rst:6
msgid "Preference value for linker language selection."
msgstr "链接器语言选择的首选项值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE.rst:8
msgid ""
"The \"linker language\" for executable, shared library, and module targets"
" is the language whose compiler will invoke the linker.  The "
":prop_tgt:`LINKER_LANGUAGE` target property sets the language explicitly. "
"Otherwise, the linker language is that whose linker preference value is "
"highest among languages compiled and linked into the target.  See also the"
" :variable:`CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES` variable."
msgstr ""
"可执行文件、共享库和模块目标的“链接器语言”是其编译器将调用链接器的语言。 :prop_tgt:`LINKER_LANGUAGE` "
"目标属性明确设置语言。否则，链接器语言是在编译并链接到目标的语言中其链接器偏好值最高的语言。另请参阅 :variable:`CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES`"
" 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.rst:2
msgid "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES"
msgstr "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.rst:6
msgid ""
"True if :variable:`CMAKE_<LANG>_LINKER_PREFERENCE` propagates across "
"targets."
msgstr "如果 CMAKE_<LANG>_LINKER_PREFERENCE 跨目标传播，则为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_PREFERENCE_PROPAGATES.rst:8
msgid ""
"This is used when CMake selects a linker language for a target. Languages "
"compiled directly into the target are always considered.  A language "
"compiled into static libraries linked by the target is considered if this "
"variable is true."
msgstr "这在 CMake 为目标选择链接器语言时使用。始终考虑直接编译到目标中的语言。如果此变量为真，则考虑将语言编译成由目标链接的静态库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:2
msgid "CMAKE_<LANG>_LINKER_WRAPPER_FLAG"
msgstr "CMAKE_<LANG>_LINKER_WRAPPER_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:6
msgid ""
"Defines the syntax of compiler driver option to pass options to the linker"
" tool. It will be used to translate the ``LINKER:`` prefix in the link "
"options (see :command:`add_link_options` and "
":command:`target_link_options`)."
msgstr ""
"定义编译器驱动程序选项的语法以将选项传递给链接器工具。它将用于翻译链接选项中的 ``LINKER:`` 前缀（参见 "
":command:`add_link_options` 和 :command:`target_link_options`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:10
msgid ""
"This variable holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of tokens. If a space (i.e. \" \") is specified as last token, "
"flag and ``LINKER:`` arguments will be specified as separate arguments to "
"the compiler driver. The :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` "
"variable can be specified to manage concatenation of arguments."
msgstr ""
"此变量包含:ref:`分号分隔的标记列表 <CMake Language "
"Lists>`。如果将空格（即“”）指定为最后一个标记，则标志和``LINKER：``参数将被指定为编译器驱动程序的单独参数。可以指定 "
":variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` 变量来管理参数的串联。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:16
msgid "For example, for ``Clang`` we have:"
msgstr "例如，对于 ``Clang`` 我们有："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:22
msgid ""
"Specifying ``\"LINKER:-z,defs\"`` will be transformed in ``-Xlinker -z "
"-Xlinker defs``."
msgstr "指定 ``\"LINKER:-z,defs\"`` 将转换为 ``-Xlinker -z -Xlinker defs``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:25
msgid "For ``GNU GCC``:"
msgstr "对于``GNU GCC``："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:32
msgid ""
"Specifying ``\"LINKER:-z,defs\"`` will be transformed in ``-Wl,-z,defs``."
msgstr "指定 ``\"LINKER:-z,defs\"`` 将转换为 ``-Wl,-z,defs``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:34
msgid "And for ``SunPro``:"
msgstr "对于 ``SunPro``："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG.rst:41
msgid ""
"Specifying ``\"LINKER:-z,defs\"`` will be transformed in ``-Qoption ld "
"-z,defs``."
msgstr "指定 ``\"LINKER:-z,defs\"`` 将在 ``-Qoption ld -z,defs`` 中转换。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP.rst:2
msgid "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP"
msgstr "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP.rst:6
msgid ""
"This variable is used with :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` "
"variable to format ``LINKER:`` prefix in the link options (see "
":command:`add_link_options` and :command:`target_link_options`)."
msgstr ""
"此变量与 :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` 变量一起使用以格式化链接选项中的 "
"``LINKER:`` 前缀（参见:command:`add_link_options` 和 "
":command:`target_link_options`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINKER_WRAPPER_FLAG_SEP.rst:10
msgid ""
"When specified, arguments of the ``LINKER:`` prefix will be concatenated "
"using this value as separator."
msgstr "指定后，“LINKER:”前缀的参数将使用此值作为分隔符连接起来。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_EXECUTABLE.rst:2
msgid "CMAKE_<LANG>_LINK_EXECUTABLE"
msgstr "CMAKE_<LANG>_LINK_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_EXECUTABLE.rst:4
msgid "Rule variable to link an executable."
msgstr "链接可执行文件的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_EXECUTABLE.rst:6
msgid "Rule variable to link an executable for the given language."
msgstr "用于链接给定语言的可执行文件的规则变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE.rst:2
msgid "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>"
msgstr "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE.rst:6
msgid ""
"This variable defines how to link a group of libraries for the specified "
"``<FEATURE>`` when a :genex:`LINK_GROUP` generator expression is used and "
"the link language for the target is ``<LANG>``. For this variable to have "
"any effect, the associated "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` variable "
"must be set to true."
msgstr ""
"此变量定义了当使用 :genex:`LINK_GROUP` 生成器表达式并且目标的链接语言为 ``<LANG>`` 时如何为指定的 "
"``<FEATURE>`` 链接一组库。要使此变量生效，必须将关联的 "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` 变量设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE.rst:13
msgid ""
"The :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variable should be "
"defined instead for features that are independent of the link language."
msgstr "应该为独立于链接语言的功能定义 CMAKE_LINK_GROUP_USING_<FEATURE> 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:1
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:1
msgid ""
"Feature names are case-sensitive and may only contain letters, numbers and"
" underscores.  Feature names defined in all uppercase are reserved for "
"CMake's own built-in features (see `Predefined Features`_ further below)."
msgstr ""
"功能名称区分大小写，并且只能包含字母、数字和下划线。以全大写形式定义的功能名称保留给 CMake 自己的内置功能（请参阅下面的“预定义功能”）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:7
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:7
msgid "Feature Definitions"
msgstr "特征定义"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:9
msgid ""
"A group feature definition is a list that contains exactly two elements:"
msgstr "组特征定义是一个包含两个元素的列表："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:15
msgid ""
"On the linker command line, ``<PREFIX>`` will precede the list of "
"libraries in the group and ``<SUFFIX>`` will follow after."
msgstr "在链接器命令行上，``<PREFIX>`` 将在组中的库列表之前，``<SUFFIX>`` 将跟在后面。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:18
msgid ""
"For the elements of this variable, the ``LINKER:`` prefix can be used."
msgstr "对于这个变量的元素，可以使用 ``LINKER:`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:1
msgid ""
"To pass options to the linker tool, each compiler driver has its own "
"syntax. The ``LINKER:`` prefix and ``,`` separator can be used to specify,"
" in a portable way, options to pass to the linker tool. ``LINKER:`` is "
"replaced by the appropriate driver option and ``,`` by the appropriate "
"driver separator. The driver prefix and driver separator are given by the "
"values of the :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and "
":variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables."
msgstr ""
"为了将选项传递给链接器工具，每个编译器驱动程序都有自己的语法。 ``LINKER:`` 前缀和 ``,`` "
"分隔符可用于以可移植的方式指定要传递给链接器工具的选项。 ``LINKER:`` 被适当的驱动程序选项和 ``,`` "
"替换为适当的驱动程序分隔符。驱动程序前缀和驱动程序分隔符由 :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG`"
" 和 :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` 变量的值给出。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:9
msgid ""
"For example, ``\"LINKER:-z,defs\"`` becomes ``-Xlinker -z -Xlinker defs`` "
"for ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``."
msgstr ""
"例如，``\"LINKER:-z,defs\"`` 变成``-Xlinker -z -Xlinker defs`` 对于``Clang`` "
"和``-Wl,-z,defs`` 对于``GNU GCC ``。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:12
msgid ""
"The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix "
"expression."
msgstr "``LINKER:`` 前缀可以指定为 ``SHELL:`` 前缀表达式的一部分。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:15
msgid ""
"The ``LINKER:`` prefix supports, as an alternative syntax, specification "
"of arguments using the ``SHELL:`` prefix and space as separator. The "
"previous example then becomes ``\"LINKER:SHELL:-z defs\"``."
msgstr ""
"作为一种替代语法，``LINKER:`` 前缀支持使用``SHELL:`` "
"前缀和空格作为分隔符的参数规范。前面的例子变成了``\"LINKER:SHELL:-z defs\"``。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:21
msgid ""
"Specifying the ``SHELL:`` prefix anywhere other than at the beginning of "
"the ``LINKER:`` prefix is not supported."
msgstr "不支持在 ``LINKER:`` 前缀以外的任何地方指定 ``SHELL:`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:27
msgid "Solving cross-references between two static libraries"
msgstr "解决两个静态库之间的交叉引用"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:29
msgid ""
"A project may define two or more static libraries which have circular "
"dependencies between them.  In order for the linker to resolve all symbols"
" at link time, it may need to search repeatedly among the libraries until "
"no new undefined references are created.  Different linkers use different "
"syntax for achieving this.  The following example shows how this may be "
"implemented for some linkers.  Note that this is for illustration purposes"
" only. Projects should use the built-in ``RESCAN`` group feature instead "
"(see `Predefined Features`_), which provides a more complete and more "
"robust implementation of this functionality."
msgstr ""
"一个项目可以定义两个或多个静态库，它们之间具有循环依赖关系。为了让链接器在链接时解析所有符号，它可能需要在库中反复搜索，直到没有新的未定义引用被创建。不同的链接器使用不同的语法来实现这一点。以下示例显示了如何为某些链接器实现这一点。请注意，这仅用于说明目的。项目应该改用内置的“RESCAN”组功能（请参阅“预定义功能”），它提供了此功能的更完整和更强大的实现。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:66
msgid ""
"CMake will generate the following linker command line fragments when "
"linking ``lib2``:"
msgstr "CMake 在链接 ``lib2`` 时将生成以下链接器命令行片段："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:69
msgid ""
"``GNU``: ``-Wl,--start-group /path/to/lib1.a -lexternal -Wl,--end-group``"
msgstr ""
"``GNU``：``-Wl,--start-group /path/to/lib1.a -lexternal -Wl,--end-group``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:70
msgid ""
"``SunPro``: ``-Wl,-z,rescan-start /path/to/lib1.a -lexternal "
"-Wl,-z,rescan-end``"
msgstr ""
"``SunPro``: ``-Wl,-z,rescan-start /path/to/lib1.a -lexternal "
"-Wl,-z,rescan-end``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:74
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:146
msgid "Predefined Features"
msgstr "预定义功能"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.txt:76
msgid "The following built-in group features are pre-defined by CMake:"
msgstr "以下内置组功能由 CMake 预定义："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:22
msgid "``RESCAN``"
msgstr "``重新扫描``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:2
msgid ""
"Some linkers are single-pass only.  For such linkers, circular references "
"between libraries typically result in unresolved symbols.  This feature "
"instructs the linker to search the specified static libraries repeatedly "
"until no new undefined references are created."
msgstr ""
"一些链接器仅是单程的。对于此类链接器，库之间的循环引用通常会导致无法解析的符号。此功能指示链接器重复搜索指定的静态库，直到没有创建新的未定义引用为止。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:7
msgid ""
"Normally, a static library is searched only once in the order that it is "
"specified on the command line.  If a symbol in that library is needed to "
"resolve an undefined symbol referred to by an object in a library that "
"appears later on the command line, the linker would not be able to resolve"
" that reference.  By grouping the static libraries with the ``RESCAN`` "
"feature, they will all be searched repeatedly until all possible "
"references are resolved.  This will use linker options like ``--start-"
"group`` and ``--end-group``, or on SunOS, ``-z rescan-start`` and ``-z "
"rescan-end``."
msgstr ""
"通常，静态库只会按照在命令行中指定的顺序搜索一次。如果需要该库中的符号来解析由稍后出现在命令行中的库中的对象引用的未定义符号，则链接器将无法解析该引用。通过使用"
" ``RESCAN`` 特性对静态库进行分组，它们将被重复搜索，直到所有可能的引用都被解析。这将使用链接器选项，如``--start-group``"
" 和``--end-group``，或在 SunOS 上，``-z rescan-start`` 和``-z rescan-end``。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:16
msgid ""
"Using this feature has a significant performance cost. It is best to use "
"it only when there are unavoidable circular references between two or more"
" static libraries."
msgstr "使用此功能会产生显着的性能成本。最好只在两个或多个静态库之间存在不可避免的循环引用时才使用它。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_GROUP_PREDEFINED_FEATURES.txt:20
msgid ""
"This feature is available when using toolchains that target Linux, BSD, "
"and SunOS.  It can also be used when targeting Windows platforms if the "
"GNU toolchain is used."
msgstr ""
"当使用面向 Linux、BSD 和 SunOS 的工具链时，此功能可用。如果使用 GNU 工具链，它也可以在针对 Windows 平台时使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:2
msgid "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED"
msgstr "CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:6
msgid ""
"This variable specifies whether the ``<FEATURE>`` is supported for the "
"link language ``<LANG>``.  If this variable is true, then the "
"``<FEATURE>`` must be defined by "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>`, and the more generic "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` and "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variables are not used."
msgstr ""
"此变量指定链接语言“<LANG>”是否支持“<FEATURE>”。如果此变量为真，则 ``<FEATURE>`` 必须由 "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` 和更通用的 "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` 和 :variable "
"定义 :`CMAKE_LINK_GROUP_USING_<FEATURE>` 变量未被使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:12
msgid ""
"If ``CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`` is false or is "
"not set, then the :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` "
"variable will determine whether ``<FEATURE>`` is deemed to be supported."
msgstr ""
"如果 ``CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED`` 为 false 或未设置，则 "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` 变量将确定 ``<FEATURE>``"
" 是否被视为受支持。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FILE_FLAG.rst:2
msgid "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG"
msgstr "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FILE_FLAG.rst:6
msgid ""
"Language-specific flag to be used to link a library specified by a path to"
" its file."
msgstr "特定于语言的标志，用于将路径指定的库链接到它的文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FILE_FLAG.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FILE_FLAG.rst:6
msgid ""
"The flag will be used before a library file path is given to the linker.  "
"This is needed only on very few platforms."
msgstr "在将库文件路径提供给链接器之前，将使用该标志。这仅在极少数平台上需要。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FLAG.rst:2
msgid "CMAKE_<LANG>_LINK_LIBRARY_FLAG"
msgstr "CMAKE_<LANG>_LINK_LIBRARY_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FLAG.rst:6
msgid ""
"Flag to be used to link a library into a shared library or executable."
msgstr "用于将库链接到共享库或可执行文件的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_FLAG.rst:8
msgid ""
"This flag will be used to specify a library to link to a shared library or"
" an executable for the specific language.  On most compilers this is "
"``-l``."
msgstr "此标志将用于指定一个库以链接到共享库或特定语言的可执行文件。在大多数编译器上，这是“-l”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_SUFFIX.rst:2
msgid "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX"
msgstr "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_SUFFIX.rst:6
msgid "Language-specific suffix for libraries that you link to."
msgstr "您链接到的库的特定语言后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_SUFFIX.rst:8
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of a library filename, ``.lib`` on Windows."
msgstr "用于库文件名结尾的后缀，在 Windows 上为 ``.lib``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE.rst:2
msgid "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>"
msgstr "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE.rst:6
msgid ""
"This variable defines how to link a library or framework for the specified"
" ``<FEATURE>`` when a :genex:`LINK_LIBRARY` generator expression is used "
"and the link language for the target is ``<LANG>``. For this variable to "
"have any effect, the associated "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` variable "
"must be set to true."
msgstr ""
"当使用 LINK_LIBRARY 生成器表达式并且目标的链接语言为 ``<LANG>`` 时，此变量定义如何为指定的 ``<FEATURE>`` "
"链接库或框架。要使此变量生效，必须将关联的 "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` 变量设置为 "
"true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE.rst:13
msgid ""
"The :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variable should be "
"defined instead for features that are independent of the link language."
msgstr ":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` 变量应该定义为独立于链接语言的功能。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:9
msgid ""
"A library feature definition is a list that contains one or three "
"elements:"
msgstr "库特征定义是一个包含一个或三个元素的列表："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:15
msgid ""
"When ``<PREFIX>`` and ``<SUFFIX>`` are specified, they precede and follow "
"respectively the whole list of libraries specified in the "
":genex:`LINK_LIBRARY` expression, not each library item individually. "
"There is no guarantee that the list of specified libraries will be kept "
"grouped together though, so the ``<PREFIX>`` and ``<SUFFIX>`` may appear "
"more than once if the library list is reorganized by CMake to satisfy "
"other constraints.  This means constructs like ``--start-group`` and "
"``--end-group``, as supported by the GNU ``ld`` linker, cannot be used in "
"this way.  The :genex:`LINK_GROUP` generator expression should be used "
"instead for such constructs."
msgstr ""
"当指定 ``<PREFIX>`` 和 ``<SUFFIX>`` 时，它们分别位于 :genex:`LINK_LIBRARY` "
"表达式中指定的整个库列表之前和之后，而不是单独的每个库项目。但是，不能保证指定库的列表将保持分组在一起，因此如果库列表由 CMake "
"重新组织以满足其他要求，``<PREFIX>`` 和``<SUFFIX>`` 可能会出现不止一次约束。这意味着 GNU ``ld`` "
"链接器支持的``--start-group`` 和``--end-group`` 等构造不能以这种方式使用。 :genex:`LINK_GROUP`"
" 生成器表达式应该用于此类构造。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:26
msgid ""
"``<LIBRARY_EXPRESSION>`` is used to specify the pattern for constructing "
"the corresponding fragment on the linker command line for each library. "
"The following placeholders can be used in the expression:"
msgstr "``<LIBRARY_EXPRESSION>`` 用于指定在链接器命令行上为每个库构造相应片段的模式。表达式中可以使用以下占位符："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:30
msgid ""
"``<LIBRARY>`` is expanded to the full path to the library for CMake "
"targets, or to a platform-specific value based on the item otherwise (the "
"same as ``<LINK_ITEM>`` on Windows, or the library base name for other "
"platforms)."
msgstr ""
"``<LIBRARY>`` 扩展为 CMake 目标库的完整路径，或者扩展为基于项目的平台特定值（与 Windows 上的 "
"``<LINK_ITEM>`` 或库库相同）其他平台的名​​称）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:33
msgid ""
"``<LINK_ITEM>`` is expanded to how the library would normally be linked on"
" the linker command line."
msgstr "``<LINK_ITEM>`` 被扩展为通常如何在链接器命令行上链接库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:35
msgid ""
"``<LIB_ITEM>`` is expanded to the full path to the library for CMake "
"targets, or the item itself exactly as specified in the "
"``<LIBRARY_EXPRESSION>`` otherwise."
msgstr ""
"``<LIB_ITEM>`` 扩展为 CMake 目标库的完整路径，或者完全按照 ``<LIBRARY_EXPRESSION>`` "
"中指定的项目本身展开。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:39
msgid ""
"In addition to the above, it is possible to have one pattern for paths "
"(CMake targets and external libraries specified with file paths) and "
"another for other items specified by name only.  The ``PATH{}`` and "
"``NAME{}`` wrappers can be used to provide the expansion for those two "
"cases, respectively. When wrappers are used, both must be present.  For "
"example:"
msgstr ""
"除了上述之外，还可以有一种模式用于路径（CMake 目标和外部库指定文件路径），另一种模式用于仅通过名称指定的其他项目。 ``PATH{}`` 和 "
"``NAME{}`` 包装器可分别用于为这两种情况提供扩展。使用包装器时，两者都必须存在。例如："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:51
msgid ""
"For all three elements of this variable (``<PREFIX>``, "
"``<LIBRARY_EXPRESSION>``, and ``<SUFFIX>``), the ``LINKER:`` prefix can be"
" used."
msgstr ""
"对于此变量的所有三个元素（``<PREFIX>``、``<LIBRARY_EXPRESSION>`` "
"和``<SUFFIX>``），可以使用``LINKER:`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:61
msgid "Loading a whole static library"
msgstr "加载整个静态库"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:63
msgid ""
"A common need is to prevent the linker from discarding any symbols from a "
"static library.  Different linkers use different syntax for achieving "
"this. The following example shows how this may be implemented for some "
"linkers. Note that this is for illustration purposes only.  Projects "
"should use the built-in ``WHOLE_ARCHIVE`` feature instead (see `Predefined"
" Features`_), which provides a more complete and more robust "
"implementation of this functionality."
msgstr ""
"一个常见的需求是防止链接器丢弃静态库中的任何符号。不同的链接器使用不同的语法来实现这一点。以下示例显示了如何为某些链接器实现这一点。请注意，这仅用于说明目的。项目应该改用内置的“WHOLE_ARCHIVE”功能（请参阅“预定义功能”_），它提供了此功能的更完整和更强大的实现。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:103
msgid "CMake will generate the following link expressions:"
msgstr "CMake 将生成以下链接表达式："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:105
msgid ""
"``AppleClang``: ``-force_load /path/to/lib1.a -force_load libexternal.a``"
msgstr ""
"``Apple Clang``：``-force_load /path/to/lib1.a -force_load lib external.a``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:106
msgid ""
"``GNU``: ``-Wl,--push-state,--whole-archive /path/to/lib1.a -lexternal "
"-Wl,--pop-state``"
msgstr ""
"``GNU``：``-Wl,--push-state,--whole-archive /path/to/lib1.a -lexternal -Wl,"
"--pop-state``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:107
msgid ""
"``MSVC``: ``/WHOLEARCHIVE:/path/to/lib1.lib /WHOLEARCHIVE:external.lib``"
msgstr ""
"``MSVC``: ``/WHOLEARCHIVE:/path/to/lib1.lib /WHOLEARCHIVE:external.lib``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:110
msgid "Linking a library as weak"
msgstr "将库链接为弱"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:112
msgid ""
"On macOS, it is possible to link a library in weak mode (the library and "
"all references are marked as weak imports).  Different flags must be used "
"for a library specified by file path compared to one specified by name. "
"This constraint can be solved using ``PATH{}`` and ``NAME{}`` wrappers. "
"Again, the following example shows how this may be implemented for some "
"linkers, but it is for illustration purposes only.  Projects should use "
"the built-in ``WEAK_FRAMEWORK`` or ``WEAK_LIBRARY`` features instead (see "
"`Predefined Features`_), which provide more complete and more robust "
"implementations of this functionality."
msgstr ""
"在 macOS 上，可以在弱模式下链接库（库和所有引用都标记为弱导入）。与名称指定的库相比，文件路径指定的库必须使用不同的标志。这个约束可以使用 "
"``PATH{}`` 和 ``NAME{}`` 包装器来解决。同样，以下示例显示了如何为某些链接器实现这一点，但它仅用于说明目的。项目应该使用内置的"
" ``WEAK_FRAMEWORK`` 或 ``WEAK_LIBRARY`` 功能（参见 `Predefined "
"Features`_），它们提供了更完整和更强大的功能实现。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:139
msgid ""
"CMake will generate the following linker command line fragment when "
"linking ``main`` using the ``AppleClang`` toolchain:"
msgstr "当使用 AppleClang 工具链链接 main 时，CMake 将生成以下链接器命令行片段："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:142
msgid "``-weak_library /path/to/lib -Xlinker -weak-lexternal``."
msgstr "``-weak_library /path/to/lib -Xlinker -weak-lexternal``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.txt:148
msgid "The following built-in library features are pre-defined by CMake:"
msgstr "以下内置库功能由 CMake 预定义："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:5
msgid "``DEFAULT``"
msgstr "``默认``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:2
msgid ""
"This feature corresponds to standard linking, essentially equivalent to "
"using no feature at all.  It is typically only used with the "
":prop_tgt:`LINK_LIBRARY_OVERRIDE` and "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties."
msgstr ""
"此功能对应于标准链接，本质上相当于根本不使用任何功能。它通常只与 :prop_tgt:`LINK_LIBRARY_OVERRIDE` "
"和 :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` 目标属性一起使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:22
msgid "``WHOLE_ARCHIVE``"
msgstr "``WHOLE_ARCHIVE``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:8
msgid ""
"Force inclusion of all members of a static library.  This feature is only "
"supported for the following platforms, with limitations as noted:"
msgstr "强制包含静态库的所有成员。仅以下平台支持此功能，但有如下限制："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:11
msgid "Linux."
msgstr "Linux。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:12
msgid "All BSD variants."
msgstr "所有 BSD 变体。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:13
msgid "SunOS."
msgstr "太阳操作系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:14
msgid ""
"All Apple variants.  The library must be specified as a CMake target name,"
" a library file name (such as ``libfoo.a``), or a library file path (such "
"as ``/path/to/libfoo.a``).  Due to a limitation of the Apple linker, it "
"cannot be specified as a plain library name like ``foo``, where ``foo`` is"
" not a CMake target."
msgstr ""
"所有 Apple 变体。库必须指定为 CMake 目标名称、库文件名（例如 ``libfoo.a``）或库文件路径（例如 "
"``/path/to/libfoo.a``）。由于 Apple 链接器的限制，它不能被指定为像 ``foo`` 这样的普通库名称，其中 "
"``foo`` 不是 CMake 目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:19
msgid ""
"Windows.  When using a MSVC or MSVC-like toolchain, the MSVC version must "
"be greater than 1900."
msgstr "视窗。使用 MSVC 或类似 MSVC 的工具链时，MSVC 版本必须大于 1900。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:21
msgid "Cygwin."
msgstr "西格温。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:22
msgid "MSYS."
msgstr "系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:65
msgid "``FRAMEWORK``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:25
msgid ""
"This option tells the linker to search for the specified framework using "
"the ``-framework`` linker option.  It can only be used on Apple platforms,"
" and only with a linker that understands the option used (i.e. the linker "
"provided with Xcode, or one compatible with it)."
msgstr ""
"此选项告诉链接器使用“-framework”链接器选项搜索指定的框架。它只能在 Apple 平台上使用，并且只能与理解所用选项的链接器一起使用（即 "
"Xcode 提供的链接器，或与之兼容的链接器）。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:30
msgid ""
"The framework can be specified as a CMake framework target, a bare "
"framework name, or a file path.  If a target is given, that target must "
"have the :prop_tgt:`FRAMEWORK` target property set to true.  For a file "
"path, if it contains a directory part, that directory will be added as a "
"framework search path."
msgstr ""
"框架可以指定为 CMake 框架目标、裸框架名称或文件路径。如果给出了目标，则该目标必须将 :prop_tgt:`FRAMEWORK` "
"目标属性设置为 true。对于文件路径，如果它包含目录部分，则该目录将被添加为框架搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:44
msgid ""
"File paths must conform to one of the following patterns (``*`` is a "
"wildcard, and optional parts are shown as ``[...]``):"
msgstr "文件路径必须符合以下模式之一（``*`` 为通配符，可选部分显示为``[...]``）："

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:47
msgid "``[/path/to/]FwName[.framework]``"
msgstr "``[/path/to/]FwName[.framework]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:48
msgid "``[/path/to/]FwName.framework/FwName[suffix]``"
msgstr "``[/path/to/]FwName.framework/FwName[后缀]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:49
msgid "``[/path/to/]FwName.framework/Versions/*/FwName[suffix]``"
msgstr "``[/path/to/]FwName.framework/Versions/*/FwName[后缀]``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:51
msgid ""
"Note that CMake recognizes and automatically handles framework targets, "
"even without using the :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` expression. "
"The generator expression can still be used with a CMake target if the "
"project wants to be explicit about it, but it is not required to do so. "
"The linker command line may have some differences between using the "
"generator expression or not, but the final result should be the same. On "
"the other hand, if a file path is given, CMake will recognize some paths "
"automatically, but not all cases.  The project may want to use "
":genex:`$<LINK_LIBRARY:FRAMEWORK,...>` for file paths so that the expected"
" behavior is clear."
msgstr ""
"请注意，即使不使用 :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` 表达式，CMake "
"也会识别并自动处理框架目标。如果项目想要对其进行明确说明，生成器表达式仍然可以与 CMake "
"目标一起使用，但这不是必需的。链接器命令行使用与不使用生成器表达式可能会有一些差异，但最终结果应该是一样的。另一方面，如果给定文件路径，CMake "
"会自动识别某些路径，但不是所有情况。该项目可能希望使用 :genex:`$<LINK_LIBRARY:FRAMEWORK,...>` "
"作为文件路径，以便明确预期的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:62
msgid ""
"The :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property as"
" well as the ``suffix`` of the framework library name are now supported by"
" the ``FRAMEWORK`` features."
msgstr ""
"``FRAMEWORK`` 功能现在支持 :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` "
"目标属性以及框架库名称的 ``suffix``。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:71
msgid "``NEEDED_FRAMEWORK``"
msgstr "``NEEDED_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:68
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it forces the linker "
"to link with the framework even if no symbols are used from it.  It uses "
"the ``-needed_framework`` option and has the same linker constraints as "
"``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"功能，除了它强制链接器与框架链接，即使没有使用它的符号。它使用“-needed_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:77
msgid "``REEXPORT_FRAMEWORK``"
msgstr "``REEXPORT_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:74
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it tells the linker "
"that the framework should be available to clients linking to the library "
"being created.  It uses the ``-reexport_framework`` option and has the "
"same linker constraints as ``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"特性，除了它告诉链接器框架应该对链接到正在创建的库的客户端可用。它使用“-reexport_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:83
msgid "``WEAK_FRAMEWORK``"
msgstr "``弱框架``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:80
msgid ""
"This is similar to the ``FRAMEWORK`` feature, except it forces the linker "
"to mark the framework and all references to it as weak imports.  It uses "
"the ``-weak_framework`` option and has the same linker constraints as "
"``FRAMEWORK``."
msgstr ""
"这类似于 ``FRAMEWORK`` "
"特性，除了它强制链接器将框架和所有对它的引用标记为弱导入。它使用“-weak_framework”选项，并具有与“FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:89
msgid "``NEEDED_LIBRARY``"
msgstr "``NEEDED_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:86
msgid ""
"This is similar to the ``NEEDED_FRAMEWORK`` feature, except it is for use "
"with non-framework targets or libraries (Apple platforms only). It uses "
"the ``-needed_library`` or ``-needed-l`` option as appropriate, and has "
"the same linker constraints as ``NEEDED_FRAMEWORK``."
msgstr ""
"这类似于 ``NEEDED_FRAMEWORK`` 功能，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-needed_library”或“-needed-l”选项，并具有与“NEEDED_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:95
msgid "``REEXPORT_LIBRARY``"
msgstr "``REEXPORT_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:92
msgid ""
"This is similar to the ``REEXPORT_FRAMEWORK`` feature,  except it is for "
"use with non-framework targets or libraries (Apple platforms only). It "
"uses the ``-reexport_library`` or ``-reexport-l`` option as appropriate, "
"and has the same linker constraints as ``REEXPORT_FRAMEWORK``."
msgstr ""
"这类似于 REEXPORT_FRAMEWORK 功能，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-reexport_library”或“-reexport-l”选项，并具有与“REEXPORT_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:101
msgid "``WEAK_LIBRARY``"
msgstr "``WEAK_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/LINK_LIBRARY_PREDEFINED_FEATURES.txt:98
msgid ""
"This is similar to the ``WEAK_FRAMEWORK`` feature, except it is for use "
"with non-framework targets or libraries (Apple platforms only). It uses "
"the ``-weak_library`` or ``-weak-l`` option as appropriate, and has the "
"same linker constraints as ``WEAK_FRAMEWORK``."
msgstr ""
"这类似于 ``WEAK_FRAMEWORK`` 特性，除了它用于非框架目标或库（仅限 Apple "
"平台）。它根据需要使用“-weak_library”或“-weak-l”选项，并具有与“WEAK_FRAMEWORK”相同的链接器约束。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:2
msgid "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED"
msgstr "CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:6
msgid ""
"Set to ``TRUE`` if the ``<FEATURE>``, as defined by variable "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>`, is supported for "
"the linker language ``<LANG>``."
msgstr "如果链接器语言“<LANG>”支持由变量定义的“<FEATURE>”，则设置为“TRUE”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:12
msgid ""
"This variable is evaluated before the more generic variable "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED`."
msgstr ""
"此变量在更通用的变量 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"之前进行评估。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG.rst:2
msgid "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG"
msgstr "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG.rst:6
msgid ""
"Linker flag to be used to configure linker so that all specified libraries"
" on the command line will be linked into the target."
msgstr "用于配置链接器的链接器标志，以便命令行上的所有指定库都将链接到目标中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_LINK_WHAT_YOU_USE_FLAG.rst:9
msgid "See also variable :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK`."
msgstr "另见变量 :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_OUTPUT_EXTENSION.rst:2
msgid "CMAKE_<LANG>_OUTPUT_EXTENSION"
msgstr "CMAKE_<语言>_OUTPUT_EXTENSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_OUTPUT_EXTENSION.rst:4
msgid "Extension for the output of a compile for a single file."
msgstr "单个文件编译输出的扩展。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_OUTPUT_EXTENSION.rst:6
msgid ""
"This is the extension for an object file for the given ``<LANG>``.  For "
"example ``.obj`` for C on Windows."
msgstr "这是给定“<LANG>”的目标文件的扩展名。例如 Windows 上的 C 的 ``.obj``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_PLATFORM_ID.rst:2
msgid "CMAKE_<LANG>_PLATFORM_ID"
msgstr "CMAKE_<LANG>_PLATFORM_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_PLATFORM_ID.rst:6
msgid "This is used in determining the platform and is subject to change."
msgstr "这用于确定平台并且可能会发生变化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_ID.rst:2
msgid "CMAKE_<LANG>_SIMULATE_ID"
msgstr "CMAKE_<LANG>_SIMULATE_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_ID.rst:4
msgid "Identification string of the \"simulated\" compiler."
msgstr "“模拟”编译器的标识字符串。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_ID.rst:6
msgid ""
"Some compilers simulate other compilers to serve as drop-in replacements."
"  When CMake detects such a compiler it sets this variable to what would "
"have been the :variable:`CMAKE_<LANG>_COMPILER_ID` for the simulated "
"compiler."
msgstr ""
"一些编译器模拟其他编译器作为直接替代品。当 CMake 检测到这样的编译器时，它会将此变量设置为模拟编译器的 "
":variable:`CMAKE_<LANG>_COMPILER_ID`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_ID.rst:12
msgid ""
"In other words, this variable describes the ABI compatibility of the "
"generated code."
msgstr "换句话说，这个变量描述了生成代码的 ABI 兼容性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_VERSION.rst:2
msgid "CMAKE_<LANG>_SIMULATE_VERSION"
msgstr "CMAKE_<语言>_SIMULATE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_VERSION.rst:4
msgid "Version string of \"simulated\" compiler."
msgstr "“模拟”编译器的版本字符串。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIMULATE_VERSION.rst:6
msgid ""
"Some compilers simulate other compilers to serve as drop-in replacements."
"  When CMake detects such a compiler it sets this variable to what would "
"have been the :variable:`CMAKE_<LANG>_COMPILER_VERSION` for the simulated "
"compiler."
msgstr ""
"一些编译器模拟其他编译器作为直接替代品。当 CMake 检测到这样的编译器时，它会将此变量设置为模拟编译器的 "
":variable:`CMAKE_<LANG>_COMPILER_VERSION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIZEOF_DATA_PTR.rst:2
msgid "CMAKE_<LANG>_SIZEOF_DATA_PTR"
msgstr "CMAKE_<LANG>_SIZEOF_DATA_PTR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIZEOF_DATA_PTR.rst:4
msgid "Size of pointer-to-data types for language ``<LANG>``."
msgstr "语言“<LANG>”的指针数据类型的大小。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SIZEOF_DATA_PTR.rst:6
msgid ""
"This holds the size (in bytes) of pointer-to-data types in the target "
"platform ABI.  It is defined for languages ``C`` and ``CXX`` (C++)."
msgstr "这包含目标平台 ABI 中指向数据类型的指针的大小（以字节为单位）。它是为语言“C”和“CXX”（C++）定义的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.rst:2
msgid "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS"
msgstr "CMAKE_<语言>_SOURCE_FILE_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.rst:4
msgid "Extensions of source files for the given language."
msgstr "给定语言的源文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_SOURCE_FILE_EXTENSIONS.rst:6
msgid "This is the list of extensions for a given language's source files."
msgstr "这是给定语言的源文件的扩展名列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:2
msgid "CMAKE_<LANG>_STANDARD"
msgstr "CMAKE_<语言>_标准"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:6
msgid ":variable:`CMAKE_C_STANDARD`"
msgstr ":variable:`CMAKE_C_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:7
msgid ":variable:`CMAKE_CXX_STANDARD`"
msgstr ":variable:`CMAKE_CXX_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:8
msgid ":variable:`CMAKE_CUDA_STANDARD`"
msgstr ":variable:`CMAKE_CUDA_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:9
msgid ":variable:`CMAKE_HIP_STANDARD`"
msgstr ":variable:`CMAKE_HIP_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:10
msgid ":variable:`CMAKE_OBJC_STANDARD`"
msgstr ":variable:`CMAKE_OBJC_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:11
msgid ":variable:`CMAKE_OBJCXX_STANDARD`"
msgstr ":variable:`CMAKE_OBJCXX_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD.rst:13
msgid ""
"Default values for :prop_tgt:`<LANG>_STANDARD` target properties if set "
"when a target is created."
msgstr ":prop_tgt:`<LANG>_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_DEFAULT.rst:2
msgid "CMAKE_<LANG>_STANDARD_DEFAULT"
msgstr "CMAKE_<语言>_STANDARD_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_DEFAULT.rst:6
msgid ""
"The compiler's default standard for the language ``<LANG>``. Empty if the "
"compiler has no conception of standard levels."
msgstr "编译器对语言“<LANG>”的默认标准。如果编译器没有标准级别的概念，则为空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES.rst:2
msgid "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES"
msgstr "CMAKE_<语言>_STANDARD_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES.rst:6
msgid ""
"Include directories to be used for every source file compiled with the "
"``<LANG>`` compiler.  This is meant for specification of system include "
"directories needed by the language for the current platform. The "
"directories always appear at the end of the include path passed to the "
"compiler."
msgstr ""
"包括用于每个使用 ``<LANG>`` "
"编译器编译的源文件的目录。这意味着系统规范包括当前平台语言所需的目录。这些目录总是出现在传递给编译器的包含路径的末尾。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_LIBRARIES.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:10
msgid ""
"This variable should not be set by project code.  It is meant to be set by"
" CMake's platform information modules for the current toolchain, or by a "
"toolchain file when used with :variable:`CMAKE_TOOLCHAIN_FILE`."
msgstr ""
"该变量不应由项目代码设置。它意味着由 CMake 的平台信息模块为当前工具链设置，或者在与 "
":variable:`CMAKE_TOOLCHAIN_FILE` 一起使用时由工具链文件设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_INCLUDE_DIRECTORIES.rst:16
msgid "See also :variable:`CMAKE_<LANG>_STANDARD_LIBRARIES`."
msgstr "另见 :variable:`CMAKE_<LANG>_STANDARD_LIBRARIES`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_LIBRARIES.rst:2
msgid "CMAKE_<LANG>_STANDARD_LIBRARIES"
msgstr "CMAKE_<语言>_STANDARD_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_LIBRARIES.rst:6
msgid ""
"Libraries linked into every executable and shared library linked for "
"language ``<LANG>``.  This is meant for specification of system libraries "
"needed by the language for the current platform."
msgstr "链接到每个可执行文件的库和为语言“<LANG>”链接的共享库。这是为了规范当前平台的语言所需的系统库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_LIBRARIES.rst:14
msgid "See also :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES`."
msgstr "另见 :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:2
msgid "CMAKE_<LANG>_STANDARD_REQUIRED"
msgstr "CMAKE_<语言>_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:6
msgid ":variable:`CMAKE_C_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_C_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:7
msgid ":variable:`CMAKE_CXX_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_CXX_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:8
msgid ":variable:`CMAKE_CUDA_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_CUDA_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:9
msgid ":variable:`CMAKE_HIP_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_HIP_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:10
msgid ":variable:`CMAKE_OBJC_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_OBJC_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:11
msgid ":variable:`CMAKE_OBJCXX_STANDARD_REQUIRED`"
msgstr ":variable:`CMAKE_OBJCXX_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_STANDARD_REQUIRED.rst:13
msgid ""
"Default values for :prop_tgt:`<LANG>_STANDARD_REQUIRED` target properties "
"if set when a target is created."
msgstr ":prop_tgt:`<LANG>_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_VISIBILITY_PRESET.rst:2
msgid "CMAKE_<LANG>_VISIBILITY_PRESET"
msgstr "CMAKE_<语言>_VISIBILITY_PRESET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LANG_VISIBILITY_PRESET.rst:4
msgid ""
"Default value for the :prop_tgt:`<LANG>_VISIBILITY_PRESET` target property"
" when a target is created."
msgstr "创建目标时 :prop_tgt:`<LANG>_VISIBILITY_PRESET` 目标属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE.rst:2
msgid "CMAKE_LIBRARY_ARCHITECTURE"
msgstr "CMAKE_LIBRARY_ARCHITECTURE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE.rst:4
msgid "Target architecture library directory name, if detected."
msgstr "目标体系结构库目录名称（如果检测到）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE.rst:6
msgid ""
"This is the value of :variable:`CMAKE_<LANG>_LIBRARY_ARCHITECTURE` as "
"detected for one of the enabled languages."
msgstr "这是 CMAKE_<LANG>_LIBRARY_ARCHITECTURE 为其中一种启用语言检测到的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.rst:2
msgid "CMAKE_LIBRARY_ARCHITECTURE_REGEX"
msgstr "CMAKE_LIBRARY_ARCHITECTURE_REGEX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.rst:4
msgid "Regex matching possible target architecture library directory names."
msgstr "正则表达式匹配可能的目标体系结构库目录名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.rst:6
msgid ""
"This is used to detect :variable:`CMAKE_<LANG>_LIBRARY_ARCHITECTURE` from "
"the implicit linker search path by matching the ``<arch>`` name."
msgstr ""
"这用于通过匹配 ``<arch>`` 名称从隐式链接器搜索路径中检测 :variable:`CMAKE_<LANG>_LIBRARY_ARCHITECTURE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.rst:2
msgid "CMAKE_LIBRARY_OUTPUT_DIRECTORY"
msgstr "CMAKE_LIBRARY_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.rst:4
msgid ""
"Where to put all the :ref:`LIBRARY <Library Output Artifacts>` target "
"files when built."
msgstr "构建时放置所有 :ref:`LIBRARY <Library Output Artifacts>` 目标文件的位置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY.rst:7
msgid ""
"This variable is used to initialize the "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` property on all the targets.  See "
"that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:6
msgid ""
"Where to put all the :ref:`LIBRARY <Library Output Artifacts>` target "
"files when built for a specific configuration."
msgstr "为特定配置构建时，将所有 :ref:`LIBRARY <Library Output Artifacts>` 目标文件放在哪里。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets."
" See that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` "
"属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_PATH.rst:2
msgid "CMAKE_LIBRARY_PATH"
msgstr "CMAKE_LIBRARY_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_library` command.  By "
"default it is empty, it is intended to be set by the project.  See also "
":variable:`CMAKE_SYSTEM_LIBRARY_PATH` and :variable:`CMAKE_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_library` "
"命令。默认为空，由项目设置。另见 :variable:`CMAKE_SYSTEM_LIBRARY_PATH` 和 :variable:`CMAKE_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_PATH_FLAG.rst:2
msgid "CMAKE_LIBRARY_PATH_FLAG"
msgstr "CMAKE_LIBRARY_PATH_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_PATH_FLAG.rst:4
msgid "The flag to be used to add a library search path to a compiler."
msgstr "用于将库搜索路径添加到编译器的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LIBRARY_PATH_FLAG.rst:6
msgid ""
"The flag will be used to specify a library directory to the compiler. On "
"most compilers this is ``-L``."
msgstr "该标志将用于向编译器指定一个库目录。在大多数编译器上，这是“-L”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEF_FILE_FLAG.rst:2
msgid "CMAKE_LINK_DEF_FILE_FLAG"
msgstr "CMAKE_LINK_DEF_FILE_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEF_FILE_FLAG.rst:4
msgid "Linker flag to be used to specify a ``.def`` file for dll creation."
msgstr "用于指定用于创建 dll 的 ``.def`` 文件的链接器标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEF_FILE_FLAG.rst:6
msgid ""
"The flag will be used to add a ``.def`` file when creating a dll on "
"Windows; this is only defined on Windows."
msgstr "在 Windows 上创建 dll 时，该标志将用于添加 ``.def`` 文件；这仅在 Windows 上定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEPENDS_NO_SHARED.rst:2
msgid "CMAKE_LINK_DEPENDS_NO_SHARED"
msgstr "CMAKE_LINK_DEPENDS_NO_SHARED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEPENDS_NO_SHARED.rst:4
msgid "Whether to skip link dependencies on shared library files."
msgstr "是否跳过对共享库文件的链接依赖。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DEPENDS_NO_SHARED.rst:6
msgid ""
"This variable initializes the :prop_tgt:`LINK_DEPENDS_NO_SHARED` property "
"on targets when they are created.  See that target property for additional"
" information."
msgstr "此变量会在创建目标时初始化目标上的 LINK_DEPENDS_NO_SHARED 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DIRECTORIES_BEFORE.rst:2
msgid "CMAKE_LINK_DIRECTORIES_BEFORE"
msgstr "CMAKE_LINK_DIRECTORIES_BEFORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DIRECTORIES_BEFORE.rst:6
msgid ""
"Whether to append or prepend directories by default in "
":command:`link_directories`."
msgstr "是否在 :command:`link_directories` 中默认附加或前置目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_DIRECTORIES_BEFORE.rst:9
msgid ""
"This variable affects the default behavior of the "
":command:`link_directories` command.  Setting this variable to ``ON`` is "
"equivalent to using the ``BEFORE`` option in all uses of that command."
msgstr ""
"此变量影响 :command:`link_directories` 命令的默认行为。将此变量设置为 ``ON`` 等同于在该命令的所有使用中使用 "
"``BEFORE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.rst:2
msgid "CMAKE_LINK_GROUP_USING_<FEATURE>"
msgstr "CMAKE_LINK_GROUP_USING_<FEATURE>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.rst:6
msgid ""
"This variable defines how to link a group of libraries for the specified "
"``<FEATURE>`` when a :genex:`LINK_GROUP` generator expression is used. "
"Both of the following conditions must be met for this variable to have any"
" effect:"
msgstr ""
"此变量定义了在使用 :genex:`LINK_GROUP` 生成器表达式时如何为指定的 ``<FEATURE>`` "
"链接一组库。要使此变量生效，必须同时满足以下两个条件："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.rst:11
msgid ""
"The associated :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` "
"variable must be set to true."
msgstr ""
"关联的 :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED` 变量必须设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.rst:14
msgid ""
"There is no language-specific definition for the same ``<FEATURE>``. This "
"means :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` cannot"
" be true for the link language used by the target for which the "
":genex:`LINK_GROUP` generator expression is evaluated."
msgstr ""
"对于相同的 ``<FEATURE>`` 没有特定于语言的定义。这意味着 "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` 对于为其评估 "
":genex:`LINK_GROUP` 生成器表达式的目标使用的链接语言不能为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE.rst:19
msgid ""
"The :variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` variable should be"
" defined instead for features that are dependent on the link language."
msgstr ""
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` 变量应该定义为依赖于链接语言的功能。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:2
msgid "CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED"
msgstr "CMAKE_LINK_GROUP_USING_<FEATURE>_SUPPORTED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:6
msgid ""
"This variable specifies whether the ``<FEATURE>`` is supported regardless "
"of the link language.  If this variable is true, then the ``<FEATURE>`` "
"must be defined by :variable:`CMAKE_LINK_GROUP_USING_<FEATURE>`."
msgstr ""
"此变量指定是否支持“<FEATURE>”，而不管链接语言如何。如果此变量为真，则 ``<FEATURE>`` 必须由 "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` 定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_GROUP_USING_FEATURE_SUPPORTED.rst:10
msgid ""
"Note that this variable has no effect if "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED` is true for "
"the link language of the target."
msgstr ""
"请注意，如果目标链接语言的 CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>_SUPPORTED 为真，则此变量无效。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_INTERFACE_LIBRARIES.rst:2
msgid "CMAKE_LINK_INTERFACE_LIBRARIES"
msgstr "CMAKE_LINK_INTERFACE_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_INTERFACE_LIBRARIES.rst:4
msgid "Default value for :prop_tgt:`LINK_INTERFACE_LIBRARIES` of targets."
msgstr ":prop_tgt:`LINK_INTERFACE_LIBRARIES` 目标的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_INTERFACE_LIBRARIES.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`LINK_INTERFACE_LIBRARIES` property on all the targets.  See "
"that target property for additional information."
msgstr "此变量用于初始化所有目标上的 LINK_INTERFACE_LIBRARIES 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARIES_ONLY_TARGETS.rst:2
msgid "CMAKE_LINK_LIBRARIES_ONLY_TARGETS"
msgstr "CMAKE_LINK_LIBRARIES_ONLY_TARGETS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARIES_ONLY_TARGETS.rst:6
msgid ""
"Set this variable to initialize the "
":prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS` property of non-imported targets "
"when they are created.  Setting it to true enables an additional check "
"that all items named by :command:`target_link_libraries` that can be "
"target names are actually names of existing targets.  See the target "
"property documentation for details."
msgstr ""
"设置此变量以在创建非导入目标时初始化 LINK_LIBRARIES_ONLY_TARGETS 属性。将其设置为 true "
"可以进行额外检查，以确保所有由 :command:`target_link_libraries` "
"命名的可以是目标名称的项目实际上是现有目标的名称。有关详细信息，请参阅目标属性文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FILE_FLAG.rst:2
msgid "CMAKE_LINK_LIBRARY_FILE_FLAG"
msgstr "CMAKE_LINK_LIBRARY_FILE_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FILE_FLAG.rst:4
msgid "Flag to be used to link a library specified by a path to its file."
msgstr "用于将路径指定的库链接到其文件的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FLAG.rst:2
msgid "CMAKE_LINK_LIBRARY_FLAG"
msgstr "CMAKE_LINK_LIBRARY_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FLAG.rst:4
msgid "Flag to be used to link a library into an executable."
msgstr "用于将库链接到可执行文件的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_FLAG.rst:6
msgid ""
"The flag will be used to specify a library to link to an executable. On "
"most compilers this is ``-l``."
msgstr "该标志将用于指定链接到可执行文件的库。在大多数编译器上，这是“-l”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_SUFFIX.rst:2
msgid "CMAKE_LINK_LIBRARY_SUFFIX"
msgstr "CMAKE_LINK_LIBRARY_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_SUFFIX.rst:4
msgid "The suffix for libraries that you link to."
msgstr "您链接到的库的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.rst:2
msgid "CMAKE_LINK_LIBRARY_USING_<FEATURE>"
msgstr "CMAKE_LINK_LIBRARY_USING_<FEATURE>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.rst:6
msgid ""
"This variable defines how to link a library or framework for the specified"
" ``<FEATURE>`` when a :genex:`LINK_LIBRARY` generator expression is used. "
"Both of the following conditions must be met for this variable to have any"
" effect:"
msgstr ""
"当使用 LINK_LIBRARY 生成器表达式时，此变量定义如何为指定的 ``<FEATURE>`` "
"链接库或框架。要使此变量生效，必须同时满足以下两个条件："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.rst:11
msgid ""
"The associated :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"variable must be set to true."
msgstr ""
"关联的 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` 变量必须设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE.rst:14
msgid ""
"There is no language-specific definition for the same ``<FEATURE>``. This "
"means :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"cannot be true for the link language used by the target for which the "
":genex:`LINK_LIBRARY` generator expression is evaluated."
msgstr ""
"对于相同的 ``<FEATURE>`` 没有特定于语言的定义。这意味着 "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` 对于为其评估 "
":genex:`LINK_LIBRARY` 生成器表达式的目标使用的链接语言不能为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:2
msgid "CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED"
msgstr "CMAKE_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:6
msgid ""
"Set to ``TRUE`` if the ``<FEATURE>``, as defined by variable "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>`, is supported regardless "
"the linker language."
msgstr "如果无论链接器语言如何，都支持由变量定义的 ``<FEATURE>``，则设置为 ``TRUE``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_LIBRARY_USING_FEATURE_SUPPORTED.rst:12
msgid ""
"This variable is evaluated if, and only if, the variable "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` is not "
"defined."
msgstr ""
"当且仅当未定义变量 :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>_SUPPORTED` "
"时，才会评估此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_END_STATIC.rst:2
msgid "CMAKE_LINK_SEARCH_END_STATIC"
msgstr "CMAKE_LINK_SEARCH_END_STATIC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_END_STATIC.rst:6
msgid "End a link line such that static system libraries are used."
msgstr "结束链接行，以便使用静态系统库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_END_STATIC.rst:8
msgid ""
"Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to "
"determine whether to use static or shared libraries for ``-lXXX`` options."
" CMake uses these options to set the link type for libraries whose full "
"paths are not known or (in some cases) are in implicit link directories "
"for the platform.  By default CMake adds an option at the end of the "
"library list (if necessary) to set the linker search type back to its "
"starting type.  This property switches the final linker search type to "
"``-Bstatic`` regardless of how it started."
msgstr ""
"一些链接器支持诸如``-Bstatic`` 和``-Bdynamic`` 之类的开关，以确定是将静态库还是共享库用于``-lXXX`` 选项。 "
"CMake 使用这些选项为其完整路径未知或（在某些情况下）位于平台的隐式链接目录中的库设置链接类型。默认情况下，CMake "
"在库列表的末尾添加一个选项（如有必要）以将链接器搜索类型设置回其起始类型。此属性将最终链接器搜索类型切换为“-Bstatic”，而不管它是如何启动的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_END_STATIC.rst:17
msgid ""
"This variable is used to initialize the target property "
":prop_tgt:`LINK_SEARCH_END_STATIC` for all targets. If set, its value is "
"also used by the :command:`try_compile` command."
msgstr ""
"此变量用于初始化所有目标的目标属性:prop_tgt:`LINK_SEARCH_END_STATIC`。如果设置，它的值也被 "
":command:`try_compile` 命令使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_END_STATIC.rst:21
msgid "See also :variable:`CMAKE_LINK_SEARCH_START_STATIC`."
msgstr "另见 :variable:`CMAKE_LINK_SEARCH_START_STATIC`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_START_STATIC.rst:2
msgid "CMAKE_LINK_SEARCH_START_STATIC"
msgstr "CMAKE_LINK_SEARCH_START_STATIC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_START_STATIC.rst:6
msgid "Assume the linker looks for static libraries by default."
msgstr "假设链接器默认查找静态库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_START_STATIC.rst:8
msgid ""
"Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to "
"determine whether to use static or shared libraries for ``-lXXX`` options."
" CMake uses these options to set the link type for libraries whose full "
"paths are not known or (in some cases) are in implicit link directories "
"for the platform.  By default the linker search type is assumed to be "
"``-Bdynamic`` at the beginning of the library list.  This property "
"switches the assumption to ``-Bstatic``.  It is intended for use when "
"linking an executable statically (e.g.  with the GNU ``-static`` option)."
msgstr ""
"一些链接器支持诸如``-Bstatic`` 和``-Bdynamic`` 之类的开关，以确定是将静态库还是共享库用于``-lXXX`` 选项。 "
"CMake "
"使用这些选项为其完整路径未知或（在某些情况下）位于平台的隐式链接目录中的库设置链接类型。默认情况下，链接器搜索类型假定为库列表开头的“-Bdynamic”。此属性将假设切换为“-Bstatic”。它旨在用于静态链接可执行文件（例如使用"
" GNU ``-static`` 选项）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_START_STATIC.rst:18
msgid ""
"This variable is used to initialize the target property "
":prop_tgt:`LINK_SEARCH_START_STATIC` for all targets.  If set, its value "
"is also used by the :command:`try_compile` command."
msgstr ""
"此变量用于初始化所有目标的目标属性:prop_tgt:`LINK_SEARCH_START_STATIC`。如果设置，它的值也被 "
":command:`try_compile` 命令使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_SEARCH_START_STATIC.rst:22
msgid "See also :variable:`CMAKE_LINK_SEARCH_END_STATIC`."
msgstr "另请参阅 :variable:`CMAKE_LINK_SEARCH_END_STATIC`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_WHAT_YOU_USE.rst:2
msgid "CMAKE_LINK_WHAT_YOU_USE"
msgstr "CMAKE_LINK_WHAT_YOU_USE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_WHAT_YOU_USE.rst:6
msgid ""
"Default value for :prop_tgt:`LINK_WHAT_YOU_USE` target property. This "
"variable is used to initialize the property on each target as it is "
"created."
msgstr ":prop_tgt:`LINK_WHAT_YOU_USE` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_WHAT_YOU_USE_CHECK.rst:2
msgid "CMAKE_LINK_WHAT_YOU_USE_CHECK"
msgstr "CMAKE_LINK_WHAT_YOU_USE_CHECK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_WHAT_YOU_USE_CHECK.rst:6
msgid ""
"Defines the command executed after the link step to check libraries usage."
" This check is currently only defined on ``ELF`` platforms with value "
"``ldd -u -r``."
msgstr "定义链接步骤后执行的命令以检查库使用情况。此检查目前仅在值为“ldd -u -r”的“ELF”平台上定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_LINK_WHAT_YOU_USE_CHECK.rst:10
msgid "See also :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` variables."
msgstr "另请参阅 :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_BUNDLE.rst:2
msgid "CMAKE_MACOSX_BUNDLE"
msgstr "CMAKE_MACOSX_BUNDLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_BUNDLE.rst:4
msgid "Default value for :prop_tgt:`MACOSX_BUNDLE` of targets."
msgstr ":prop_tgt:`MACOSX_BUNDLE` 目标的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_BUNDLE.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`MACOSX_BUNDLE` property"
" on all the targets.  See that target property for additional information."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`MACOSX_BUNDLE` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_BUNDLE.rst:9
msgid ""
"This variable is set to ``ON`` by default if :variable:`CMAKE_SYSTEM_NAME`"
" equals to :ref:`iOS, tvOS or watchOS <Cross Compiling for iOS, tvOS, or "
"watchOS>`."
msgstr ""
"如果 CMAKE_SYSTEM_NAME 等于 iOS、tvOS 或 watchOS <iOS、tvOS 或 watchOS "
"的交叉编译>，则此变量默认设置为“ON”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_RPATH.rst:2
msgid "CMAKE_MACOSX_RPATH"
msgstr "CMAKE_MACOSX_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_RPATH.rst:4
msgid "Whether to use rpaths on macOS and iOS."
msgstr "是否在 macOS 和 iOS 上使用 rpaths。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MACOSX_RPATH.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`MACOSX_RPATH` property "
"on all targets."
msgstr "此变量用于初始化所有目标上的 :prop_tgt:`MACOSX_RPATH` 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAJOR_VERSION.rst:2
msgid "CMAKE_MAJOR_VERSION"
msgstr "CMAKE_MAJOR_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAJOR_VERSION.rst:4
msgid ""
"First version number component of the :variable:`CMAKE_VERSION` variable."
msgstr ":variable:`CMAKE_VERSION` 变量的第一个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:2
msgid "CMAKE_MAKE_PROGRAM"
msgstr "CMAKE_MAKE_PROGRAM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:4
msgid ""
"Tool that can launch the native build system. The value may be the full "
"path to an executable or just the tool name if it is expected to be in the"
" ``PATH``."
msgstr "可以启动本机构建系统的工具。该值可能是可执行文件的完整路径，或者只是工具名称（如果它预计在 ``PATH`` 中）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:8
msgid ""
"The tool selected depends on the :variable:`CMAKE_GENERATOR` used to "
"configure the project:"
msgstr "选择的工具取决于用于配置项目的 :variable:`CMAKE_GENERATOR`："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:11
msgid ""
"The :ref:`Makefile Generators` set this to ``make``, ``gmake``, or a "
"generator-specific tool (e.g. ``nmake`` for :generator:`NMake Makefiles`)."
msgstr ""
":ref:`Makefile Generators` 将其设置为 ``make``、``gmake`` 或特定于生成器的工具（例如 "
"``nmake`` 用于 :generator:`NMake Makefiles`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:14
msgid ""
"These generators store ``CMAKE_MAKE_PROGRAM`` in the CMake cache so that "
"it may be edited by the user."
msgstr "这些生成器将“CMAKE_MAKE_PROGRAM”存储在 CMake 缓存中，以便用户可以对其进行编辑。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:17
msgid "The :generator:`Ninja` generator sets this to ``ninja``."
msgstr ":generator:`Ninja` 生成器将其设置为 ``ninja``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:19
msgid ""
"This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache so that it"
" may be edited by the user."
msgstr "此生成器将 CMAKE_MAKE_PROGRAM 存储在 CMake 缓存中，以便用户可以对其进行编辑。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:22
msgid "The :generator:`Xcode` generator sets this to ``xcodebuild``."
msgstr ":generator:`Xcode` 生成器将其设置为 ``xcodebuild``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:24
msgid ""
"This generator prefers to lookup the build tool at build time rather than "
"to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache ahead of time.  This is"
" because ``xcodebuild`` is easy to find."
msgstr ""
"该生成器更喜欢在构建时查找构建工具，而不是提前将 CMAKE_MAKE_PROGRAM 存储在 CMake 缓存中。这是因为 "
"``xcodebuild`` 很容易找到。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:28
msgid ""
"For compatibility with versions of CMake prior to 3.2, if a user or "
"project explicitly adds ``CMAKE_MAKE_PROGRAM`` to the CMake cache then "
"CMake will use the specified value."
msgstr ""
"为了与 3.2 之前的 CMake 版本兼容，如果用户或项目明确地将“CMAKE_MAKE_PROGRAM”添加到 CMake 缓存，则 CMake"
" 将使用指定的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:32
msgid ""
"The :ref:`Visual Studio Generators` set this to the full path to "
"``MSBuild.exe`` (VS >= 10), ``devenv.com`` (VS 7,8,9), or "
"``VCExpress.exe`` (VS Express 8,9). (See also variables "
":variable:`CMAKE_VS_MSBUILD_COMMAND` and "
":variable:`CMAKE_VS_DEVENV_COMMAND`."
msgstr ""
":ref:`Visual Studio Generators` 将其设置为 ``MSBuild.exe``（VS >= "
"10）、``devenv.com``（VS 7、8、9）或 ``VCExpress 的完整路径.exe``（VS Express 8,9）。 "
"（另请参阅变量 :variable:`CMAKE_VS_MSBUILD_COMMAND` 和 :variable:`CMAKE_VS_DEVENV_COMMAND`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:39
msgid ""
"These generators prefer to lookup the build tool at build time rather than"
" to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache ahead of time.  This "
"is because the tools are version-specific and can be located using the "
"Windows Registry.  It is also necessary because the proper build tool may "
"depend on the project content (e.g. the Intel Fortran plugin to VS 10 and "
"11 requires ``devenv.com`` to build its ``.vfproj`` project files even "
"though ``MSBuild.exe`` is normally preferred to support the "
":variable:`CMAKE_GENERATOR_TOOLSET`)."
msgstr ""
"这些生成器更喜欢在构建时查找构建工具，而不是提前将 CMAKE_MAKE_PROGRAM 存储在 CMake "
"缓存中。这是因为这些工具是特定于版本的，并且可以使用 Windows 注册表进行定位。这也是必要的，因为正确的构建工具可能取决于项目内容（例如，VS"
" 10 和 11 的 Intel Fortran 插件需要``devenv.com`` 来构建其``.vfproj`` "
"项目文件，即使``MSBuild .exe`` 通常首选支持 :variable:`CMAKE_GENERATOR_TOOLSET`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:49
msgid ""
"For compatibility with versions of CMake prior to 3.0, if a user or "
"project explicitly adds ``CMAKE_MAKE_PROGRAM`` to the CMake cache then "
"CMake will use the specified value if possible."
msgstr ""
"为了与 3.0 之前的 CMake 版本兼容，如果用户或项目明确地将“CMAKE_MAKE_PROGRAM”添加到 CMake 缓存，则 CMake"
" 将尽可能使用指定的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:54
msgid ""
"The :generator:`Green Hills MULTI` generator sets this to the full path to"
" ``gbuild.exe(Windows)`` or ``gbuild(Linux)`` based upon the toolset being"
" used."
msgstr ""
":generator:`Green Hills MULTI` 生成器根据所使用的工具集将其设置为 ``gbuild.exe(Windows)`` 或"
" ``gbuild(Linux)`` 的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:58
msgid ""
"Once the generator has initialized a particular value for this variable, "
"changing the value has undefined behavior."
msgstr "一旦生成器为此变量初始化了一个特定值，更改该值将具有未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAKE_PROGRAM.rst:61
msgid ""
"The ``CMAKE_MAKE_PROGRAM`` variable is set for use by project code. The "
"value is also used by the :option:`cmake --build` and :option:`ctest "
"--build-and-test` tools to launch the native build process."
msgstr ""
"``CMAKE_MAKE_PROGRAM`` 变量设置为供项目代码使用。 :option:`cmake --build` "
"和 :option:`ctest --build-and-test` 工具也使用该值来启动本机构建过程。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.rst:2
msgid "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>"
msgstr "CMAKE_MAP_IMPORTED_CONFIG_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.rst:4
msgid ""
"Default value for :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` of targets."
msgstr "目标的 :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAP_IMPORTED_CONFIG_CONFIG.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` property on all the targets.  See"
" that target property for additional information."
msgstr "此变量用于初始化所有目标上的 MAP_IMPORTED_CONFIG_<CONFIG> 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_COUNT.rst:2
msgid "CMAKE_MATCH_COUNT"
msgstr "CMAKE_MATCH_COUNT 个"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_COUNT.rst:6
msgid "The number of matches with the last regular expression."
msgstr "与最后一个正则表达式匹配的次数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_COUNT.rst:8
msgid ""
"When a regular expression match is used, CMake fills in "
":variable:`CMAKE_MATCH_<n>` variables with the match contents. The "
"``CMAKE_MATCH_COUNT`` variable holds the number of match expressions when "
"these are filled."
msgstr ""
"当使用正则表达式匹配时，CMake 将匹配内容填充到 :variable:`CMAKE_MATCH_<n>` 变量中。 "
"``CMAKE_MATCH_COUNT`` 变量保存匹配表达式的数量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_n.rst:2
msgid "CMAKE_MATCH_<n>"
msgstr "CMAKE_MATCH_<n>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_n.rst:6
msgid ""
"Capture group ``<n>`` matched by the last regular expression, for groups 0"
" through 9.  Group 0 is the entire match.  Groups 1 through 9 are the "
"subexpressions captured by ``()`` syntax."
msgstr ""
"捕获组 ``<n>`` 与最后一个正则表达式匹配，用于组 0 到 9。组 0 是整个匹配项。第 1 组到第 9 组是由“()”语法捕获的子表达式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MATCH_n.rst:10
msgid ""
"When a regular expression match is used, CMake fills in "
"``CMAKE_MATCH_<n>`` variables with the match contents.  The "
":variable:`CMAKE_MATCH_COUNT` variable holds the number of match "
"expressions when these are filled."
msgstr ""
"当使用正则表达式匹配时，CMake 会用匹配内容填充 ``CMAKE_MATCH_<n>`` 变量。 "
":variable:`CMAKE_MATCH_COUNT` 变量保存匹配表达式的数量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:2
msgid "CMAKE_MAXIMUM_RECURSION_DEPTH"
msgstr "CMAKE_MAXIMUM_RECURSION_DEPTH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:6
msgid ""
"Maximum recursion depth for CMake scripts. It is intended to be set on the"
" command line with ``-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>``, or within "
"``CMakeLists.txt`` by projects that require a large recursion depth. "
"Projects that set this variable should provide the user with a way to "
"override it. For example:"
msgstr ""
"CMake "
"脚本的最大递归深度。它旨在使用“-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>”在命令行上设置，或者在需要较大递归深度的项目在“CMakeLists.txt”中设置。设置此变量的项目应该为用户提供覆盖它的方法。例如："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:19
msgid ""
"If it is not set, or is set to a non-integer value, a sensible default "
"limit is used. If the recursion limit is reached, the script terminates "
"immediately with a fatal error."
msgstr "如果未设置或设置为非整数值，则使用合理的默认限制。如果达到递归限制，脚本将立即终止并出现致命错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:23
msgid "Calling any of the following commands increases the recursion depth:"
msgstr "调用以下任何命令都会增加递归深度："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:25
msgid ":command:`include`"
msgstr ":command:`包括`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:27
msgid ":command:`add_subdirectory`"
msgstr ":command:`添加子目录`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:28
msgid ":command:`try_compile`"
msgstr ":command:`try_compile`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:29
msgid ":command:`ctest_read_custom_files`"
msgstr ":command:`ctest_read_custom_files`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:30
msgid ":command:`ctest_run_script` (unless ``NEW_PROCESS`` is specified)"
msgstr ":command:`ctest_run_script`（除非指定了 ``NEW_PROCESS``）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:31
msgid ""
"User-defined :command:`function`'s and :command:`macro`'s (note that "
":command:`function` and :command:`macro` themselves don't increase "
"recursion depth)"
msgstr ""
"用户定义的 :command:`function`'s 和 :command:`macro`'s（注意:command:`function` 和 "
":command:`macro` 本身不会增加递归深度）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MAXIMUM_RECURSION_DEPTH.rst:34
msgid ""
"Reading or writing variables that are being watched by a "
":command:`variable_watch`"
msgstr "读取或写入由 :command:`variable_watch` 监视的变量"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:2
msgid "CMAKE_MESSAGE_CONTEXT"
msgstr "CMAKE_MESSAGE_CONTEXT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:6
msgid ""
"When enabled by the :option:`cmake --log-context` command line option or "
"the :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` variable, the "
":command:`message` command converts the ``CMAKE_MESSAGE_CONTEXT`` list "
"into a dot-separated string surrounded by square brackets and prepends it "
"to each line for messages of log levels ``NOTICE`` and below."
msgstr ""
"当由 :option:`cmake --log-context` 命令行选项或 "
":variable:`CMAKE_MESSAGE_CONTEXT_SHOW` 变量启用时， :command:`message` 命令将 "
"``CMAKE_MESSAGE_CONTEXT`` "
"列表转换为以点分隔的字符串由方括号括起来，并将其添加到日志级别为“通知”及以下的消息的每一行之前。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:12
msgid ""
"For logging contexts to work effectively, projects should generally "
"``APPEND`` and ``POP_BACK`` an item to the current value of "
"``CMAKE_MESSAGE_CONTEXT`` rather than replace it. Projects should not "
"assume the message context at the top of the source tree is empty, as "
"there are scenarios where the context might have already been set (e.g. "
"hierarchical projects)."
msgstr ""
"为了使日志上下文有效地工作，项目通常应该将一个项目``APPEND`` 和``POP_BACK`` "
"添加到``CMAKE_MESSAGE_CONTEXT`` "
"的当前值而不是替换它。项目不应假定源代码树顶部的消息上下文为空，因为在某些情况下可能已经设置了上下文（例如分层项目）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:21
msgid ""
"Valid context names are restricted to anything that could be used as a "
"CMake variable name.  All names that begin with an underscore or the "
"string ``cmake_`` are also reserved for use by CMake and should not be "
"used by projects."
msgstr ""
"有效的上下文名称仅限于可用作 CMake 变量名称的任何内容。所有以下划线或字符串“cmake_”开头的名称也保留供 CMake "
"使用，不应由项目使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:26
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_INDENT.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS.rst:9
msgid "Example:"
msgstr "例子："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT.rst:56
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_INDENT.rst:26
msgid "Which results in the following output:"
msgstr "结果如下："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT_SHOW.rst:2
msgid "CMAKE_MESSAGE_CONTEXT_SHOW"
msgstr "CMAKE_MESSAGE_CONTEXT_SHOW"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT_SHOW.rst:6
msgid ""
"Setting this variable to true enables showing a context with each line "
"logged by the :command:`message` command (see "
":variable:`CMAKE_MESSAGE_CONTEXT` for how the context itself is "
"specified)."
msgstr ""
"将此变量设置为 true 可以显示由 :command:`message` 命令记录的每一行的上下文（有关如何指定上下文本身，请参阅 "
":variable:`CMAKE_MESSAGE_CONTEXT`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT_SHOW.rst:10
msgid ""
"This variable is an alternative to providing the ``--log-context`` option "
"on the :manual:`cmake <cmake(1)>` command line.  Whereas the command line "
"option will apply only to that one CMake run, setting "
"``CMAKE_MESSAGE_CONTEXT_SHOW`` to true as a cache variable will ensure "
"that subsequent CMake runs will continue to show the message context."
msgstr ""
"此变量是在 :manual:`cmake <cmake(1)>` 命令行上提供 ``--log-context`` "
"选项的替代方法。虽然命令行选项将仅适用于那一次 CMake 运行，但将“CMAKE_MESSAGE_CONTEXT_SHOW”设置为 true "
"作为缓存变量将确保后续 CMake 运行将继续显示消息上下文。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_CONTEXT_SHOW.rst:16
msgid ""
"Projects should not set ``CMAKE_MESSAGE_CONTEXT_SHOW``.  It is intended "
"for users so that they may control whether or not to include context with "
"messages."
msgstr "项目不应设置 ``CMAKE_MESSAGE_CONTEXT_SHOW``。它适用于用户，以便他们可以控制是否在消息中包含上下文。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_INDENT.rst:2
msgid "CMAKE_MESSAGE_INDENT"
msgstr "CMAKE_MESSAGE_INDENT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_INDENT.rst:6
msgid ""
"The :command:`message` command joins the strings from this list and for "
"log levels of ``NOTICE`` and below, it prepends the resultant string to "
"each line of the message."
msgstr ""
":command:`message` 命令连接此列表中的字符串，对于 ``NOTICE`` 及以下的日志级别，它将结果字符串添加到消息的每一行之前。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_LOG_LEVEL.rst:2
msgid "CMAKE_MESSAGE_LOG_LEVEL"
msgstr "CMAKE_MESSAGE_LOG_LEVEL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_LOG_LEVEL.rst:6
msgid ""
"When set, this variable specifies the logging level used by the "
":command:`message` command.  Valid values are the same as those for the "
":option:`--log-level <cmake --log-level>` command line option of the "
":manual:`cmake(1)` program.  If this variable is set and the "
":option:`--log-level <cmake --log-level>` command line option is given, "
"the command line option takes precedence."
msgstr ""
"设置后，此变量指定 :command:`message` 命令使用的日志记录级别。有效值与 cmake(1) 程序的 :option:`--log-"
"level <cmake --log-level>` 命令行选项的值相同。如果设置了此变量并且给出了 :option:`--log-level "
"<cmake --log-level>` 命令行选项，则命令行选项优先。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_LOG_LEVEL.rst:13
msgid ""
"The main advantage to using this variable is to make a log level persist "
"between CMake runs.  Setting it as a cache variable will ensure that "
"subsequent CMake runs will continue to use the chosen log level."
msgstr ""
"使用此变量的主要优点是使日志级别在 CMake 运行之间保持不变。将其设置为缓存变量将确保后续 CMake 运行将继续使用所选的日志级别。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_LOG_LEVEL.rst:17
msgid ""
"Projects should not set this variable, it is intended for users so that "
"they may control the log level according to their own needs."
msgstr "项目不应该设置这个变量，它是供用户使用，以便他们可以根据自己的需要控制日志级别。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MESSAGE_LOG_LEVEL.rst:20
msgid ""
"See the :command:`cmake_language` :ref:`cmake_language "
"<query_message_log_level>` command for a way to query the current message "
"logging level."
msgstr ""
"请参阅 :command:`cmake_language` :ref:`cmake_language "
"<query_message_log_level>` 命令了解查询当前消息日志记录级别的方法。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MFC_FLAG.rst:2
msgid "CMAKE_MFC_FLAG"
msgstr "CMAKE_MFC_FLAG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MFC_FLAG.rst:4
msgid "Use the MFC library for an executable or dll."
msgstr "将 MFC 库用于可执行文件或 dll。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MFC_FLAG.rst:6
msgid ""
"Enables the use of the Microsoft Foundation Classes (MFC). It should be "
"set to ``1`` for the static MFC library, and ``2`` for the shared MFC "
"library.  This is used in Visual Studio project files."
msgstr ""
"启用 Microsoft 基础类 (MFC) 的使用。对于静态 MFC 库，它应该设置为“1”，对于共享 MFC 库，它应该设置为“2”。这在 "
"Visual Studio 项目文件中使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MFC_FLAG.rst:11
msgid "Usage example:"
msgstr "使用示例："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MFC_FLAG.rst:19
msgid ""
"Contents of ``CMAKE_MFC_FLAG`` may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>`."
msgstr ""
"``CMAKE_MFC_FLAG`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MINIMUM_REQUIRED_VERSION.rst:2
msgid "CMAKE_MINIMUM_REQUIRED_VERSION"
msgstr "CMAKE_MINIMUM_REQUIRED_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MINIMUM_REQUIRED_VERSION.rst:4
msgid ""
"The ``<min>`` version of CMake given to the most recent call to the "
":command:`cmake_minimum_required(VERSION)` command in the current variable"
" scope or any parent variable scope."
msgstr ""
"在当前变量作用域或任何父变量作用域中最近调用 cmake_minimum_required(VERSION) 命令的 CMake 的 "
"``<min>`` 版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MINOR_VERSION.rst:2
msgid "CMAKE_MINOR_VERSION"
msgstr "CMAKE_MINOR_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MINOR_VERSION.rst:4
msgid ""
"Second version number component of the :variable:`CMAKE_VERSION` variable."
msgstr ":variable:`CMAKE_VERSION` 变量的第二个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS.rst:2
msgid "CMAKE_MODULE_LINKER_FLAGS"
msgstr "CMAKE_MODULE_LINKER_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS.rst:4
msgid "Linker flags to be used to create modules."
msgstr "用于创建模块的链接器标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS.rst:6
msgid "These flags will be used by the linker when creating a module."
msgstr "创建模块时，链接器将使用这些标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.rst:2
msgid "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>"
msgstr "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.rst:4
msgid "Flags to be used when linking a module."
msgstr "链接模块时要使用的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG.rst:6
msgid ""
"Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules."
msgstr "与 CMAKE_C_FLAGS_* 相同，但在创建模块时由链接器使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT.rst:2
msgid "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT"
msgstr "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT.rst:6
msgid ""
"Value used to initialize the "
":variable:`CMAKE_MODULE_LINKER_FLAGS_<CONFIG>` cache entry the first time "
"a build tree is configured. This variable is meant to be set by a "
":variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or "
"append content to the value based on the environment and target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_MODULE_LINKER_FLAGS_<CONFIG> 缓存条目的值。此变量旨在由 :variable:`工具链文件"
" <CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_CONFIG_INIT.rst:12
msgid "See also :variable:`CMAKE_MODULE_LINKER_FLAGS_INIT`."
msgstr "另见 :variable:`CMAKE_MODULE_LINKER_FLAGS_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_INIT.rst:2
msgid "CMAKE_MODULE_LINKER_FLAGS_INIT"
msgstr "CMAKE_MODULE_LINKER_FLAGS_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_MODULE_LINKER_FLAGS` cache "
"entry the first time a build tree is configured. This variable is meant to"
" be set by a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may"
" prepend or append content to the value based on the environment and "
"target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_MODULE_LINKER_FLAGS 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_LINKER_FLAGS_INIT.rst:12
msgid ""
"See also the configuration-specific variable "
":variable:`CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT`."
msgstr "另请参阅特定于配置的变量 :variable:`CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_PATH.rst:2
msgid "CMAKE_MODULE_PATH"
msgstr "CMAKE_MODULE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MODULE_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories, "
"represented using forward slashes, specifying a search path for CMake "
"modules to be loaded by the :command:`include` or :command:`find_package` "
"commands before checking the default modules that come with CMake. By "
"default it is empty.  It is intended to be set by the project."
msgstr ""
"目录的分号分隔列表 <CMake Language Lists>，使用正斜杠表示，指定在检查之前由 :command:`include` 或 "
":command:`find_package` 命令加载的 CMake 模块的搜索路径CMake "
"自带的默认模块。默认情况下它是空的。它旨在由项目设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVCIDE_RUN_PATH.rst:2
msgid "CMAKE_MSVCIDE_RUN_PATH"
msgstr "CMAKE_MSVCIDE_RUN_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVCIDE_RUN_PATH.rst:6
msgid ""
"Extra PATH locations that should be used when executing "
":command:`add_custom_command` or :command:`add_custom_target` when using "
"the :generator:`Visual Studio 9 2008` (or above) generator. This allows "
"for running commands and using dll's that the IDE environment is not aware"
" of."
msgstr ""
"在使用 Visual Studio 9 2008（或更高版本）生成器时执行 add_custom_command 或 "
"add_custom_target 时应使用的额外 PATH 位置。这允许运行命令和使用 IDE 环境不知道的 dll。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVCIDE_RUN_PATH.rst:11
msgid ""
"If not set explicitly the value is initialized by the "
"``CMAKE_MSVCIDE_RUN_PATH`` environment variable, if set, and otherwise "
"left empty."
msgstr "如果未明确设置，则该值由 ``CMAKE_MSVCIDE_RUN_PATH`` 环境变量初始化（如果已设置），否则留空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:2
msgid "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT"
msgstr "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:6
msgid ""
"Select the MSVC debug information format targeting the MSVC ABI. This "
"variable is used to initialize the "
":prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` property on all targets as they "
"are created.  It is also propagated by calls to the :command:`try_compile`"
" command into the test project."
msgstr ""
"选择针对 MSVC ABI 的 MSVC 调试信息格式。此变量用于在创建所有目标时初始化所有目标的 "
"MSVC_DEBUG_INFORMATION_FORMAT 属性。它还通过调用 :command:`try_compile` 命令传播到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:11
msgid "The allowed values are:"
msgstr "允许的值为："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:2
msgid "``Embedded``"
msgstr "``嵌入式``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:2
msgid ""
"Compile with ``-Z7`` or equivalent flag(s) to produce object files with "
"full symbolic debugging information."
msgstr "使用“-Z7”或等效标志编译以生成具有完整符号调试信息的目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:5
msgid "``ProgramDatabase``"
msgstr "``程序数据库``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:5
msgid ""
"Compile with ``-Zi`` or equivalent flag(s) to produce a program database "
"that contains all the symbolic debugging information."
msgstr "使用“-Zi”或等效标志编译以生成包含所有符号调试信息的程序数据库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:9
msgid "``EditAndContinue``"
msgstr "``编辑并继续``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:8
msgid ""
"Compile with ``-ZI`` or equivalent flag(s) to produce a program database "
"that supports the Edit and Continue feature."
msgstr "使用“-ZI”或等效标志进行编译以生成支持“编辑并继续”功能的程序数据库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:14
msgid ""
"The value is ignored on compilers not targeting the MSVC ABI, but an "
"unsupported value will be rejected as an error when using a compiler "
"targeting the MSVC ABI."
msgstr "在不以 MSVC ABI 为目标的编译器上会忽略该值，但在使用以 MSVC ABI 为目标的编译器时，不受支持的值将作为错误被拒绝。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:15
msgid ""
"The value may also be the empty string (``\"\"``), in which case no debug "
"information format flag will be added explicitly by CMake."
msgstr "该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 将不会显式添加调试信息格式标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:15
msgid ""
"Use :manual:`generator expressions <cmake-generator-expressions(7)>` to "
"support per-configuration specification.  For example, the code:"
msgstr ""
"使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"来支持每个配置规范。例如，代码："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:23
msgid ""
"selects for all following targets the program database debug information "
"format for the Debug configuration."
msgstr "为所有以下目标选择调试配置的程序数据库调试信息格式。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:26
msgid ""
"If this variable is not set, the :prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT`"
" target property will not be set automatically.  If that property is not "
"set, CMake selects a debug information format using the default value "
"``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``, if supported by the"
" compiler, and otherwise ``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>``."
msgstr ""
"如果未设置此变量，将不会自动设置 :prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` "
"目标属性。如果未设置该属性，CMake "
"将使用默认值 ``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>`` 选择调试信息格式（如果编译器支持），否则使用 "
"``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>`` 。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_DEBUG_INFORMATION_FORMAT.rst:34
msgid ""
"This variable has effect only when policy :policy:`CMP0141` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the MSVC ABI."
msgstr ""
"只有在第一个使用针对 MSVC ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0141 "
"设置为 NEW 时，此变量才有效."

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:2
msgid "CMAKE_MSVC_RUNTIME_LIBRARY"
msgstr "CMAKE_MSVC_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the MSVC runtime library for use by compilers targeting the MSVC "
"ABI. This variable is used to initialize the "
":prop_tgt:`MSVC_RUNTIME_LIBRARY` property on all targets as they are "
"created.  It is also propagated by calls to the :command:`try_compile` "
"command into the test project."
msgstr ""
"选择供以 MSVC ABI 为目标的编译器使用的 MSVC 运行时库。此变量用于在创建所有目标时初始化所有目标的 "
"MSVC_RUNTIME_LIBRARY 属性。它还通过调用 :command:`try_compile` 命令传播到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:2
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:9
msgid "``MultiThreaded``"
msgstr "``多线程``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-MT”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:5
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:14
msgid "``MultiThreadedDLL``"
msgstr "``多线程DLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Compile with ``-MD`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library."
msgstr "使用“-MD”或等效标志进行编译以使用多线程动态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:8
msgid "``MultiThreadedDebug``"
msgstr "``多线程调试``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:8
msgid ""
"Compile with ``-MTd`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-MTd”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:12
msgid "``MultiThreadedDebugDLL``"
msgstr "``MultiThreadedDebugDLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:11
msgid ""
"Compile with ``-MDd`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library."
msgstr "使用“-MDd”或等效标志进行编译以使用多线程动态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:18
msgid ""
"The value may also be the empty string (``\"\"``) in which case no runtime"
" library selection flag will be added explicitly by CMake.  Note that with"
" :ref:`Visual Studio Generators` the native build system may choose to add"
" its own default runtime library selection flag."
msgstr ""
"该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 不会显式添加运行时库选择标志。请注意，对于 :ref:`Visual "
"Studio Generators`，本机构建系统可以选择添加其自己的默认运行时库选择标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:22
msgid ""
"selects for all following targets a multi-threaded statically-linked "
"runtime library with or without debug information depending on the "
"configuration."
msgstr "根据配置，为所有以下目标选择一个多线程静态链接运行时库，有或没有调试信息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:25
msgid ""
"If this variable is not set then the :prop_tgt:`MSVC_RUNTIME_LIBRARY` "
"target property will not be set automatically.  If that property is not "
"set then CMake uses the default value "
"``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` to select a MSVC runtime "
"library."
msgstr ""
"如果未设置此变量，则不会自动设置 :prop_tgt:`MSVC_RUNTIME_LIBRARY` 目标属性。如果未设置该属性，则 CMake "
"使用默认值 ``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` 来选择 MSVC 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_MSVC_RUNTIME_LIBRARY.rst:32
msgid ""
"This variable has effect only when policy :policy:`CMP0091` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the MSVC ABI."
msgstr ""
"只有在第一个使用针对 MSVC ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0091 "
"设置为 NEW 时，此变量才有效."

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC.rst:2
msgid "CMAKE_NETRC"
msgstr "CMAKE_NETRC 文件"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC.rst:6
msgid ""
"This variable is used to initialize the ``NETRC`` option for the "
":command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands. See those "
"commands for additional information."
msgstr ""
"此变量用于为 :command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令初始化 ``NETRC``"
" 选项。有关其他信息，请参阅这些命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC_FILE.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_CAINFO.rst:8
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_VERIFY.rst:8
msgid ""
"This variable is also used by the :module:`ExternalProject` and "
":module:`FetchContent` modules for internal calls to "
":command:`file(DOWNLOAD)`."
msgstr ""
"这个变量也被 :module:`ExternalProject` 和 :module:`FetchContent` 模块用于内部调用 "
":command:`file(DOWNLOAD)`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC_FILE.rst:13
msgid "The local option takes precedence over this variable."
msgstr "本地选项优先于此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC_FILE.rst:2
msgid "CMAKE_NETRC_FILE"
msgstr "CMAKE_NETRC_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NETRC_FILE.rst:6
msgid ""
"This variable is used to initialize the ``NETRC_FILE`` option for the "
":command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands. See those "
"commands for additional information."
msgstr ""
"此变量用于为 :command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令初始化 "
"``NETRC_FILE`` 选项。有关其他信息，请参阅这些命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:2
msgid "CMAKE_NINJA_OUTPUT_PATH_PREFIX"
msgstr "CMAKE_NINJA_OUTPUT_PATH_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:6
msgid "Set output files path prefix for the :generator:`Ninja` generator."
msgstr "为 Ninja 生成器设置输出文件路径前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:8
msgid ""
"Every output files listed in the generated ``build.ninja`` will be "
"prefixed by the contents of this variable (a trailing slash is appended if"
" missing).  This is useful when the generated ninja file is meant to be "
"embedded as a ``subninja`` file into a *super* ninja project.  For "
"example, a ninja build file generated with a command like::"
msgstr ""
"生成的 ``build.ninja`` 中列出的每个输出文件都将以该变量的内容为前缀（如果缺少则附加尾部斜杠）。当生成的 ninja 文件要作为 "
"``subninja`` 文件嵌入到 *super* ninja 项目中时，这很有用。例如，使用如下命令生成的忍者构建文件："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:18
msgid ""
"can be embedded in ``top-build-dir/build.ninja`` with a directive like "
"this::"
msgstr "可以使用这样的指令嵌入到``top-build-dir/build.ninja``中："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:23
msgid ""
"The ``auto-regeneration`` rule in ``top-build-dir/build.ninja`` must have "
"an order-only dependency on ``sub/build.ninja``."
msgstr ""
"``top-build-dir/build.ninja`` 中的``auto-regeneration`` "
"规则必须只依赖于``sub/build.ninja``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NINJA_OUTPUT_PATH_PREFIX.rst:27
msgid ""
"When ``CMAKE_NINJA_OUTPUT_PATH_PREFIX`` is set, the project generated by "
"CMake cannot be used as a standalone project.  No default targets are "
"specified."
msgstr ""
"当设置``CMAKE_NINJA_OUTPUT_PATH_PREFIX``时，CMake生成的工程不能作为独立工程使用。没有指定默认目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NOT_USING_CONFIG_FLAGS.rst:2
msgid "CMAKE_NOT_USING_CONFIG_FLAGS"
msgstr "CMAKE_NOT_USING_CONFIG_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NOT_USING_CONFIG_FLAGS.rst:4
msgid "Skip ``_BUILD_TYPE`` flags if true."
msgstr "如果为真，则跳过 _BUILD_TYPE 标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NOT_USING_CONFIG_FLAGS.rst:6
msgid ""
"This is an internal flag used by the generators in CMake to tell CMake to "
"skip the ``_BUILD_TYPE`` flags."
msgstr "这是 CMake 中的生成器使用的内部标志，用于告诉 CMake 跳过 ``_BUILD_TYPE`` 标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_BUILTIN_CHRPATH.rst:2
msgid "CMAKE_NO_BUILTIN_CHRPATH"
msgstr "CMAKE_NO_BUILTIN_CHRPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_BUILTIN_CHRPATH.rst:4
msgid ""
"Do not use the builtin binary editor to fix runtime library search paths "
"on installation."
msgstr "不要使用内置的二进制编辑器来修复安装时的运行时库搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_BUILTIN_CHRPATH.rst:7
msgid ""
"When an ELF or XCOFF binary needs to have a different runtime library "
"search path after installation than it does in the build tree, CMake uses "
"a builtin editor to change the runtime search path in the installed copy. "
"If this variable is set to true then CMake will relink the binary before "
"installation instead of using its builtin editor."
msgstr ""
"当 ELF 或 XCOFF 二进制文件在安装后需要具有不同于构建树中的运行时库搜索路径时，CMake "
"使用内置编辑器更改已安装副本中的运行时搜索路径。如果此变量设置为 true，则 CMake 将在安装前重新链接二进制文件，而不是使用其内置编辑器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_BUILTIN_CHRPATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RPATH.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_RPATH.rst:13
msgid ""
"For more information on RPATH handling see the :prop_tgt:`INSTALL_RPATH` "
"and :prop_tgt:`BUILD_RPATH` target properties."
msgstr ""
"有关 RPATH 处理的更多信息，请参阅 :prop_tgt:`INSTALL_RPATH` 和 :prop_tgt:`BUILD_RPATH` "
"目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_BUILTIN_CHRPATH.rst:18
msgid ""
"This variable also applies to XCOFF binaries' LIBPATH.  Prior to the "
"addition of the XCOFF editor in CMake 3.20, this variable applied only to "
"ELF binaries' RPATH/RUNPATH."
msgstr ""
"此变量也适用于 XCOFF 二进制文件的 LIBPATH。在 CMake 3.20 中添加 XCOFF 编辑器之前，此变量仅适用于 ELF "
"二进制文件的 RPATH/RUNPATH。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.rst:2
msgid "CMAKE_NO_SYSTEM_FROM_IMPORTED"
msgstr "CMAKE_NO_SYSTEM_FROM_IMPORTED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.rst:4
msgid "Default value for :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` of targets."
msgstr ":prop_tgt:`NO_SYSTEM_FROM_IMPORTED` 目标的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_NO_SYSTEM_FROM_IMPORTED.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`NO_SYSTEM_FROM_IMPORTED` property on all the targets.  See that"
" target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_EXTENSIONS.rst:2
msgid "CMAKE_OBJCXX_EXTENSIONS"
msgstr "CMAKE_OBJCXX_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`OBJCXX_EXTENSIONS` target property if set "
"when a target is created."
msgstr ":prop_tgt:`OBJCXX_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD.rst:2
msgid "CMAKE_OBJCXX_STANDARD"
msgstr "CMAKE_OBJCXX_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`OBJCXX_STANDARD` target property if set when "
"a target is created."
msgstr ":prop_tgt:`OBJCXX_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD_REQUIRED.rst:2
msgid "CMAKE_OBJCXX_STANDARD_REQUIRED"
msgstr "CMAKE_OBJCXX_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJCXX_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`OBJCXX_STANDARD_REQUIRED` target property if "
"set when a target is created."
msgstr ":prop_tgt:`OBJCXX_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_EXTENSIONS.rst:2
msgid "CMAKE_OBJC_EXTENSIONS"
msgstr "CMAKE_OBJC_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_EXTENSIONS.rst:6
msgid ""
"Default value for :prop_tgt:`OBJC_EXTENSIONS` target property if set when "
"a target is created."
msgstr ":prop_tgt:`OBJC_EXTENSIONS` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD.rst:2
msgid "CMAKE_OBJC_STANDARD"
msgstr "CMAKE_OBJC_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD.rst:6
msgid ""
"Default value for :prop_tgt:`OBJC_STANDARD` target property if set when a "
"target is created."
msgstr ":prop_tgt:`OBJC_STANDARD` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD_REQUIRED.rst:2
msgid "CMAKE_OBJC_STANDARD_REQUIRED"
msgstr "CMAKE_OBJC_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJC_STANDARD_REQUIRED.rst:6
msgid ""
"Default value for :prop_tgt:`OBJC_STANDARD_REQUIRED` target property if "
"set when a target is created."
msgstr ":prop_tgt:`OBJC_STANDARD_REQUIRED` 目标属性的默认值（如果在创建目标时设置）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJECT_PATH_MAX.rst:2
msgid "CMAKE_OBJECT_PATH_MAX"
msgstr "CMAKE_OBJECT_PATH_MAX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJECT_PATH_MAX.rst:4
msgid "Maximum object file full-path length allowed by native build tools."
msgstr "本机构建工具允许的最大目标文件全路径长度。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OBJECT_PATH_MAX.rst:6
msgid ""
"CMake computes for every source file an object file name that is unique to"
" the source file and deterministic with respect to the full path to the "
"source file.  This allows multiple source files in a target to share the "
"same name if they lie in different directories without rebuilding when one"
" is added or removed.  However, it can produce long full paths in a few "
"cases, so CMake shortens the path using a hashing scheme when the full "
"path to an object file exceeds a limit.  CMake has a built-in limit for "
"each platform that is sufficient for common tools, but some native tools "
"may have a lower limit.  This variable may be set to specify the limit "
"explicitly.  The value must be an integer no less than 128."
msgstr ""
"CMake "
"为每个源文件计算一个目标文件名，该文件名对于源文件是唯一的，并且相对于源文件的完整路径是确定的。这允许目标中的多个源文件共享相同的名称，如果它们位于不同的目录中，而无需在添加或删除时重建。但是，它在少数情况下会产生很长的完整路径，因此当目标文件的完整路径超过限制时，CMake"
" 会使用哈希方案缩短路径。 CMake "
"对每个平台都有一个内置的限制，对于常用工具来说已经足够了，但是一些原生工具可能会有一个较低的限制。可以设置此变量以明确指定限制。该值必须是不小于 "
"128 的整数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OPTIMIZE_DEPENDENCIES.rst:2
msgid "CMAKE_OPTIMIZE_DEPENDENCIES"
msgstr "CMAKE_OPTIMIZE_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OPTIMIZE_DEPENDENCIES.rst:6
msgid "Initializes the :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property."
msgstr "初始化 :prop_tgt:`OPTIMIZE_DEPENDENCIES` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_ARCHITECTURES.rst:2
msgid "CMAKE_OSX_ARCHITECTURES"
msgstr "CMAKE_OSX_ARCHITECTURES 架构"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_ARCHITECTURES.rst:4
msgid "Target specific architectures for macOS and iOS."
msgstr "针对 macOS 和 iOS 的特定架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_ARCHITECTURES.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`OSX_ARCHITECTURES` "
"property on each target as it is created.  See that target property for "
"additional information."
msgstr "此变量用于在每个目标创建时初始化 :prop_tgt:`OSX_ARCHITECTURES` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_VARIABLE.txt:1
msgid ""
"The value of this variable should be set prior to the first "
":command:`project` or :command:`enable_language` command invocation "
"because it may influence configuration of the toolchain and flags. It is "
"intended to be set locally by the user creating a build tree. This "
"variable should be set as a ``CACHE`` entry (or else CMake may remove it "
"while initializing a cache entry of the same name) unless policy "
":policy:`CMP0126` is set to ``NEW``."
msgstr ""
"此变量的值应在第一次 :command:`project` 或 :command:`enable_language` "
"命令调用之前设置，因为它可能会影响工具链和标志的配置。它旨在由创建构建树的用户在本地设置。此变量应设置为“CACHE”条目（否则 CMake "
"可能会在初始化同名缓存条目时将其删除）除非 policy:policy:`CMP0126` 设置为“NEW”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_VARIABLE.txt:9
msgid ""
"Despite the ``OSX`` part in the variable name(s) they apply also to other "
"SDKs than macOS like iOS, tvOS, or watchOS."
msgstr "尽管变量名称中有“OSX”部分，它们也适用于 macOS 以外的其他 SDK，如 iOS、tvOS 或 watchOS。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_VARIABLE.txt:12
msgid "This variable is ignored on platforms other than Apple."
msgstr "此变量在 Apple 以外的平台上会被忽略。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_DEPLOYMENT_TARGET.rst:2
msgid "CMAKE_OSX_DEPLOYMENT_TARGET"
msgstr "CMAKE_OSX_DEPLOYMENT_TARGET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_DEPLOYMENT_TARGET.rst:4
msgid ""
"Specify the minimum version of the target platform (e.g. macOS or iOS) on "
"which the target binaries are to be deployed.  CMake uses this variable "
"value for the ``-mmacosx-version-min`` flag or their respective target "
"platform equivalents.  For older Xcode versions that shipped multiple "
"macOS SDKs this variable also helps to choose the SDK in case "
":variable:`CMAKE_OSX_SYSROOT` is unset."
msgstr ""
"指定要部署目标二进制文件的目标平台（例如 macOS 或 iOS）的最低版本。 CMake 将此变量值用于“-mmacosx-version-"
"min”标志或其各自的目标平台等效项。对于提供多个 macOS SDK 的旧 Xcode 版本，此变量还有助于在 CMAKE_OSX_SYSROOT"
" 未设置的情况下选择 SDK。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_DEPLOYMENT_TARGET.rst:11
msgid ""
"If not set explicitly the value is initialized by the "
"``MACOSX_DEPLOYMENT_TARGET`` environment variable, if set, and otherwise "
"computed based on the host platform."
msgstr ""
"如果未明确设置，则该值由 ``MACOSX_DEPLOYMENT_TARGET`` 环境变量初始化（如果已设置），否则将根据主机平台进行计算。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_SYSROOT.rst:2
msgid "CMAKE_OSX_SYSROOT"
msgstr "CMAKE_OSX_SYSROOT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_SYSROOT.rst:4
msgid ""
"Specify the location or name of the macOS platform SDK to be used. CMake "
"uses this value to compute the value of the ``-isysroot`` flag or "
"equivalent and to help the ``find_*`` commands locate files in the SDK."
msgstr ""
"指定要使用的 macOS 平台 SDK 的位置或名称。 CMake "
"使用此值来计算“-isysroot”标志或等效项的值，并帮助“find_*”命令在 SDK 中定位文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_OSX_SYSROOT.rst:9
msgid ""
"If not set explicitly the value is initialized by the ``SDKROOT`` "
"environment variable, if set, and otherwise computed based on the "
":variable:`CMAKE_OSX_DEPLOYMENT_TARGET` or the host platform."
msgstr ""
"如果未明确设置，则该值由“SDKROOT”环境变量初始化，如果已设置，则根据 CMAKE_OSX_DEPLOYMENT_TARGET "
"或主机平台计算。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PARENT_LIST_FILE.rst:2
msgid "CMAKE_PARENT_LIST_FILE"
msgstr "CMAKE_PARENT_LIST_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PARENT_LIST_FILE.rst:4
msgid "Full path to the CMake file that included the current one."
msgstr "包含当前文件的 CMake 文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PARENT_LIST_FILE.rst:6
msgid ""
"While processing a CMake file loaded by :command:`include` or "
":command:`find_package` this variable contains the full path to the file "
"including it.  The top of the include stack is always the "
"``CMakeLists.txt`` for the current directory.  See also "
":variable:`CMAKE_CURRENT_LIST_FILE`."
msgstr ""
"在处理由 :command:`include` 或 :command:`find_package` 加载的 CMake "
"文件时，此变量包含包含它的文件的完整路径。包含堆栈的顶部始终是当前目录的 "
"``CMakeLists.txt``。另见 :variable:`CMAKE_CURRENT_LIST_FILE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PATCH_VERSION.rst:2
msgid "CMAKE_PATCH_VERSION"
msgstr "CMAKE_PATCH_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PATCH_VERSION.rst:4
msgid ""
"Third version number component of the :variable:`CMAKE_VERSION` variable."
msgstr ":variable:`CMAKE_VERSION` 变量的第三个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PCH_INSTANTIATE_TEMPLATES.rst:2
msgid "CMAKE_PCH_INSTANTIATE_TEMPLATES"
msgstr "CMAKE_PCH_INSTANTIATE_TEMPLATES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PCH_INSTANTIATE_TEMPLATES.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`PCH_INSTANTIATE_TEMPLATES` property of targets when they are "
"created."
msgstr "此变量用于在创建目标时初始化目标的 PCH_INSTANTIATE_TEMPLATES 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PCH_WARN_INVALID.rst:2
msgid "CMAKE_PCH_WARN_INVALID"
msgstr "CMAKE_PCH_WARN_INVALID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PCH_WARN_INVALID.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`PCH_WARN_INVALID` "
"property of targets when they are created."
msgstr "此变量用于在创建目标时初始化目标的 PCH_WARN_INVALID 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY.rst:2
msgid "CMAKE_PDB_OUTPUT_DIRECTORY"
msgstr "CMAKE_PDB_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY.rst:4
msgid ""
"Output directory for MS debug symbol ``.pdb`` files generated by the "
"linker for executable and shared library targets."
msgstr "链接器为可执行文件和共享库目标生成的 MS 调试符号 ``.pdb`` 文件的输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY.rst:7
msgid ""
"This variable is used to initialize the :prop_tgt:`PDB_OUTPUT_DIRECTORY` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 PDB_OUTPUT_DIRECTORY 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "CMAKE_PDB_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:4
msgid ""
"Per-configuration output directory for MS debug symbol ``.pdb`` files "
"generated by the linker for executable and shared library targets."
msgstr "链接器为可执行文件和共享库目标生成的 MS 调试符号“.pdb”文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:7
msgid ""
"This is a per-configuration version of "
":variable:`CMAKE_PDB_OUTPUT_DIRECTORY`. This variable is used to "
"initialize the :prop_tgt:`PDB_OUTPUT_DIRECTORY_<CONFIG>` property on all "
"the targets.  See that target property for additional information."
msgstr ""
"这是 CMAKE_PDB_OUTPUT_DIRECTORY 的每个配置版本。此变量用于初始化所有目标上的 "
"PDB_OUTPUT_DIRECTORY_<CONFIG> 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PLATFORM_NO_VERSIONED_SONAME.rst:2
msgid "CMAKE_PLATFORM_NO_VERSIONED_SONAME"
msgstr "CMAKE_PLATFORM_NO_VERSIONED_SONAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PLATFORM_NO_VERSIONED_SONAME.rst:6
msgid ""
"This variable is used to globally control whether the :prop_tgt:`VERSION` "
"and :prop_tgt:`SOVERSION` target properties should be used for shared "
"libraries. When set to true, adding version information to each shared "
"library target is disabled."
msgstr ""
"此变量用于全局控制 :prop_tgt:`VERSION` 和 :prop_tgt:`SOVERSION` 目标属性是否应用于共享库。设置为 "
"true 时，将禁用向每个共享库目标添加版本信息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PLATFORM_NO_VERSIONED_SONAME.rst:12
msgid ""
"By default this variable is set only on platforms where CMake knows it is "
"needed.   On other platforms, the specified properties will be used for "
"shared libraries."
msgstr "默认情况下，此变量仅在 CMake 知道需要它的平台上设置。在其他平台上，指定的属性将用于共享库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:2
msgid "CMAKE_POLICY_DEFAULT_CMP<NNNN>"
msgstr "CMAKE_POLICY_DEFAULT_CMP<NNNN>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:4
msgid ""
"Default for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset."
msgstr "CMake Policy ``CMP<NNNN>`` 未设置时的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:6
msgid ""
"Commands :command:`cmake_minimum_required(VERSION)` and "
":command:`cmake_policy(VERSION)` by default leave policies introduced "
"after the given version unset.  Set ``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` to "
"``OLD`` or ``NEW`` to specify the default for policy ``CMP<NNNN>``, where "
"``<NNNN>`` is the policy number."
msgstr ""
"命令 :command:`cmake_minimum_required(VERSION)` "
"和 :command:`cmake_policy(VERSION)` "
"默认情况下保留给定版本后引入的策略未设置。将“CMAKE_POLICY_DEFAULT_CMP<NNNN>”设置为“旧”或“新”以指定策略“CMP<NNNN>”的默认值，其中“<NNNN>”是策略编号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:12
msgid ""
"This variable should not be set by a project in CMake code as a way to set"
" its own policies; use :command:`cmake_policy(SET)` instead.  This "
"variable is meant to externally set policies for which a project has not "
"itself been updated:"
msgstr ""
"该变量不应由项目在 CMake 代码中设置，作为设置其自身策略的一种方式；使用 :command:`cmake_policy(SET)` "
"代替。此变量用于在外部设置项目本身尚未更新的策略："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:17
msgid ""
"Users running CMake may set this variable in the cache (e.g. "
"``-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>``).  Set it to ``OLD`` to "
"quiet a policy warning while using old behavior or to ``NEW`` to try "
"building the project with new behavior."
msgstr ""
"运行 CMake "
"的用户可以在缓存中设置此变量（例如``-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>``）。将其设置为 "
"``OLD`` 以在使用旧行为时消除策略警告，或设置为 ``NEW`` 以尝试使用新行为构建项目。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_DEFAULT_CMPNNNN.rst:22
msgid ""
"Projects may set this variable before a call to "
":command:`add_subdirectory` that adds a third-party project in order to "
"set its policies without modifying third-party code."
msgstr "项目可以在调用添加第三方项目的 add_subdirectory 之前设置此变量，以便在不修改第三方代码的情况下设置其策略。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:2
msgid "CMAKE_POLICY_WARNING_CMP<NNNN>"
msgstr "CMAKE_POLICY_WARNING_CMP<NNNN>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:4
msgid ""
"Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>`` "
"has not been set explicitly by :command:`cmake_policy` or implicitly by "
":command:`cmake_minimum_required`. This is meaningful only for the "
"policies that do not warn by default:"
msgstr ""
"当 CMake Policy ``CMP<NNNN>`` 未由 cmake_policy 显式设置或由 cmake_minimum_required"
" 隐式设置时，显式启用或禁用警告。这仅对默认不警告的策略有意义："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:9
msgid ""
"``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for policy "
":policy:`CMP0025`."
msgstr "``CMAKE_POLICY_WARNING_CMP0025`` 控制策略 :policy:`CMP0025` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:11
msgid ""
"``CMAKE_POLICY_WARNING_CMP0047`` controls the warning for policy "
":policy:`CMP0047`."
msgstr "``CMAKE_POLICY_WARNING_CMP0047`` 控制策略 :policy:`CMP0047` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:13
msgid ""
"``CMAKE_POLICY_WARNING_CMP0056`` controls the warning for policy "
":policy:`CMP0056`."
msgstr "``CMAKE_POLICY_WARNING_CMP0056`` 控制策略 :policy:`CMP0056` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:15
msgid ""
"``CMAKE_POLICY_WARNING_CMP0060`` controls the warning for policy "
":policy:`CMP0060`."
msgstr "``CMAKE_POLICY_WARNING_CMP0060`` 控制策略 :policy:`CMP0060` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:17
msgid ""
"``CMAKE_POLICY_WARNING_CMP0065`` controls the warning for policy "
":policy:`CMP0065`."
msgstr "``CMAKE_POLICY_WARNING_CMP0065`` 控制策略 :policy:`CMP0065` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:19
msgid ""
"``CMAKE_POLICY_WARNING_CMP0066`` controls the warning for policy "
":policy:`CMP0066`."
msgstr "``CMAKE_POLICY_WARNING_CMP0066`` 控制策略 :policy:`CMP0066` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:21
msgid ""
"``CMAKE_POLICY_WARNING_CMP0067`` controls the warning for policy "
":policy:`CMP0067`."
msgstr "``CMAKE_POLICY_WARNING_CMP0067`` 控制策略 :policy:`CMP0067` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:23
msgid ""
"``CMAKE_POLICY_WARNING_CMP0082`` controls the warning for policy "
":policy:`CMP0082`."
msgstr "``CMAKE_POLICY_WARNING_CMP0082`` 控制策略 :policy:`CMP0082` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:25
msgid ""
"``CMAKE_POLICY_WARNING_CMP0089`` controls the warning for policy "
":policy:`CMP0089`."
msgstr "``CMAKE_POLICY_WARNING_CMP0089`` 控制策略 :policy:`CMP0089` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:27
msgid ""
"``CMAKE_POLICY_WARNING_CMP0102`` controls the warning for policy "
":policy:`CMP0102`."
msgstr "``CMAKE_POLICY_WARNING_CMP0102`` 控制策略 :policy:`CMP0102` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:29
msgid ""
"``CMAKE_POLICY_WARNING_CMP0112`` controls the warning for policy "
":policy:`CMP0112`."
msgstr "``CMAKE_POLICY_WARNING_CMP0112`` 控制策略 :policy:`CMP0112` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:31
msgid ""
"``CMAKE_POLICY_WARNING_CMP0116`` controls the warning for policy "
":policy:`CMP0116`."
msgstr "``CMAKE_POLICY_WARNING_CMP0116`` 控制策略 :policy:`CMP0116` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:33
msgid ""
"``CMAKE_POLICY_WARNING_CMP0126`` controls the warning for policy "
":policy:`CMP0126`."
msgstr "``CMAKE_POLICY_WARNING_CMP0126`` 控制策略 :policy:`CMP0126` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:35
msgid ""
"``CMAKE_POLICY_WARNING_CMP0128`` controls the warning for policy "
":policy:`CMP0128`."
msgstr "``CMAKE_POLICY_WARNING_CMP0128`` 控制策略 :policy:`CMP0128` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:37
msgid ""
"``CMAKE_POLICY_WARNING_CMP0129`` controls the warning for policy "
":policy:`CMP0129`."
msgstr "``CMAKE_POLICY_WARNING_CMP0129`` 控制策略 :policy:`CMP0129` 的警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:39
msgid ""
"``CMAKE_POLICY_WARNING_CMP0133`` controls the warning for policy "
":policy:`CMP0133`."
msgstr "``CMAKE_POLICY_WARNING_CMP0133`` 控制策略警告:policy:`CMP0133`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POLICY_WARNING_CMPNNNN.rst:42
msgid ""
"This variable should not be set by a project in CMake code.  Project "
"developers running CMake may set this variable in their cache to enable "
"the warning (e.g. ``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``). Alternatively,"
" running :manual:`cmake(1)` with the :option:`--debug-output <cmake "
"--debug-output>`, :option:`--trace <cmake --trace>`, or :option:`--trace-"
"expand <cmake --trace-expand>` option will also enable the warning."
msgstr ""
"此变量不应由 CMake 代码中的项目设置。运行 CMake 的项目开发人员可以在他们的缓存中设置此变量以启用警告（例如 "
"``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``）。或者，使用 :option:`--debug-output "
"<cmake --debug-output>`、 :option:`--trace <cmake --trace>` 运行 "
":manual:`cmake(1)`，或者:option:`--trace-expand <cmake --trace-expand>` 选项也将启用警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POSITION_INDEPENDENT_CODE.rst:2
msgid "CMAKE_POSITION_INDEPENDENT_CODE"
msgstr "CMAKE_POSITION_INDEPENDENT_CODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POSITION_INDEPENDENT_CODE.rst:4
msgid "Default value for :prop_tgt:`POSITION_INDEPENDENT_CODE` of targets."
msgstr "目标的 :prop_tgt:`POSITION_INDEPENDENT_CODE` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_POSITION_INDEPENDENT_CODE.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`POSITION_INDEPENDENT_CODE` property on all the targets. See "
"that target property for additional information.  If set, its value is "
"also used by the :command:`try_compile` command."
msgstr ""
"此变量用于初始化所有目标上的 POSITION_INDEPENDENT_CODE 属性。有关其他信息，请参阅该目标属性。如果设置，它的值也被 "
":command:`try_compile` 命令使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PREFIX_PATH.rst:2
msgid "CMAKE_PREFIX_PATH"
msgstr "CMAKE_PREFIX_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PREFIX_PATH.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying installation *prefixes* to be searched by the "
":command:`find_package`, :command:`find_program`, :command:`find_library`,"
" :command:`find_file`, and :command:`find_path` commands.  Each command "
"will add appropriate subdirectories (like ``bin``, ``lib``, or "
"``include``) as specified in its own documentation."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 目录指定安装 *prefixes* "
"由:command:`find_package`, :command:`find_program`, "
":command:`find_library`, :command: `find_file` 和 :command:`find_path` "
"命令。每个命令将添加其自己的文档中指定的适当子目录（如 ``bin``、``lib`` 或 ``include``）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PREFIX_PATH.rst:11
msgid "By default this is empty.  It is intended to be set by the project."
msgstr "默认情况下这是空的。它旨在由项目设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PREFIX_PATH.rst:13
msgid ""
"See also :variable:`CMAKE_SYSTEM_PREFIX_PATH`, "
":variable:`CMAKE_INCLUDE_PATH`, :variable:`CMAKE_LIBRARY_PATH`, "
":variable:`CMAKE_PROGRAM_PATH`, and :variable:`CMAKE_IGNORE_PATH`."
msgstr ""
"另请参阅 :variable:`CMAKE_SYSTEM_PREFIX_PATH`、 :variable:`CMAKE_INCLUDE_PATH`、 :variable:`CMAKE_LIBRARY_PATH`、 :variable:`CMAKE_PROGRAM_PATH`"
" 和 :variable:`CMAKE_IGNORE_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROGRAM_PATH.rst:2
msgid "CMAKE_PROGRAM_PATH"
msgstr "CMAKE_PROGRAM_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROGRAM_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_program` command.  By "
"default it is empty, it is intended to be set by the project.  See also "
":variable:`CMAKE_SYSTEM_PROGRAM_PATH` and :variable:`CMAKE_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_program` "
"命令。默认为空，由项目设置。另见 :variable:`CMAKE_SYSTEM_PROGRAM_PATH` 和 :variable:`CMAKE_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:2
msgid "CMAKE_PROJECT_DESCRIPTION"
msgstr "CMAKE_PROJECT_DESCRIPTION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:6
msgid "The description of the top level project."
msgstr "顶级项目的描述。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:8
msgid ""
"This variable holds the description of the project as specified in the top"
" level CMakeLists.txt file by a :command:`project` command.  In the event "
"that the top level CMakeLists.txt contains multiple :command:`project` "
"calls, the most recently called one from that top level CMakeLists.txt "
"will determine the value that ``CMAKE_PROJECT_DESCRIPTION`` contains.  For"
" example, consider the following top level CMakeLists.txt:"
msgstr ""
"此变量保存项目的描述，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。如果顶层 "
"CMakeLists.txt 包含多个 :command:`project` 调用，则来自该顶层 CMakeLists.txt "
"的最近调用的调用将确定 ``CMAKE_PROJECT_DESCRIPTION`` 包含的值。例如，考虑以下顶级 CMakeLists.txt："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:21
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:23
msgid "And ``sub/CMakeLists.txt`` with the following contents:"
msgstr "和 ``sub/CMakeLists.txt`` 包含以下内容："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:30
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:30
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:30
msgid ""
"The most recently seen :command:`project` command from the top level "
"CMakeLists.txt would be ``project(Second ...)``, so this will print::"
msgstr ""
"最近看到的来自顶层 CMakeLists.txt 的 :command:`project` 命令是 ``project(Second "
"...)``，所以这将打印："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_DESCRIPTION.rst:35
msgid ""
"To obtain the description from the most recent call to :command:`project` "
"in the current directory scope or above, see the "
":variable:`PROJECT_DESCRIPTION` variable."
msgstr ""
"要从当前目录范围或以上目录中最近一次调用 :command:`project` 获取描述，请参阅 "
":variable:`PROJECT_DESCRIPTION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:2
msgid "CMAKE_PROJECT_HOMEPAGE_URL"
msgstr "CMAKE_PROJECT_HOMEPAGE_URL"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:6
msgid "The homepage URL of the top level project."
msgstr "顶级项目的主页 URL。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:8
msgid ""
"This variable holds the homepage URL of the project as specified in the "
"top level CMakeLists.txt file by a :command:`project` command.  In the "
"event that the top level CMakeLists.txt contains multiple "
":command:`project` calls, the most recently called one from that top level"
" CMakeLists.txt will determine the value that "
"``CMAKE_PROJECT_HOMEPAGE_URL`` contains.  For example, consider the "
"following top level CMakeLists.txt:"
msgstr ""
"此变量保存项目的主页 URL，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。如果顶层 "
"CMakeLists.txt 包含多个 :command:`project` 调用，则来自该顶层 CMakeLists.txt "
"的最近调用的调用将确定 ``CMAKE_PROJECT_HOMEPAGE_URL`` 包含的值。例如，考虑以下顶级 CMakeLists.txt："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_HOMEPAGE_URL.rst:35
msgid ""
"To obtain the homepage URL from the most recent call to :command:`project`"
" in the current directory scope or above, see the "
":variable:`PROJECT_HOMEPAGE_URL` variable."
msgstr ""
"要从当前目录范围内或以上的最近一次调用 :command:`project` 中获取主页 URL，请参阅 "
":variable:`PROJECT_HOMEPAGE_URL` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE.rst:2
msgid "CMAKE_PROJECT_INCLUDE"
msgstr "CMAKE_PROJECT_INCLUDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE.rst:6
msgid ""
"A CMake language file or module to be included as the last step of all "
":command:`project` command calls.  This is intended for injecting custom "
"code into project builds without modifying their source.  See :ref:`Code "
"Injection` for a more detailed discussion of files potentially included "
"during a :command:`project` call."
msgstr ""
"作为所有 :command:`project` 命令调用的最后一步包含的 CMake "
"语言文件或模块。这是为了在不修改源代码的情况下将自定义代码注入项目构建。有关在 :command:`project` "
"调用期间可能包含的文件的更详细讨论，请参阅 :ref:`Code Injection`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE.rst:12
msgid ""
"See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, "
":variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`, "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, and "
":variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE`、 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE_BEFORE`、 :variable:`CMAKE_PROJECT_INCLUDE_BEFORE` "
"和 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE_BEFORE.rst:2
msgid "CMAKE_PROJECT_INCLUDE_BEFORE"
msgstr "CMAKE_PROJECT_INCLUDE_BEFORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE_BEFORE.rst:6
msgid ""
"A CMake language file or module to be included as the first step of all "
":command:`project` command calls.  This is intended for injecting custom "
"code into project builds without modifying their source.  See :ref:`Code "
"Injection` for a more detailed discussion of files potentially included "
"during a :command:`project` call."
msgstr ""
"作为所有 :command:`project` 命令调用的第一步包含的 CMake "
"语言文件或模块。这是为了在不修改源代码的情况下将自定义代码注入项目构建。有关在 :command:`project` "
"调用期间可能包含的文件的更详细讨论，请参阅 :ref:`Code Injection`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_INCLUDE_BEFORE.rst:12
msgid ""
"See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, "
":variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`, "
":variable:`CMAKE_PROJECT_INCLUDE`, and "
":variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE`、 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE_BEFORE`、 :variable:`CMAKE_PROJECT_INCLUDE` "
"和 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:2
msgid "CMAKE_PROJECT_NAME"
msgstr "CMAKE_PROJECT_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:4
msgid "The name of the top level project."
msgstr "顶级项目的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:6
msgid ""
"This variable holds the name of the project as specified in the top level "
"CMakeLists.txt file by a :command:`project` command.  In the event that "
"the top level CMakeLists.txt contains multiple :command:`project` calls, "
"the most recently called one from that top level CMakeLists.txt will "
"determine the name that ``CMAKE_PROJECT_NAME`` contains.  For example, "
"consider the following top level CMakeLists.txt:"
msgstr ""
"此变量保存项目的名称，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。如果顶层 "
"CMakeLists.txt 包含多个 :command:`project` 调用，则来自该顶层 CMakeLists.txt "
"的最近调用的调用将确定 ``CMAKE_PROJECT_NAME`` 包含的名称。例如，考虑以下顶级 CMakeLists.txt："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:28
msgid ""
"The most recently seen :command:`project` command from the top level "
"CMakeLists.txt would be ``project(Second)``, so this will print::"
msgstr ""
"最近看到的来自顶层 CMakeLists.txt 的 :command:`project` 命令是 "
"``project(Second)``，所以这将打印："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_NAME.rst:33
msgid ""
"To obtain the name from the most recent call to :command:`project` in the "
"current directory scope or above, see the :variable:`PROJECT_NAME` "
"variable."
msgstr ""
"要从当前目录范围内或以上的最近一次调用 :command:`project` 中获取名称，请参阅 :variable:`PROJECT_NAME` "
"变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.rst:2
msgid "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE"
msgstr "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.rst:4
msgid ""
"A CMake language file or module to be included as the last step of any "
":command:`project` command calls that specify ``<PROJECT-NAME>`` as the "
"project name.  This is intended for injecting custom code into project "
"builds without modifying their source.  See :ref:`Code Injection` for a "
"more detailed discussion of files potentially included during a "
":command:`project` call."
msgstr ""
"一个 CMake 语言文件或模块，作为任何 :command:`project` 命令调用的最后一步，指定 ``<PROJECT-NAME>`` "
"作为项目名称。这是为了在不修改源代码的情况下将自定义代码注入项目构建。有关在 :command:`project` "
"调用期间可能包含的文件的更详细讨论，请参阅 :ref:`Code Injection`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE.rst:10
msgid ""
"See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE`, "
":variable:`CMAKE_PROJECT_INCLUDE`, "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, and "
":variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE_BEFORE`、 :variable:`CMAKE_PROJECT_INCLUDE`、 :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`"
" 和 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE.rst:2
msgid "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE"
msgstr "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE.rst:6
msgid ""
"A CMake language file or module to be included as the first step of any "
":command:`project` command calls that specify ``<PROJECT-NAME>`` as the "
"project name.  This is intended for injecting custom code into project "
"builds without modifying their source.  See :ref:`Code Injection` for a "
"more detailed discussion of files potentially included during a "
":command:`project` call."
msgstr ""
"一个 CMake 语言文件或模块，作为任何 :command:`project` 命令调用的第一步，指定 ``<PROJECT-NAME>`` "
"作为项目名称。这是为了在不修改源代码的情况下将自定义代码注入项目构建。有关在 :command:`project` "
"调用期间可能包含的文件的更详细讨论，请参阅 :ref:`Code Injection`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_PROJECT-NAME_INCLUDE_BEFORE.rst:12
msgid ""
"See also the :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, "
":variable:`CMAKE_PROJECT_INCLUDE`, "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, and "
":variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE`、 :variable:`CMAKE_PROJECT_INCLUDE`、 :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`"
" 和 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst:2
msgid "CMAKE_PROJECT_TOP_LEVEL_INCLUDES"
msgstr "CMAKE_PROJECT_TOP_LEVEL_INCLUDES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst:6
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of CMake language "
"files to include as part of the very first :command:`project` call. The "
"files will be included immediately after the toolchain file has been read "
"(if one is specified) and platform variables have been set, but before any"
" languages have been enabled. Therefore, language-specific variables, "
"including things like :variable:`CMAKE_<LANG>_COMPILER`, might not be set."
" See :ref:`Code Injection` for a more detailed discussion of files "
"potentially included during a :command:`project` call."
msgstr ""
"CMake 语言文件的分号分隔列表 <CMake 语言列表>，作为第一个 :command:`project` "
"调用的一部分。在读取工具链文件（如果已指定）并设置平台变量后，但在启用任何语言之前，将立即包含这些文件。因此，可能不会设置特定于语言的变量，包括 "
":variable:`CMAKE_<LANG>_COMPILER` 之类的东西。有关在 :command:`project` "
"调用期间可能包含的文件的更详细讨论，请参阅 :ref:`Code Injection`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst:15
msgid ""
"This variable is intended for specifying files that perform one-time setup"
" for the build. It provides an injection point for things like configuring"
" package managers, adding logic the user shares between projects (e.g. "
"defining their own custom build types), and so on. It is primarily for "
"users to add things specific to their environment, but not for specifying "
"the toolchain details (use :variable:`CMAKE_TOOLCHAIN_FILE` for that)."
msgstr ""
"此变量用于指定为构建执行一次性设置的文件。它为诸如配置包管理器、添加用户在项目之间共享的逻辑（例如定义他们自己的自定义构建类型）等事情提供了一个注入点。它主要供用户添加特定于他们环境的东西，而不是用于指定工具链详细信息（为此使用 :variable:`CMAKE_TOOLCHAIN_FILE`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst:22
msgid ""
"By default, this variable is empty.  It is intended to be set by the user."
msgstr "默认情况下，此变量为空。它旨在由用户设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_TOP_LEVEL_INCLUDES.rst:24
msgid ""
"See also the :variable:`CMAKE_PROJECT_INCLUDE`, "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE`, "
":variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`, and "
":variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE` variables."
msgstr ""
"另请参阅 :variable:`CMAKE_PROJECT_INCLUDE`、 :variable:`CMAKE_PROJECT_INCLUDE_BEFORE`、 :variable:`CMAKE_PROJECT_<PROJECT-"
"NAME>_INCLUDE` 和 :variable:`CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:2
msgid "CMAKE_PROJECT_VERSION"
msgstr "CMAKE_PROJECT_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:6
msgid "The version of the top level project."
msgstr "顶级项目的版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:8
msgid ""
"This variable holds the version of the project as specified in the top "
"level CMakeLists.txt file by a :command:`project` command.  In the event "
"that the top level CMakeLists.txt contains multiple :command:`project` "
"calls, the most recently called one from that top level CMakeLists.txt "
"will determine the value that ``CMAKE_PROJECT_VERSION`` contains.  For "
"example, consider the following top level CMakeLists.txt:"
msgstr ""
"此变量保存项目的版本，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。如果顶层 "
"CMakeLists.txt 包含多个 :command:`project` 调用，则来自该顶层 CMakeLists.txt "
"的最近调用的调用将确定 ``CMAKE_PROJECT_VERSION`` 包含的值。例如，考虑以下顶级 CMakeLists.txt："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION.rst:35
msgid ""
"To obtain the version from the most recent call to :command:`project` in "
"the current directory scope or above, see the :variable:`PROJECT_VERSION` "
"variable."
msgstr ""
"要从当前目录范围内或以上的最近一次调用 :command:`project` 中获取版本，请参阅 "
":variable:`PROJECT_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MAJOR.rst:2
msgid "CMAKE_PROJECT_VERSION_MAJOR"
msgstr "CMAKE_PROJECT_VERSION_MAJOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MAJOR.rst:6
msgid "The major version of the top level project."
msgstr "顶级项目的主要版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MAJOR.rst:8
msgid ""
"This variable holds the major version of the project as specified in the "
"top level CMakeLists.txt file by a :command:`project` command. Please see "
":variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when "
"multiple :command:`project` commands are used in the sources."
msgstr ""
"此变量保存项目的主要版本，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。请参阅 "
":variable:`CMAKE_PROJECT_VERSION` 文档了解在源中使用多个 :command:`project` 命令时的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MINOR.rst:2
msgid "CMAKE_PROJECT_VERSION_MINOR"
msgstr "CMAKE_PROJECT_VERSION_MINOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MINOR.rst:6
msgid "The minor version of the top level project."
msgstr "顶级项目的次要版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_MINOR.rst:8
msgid ""
"This variable holds the minor version of the project as specified in the "
"top level CMakeLists.txt file by a :command:`project` command. Please see "
":variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when "
"multiple :command:`project` commands are used in the sources."
msgstr ""
"此变量保存项目的次要版本，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。请参阅 "
":variable:`CMAKE_PROJECT_VERSION` 文档了解在源中使用多个 :command:`project` 命令时的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_PATCH.rst:2
msgid "CMAKE_PROJECT_VERSION_PATCH"
msgstr "CMAKE_PROJECT_VERSION_PATCH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_PATCH.rst:6
msgid "The patch version of the top level project."
msgstr "顶级项目的补丁版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_PATCH.rst:8
msgid ""
"This variable holds the patch version of the project as specified in the "
"top level CMakeLists.txt file by a :command:`project` command. Please see "
":variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when "
"multiple :command:`project` commands are used in the sources."
msgstr ""
"此变量保存项目的补丁版本，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。请参阅 "
":variable:`CMAKE_PROJECT_VERSION` 文档了解在源中使用多个 :command:`project` 命令时的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_TWEAK.rst:2
msgid "CMAKE_PROJECT_VERSION_TWEAK"
msgstr "CMAKE_PROJECT_VERSION_TWEAK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_TWEAK.rst:6
msgid "The tweak version of the top level project."
msgstr "顶级项目的调整版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_PROJECT_VERSION_TWEAK.rst:8
msgid ""
"This variable holds the tweak version of the project as specified in the "
"top level CMakeLists.txt file by a :command:`project` command. Please see "
":variable:`CMAKE_PROJECT_VERSION` documentation for the behavior when "
"multiple :command:`project` commands are used in the sources."
msgstr ""
"此变量保存项目的调整版本，如 :command:`project` 命令在顶层 CMakeLists.txt 文件中指定的那样。请参阅 "
":variable:`CMAKE_PROJECT_VERSION` 文档了解在源中使用多个 :command:`project` 命令时的行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RANLIB.rst:2
msgid "CMAKE_RANLIB"
msgstr "CMAKE_RANLIB"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RANLIB.rst:4
msgid "Name of randomizing tool for static libraries."
msgstr "静态库随机化工具的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RANLIB.rst:6
msgid ""
"This specifies name of the program that randomizes libraries on UNIX, not "
"used on Windows, but may be present."
msgstr "这指定了在 UNIX 上随机化库的程序的名称，在 Windows 上不使用，但可能存在。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName.rst:2
msgid "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>"
msgstr "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName.rst:6
msgid "Variable for making :command:`find_package` call ``REQUIRED``."
msgstr "使 :command:`find_package` 调用 ``REQUIRED`` 的变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName.rst:8
msgid ""
"Every non-``REQUIRED`` :command:`find_package` call in a project can be "
"turned into ``REQUIRED`` by setting the variable "
"``CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>`` to ``TRUE``. This can be used"
" to assert assumptions about build environment and to ensure the build "
"will fail early if they do not hold."
msgstr ""
"通过将变量 CMAKE_REQUIRE_FIND_PACKAGE_<PackageName> 设置为 TRUE ，项目中的每个非 "
"``REQUIRED`` :command:`find_package` 调用都可以变成 "
"``REQUIRED``。这可用于断言有关构建环境的假设，并确保如果不成立，构建将提前失败。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_REQUIRE_FIND_PACKAGE_PackageName.rst:14
msgid ""
"See also the :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` "
"variable."
msgstr "另请参阅 :variable:`CMAKE_DISABLE_FIND_PACKAGE_<PackageName>` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ROOT.rst:2
msgid "CMAKE_ROOT"
msgstr "CMAKE_ROOT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ROOT.rst:4
msgid "Install directory for running cmake."
msgstr "用于运行 cmake 的安装目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_ROOT.rst:6
msgid ""
"This is the install root for the running CMake and the ``Modules`` "
"directory can be found here.  This is commonly used in this format: "
"``${CMAKE_ROOT}/Modules``"
msgstr ""
"这是正在运行的 CMake 的安装根目录，可以在此处找到“Modules”目录。常用这种格式：``${CMAKE_ROOT}/Modules``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RULE_MESSAGES.rst:2
msgid "CMAKE_RULE_MESSAGES"
msgstr "CMAKE_RULE_MESSAGES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RULE_MESSAGES.rst:6
msgid "Specify whether to report a message for each make rule."
msgstr "指定是否为每个 make 规则报告消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RULE_MESSAGES.rst:8
msgid ""
"If set in the cache it is used to initialize the value of the "
":prop_gbl:`RULE_MESSAGES` property. Users may disable the option in their "
"local build tree to disable granular messages and report only as each "
"target completes in Makefile builds."
msgstr ""
"如果在缓存中设置，它用于初始化 :prop_gbl:`RULE_MESSAGES` "
"属性的值。用户可以在他们的本地构建树中禁用该选项以禁用细化消息并仅在每个目标在 Makefile 构建中完成时报告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.rst:2
msgid "CMAKE_RUNTIME_OUTPUT_DIRECTORY"
msgstr "CMAKE_RUNTIME_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.rst:4
msgid ""
"Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>` target "
"files when built."
msgstr "构建时放置所有 :ref:`RUNTIME <Runtime Output Artifacts>` 目标文件的位置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.rst:7
msgid ""
"This variable is used to initialize the "
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` property on all the targets.  See "
"that target property for additional information."
msgstr "此变量用于初始化所有目标上的 RUNTIME_OUTPUT_DIRECTORY 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:6
msgid ""
"Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>` target "
"files when built for a specific configuration."
msgstr "为特定配置构建时，将所有 :ref:`RUNTIME <Runtime Output Artifacts>` 目标文件放在哪里。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:9
msgid ""
"This variable is used to initialize the "
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` property on all the targets."
" See that target property for additional information."
msgstr ""
"此变量用于初始化所有目标上的 RUNTIME_OUTPUT_DIRECTORY_<CONFIG> 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SCRIPT_MODE_FILE.rst:2
msgid "CMAKE_SCRIPT_MODE_FILE"
msgstr "CMAKE_SCRIPT_MODE_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SCRIPT_MODE_FILE.rst:4
msgid ""
"Full path to the :option:`cmake -P` script file currently being processed."
msgstr "当前正在处理的 :option:`cmake -P` 脚本文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SCRIPT_MODE_FILE.rst:7
msgid ""
"When run in :option:`cmake -P` script mode, CMake sets this variable to "
"the full path of the script file.  When run to configure a "
"``CMakeLists.txt`` file, this variable is not set."
msgstr ""
"在 :option:`cmake -P` 脚本模式下运行时，CMake 将此变量设置为脚本文件的完整路径。运行以配置 "
"``CMakeLists.txt`` 文件时，未设置此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_PREFIX.rst:2
msgid "CMAKE_SHARED_LIBRARY_PREFIX"
msgstr "CMAKE_SHARED_LIBRARY_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_PREFIX.rst:4
msgid "The prefix for shared libraries that you link to."
msgstr "您链接到的共享库的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_PREFIX.rst:6
msgid "The prefix to use for the name of a shared library, ``lib`` on UNIX."
msgstr "用于共享库名称的前缀，在 UNIX 上为 ``lib``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_PREFIX.rst:8
msgid ""
"``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_SUFFIX.rst:2
msgid "CMAKE_SHARED_LIBRARY_SUFFIX"
msgstr "CMAKE_SHARED_LIBRARY_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_SUFFIX.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_SUFFIX.rst:4
msgid "The suffix for shared libraries that you link to."
msgstr "您链接到的共享库的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of a shared library filename, ``.dll`` on "
"Windows."
msgstr "用于共享库文件名结尾的后缀，在 Windows 上为 ``.dll``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LIBRARY_SUFFIX.rst:9
msgid ""
"``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS.rst:2
msgid "CMAKE_SHARED_LINKER_FLAGS"
msgstr "CMAKE_SHARED_LINKER_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS.rst:4
msgid "Linker flags to be used to create shared libraries."
msgstr "用于创建共享库的链接器标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS.rst:6
msgid ""
"These flags will be used by the linker when creating a shared library."
msgstr "创建共享库时，链接器将使用这些标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.rst:2
msgid "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>"
msgstr "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.rst:4
msgid "Flags to be used when linking a shared library."
msgstr "链接共享库时要使用的标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG.rst:6
msgid ""
"Same as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared "
"libraries."
msgstr "与 CMAKE_C_FLAGS_* 相同，但在创建共享库时由链接器使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT.rst:2
msgid "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT"
msgstr "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT.rst:6
msgid ""
"Value used to initialize the "
":variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>` cache entry the first time "
"a build tree is configured. This variable is meant to be set by a "
":variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or "
"append content to the value based on the environment and target platform."
msgstr ""
"用于在第一次配置构建树时初始化 :variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>` "
"缓存条目的值。此变量旨在由 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` 设置。 CMake "
"可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_CONFIG_INIT.rst:12
msgid "See also :variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`."
msgstr "另见 :variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_INIT.rst:2
msgid "CMAKE_SHARED_LINKER_FLAGS_INIT"
msgstr "CMAKE_SHARED_LINKER_FLAGS_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_SHARED_LINKER_FLAGS` cache "
"entry the first time a build tree is configured. This variable is meant to"
" be set by a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may"
" prepend or append content to the value based on the environment and "
"target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_SHARED_LINKER_FLAGS 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_LINKER_FLAGS_INIT.rst:12
msgid ""
"See also the configuration-specific variable "
":variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT`."
msgstr "另请参阅特定于配置的变量 :variable:`CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_PREFIX.rst:2
msgid "CMAKE_SHARED_MODULE_PREFIX"
msgstr "CMAKE_SHARED_MODULE_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_PREFIX.rst:4
msgid "The prefix for loadable modules that you link to."
msgstr "您链接到的可加载模块的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_PREFIX.rst:6
msgid ""
"The prefix to use for the name of a loadable module on this platform."
msgstr "用于此平台上可加载模块名称的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_PREFIX.rst:8
msgid ""
"``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_SUFFIX.rst:2
msgid "CMAKE_SHARED_MODULE_SUFFIX"
msgstr "CMAKE_SHARED_MODULE_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of a loadable module filename on this "
"platform"
msgstr "在此平台上用于可加载模块文件名结尾的后缀"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SHARED_MODULE_SUFFIX.rst:9
msgid ""
"``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SIZEOF_VOID_P.rst:2
msgid "CMAKE_SIZEOF_VOID_P"
msgstr "CMAKE_SIZEOF_VOID_P"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SIZEOF_VOID_P.rst:4
msgid "Size of a ``void`` pointer."
msgstr "``void`` 指针的大小。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SIZEOF_VOID_P.rst:6
msgid ""
"This is set to the size of a pointer on the target machine, and is "
"determined by a try compile.  If a 64-bit size is found, then the library "
"search path is modified to look for 64-bit libraries first."
msgstr "这被设置为目标机器上指针的大小，并由 try compile 确定。如果找到 64 位大小，则修改库搜索路径以首先查找 64 位库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_BUILD_RPATH.rst:2
msgid "CMAKE_SKIP_BUILD_RPATH"
msgstr "CMAKE_SKIP_BUILD_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_BUILD_RPATH.rst:4
msgid "Do not include RPATHs in the build tree."
msgstr "不要在构建树中包含 RPATH。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_BUILD_RPATH.rst:6
msgid ""
"Normally CMake uses the build tree for the RPATH when building executables"
" etc on systems that use RPATH.  When the software is installed the "
"executables etc are relinked by CMake to have the install RPATH.  If this "
"variable is set to ``TRUE`` then the software is always built with no "
"RPATH."
msgstr ""
"通常，在使用 RPATH 的系统上构建可执行文件等时，CMake 使用 RPATH 的构建树。安装软件后，CMake 会重新链接可执行文件等以安装 "
"RPATH。如果此变量设置为“TRUE”，则软件始终在没有 RPATH 的情况下构建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_BUILD_RPATH.rst:12
msgid ""
"This is used to initialize the :prop_tgt:`SKIP_BUILD_RPATH` target "
"property for all targets. For more information on RPATH handling see the "
":prop_tgt:`INSTALL_RPATH` and :prop_tgt:`BUILD_RPATH` target properties."
msgstr ""
"这用于为所有目标初始化 :prop_tgt:`SKIP_BUILD_RPATH` 目标属性。有关 RPATH 处理的更多信息，请参阅 "
":prop_tgt:`INSTALL_RPATH` 和 :prop_tgt:`BUILD_RPATH` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_BUILD_RPATH.rst:16
msgid ""
"See also the :variable:`CMAKE_SKIP_INSTALL_RPATH` variable. To omit RPATH "
"in both the build and install steps, use :variable:`CMAKE_SKIP_RPATH` "
"instead."
msgstr ""
"另请参阅 :variable:`CMAKE_SKIP_INSTALL_RPATH` 变量。要在构建和安装步骤中省略 RPATH，请改用 "
":variable:`CMAKE_SKIP_RPATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.rst:2
msgid "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY"
msgstr "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.rst:4
msgid "Don't make the ``install`` target depend on the ``all`` target."
msgstr "不要让 ``install`` 目标依赖于 ``all`` 目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_ALL_DEPENDENCY.rst:6
msgid ""
"By default, the ``install`` target depends on the ``all`` target.  This "
"has the effect, that when ``make install`` is invoked or ``INSTALL`` is "
"built, first the ``all`` target is built, then the installation starts. If"
" ``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` is set to ``TRUE``, this dependency"
" is not created, so the installation process will start immediately, "
"independent from whether the project has been completely built or not."
msgstr ""
"默认情况下，``install`` 目标依赖于``all`` 目标。这具有这样的效果，当调用``make install`` "
"或构建``INSTALL`` 时，首先构建``all`` 目标，然后开始安装。如果 "
"``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` 设置为 "
"``TRUE``，则不会创建此依赖项，因此安装过程将立即开始，与项目是否已完全构建无关。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RPATH.rst:2
msgid "CMAKE_SKIP_INSTALL_RPATH"
msgstr "CMAKE_SKIP_INSTALL_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RPATH.rst:4
msgid "Do not include RPATHs in the install tree."
msgstr "不要在安装树中包含 RPATH。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RPATH.rst:6
msgid ""
"Normally CMake uses the build tree for the RPATH when building executables"
" etc on systems that use RPATH.  When the software is installed the "
"executables etc are relinked by CMake to have the install RPATH.  If this "
"variable is set to true then the software is always installed without "
"RPATH, even if RPATH is enabled when building.  This can be useful for "
"example to allow running tests from the build directory with RPATH enabled"
" before the installation step."
msgstr ""
"通常，在使用 RPATH 的系统上构建可执行文件等时，CMake 使用 RPATH 的构建树。安装软件后，CMake 会重新链接可执行文件等以安装 "
"RPATH。如果此变量设置为 true，则软件始终在没有 RPATH 的情况下安装，即使在构建时启用了 "
"RPATH。这可能很有用，例如允许在安装步骤之前启用 RPATH 的情况下从构建目录运行测试。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RPATH.rst:14
msgid ""
"See also the :variable:`CMAKE_SKIP_BUILD_RPATH` variable. To omit RPATH in"
" both the build and install steps, use :variable:`CMAKE_SKIP_RPATH` "
"instead."
msgstr ""
"另请参阅 :variable:`CMAKE_SKIP_BUILD_RPATH` 变量。要在构建和安装步骤中省略 RPATH，请改用 "
":variable:`CMAKE_SKIP_RPATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RULES.rst:2
msgid "CMAKE_SKIP_INSTALL_RULES"
msgstr "CMAKE_SKIP_INSTALL_RULES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RULES.rst:4
msgid "Whether to disable generation of installation rules."
msgstr "是否禁止生成安装规则。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_INSTALL_RULES.rst:6
msgid ""
"If ``TRUE``, CMake will neither generate installation rules nor will it "
"generate ``cmake_install.cmake`` files. This variable is ``FALSE`` by "
"default."
msgstr ""
"如果为“TRUE”，CMake 既不会生成安装规则，也不会生成“cmake_install.cmake”文件。默认情况下，此变量为“FALSE”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_RPATH.rst:2
msgid "CMAKE_SKIP_RPATH"
msgstr "CMAKE_SKIP_RPATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_RPATH.rst:4
msgid "If true, do not add run time path information."
msgstr "如果为真，则不添加运行时路径信息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SKIP_RPATH.rst:6
msgid ""
"If this is set to ``TRUE``, then the rpath information is not added to "
"compiled executables.  The default is to add rpath information if the "
"platform supports it.  This allows for easy running from the build tree.  "
"To omit RPATH in the install step, but not the build step, use "
":variable:`CMAKE_SKIP_INSTALL_RPATH` instead. To omit RPATH in the build "
"step, use :variable:`CMAKE_SKIP_BUILD_RPATH`."
msgstr ""
"如果将其设置为“TRUE”，则不会将 rpath 信息添加到已编译的可执行文件中。如果平台支持，默认是添加 rpath "
"信息。这允许从构建树轻松运行。要在安装步骤中省略 RPATH，而不是构建步骤，请改用 "
":variable:`CMAKE_SKIP_INSTALL_RPATH`。要在构建步骤中省略 "
"RPATH，请使用 :variable:`CMAKE_SKIP_BUILD_RPATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SOURCE_DIR.rst:2
msgid "CMAKE_SOURCE_DIR"
msgstr "CMAKE_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SOURCE_DIR.rst:4
msgid "The path to the top level of the source tree."
msgstr "源代码树顶层的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SOURCE_DIR.rst:6
msgid ""
"This is the full path to the top level of the current CMake source tree.  "
"For an in-source build, this would be the same as "
":variable:`CMAKE_BINARY_DIR`."
msgstr "这是当前 CMake 源代码树顶层的完整路径。对于源代码构建，这与 :variable:`CMAKE_BINARY_DIR` 相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SOURCE_DIR.rst:10
msgid ""
"When run in :option:`cmake -P` script mode, CMake sets the variables "
":variable:`CMAKE_BINARY_DIR`, ``CMAKE_SOURCE_DIR``, "
":variable:`CMAKE_CURRENT_BINARY_DIR` and "
":variable:`CMAKE_CURRENT_SOURCE_DIR` to the current working directory."
msgstr ""
"在 cmake -P 脚本模式下运行时，CMake 将变量 "
"CMAKE_BINARY_DIR、CMAKE_SOURCE_DIR、CMAKE_CURRENT_BINARY_DIR 和 "
"CMAKE_CURRENT_SOURCE_DIR 变量设置为当前工作目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STAGING_PREFIX.rst:2
msgid "CMAKE_STAGING_PREFIX"
msgstr "CMAKE_STAGING_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STAGING_PREFIX.rst:4
msgid ""
"This variable may be set to a path to install to when cross-compiling. "
"This can be useful if the path in :variable:`CMAKE_SYSROOT` is read-only, "
"or otherwise should remain pristine."
msgstr ""
"这个变量可以设置为交叉编译时安装的路径。如果 :variable:`CMAKE_SYSROOT` "
"中的路径是只读的，或者应该保持原始路径，这将很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STAGING_PREFIX.rst:8
msgid ""
"The ``CMAKE_STAGING_PREFIX`` location is also used as a search prefix by "
"the ``find_*`` commands. This can be controlled by setting the "
":variable:`CMAKE_FIND_NO_INSTALL_PREFIX` variable."
msgstr ""
"``CMAKE_STAGING_PREFIX`` 位置也被 ``find_*`` 命令用作搜索前缀。这可以通过设置 "
"CMAKE_FIND_NO_INSTALL_PREFIX 变量来控制。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STAGING_PREFIX.rst:12
msgid ""
"If any ``RPATH``/``RUNPATH`` entries passed to the linker contain the "
"``CMAKE_STAGING_PREFIX``, the matching path fragments are replaced with "
"the :variable:`CMAKE_INSTALL_PREFIX`."
msgstr ""
"如果传递给链接器的任何 ``RPATH``/``RUNPATH`` 条目包含 "
"``CMAKE_STAGING_PREFIX``，则匹配的路径片段将替换为 :variable:`CMAKE_INSTALL_PREFIX`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_PREFIX.rst:2
msgid "CMAKE_STATIC_LIBRARY_PREFIX"
msgstr "CMAKE_STATIC_LIBRARY_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_PREFIX.rst:4
msgid "The prefix for static libraries that you link to."
msgstr "您链接到的静态库的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_PREFIX.rst:6
msgid "The prefix to use for the name of a static library, ``lib`` on UNIX."
msgstr "用于静态库名称的前缀，在 UNIX 上为 ``lib``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_PREFIX.rst:8
msgid ""
"``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_SUFFIX.rst:2
msgid "CMAKE_STATIC_LIBRARY_SUFFIX"
msgstr "CMAKE_STATIC_LIBRARY_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_SUFFIX.rst:4
msgid "The suffix for static libraries that you link to."
msgstr "您链接到的静态库的后缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_SUFFIX.rst:6
msgid ""
"The suffix to use for the end of a static library filename, ``.lib`` on "
"Windows."
msgstr "用于静态库文件名结尾的后缀，在 Windows 上为 ``.lib``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LIBRARY_SUFFIX.rst:9
msgid ""
"``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` overrides this for language "
"``<LANG>``."
msgstr "``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` 覆盖语言``<LANG>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS.rst:2
msgid "CMAKE_STATIC_LINKER_FLAGS"
msgstr "CMAKE_STATIC_LINKER_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS.rst:4
msgid ""
"Flags to be used to create static libraries.  These flags will be passed "
"to the archiver when creating a static library."
msgstr "用于创建静态库的标志。这些标志将在创建静态库时传递给归档器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS.rst:7
msgid "See also :variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>`."
msgstr "另见 :variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS.rst:10
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.rst:11
msgid ""
"Static libraries do not actually link.  They are essentially archives of "
"object files.  The use of the name \"linker\" in the name of this variable"
" is kept for compatibility."
msgstr "静态库实际上并不链接。它们本质上是目标文件的存档。为保持兼容性，保留在此变量名称中使用名称“linker”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.rst:2
msgid "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>"
msgstr "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.rst:4
msgid ""
"Flags to be used to create static libraries.  These flags will be passed "
"to the archiver when creating a static library in the ``<CONFIG>`` "
"configuration."
msgstr "用于创建静态库的标志。在 ``<CONFIG>`` 配置中创建静态库时，这些标志将传递给归档器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG.rst:8
msgid "See also :variable:`CMAKE_STATIC_LINKER_FLAGS`."
msgstr "另见 :variable:`CMAKE_STATIC_LINKER_FLAGS`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT.rst:2
msgid "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT"
msgstr "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT.rst:6
msgid ""
"Value used to initialize the "
":variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>` cache entry the first time "
"a build tree is configured. This variable is meant to be set by a "
":variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or "
"append content to the value based on the environment and target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_STATIC_LINKER_FLAGS_<CONFIG> 缓存条目的值。此变量旨在由 :variable:`工具链文件"
" <CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_CONFIG_INIT.rst:12
msgid "See also :variable:`CMAKE_STATIC_LINKER_FLAGS_INIT`."
msgstr "另见 :variable:`CMAKE_STATIC_LINKER_FLAGS_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_INIT.rst:2
msgid "CMAKE_STATIC_LINKER_FLAGS_INIT"
msgstr "CMAKE_STATIC_LINKER_FLAGS_INIT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_INIT.rst:6
msgid ""
"Value used to initialize the :variable:`CMAKE_STATIC_LINKER_FLAGS` cache "
"entry the first time a build tree is configured. This variable is meant to"
" be set by a :variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>`.  CMake may"
" prepend or append content to the value based on the environment and "
"target platform."
msgstr ""
"用于在第一次配置构建树时初始化 CMAKE_STATIC_LINKER_FLAGS 缓存条目的值。此变量旨在由 :variable:`工具链文件 "
"<CMAKE_TOOLCHAIN_FILE>` 设置。 CMake 可能会根据环境和目标平台将内容添加到值中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_STATIC_LINKER_FLAGS_INIT.rst:12
msgid ""
"See also the configuration-specific variable "
":variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT`."
msgstr "另请参阅特定于配置的变量 :variable:`CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS.rst:2
msgid "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS"
msgstr "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS.rst:6
msgid ""
"This variable contains a list of env vars as a list of tokens with the "
"syntax ``var=value``."
msgstr "该变量包含一个环境变量列表作为标记列表，语法为“var=value”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS.rst:21
msgid "In case of malformed variables CMake will fail:"
msgstr "如果变量格式错误，CMake 将失败："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE.rst:2
msgid "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE"
msgstr "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE.rst:6
msgid ""
"If this variable evaluates to ``ON`` at the end of the top-level "
"``CMakeLists.txt`` file, the :generator:`Sublime Text 2` extra generator "
"excludes the build tree from the ``.sublime-project`` if it is inside the "
"source tree."
msgstr ""
"如果此变量在顶级 CMakeLists.txt 文件末尾的计算结果为 ON，Sublime Text 2 额外生成器将从 .sublime-"
"project 中排除构建树`` 如果它在源代码树中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUPPRESS_REGENERATION.rst:2
msgid "CMAKE_SUPPRESS_REGENERATION"
msgstr "CMAKE_SUPPRESS_REGENERATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUPPRESS_REGENERATION.rst:6
msgid ""
"If ``CMAKE_SUPPRESS_REGENERATION`` is ``OFF``, which is default, then "
"CMake adds a special target on which all other targets depend that checks "
"the build system and optionally re-runs CMake to regenerate the build "
"system when the target specification source changes."
msgstr ""
"如果 ``CMAKE_SUPPRESS_REGENERATION`` 为 ``OFF``（默认情况下），则 CMake "
"添加一个特殊目标，所有其他目标都依赖该目标检查构建系统，并可选择重新运行 CMake 以在目标规范源时重新生成构建系统变化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SUPPRESS_REGENERATION.rst:11
msgid ""
"If this variable evaluates to ``ON`` at the end of the top-level "
"``CMakeLists.txt`` file, CMake will not add the regeneration target to the"
" build system or perform any build system checks."
msgstr ""
"如果此变量在顶级“CMakeLists.txt”文件末尾的计算结果为“ON”，则 CMake "
"不会将重新生成目标添加到构建系统或执行任何构建系统检查。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT.rst:2
msgid "CMAKE_SYSROOT"
msgstr "CMAKE_SYSROOT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT.rst:4
msgid "Path to pass to the compiler in the ``--sysroot`` flag."
msgstr "在 ``--sysroot`` 标志中传递给编译器的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT.rst:6
msgid ""
"The ``CMAKE_SYSROOT`` content is passed to the compiler in the "
"``--sysroot`` flag, if supported.  The path is also stripped from the "
"``RPATH``/``RUNPATH`` if necessary on installation.  The ``CMAKE_SYSROOT``"
" is also used to prefix paths searched by the ``find_*`` commands."
msgstr ""
"如果支持，``CMAKE_SYSROOT`` 内容将在``--sysroot`` 标志中传递给编译器。如果安装时有必要，该路径也会从 "
"``RPATH``/``RUNPATH`` 中删除。 ``CMAKE_SYSROOT`` 还用于为``find_*`` 命令搜索的路径添加前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT.rst:14
msgid ""
"See also the :variable:`CMAKE_SYSROOT_COMPILE` and "
":variable:`CMAKE_SYSROOT_LINK` variables."
msgstr "另请参阅 :variable:`CMAKE_SYSROOT_COMPILE` 和 :variable:`CMAKE_SYSROOT_LINK` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_COMPILE.rst:2
msgid "CMAKE_SYSROOT_COMPILE"
msgstr "CMAKE_SYSROOT_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_COMPILE.rst:6
msgid ""
"Path to pass to the compiler in the ``--sysroot`` flag when compiling "
"source files.  This is the same as :variable:`CMAKE_SYSROOT` but is used "
"only for compiling sources and not linking."
msgstr ""
"编译源文件时在 ``--sysroot`` 标志中传递给编译器的路径。这与 :variable:`CMAKE_SYSROOT` "
"相同，但仅用于编译源代码而不用于链接。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_LINK.rst:2
msgid "CMAKE_SYSROOT_LINK"
msgstr "CMAKE_SYSROOT_LINK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSROOT_LINK.rst:6
msgid ""
"Path to pass to the compiler in the ``--sysroot`` flag when linking.  This"
" is the same as :variable:`CMAKE_SYSROOT` but is used only for linking and"
" not compiling sources."
msgstr ""
"链接时在 ``--sysroot`` 标志中传递给编译器的路径。这与 :variable:`CMAKE_SYSROOT` "
"相同，但仅用于链接而不是编译源。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM.rst:2
msgid "CMAKE_SYSTEM"
msgstr "CMAKE_SYSTEM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM.rst:4
msgid "Composite name of operating system CMake is compiling for."
msgstr "CMake 正在编译的操作系统的复合名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM.rst:6
msgid ""
"This variable is the composite of :variable:`CMAKE_SYSTEM_NAME` and "
":variable:`CMAKE_SYSTEM_VERSION`, e.g. "
"``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``.  If "
":variable:`CMAKE_SYSTEM_VERSION` is not set, then this variable is the "
"same as :variable:`CMAKE_SYSTEM_NAME`."
msgstr ""
"此变量是 CMAKE_SYSTEM_NAME 和 CMAKE_SYSTEM_VERSION "
"的组合，例如``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``。如果未设置 "
":variable:`CMAKE_SYSTEM_VERSION`，则此变量与 :variable:`CMAKE_SYSTEM_NAME` 相同。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_APPBUNDLE_PATH.rst:2
msgid "CMAKE_SYSTEM_APPBUNDLE_PATH"
msgstr "CMAKE_SYSTEM_APPBUNDLE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_APPBUNDLE_PATH.rst:6
msgid ""
"Search path for macOS application bundles used by the "
":command:`find_program`, and :command:`find_package` commands.  By default"
" it contains the standard directories for the current system.  It is *not*"
" intended to be modified by the project, use "
":variable:`CMAKE_APPBUNDLE_PATH` for this."
msgstr ""
":command:`find_program` 和 :command:`find_package` 命令使用的 macOS "
"应用程序包的搜索路径。默认情况下，它包含当前系统的标准目录。它*不*打算由项目修改，为此使用 :variable:`CMAKE_APPBUNDLE_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_FRAMEWORK_PATH.rst:2
msgid "CMAKE_SYSTEM_FRAMEWORK_PATH"
msgstr "CMAKE_SYSTEM_FRAMEWORK_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_FRAMEWORK_PATH.rst:6
msgid ""
"Search path for macOS frameworks used by the :command:`find_library`, "
":command:`find_package`, :command:`find_path`, and :command:`find_file` "
"commands.  By default it contains the standard directories for the current"
" system.  It is *not* intended to be modified by the project, use "
":variable:`CMAKE_FRAMEWORK_PATH` for this."
msgstr ""
":command:`find_library`、 :command:`find_package`、 :command:`find_path` 和 "
":command:`find_file` 命令使用的 macOS 框架的搜索路径。默认情况下，它包含当前系统的标准目录。它 *不* "
"打算由项目修改，为此使用 :variable:`CMAKE_FRAMEWORK_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:2
msgid "CMAKE_SYSTEM_IGNORE_PATH"
msgstr "CMAKE_SYSTEM_IGNORE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/IGNORE_SEARCH_SYSTEM.txt:1
msgid ""
"|CMAKE_IGNORE_VAR| is populated by CMake as part of its platform and "
"toolchain setup. Its purpose is to ignore locations containing "
"incompatible binaries meant for the host rather than the target platform. "
"The project or end user should not modify this variable, they should use "
"|CMAKE_IGNORE_NONSYSTEM_VAR| instead."
msgstr ""
"|CMAKE_IGNORE_VAR|由 CMake "
"作为其平台和工具链设置的一部分进行填充。其目的是忽略包含不兼容二进制文件的位置，这些二进制文件是针对主机而不是目标平台的。项目或最终用户不应修改此变量，他们应使用"
" |CMAKE_IGNORE_NONSYSTEM_VAR|反而。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:17
msgid ":variable:`CMAKE_SYSTEM_PREFIX_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_PREFIX_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:18
msgid ":variable:`CMAKE_SYSTEM_LIBRARY_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_LIBRARY_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:17
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:19
msgid ":variable:`CMAKE_SYSTEM_INCLUDE_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_INCLUDE_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PATH.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:20
msgid ":variable:`CMAKE_SYSTEM_PROGRAM_PATH`"
msgstr ":variable:`CMAKE_SYSTEM_PROGRAM_PATH`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_IGNORE_PREFIX_PATH.rst:2
msgid "CMAKE_SYSTEM_IGNORE_PREFIX_PATH"
msgstr "CMAKE_SYSTEM_IGNORE_PREFIX_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_INCLUDE_PATH.rst:2
msgid "CMAKE_SYSTEM_INCLUDE_PATH"
msgstr "CMAKE_SYSTEM_INCLUDE_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_INCLUDE_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_file` and "
":command:`find_path` commands.  By default this contains the standard "
"directories for the current system.  It is *not* intended to be modified "
"by the project; use :variable:`CMAKE_INCLUDE_PATH` for this.  See also "
":variable:`CMAKE_SYSTEM_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_file` 和 "
":command:`find_path` "
"命令。默认情况下，这包含当前系统的标准目录。它*不*打算由项目修改；为此使用 :variable:`CMAKE_INCLUDE_PATH`。另见 :variable:`CMAKE_SYSTEM_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_LIBRARY_PATH.rst:2
msgid "CMAKE_SYSTEM_LIBRARY_PATH"
msgstr "CMAKE_SYSTEM_LIBRARY_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_LIBRARY_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_library` command.  By "
"default this contains the standard directories for the current system.  It"
" is *not* intended to be modified by the project; use "
":variable:`CMAKE_LIBRARY_PATH` for this. See also "
":variable:`CMAKE_SYSTEM_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_library` "
"命令。默认情况下，这包含当前系统的标准目录。它*不*打算由项目修改；为此使用 :variable:`CMAKE_LIBRARY_PATH`。另见 :variable:`CMAKE_SYSTEM_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:2
msgid "CMAKE_SYSTEM_NAME"
msgstr "CMAKE_SYSTEM_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:4
msgid ""
"The name of the operating system for which CMake is to build. See the "
":variable:`CMAKE_SYSTEM_VERSION` variable for the OS version."
msgstr "CMake 要为其构建的操作系统的名称。请参阅操作系统版本的 :variable:`CMAKE_SYSTEM_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:7
msgid ""
"Note that ``CMAKE_SYSTEM_NAME`` is not set to anything by default when "
"running in script mode, since it's not building anything."
msgstr "请注意，在脚本模式下运行时，“CMAKE_SYSTEM_NAME”默认情况下未设置为任何内容，因为它没有构建任何内容。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:11
msgid "System Name for Host Builds"
msgstr "主机构建的系统名称"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:13
msgid ""
"``CMAKE_SYSTEM_NAME`` is by default set to the same value as the "
":variable:`CMAKE_HOST_SYSTEM_NAME` variable so that the build targets the "
"host system."
msgstr ""
"``CMAKE_SYSTEM_NAME`` 默认设置为与 CMAKE_HOST_SYSTEM_NAME 变量相同的值，以便构建以主机系统为目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:18
msgid "System Name for Cross Compiling"
msgstr "交叉编译的系统名称"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_NAME.rst:20
msgid ""
"``CMAKE_SYSTEM_NAME`` may be set explicitly when first configuring a new "
"build tree in order to enable :ref:`cross compiling <Cross Compiling "
"Toolchain>`. In this case the :variable:`CMAKE_SYSTEM_VERSION` variable "
"must also be set explicitly."
msgstr ""
"``CMAKE_SYSTEM_NAME`` 可以在第一次配置新的构建树时明确设置，以启用 :ref:`交叉编译 <Cross Compiling "
"Toolchain>`。在这种情况下，CMAKE_SYSTEM_VERSION 变量也必须显式设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:2
msgid "CMAKE_SYSTEM_PREFIX_PATH"
msgstr "CMAKE_SYSTEM_PREFIX_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:11
msgid ""
"By default this contains the system directories for the current system, "
"the :variable:`CMAKE_INSTALL_PREFIX`, and the "
":variable:`CMAKE_STAGING_PREFIX`. The installation and staging prefixes "
"may be excluded by setting the :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` "
"variable before the first :command:`project` invocation."
msgstr ""
"默认情况下，这包含当前系统的系统目录、CMAKE_INSTALL_PREFIX 和 "
"CMAKE_STAGING_PREFIX。安装和暂存前缀可以通过在第一次 :command:`project` 调用之前设置 "
":variable:`CMAKE_FIND_NO_INSTALL_PREFIX` 变量来排除。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:17
msgid ""
"The system directories that are contained in ``CMAKE_SYSTEM_PREFIX_PATH`` "
"are locations that typically include installed software. An example being "
"``/usr/local`` for UNIX based platforms. In addition to standard platform "
"locations, CMake will also add values to ``CMAKE_SYSTEM_PREFIX_PATH`` "
"based on environment variables. The environment variables and search "
"locations that CMake uses may evolve over time, as platforms and their "
"conventions also evolve. The following provides an indicative list of "
"environment variables and locations that CMake searches, but they are "
"subject to change:"
msgstr ""
"包含在“CMAKE_SYSTEM_PREFIX_PATH”中的系统目录是通常包含已安装软件的位置。一个例子是 ``/usr/local`` 用于基于"
" UNIX 的平台。除了标准平台位置外，CMake 还将根据环境变量向 CMAKE_SYSTEM_PREFIX_PATH "
"添加值。随着平台及其约定的发展，CMake 使用的环境变量和搜索位置可能会随着时间的推移而发展。以下提供了 CMake "
"搜索的环境变量和位置的指示性列表，但它们可能会发生变化："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:30
msgid "CrayLinuxEnvironment:"
msgstr "CrayLinux环境："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:28
msgid "``ENV{SYSROOT_DIR}/``"
msgstr "``ENV{SYSROOT_DIR}/``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:29
msgid "``ENV{SYSROOT_DIR}/usr``"
msgstr "``ENV{SYSROOT_DIR}/usr``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:30
msgid "``ENV{SYSROOT_DIR}/usr/local``"
msgstr "``ENV{SYSROOT_DIR}/usr/local``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:33
msgid "Darwin:"
msgstr "达尔文："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:33
msgid ""
"``ENV{SDKROOT}/usr`` When ``CMAKE_OSX_SYSROOT`` is not explicitly "
"specified."
msgstr "``ENV{SDKROOT}/usr`` 未明确指定 ``CMAKE_OSX_SYSROOT`` 时。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:36
msgid "OpenBSD:"
msgstr "打开BSD："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:36
msgid "``ENV{LOCALBASE}``"
msgstr "``ENV{LOCALBASE}``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:39
msgid "Unix:"
msgstr "Unix："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:39
msgid "``ENV{CONDA_PREFIX}`` when using a conda compiler"
msgstr "``ENV{CONDA_PREFIX}`` 使用 conda 编译器时"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:47
msgid "Windows:"
msgstr "视窗："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:42
msgid "``ENV{ProgramW6432}``"
msgstr "``ENV{ProgramW6432}``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:43
msgid "``ENV{ProgramFiles}``"
msgstr "``ENV{ProgramFiles}``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:44
msgid "``ENV{ProgramFiles(x86)}``"
msgstr "``ENV{ProgramFiles(x86)}``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:45
msgid "``ENV{SystemDrive}/Program Files``"
msgstr "``ENV{SystemDrive}/程序文件``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:46
msgid "``ENV{SystemDrive}/Program Files (x86)``"
msgstr "``ENV{SystemDrive}/Program Files (x86)``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:49
msgid ""
"``CMAKE_SYSTEM_PREFIX_PATH`` is *not* intended to be modified by the "
"project; use :variable:`CMAKE_PREFIX_PATH` for this."
msgstr ""
"``CMAKE_SYSTEM_PREFIX_PATH`` *不* 打算由项目修改；为此使用 :variable:`CMAKE_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PREFIX_PATH.rst:52
msgid ""
"See also :variable:`CMAKE_SYSTEM_INCLUDE_PATH`, "
":variable:`CMAKE_SYSTEM_LIBRARY_PATH`, "
":variable:`CMAKE_SYSTEM_PROGRAM_PATH`, and "
":variable:`CMAKE_SYSTEM_IGNORE_PATH`."
msgstr ""
"另见 :variable:`CMAKE_SYSTEM_INCLUDE_PATH`、 :variable:`CMAKE_SYSTEM_LIBRARY_PATH`、 :variable:`CMAKE_SYSTEM_PROGRAM_PATH`"
" 和 :variable:`CMAKE_SYSTEM_IGNORE_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PROCESSOR.rst:2
msgid "CMAKE_SYSTEM_PROCESSOR"
msgstr "CMAKE_SYSTEM_PROCESSOR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PROCESSOR.rst:4
msgid ""
"When not cross-compiling, this variable has the same value as the "
":variable:`CMAKE_HOST_SYSTEM_PROCESSOR` variable.  In many cases, this "
"will correspond to the target architecture for the build, but this is not "
"guaranteed.  (E.g. on Windows, the host may be ``AMD64`` even when using a"
" MSVC ``cl`` compiler with a 32-bit target.)"
msgstr ""
"当不交叉编译时，此变量与 CMAKE_HOST_SYSTEM_PROCESSOR "
"变量具有相同的值。在许多情况下，这将对应于构建的目标架构，但这并不能保证。 （例如，在 Windows 上，主机可能是 "
"``AMD64``，即使使用带有 32 位目标的 MSVC ``cl`` 编译器也是如此。）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PROCESSOR.rst:10
msgid ""
"When cross-compiling, a :variable:`CMAKE_TOOLCHAIN_FILE` should set the "
"``CMAKE_SYSTEM_PROCESSOR`` variable to match target architecture that it "
"specifies (via :variable:`CMAKE_<LANG>_COMPILER` and perhaps "
":variable:`CMAKE_<LANG>_COMPILER_TARGET`)."
msgstr ""
"交叉编译时，CMAKE_TOOLCHAIN_FILE 应该设置 CMAKE_SYSTEM_PROCESSOR 变量以匹配它指定的目标体系结构（通过 "
"CMAKE_<LANG>_COMPILER 和可能的 CMAKE_<LANG> _COMPILER_TARGET`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PROGRAM_PATH.rst:2
msgid "CMAKE_SYSTEM_PROGRAM_PATH"
msgstr "CMAKE_SYSTEM_PROGRAM_PATH"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_PROGRAM_PATH.rst:4
msgid ""
":ref:`Semicolon-separated list <CMake Language Lists>` of directories "
"specifying a search path for the :command:`find_program` command.  By "
"default this contains the standard directories for the current system.  It"
" is *not* intended to be modified by the project; use "
":variable:`CMAKE_PROGRAM_PATH` for this. See also "
":variable:`CMAKE_SYSTEM_PREFIX_PATH`."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定搜索路径的目录:command:`find_program` "
"命令。默认情况下，这包含当前系统的标准目录。它*不*打算由项目修改；为此使用 :variable:`CMAKE_PROGRAM_PATH`。另见 :variable:`CMAKE_SYSTEM_PREFIX_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:2
msgid "CMAKE_SYSTEM_VERSION"
msgstr "CMAKE_SYSTEM_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:4
msgid ""
"The version of the operating system for which CMake is to build. See the "
":variable:`CMAKE_SYSTEM_NAME` variable for the OS name."
msgstr "CMake 要为其构建的操作系统的版本。请参阅 :variable:`CMAKE_SYSTEM_NAME` 变量以获取操作系统名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:8
msgid "System Version for Host Builds"
msgstr "主机构建的系统版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:10
msgid ""
"When the :variable:`CMAKE_SYSTEM_NAME` variable takes its default value "
"then ``CMAKE_SYSTEM_VERSION`` is by default set to the same value as the "
":variable:`CMAKE_HOST_SYSTEM_VERSION` variable so that the build targets "
"the host system version."
msgstr ""
"当 :variable:`CMAKE_SYSTEM_NAME` 变量采用其默认值时，``CMAKE_SYSTEM_VERSION`` 默认设置为与 "
":variable:`CMAKE_HOST_SYSTEM_VERSION` 变量相同的值，以便构建以主机系统版本为目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:15
msgid ""
"In the case of a host build then ``CMAKE_SYSTEM_VERSION`` may be set "
"explicitly when first configuring a new build tree in order to enable "
"targeting the build for a different version of the host operating system "
"than is actually running on the host.  This is allowed and not considered "
"cross compiling so long as the binaries built for the specified OS version"
" can still run on the host."
msgstr ""
"在主机构建的情况下，“CMAKE_SYSTEM_VERSION”可以在首次配置新的构建树时显式设置，以便针对与主机上实际运行的不同版本的主机操作系统启用构建。只要为指定操作系统版本构建的二进制文件仍然可以在主机上运行，​​就允许这样做并且不考虑交叉编译。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:23
msgid "System Version for Cross Compiling"
msgstr "交叉编译的系统版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_SYSTEM_VERSION.rst:25
msgid ""
"When the :variable:`CMAKE_SYSTEM_NAME` variable is set explicitly to "
"enable :ref:`cross compiling <Cross Compiling Toolchain>` then the value "
"of ``CMAKE_SYSTEM_VERSION`` must also be set explicitly to specify the "
"target system version."
msgstr ""
"当 :variable:`CMAKE_SYSTEM_NAME` 变量被显式设置为启用 :ref:`交叉编译 <Cross Compiling "
"Toolchain>` 时，``CMAKE_SYSTEM_VERSION`` 的值也必须被显式设置以指定目标系统版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_LANGUAGE_VERSION.rst:2
msgid "CMAKE_Swift_LANGUAGE_VERSION"
msgstr "CMAKE_Swift_LANGUAGE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_LANGUAGE_VERSION.rst:6
msgid ""
"Set to the Swift language version number.  If not set, the oldest legacy "
"version known to be available in the host Xcode version is assumed:"
msgstr "设置为 Swift 语言版本号。如果未设置，则假定主机 Xcode 版本中已知可用的最旧旧版本："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_LANGUAGE_VERSION.rst:9
msgid "Swift ``4.0`` for Xcode 10.2 and above."
msgstr "Swift ``4.0`` 适用于 Xcode 10.2 及更高版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_LANGUAGE_VERSION.rst:10
msgid "Swift ``3.0`` for Xcode 8.3 and above."
msgstr "Swift ``3.0`` 适用于 Xcode 8.3 及更高版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_LANGUAGE_VERSION.rst:11
msgid "Swift ``2.3`` for Xcode 8.2 and below."
msgstr "Swift ``2.3`` 适用于 Xcode 8.2 及以下版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_MODULE_DIRECTORY.rst:2
msgid "CMAKE_Swift_MODULE_DIRECTORY"
msgstr "CMAKE_Swift_MODULE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_MODULE_DIRECTORY.rst:6
msgid "Swift module output directory."
msgstr "Swift 模块输出目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_MODULE_DIRECTORY.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`Swift_MODULE_DIRECTORY`"
" property on all the targets.  See the target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 Swift_MODULE_DIRECTORY 属性。有关其他信息，请参阅目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_NUM_THREADS.rst:2
msgid "CMAKE_Swift_NUM_THREADS"
msgstr "CMAKE_Swift_NUM_THREADS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_NUM_THREADS.rst:6
msgid "Number of threads for parallel compilation for Swift targets."
msgstr "Swift 目标并行编译的线程数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_Swift_NUM_THREADS.rst:8
msgid ""
"This variable controls the number of parallel jobs that the swift driver "
"creates for building targets.  If not specified, it will default to the "
"number of logical CPUs on the host."
msgstr "此变量控制 swift 驱动程序为构建目标创建的并行作业的数量。如果未指定，它将默认为主机上逻辑 CPU 的数量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:2
msgid "CMAKE_TASKING_TOOLSET"
msgstr "CMAKE_TASKING_TOOLSET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:6
msgid "Select the Tasking toolset which provides the compiler"
msgstr "选择提供编译器的任务工具集"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:8
msgid ""
"Architecture compilers are provided by different toolchains with "
"incompatible versioning schemes.  Set this variable in a "
":variable:`toolchain file <CMAKE_TOOLCHAIN_FILE>` so CMake can detect the "
"compiler features correctly. If no toolset is specified, ``Standalone`` is"
" assumed."
msgstr ""
"架构编译器由具有不兼容版本控制方案的不同工具链提供。在 :variable:`toolchain 文件 "
"<CMAKE_TOOLCHAIN_FILE>` 中设置此变量，以便 CMake 可以正确检测编译器功能。如果未指定工具集，则假定为“独立”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:14
msgid ""
"Due to the different versioning schemes, the compiler version "
"(:variable:`CMAKE_<LANG>_COMPILER_VERSION`) depends on the toolset and "
"architecture in use. If projects can be built with multiple toolsets or "
"architectures, the specified ``CMAKE_TASKING_TOOLSET`` and the "
"automatically determined :variable:`CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID`"
" must be taken into account when comparing against the "
":variable:`CMAKE_<LANG>_COMPILER_VERSION`."
msgstr ""
"由于版本控制方案不同，编译器版本 (:variable:`CMAKE_<LANG>_COMPILER_VERSION`) "
"取决于所使用的工具集和架构。如果可以使用多个工具集或架构构建项目，则在与 CMAKE_<LANG>_COMPILER_VERSION "
"进行比较时，必须考虑指定的 CMAKE_TASKING_TOOLSET 和自动确定的 "
"CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID `。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:23
msgid "``TriCore``"
msgstr "``三核``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:23
msgid "Compilers are provided by the TriCore toolset."
msgstr "编译器由 TriCore 工具集提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:26
msgid "``SmartCode``"
msgstr "``智能代码``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:26
msgid "Compilers are provided by the SmartCode toolset."
msgstr "编译器由 SmartCode 工具集提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:33
msgid "``Standalone``"
msgstr "``独立``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:29
msgid "Compilers are provided by the standalone toolsets."
msgstr "编译器由独立工具集提供。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TASKING_TOOLSET.rst:33
msgid ""
"For the TriCore architecture, the compiler from the TriCore toolset is "
"selected as standalone compiler."
msgstr "对于 TriCore 架构，选择 TriCore 工具集中的编译器作为独立编译器。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_CAINFO.rst:2
msgid "CMAKE_TLS_CAINFO"
msgstr "CMAKE_TLS_CAINFO"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_CAINFO.rst:4
msgid ""
"Specify the default value for the :command:`file(DOWNLOAD)` and "
":command:`file(UPLOAD)` commands' ``TLS_CAINFO`` options. It is unset by "
"default."
msgstr ""
"为 :command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令的 ``TLS_CAINFO`` "
"选项指定默认值。默认情况下未设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_VERIFY.rst:2
msgid "CMAKE_TLS_VERIFY"
msgstr "CMAKE_TLS_VERIFY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_VERIFY.rst:4
msgid ""
"Specify the default value for the :command:`file(DOWNLOAD)` and "
":command:`file(UPLOAD)` commands' ``TLS_VERIFY`` options. If not set, the "
"default is *off*."
msgstr ""
"为 :command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令的 ``TLS_VERIFY`` "
"选项指定默认值。如果未设置，则默认为 *off*。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TLS_VERIFY.rst:11
msgid ""
"TLS verification can help provide confidence that one is connecting to the"
" desired server.  When downloading known content, one should also use file"
" hashes to verify it."
msgstr "TLS 验证有助于确保人们正在连接到所需的服务器。下载已知内容时，还应该使用文件哈希来验证它。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:2
msgid "CMAKE_TOOLCHAIN_FILE"
msgstr "CMAKE_TOOLCHAIN_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:4
msgid "Path to toolchain file supplied to :manual:`cmake(1)`."
msgstr "提供给 cmake(1) 的工具链文件的路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:6
msgid ""
"This variable is specified on the command line when cross-compiling with "
"CMake. It is the path to a file which is read early in the CMake run and "
"which specifies locations for compilers and toolchain utilities, and other"
" target platform and compiler related information."
msgstr ""
"这个变量是在使用 CMake 进行交叉编译时在命令行中指定的。它是在 CMake "
"运行早期读取的文件的路径，它指定编译器和工具链实用程序的位置，以及其他目标平台和编译器相关信息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:11
msgid ""
"Relative paths are allowed and are interpreted first as relative to the "
"build directory, and if not found, relative to the source directory."
msgstr "相对路径是允许的，首先被解释为相对于构建目录，如果找不到，则相对于源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:14
msgid ""
"This is initialized by the :envvar:`CMAKE_TOOLCHAIN_FILE` environment "
"variable if it is set when a new build tree is first created."
msgstr "如果在首次创建新构建树时设置了它，则它由 CMAKE_TOOLCHAIN_FILE 环境变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TOOLCHAIN_FILE.rst:17
msgid ""
"See the :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable for setting "
"other things not directly related to the toolchain."
msgstr ""
"请参阅 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` 变量以设置与工具链不直接相关的其他内容。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_CONFIGURATION.rst:2
msgid "CMAKE_TRY_COMPILE_CONFIGURATION"
msgstr "CMAKE_TRY_COMPILE_CONFIGURATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_CONFIGURATION.rst:4
msgid ""
"Build configuration used for :command:`try_compile` and :command:`try_run`"
" projects."
msgstr "构建用于 :command:`try_compile` 和 :command:`try_run` 项目的配置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_CONFIGURATION.rst:7
msgid ""
"Projects built by :command:`try_compile` and :command:`try_run` are built "
"synchronously during the CMake configuration step.  Therefore a specific "
"build configuration must be chosen even if the generated build system "
"supports multiple configurations."
msgstr ""
"由 :command:`try_compile` 和 :command:`try_run` 构建的项目在 CMake "
"配置步骤中同步构建。因此，即使生成的构建系统支持多种配置，也必须选择特定的构建配置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES.rst:2
msgid "CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES"
msgstr "CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES.rst:6
msgid ""
"Set to a true value to tell the :command:`try_compile` command not to "
"propagate any platform variables into the test project."
msgstr "设置为真值以告诉 :command:`try_compile` 命令不要将任何平台变量传播到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES.rst:9
msgid ""
"The :command:`try_compile` command normally passes some CMake variables "
"that configure the platform and toolchain behavior into test projects. See"
" policy :policy:`CMP0137`.  This variable may be set to disable that "
"behavior."
msgstr ""
":command:`try_compile` 命令通常会将一些配置平台和工具链行为的 CMake "
"变量传递到测试项目中。请参阅政策:policy:`CMP0137`。此变量可以设置为禁用该行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:2
msgid "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES"
msgstr "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:6
msgid ""
"List of variables that the :command:`try_compile` command source file "
"signature must propagate into the test project in order to target the same"
" platform as the host project."
msgstr ":command:`try_compile` 命令源文件签名必须传播到测试项目的变量列表，以便以与宿主项目相同的平台为目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:14
msgid ""
"Variables meaningful to CMake, such as :variable:`CMAKE_<LANG>_FLAGS`, are"
" propagated automatically.  The ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`` "
"variable may be set to pass custom variables meaningful to a toolchain "
"file. For example, a toolchain file may contain:"
msgstr ""
"对 CMake 有意义的变量，例如 :variable:`CMAKE_<LANG>_FLAGS`，会自动传播。 "
"``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`` "
"变量可以设置为将有意义的自定义变量传递给工具链文件。例如，工具链文件可能包含："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:25
msgid ""
"If a user passes ``-DMY_CUSTOM_VARIABLE=SomeValue`` to CMake then this "
"setting will be made visible to the toolchain file both for the main "
"project and for test projects generated by the :command:`try_compile` "
"command source file signature."
msgstr ""
"如果用户将“-DMY_CUSTOM_VARIABLE=SomeValue”传递给 CMake，则此设置将对主项目和由 try_compile "
"命令源文件签名生成的测试项目的工具链文件可见。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:30
msgid ""
"Listed variables are propagated to the :command:`try_compile` :ref:`whole-"
"project <Try Compiling Whole Projects>` signature too. See "
":policy:`CMP0137`."
msgstr ""
"列出的变量也会传播到 :command:`try_compile` :ref:`whole-project <Try Compiling Whole"
" Projects>` 签名。请参阅:policy:`CMP0137`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_PLATFORM_VARIABLES.rst:35
msgid ""
"The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable may be "
"set to disable passing platform variables into the test project."
msgstr ""
":variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` "
"变量可以设置为禁止将平台变量传递到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:2
msgid "CMAKE_TRY_COMPILE_TARGET_TYPE"
msgstr "CMAKE_TRY_COMPILE_TARGET_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:6
msgid ""
"Type of target generated for :command:`try_compile` calls using the source"
" file signature.  Valid values are:"
msgstr "使用源文件签名为 :command:`try_compile` 调用生成的目标类型。有效值为："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:11
msgid "``EXECUTABLE``"
msgstr "``可执行``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:10
msgid ""
"Use :command:`add_executable` to name the source file in the generated "
"project.  This is the default if no value is given."
msgstr "使用 :command:`add_executable` 为生成的项目中的源文件命名。如果没有给出值，这是默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:16
msgid "``STATIC_LIBRARY``"
msgstr "``STATIC_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TRY_COMPILE_TARGET_TYPE.rst:14
msgid ""
"Use :command:`add_library` with the ``STATIC`` option to name the source "
"file in the generated project.  This avoids running the linker and is "
"intended for use with cross-compiling toolchains that cannot link without "
"custom flags or linker scripts."
msgstr ""
"使用 :command:`add_library` 和 ``STATIC`` "
"选项来命名生成的项目中的源文件。这避免了运行链接器，并且旨在与交叉编译工具链一起使用，这些工​​具链在没有自定义标志或链接器脚本的情况下无法链接。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TWEAK_VERSION.rst:2
msgid "CMAKE_TWEAK_VERSION"
msgstr "CMAKE_TWEAK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TWEAK_VERSION.rst:4
msgid ""
"Defined to ``0`` for compatibility with code written for older CMake "
"versions that may have defined higher values."
msgstr "定义为“0”是为了与为可能定义了更高值的旧 CMake 版本编写的代码兼容。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_TWEAK_VERSION.rst:9
msgid ""
"In CMake versions 2.8.2 through 2.8.12, this variable holds the fourth "
"version number component of the :variable:`CMAKE_VERSION` variable."
msgstr ""
"在 CMake 版本 2.8.2 到 2.8.12 中，此变量保存 :variable:`CMAKE_VERSION` 变量的第四个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD.rst:2
msgid "CMAKE_UNITY_BUILD"
msgstr "CMAKE_UNITY_BUILD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`UNITY_BUILD` property "
"of targets when they are created.  Setting it to true enables batch "
"compilation of multiple sources within each target. This feature is known "
"as a *Unity* or *Jumbo* build."
msgstr ""
"此变量用于在创建目标时初始化目标的 :prop_tgt:`UNITY_BUILD` 属性。将其设置为 true "
"可以在每个目标中批量编译多个源。此功能称为 *Unity* 或 *Jumbo* 构建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD.rst:11
msgid ""
"Projects should not set this variable, it is intended as a developer "
"control to be set on the :manual:`cmake(1)` command line or other "
"equivalent methods.  The developer must have the ability to enable or "
"disable unity builds according to the capabilities of their own machine "
"and compiler."
msgstr ""
"项目不应设置此变量，它旨在作为开发人员控件在 :manual:`cmake(1)` "
"命令行或其他等效方法上进行设置。开发人员必须能够根据自己的机器和编译器的能力启用或禁用统一构建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD.rst:17
msgid ""
"By default, this variable is not set, which will result in unity builds "
"being disabled."
msgstr "默认情况下，未设置此变量，这将导致禁用统一构建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD.rst:21
msgid ""
"This option currently does not work well in combination with the "
":variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable."
msgstr "此选项目前不能很好地与 CMAKE_EXPORT_COMPILE_COMMANDS 变量结合使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD_BATCH_SIZE.rst:2
msgid "CMAKE_UNITY_BUILD_BATCH_SIZE"
msgstr "CMAKE_UNITY_BUILD_BATCH_SIZE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD_BATCH_SIZE.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`UNITY_BUILD_BATCH_SIZE`"
" property of targets when they are created.  It specifies the default "
"upper limit on the number of source files that may be combined in any one "
"unity source file when unity builds are enabled for a target."
msgstr ""
"此变量用于在创建目标时初始化目标的 UNITY_BUILD_BATCH_SIZE "
"属性。当为目标启用统一构建时，它指定可以组合在任何一个统一源文件中的源文件数量的默认上限。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD_UNIQUE_ID.rst:2
msgid "CMAKE_UNITY_BUILD_UNIQUE_ID"
msgstr "CMAKE_UNITY_BUILD_UNIQUE_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_UNITY_BUILD_UNIQUE_ID.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`UNITY_BUILD_UNIQUE_ID` "
"property of targets when they are created.  It specifies the name of the "
"unique identifier generated per file in a unity build."
msgstr ""
"此变量用于在创建目标时初始化目标的 UNITY_BUILD_UNIQUE_ID 属性。它指定在统一构建中为每个文件生成的唯一标识符的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.rst:2
msgid "CMAKE_USER_MAKE_RULES_OVERRIDE"
msgstr "CMAKE_USER_MAKE_RULES_OVERRIDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.rst:4
msgid "Specify a CMake file that overrides platform information."
msgstr "指定覆盖平台信息的 CMake 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.rst:6
msgid ""
"CMake loads the specified file while enabling support for each language "
"from either the :command:`project` or :command:`enable_language` commands."
"  It is loaded after CMake's builtin compiler and platform information "
"modules have been loaded but before the information is used.  The file may"
" set platform information variables to override CMake's defaults. See "
":variable:`CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>` for the language-"
"specific version of this variable."
msgstr ""
"CMake 加载指定的文件，同时从 :command:`project` 或 :command:`enable_language` "
"命令启用对每种语言的支持。它在 CMake 的内置编译器和平台信息模块加载之后但在使用这些信息之前加载。该文件可以设置平台信息变量来覆盖 CMake"
" 的默认值。有关此变量的特定语言版本，请参阅 :variable:`CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE.rst:14
msgid ""
"This feature is intended for use only in overriding information variables "
"that must be set before CMake builds its first test project to check that "
"the compiler for a language works.  It should not be used to load a file "
"in cases that a normal :command:`include` will work.  Use it only as a "
"last resort for behavior that cannot be achieved any other way.  For "
"example, one may set the :variable:`CMAKE_C_FLAGS_INIT "
"<CMAKE_<LANG>_FLAGS_INIT>` variable to change the default value used to "
"initialize the :variable:`CMAKE_C_FLAGS <CMAKE_<LANG>_FLAGS>` variable "
"before it is cached.  The override file should NOT be used to set anything"
" that could be set after languages are enabled, such as variables like "
":variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY` that affect the placement of "
"binaries.  Information set in the file will be used for "
":command:`try_compile` and :command:`try_run` builds too."
msgstr ""
"此功能仅用于覆盖必须在 CMake 构建其第一个测试项目之前设置的信息变量，以检查语言的编译器是否正常工作。在正常的 "
":command:`include` 可以工作的情况下，不应使用它来加载文件。仅将其用作无法通过任何其他方式实现的行为的最后手段。例如，可以设置 "
":variable:`CMAKE_C_FLAGS_INIT <CMAKE_<LANG>_FLAGS_INIT>` 变量来更改用于在缓存之前初始化 "
":variable:`CMAKE_C_FLAGS <CMAKE_<LANG>_FLAGS>` "
"变量的默认值。覆盖文件不应该用于设置任何可以在启用语言后设置的内容，例如影响二进制文件位置的变量 :variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY`。文件中设置的信息也将用于"
" :command:`try_compile` 和 :command:`try_run` 构建。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.rst:2
msgid "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>"
msgstr "CMAKE_USER_MAKE_RULES_OVERRIDE_<语言>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.rst:4
msgid ""
"Specify a CMake file that overrides platform information for ``<LANG>``."
msgstr "指定一个覆盖“<LANG>”平台信息的 CMake 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USER_MAKE_RULES_OVERRIDE_LANG.rst:6
msgid ""
"This is a language-specific version of "
":variable:`CMAKE_USER_MAKE_RULES_OVERRIDE` loaded only when enabling "
"language ``<LANG>``."
msgstr ""
"这是 :variable:`CMAKE_USER_MAKE_RULES_OVERRIDE` 的特定语言版本，仅在启用语言 ``<LANG>`` "
"时加载。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USE_RELATIVE_PATHS.rst:2
msgid "CMAKE_USE_RELATIVE_PATHS"
msgstr "CMAKE_USE_RELATIVE_PATHS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_USE_RELATIVE_PATHS.rst:4
msgid ""
"This variable has no effect.  The partially implemented effect it had in "
"previous releases was removed in CMake 3.4."
msgstr "此变量无效。它在以前版本中的部分实现效果在 CMake 3.4 中被删除。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERBOSE_MAKEFILE.rst:2
msgid "CMAKE_VERBOSE_MAKEFILE"
msgstr "CMAKE_VERBOSE_MAKEFILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERBOSE_MAKEFILE.rst:4
msgid "Enable verbose output from Makefile builds."
msgstr "启用 Makefile 构建的详细输出。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERBOSE_MAKEFILE.rst:6
msgid ""
"This variable is a cache entry initialized (to ``FALSE``) by the "
":command:`project` command.  Users may enable the option in their local "
"build tree to get more verbose output from Makefile builds and show each "
"command line as it is launched."
msgstr ""
"这个变量是由 :command:`project` 命令初始化的缓存条目（为 ``FALSE``）。用户可以在他们的本地构建树中启用该选项，以从 "
"Makefile 构建中获得更详细的输出，并在启动时显示每个命令行。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst:2
msgid "CMAKE_VERIFY_INTERFACE_HEADER_SETS"
msgstr "CMAKE_VERIFY_INTERFACE_HEADER_SETS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` property of targets when they are"
" created.  Setting it to true enables header set verification."
msgstr ""
"此变量用于在创建目标时初始化目标的 :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` 属性。将其设置为 true "
"可启用标头集验证。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst:10
msgid ""
"Projects should not normally set this variable, it is intended as a "
"developer control to be set on the :manual:`cmake(1)` command line or "
"other equivalent methods.  The developer must have the ability to enable "
"or disable header set verification according to the capabilities of their "
"own machine and compiler."
msgstr ""
"项目通常不应设置此变量，它旨在作为开发人员控件在 :manual:`cmake(1)` "
"命令行或其他等效方法上进行设置。开发人员必须能够根据自己的机器和编译器的能力启用或禁用标头集验证。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst:16
msgid ""
"Verification of a dependency's header sets is not typically of interest to"
" developers.  Therefore, :command:`FetchContent_MakeAvailable` explicitly "
"sets ``CMAKE_VERIFY_INTERFACE_HEADER_SETS`` to false for the duration of "
"its call, but restores its original value before returning.  If a project "
"brings a dependency directly into the main build (e.g. calling "
":command:`add_subdirectory` on a vendored project from a git submodule), "
"it should also do likewise.  For example:"
msgstr ""
"开发人员通常不会对依赖项的标头集的验证感兴趣。因此， :command:`FetchContent_MakeAvailable` 在其调用期间显式将 "
"`CMAKE_VERIFY_INTERFACE_HEADER_SETS`` 设置为 "
"false，但在返回前恢复其原始值。如果一个项目直接将依赖项引入主构建（例如，从 git 子模块调用 add_subdirectory "
"到一个出售的项目），它也应该这样做。例如："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERIFY_INTERFACE_HEADER_SETS.rst:38
msgid ""
"By default, this variable is not set, which will result in header set "
"verification being disabled."
msgstr "默认情况下，此变量未设置，这将导致标头集验证被禁用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:2
msgid "CMAKE_VERSION"
msgstr "CMAKE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:4
msgid ""
"The CMake version string as three non-negative integer components "
"separated by ``.`` and possibly followed by ``-`` and other information. "
"The first two components represent the feature level and the third "
"component represents either a bug-fix level or development date."
msgstr ""
"CMake 版本字符串作为三个非负整数组件，由 ``.`` 分隔，可能后跟 ``-`` "
"和其他信息。前两个组件代表功能级别，第三个组件代表错误修复级别或开发日期。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:9
msgid ""
"Release versions and release candidate versions of CMake use the format::"
msgstr "CMake 的发布版本和发布候选版本使用以下格式："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:13
msgid ""
"where the ``<patch>`` component is less than ``20000000``.  Development "
"versions of CMake use the format::"
msgstr "其中 ``<patch>`` 组件小于 ``20000000``。 CMake 的开发版本使用格式 ::"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:18
msgid ""
"where the ``<date>`` component is of format ``CCYYMMDD`` and ``<id>`` may "
"contain arbitrary text.  This represents development as of a particular "
"date following the ``<major>.<minor>`` feature release."
msgstr ""
"其中 ``<date>`` 组件的格式为 ``CCYYMMDD`` 和 ``<id>`` 可能包含任意文本。这表示在 "
"``<major>.<minor>`` 功能发布之后的特定日期的开发。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:22
msgid "Individual component values are also available in variables:"
msgstr "各个组件值也可用于变量："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:24
msgid ":variable:`CMAKE_MAJOR_VERSION`"
msgstr ":variable:`CMAKE_MAJOR_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:25
msgid ":variable:`CMAKE_MINOR_VERSION`"
msgstr ":variable:`CMAKE_MINOR_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:26
msgid ":variable:`CMAKE_PATCH_VERSION`"
msgstr ":variable:`CMAKE_PATCH_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:27
msgid ":variable:`CMAKE_TWEAK_VERSION`"
msgstr ":variable:`CMAKE_TWEAK_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:29
msgid ""
"Use the :command:`if` command ``VERSION_LESS``, ``VERSION_GREATER``, "
"``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, or ``VERSION_GREATER_EQUAL`` "
"operators to compare version string values against ``CMAKE_VERSION`` using"
" a component-wise test.  Version component values may be 10 or larger so "
"do not attempt to compare version strings as floating-point numbers."
msgstr ""
"使用 :command:`if 命令 "
"``VERSION_LESS``、``VERSION_GREATER``、``VERSION_EQUAL``、``VERSION_LESS_EQUAL``"
" 或 ``VERSION_GREATER_EQUAL`` 运算符将版本字符串值与 ``CMAKE_VERSION` 进行比较` "
"使用组件测试。版本组件值可能为 10 或更大，因此不要尝试将版本字符串作为浮点数进行比较。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:37
msgid ""
"CMake versions 2.8.2 through 2.8.12 used three components for the feature "
"level.  Release versions represented the bug-fix level in a fourth "
"component, i.e. ``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``. Development"
" versions represented the development date in the fourth component, i.e. "
"``<major>.<minor>.<patch>.<date>[-<id>]``."
msgstr ""
"CMake 版本 2.8.2 到 2.8.12 "
"使用三个组件来实现功能级别。发布版本表示第四个组件中的错误修复级别，即``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``。开发版本代表第四部分的开发日期，即``<major>.<minor>.<patch>.<date>[-<id>]``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:43
msgid ""
"CMake versions prior to 2.8.2 used three components for the feature level "
"and had no bug-fix component.  Release versions used an even-valued second"
" component, i.e. ``<major>.<even-minor>.<patch>[-rc<n>]``.  Development "
"versions used an odd-valued second component with the development date as "
"the third component, i.e. ``<major>.<odd-minor>.<date>``."
msgstr ""
"2.8.2 之前的 CMake 版本在功能级别使用三个组件并且没有错误修复组件。发布版本使用偶数第二个组件，即``<major>.<even-"
"minor>.<patch>[-rc<n>]``。开发版本使用奇数第二个组件，开发日期作为第三个组件，即``<major>.<odd-"
"minor>.<date>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VERSION.rst:50
msgid ""
"The ``CMAKE_VERSION`` variable is defined by CMake 2.6.3 and higher. "
"Earlier versions defined only the individual component variables."
msgstr "``CMAKE_VERSION`` 变量由 CMake 2.6.3 及更高版本定义。早期版本仅定义了单个组件变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VISIBILITY_INLINES_HIDDEN.rst:2
msgid "CMAKE_VISIBILITY_INLINES_HIDDEN"
msgstr "CMAKE_VISIBILITY_INLINES_HIDDEN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VISIBILITY_INLINES_HIDDEN.rst:4
msgid ""
"Default value for the :prop_tgt:`VISIBILITY_INLINES_HIDDEN` target "
"property when a target is created."
msgstr "创建目标时 :prop_tgt:`VISIBILITY_INLINES_HIDDEN` 目标属性的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_DEVENV_COMMAND.rst:2
msgid "CMAKE_VS_DEVENV_COMMAND"
msgstr "CMAKE_VS_DEVENV_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_DEVENV_COMMAND.rst:4
msgid ""
"The generators for :generator:`Visual Studio 9 2008` and above set this "
"variable to the ``devenv.com`` command installed with the corresponding "
"Visual Studio version.  Note that this variable may be empty on Visual "
"Studio Express editions because they do not provide this tool."
msgstr ""
":generator:`Visual Studio 9 2008` 及更高版本的生成器将此变量设置为随相应 Visual Studio "
"版本一起安装的``devenv.com`` 命令。请注意，此变量在 Visual Studio Express "
"版本上可能为空，因为它们不提供此工具。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_DEVENV_COMMAND.rst:9
msgid ""
"This variable is not defined by other generators even if ``devenv.com`` is"
" installed on the computer."
msgstr "即使在计算机上安装了 ``devenv.com``，这个变量也不会被其他生成器定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_DEVENV_COMMAND.rst:12
msgid ""
"The :variable:`CMAKE_VS_MSBUILD_COMMAND` is also provided for "
":generator:`Visual Studio 11 2012` and above. See also the "
":variable:`CMAKE_MAKE_PROGRAM` variable."
msgstr ""
":variable:`CMAKE_VS_MSBUILD_COMMAND` 也为 :generator:`Visual Studio 11 2012`"
" 及以上版本提供。另请参阅 :variable:`CMAKE_MAKE_PROGRAM` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_GLOBALS.rst:2
msgid "CMAKE_VS_GLOBALS"
msgstr "CMAKE_VS_GLOBALS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_GLOBALS.rst:6
msgid ""
"List of ``Key=Value`` records to be set per target as target properties "
":prop_tgt:`VS_GLOBAL_<variable>` with ``variable=Key`` and value "
"``Value``."
msgstr "每个目标要设置为目标属性的 ``Key=Value`` 记录列表"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_GLOBALS.rst:9
msgid "For example:"
msgstr "例如："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_GLOBALS.rst:18
msgid ""
"will set properties ``VS_GLOBAL_DefaultLanguage`` to ``en-US`` and "
"``VS_GLOBAL_MinimumVisualStudioVersion`` to ``14.0`` for all targets "
"(except for ``INTERFACE`` libraries)."
msgstr ""
"将为所有目标（“INTERFACE”库除外）将属性“VS_GLOBAL_DefaultLanguage”设置为“en-"
"US”，将“VS_GLOBAL_MinimumVisualStudioVersion”设置为“14.0”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_GLOBALS.rst:22
msgid ""
"This variable is meant to be set by a :variable:`toolchain file "
"<CMAKE_TOOLCHAIN_FILE>`."
msgstr "此变量旨在由 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.rst:2
msgid "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD"
msgstr "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.rst:6
msgid "Include ``INSTALL`` target to default build."
msgstr "将 ``INSTALL`` 目标包含到默认构建中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD.rst:8
msgid ""
"In Visual Studio solution, by default the ``INSTALL`` target will not be "
"part of the default build. Setting this variable will enable the "
"``INSTALL`` target to be part of the default build."
msgstr ""
"在 Visual Studio 解决方案中，默认情况下 ``INSTALL`` 目标不会成为默认构建的一部分。设置此变量将使 ``INSTALL``"
" 目标成为默认构建的一部分。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD.rst:2
msgid "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD"
msgstr "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD.rst:6
msgid "Include ``PACKAGE`` target to default build."
msgstr "将 ``PACKAGE`` 目标包含到默认构建中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD.rst:8
msgid ""
"In Visual Studio solution, by default the ``PACKAGE`` target will not be "
"part of the default build. Setting this variable will enable the "
"``PACKAGE`` target to be part of the default build."
msgstr ""
"在 Visual Studio 解决方案中，默认情况下，``PACKAGE`` 目标不会成为默认构建的一部分。设置此变量将使 ``PACKAGE``"
" 目标成为默认构建的一部分。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION.rst:2
msgid "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION"
msgstr "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_INTEL_Fortran_PROJECT_VERSION.rst:4
msgid ""
"When generating for :generator:`Visual Studio 9 2008` or greater with the "
"Intel Fortran plugin installed, this specifies the ``.vfproj`` project "
"file format version.  This is intended for internal use by CMake and "
"should not be used by project code."
msgstr ""
"当为安装了 Intel Fortran 插件的 Visual Studio 9 2008 或更高版本生成时，这指定了 .vfproj "
"项目文件格式版本。这是供 CMake 内部使用的，不应由项目代码使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_JUST_MY_CODE_DEBUGGING.rst:2
msgid "CMAKE_VS_JUST_MY_CODE_DEBUGGING"
msgstr "CMAKE_VS_JUST_MY_CODE_DEBUGGING"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_JUST_MY_CODE_DEBUGGING.rst:6
msgid "Enable Just My Code with Visual Studio debugger."
msgstr "使用 Visual Studio 调试器启用“仅我的代码”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_JUST_MY_CODE_DEBUGGING.rst:8
msgid ""
"This variable is used to initialize the "
":prop_tgt:`VS_JUST_MY_CODE_DEBUGGING` property on all targets when they "
"are created.  See that target property for additional information."
msgstr ""
"此变量用于在所有目标创建时初始化 :prop_tgt:`VS_JUST_MY_CODE_DEBUGGING` 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_MSBUILD_COMMAND.rst:2
msgid "CMAKE_VS_MSBUILD_COMMAND"
msgstr "CMAKE_VS_MSBUILD_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_MSBUILD_COMMAND.rst:4
msgid ""
"The generators for :generator:`Visual Studio 11 2012` and above set this "
"variable to the ``MSBuild.exe`` command installed with the corresponding "
"Visual Studio version."
msgstr ""
":generator:`Visual Studio 11 2012` 及更高版本的生成器将此变量设置为随相应 Visual Studio 版本安装的"
" ``MSBuild.exe`` 命令。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_MSBUILD_COMMAND.rst:8
msgid ""
"This variable is not defined by other generators even if ``MSBuild.exe`` "
"is installed on the computer."
msgstr "即使在计算机上安装了“MSBuild.exe”，该变量也不会被其他生成器定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_MSBUILD_COMMAND.rst:11
msgid ""
"The :variable:`CMAKE_VS_DEVENV_COMMAND` is also provided for the non-"
"Express editions of Visual Studio. See also the "
":variable:`CMAKE_MAKE_PROGRAM` variable."
msgstr ""
":variable:`CMAKE_VS_DEVENV_COMMAND` 也为 Visual Studio 的非 Express "
"版本提供。另请参阅 :variable:`CMAKE_MAKE_PROGRAM` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NO_COMPILE_BATCHING.rst:2
msgid "CMAKE_VS_NO_COMPILE_BATCHING"
msgstr "CMAKE_VS_NO_COMPILE_BATCHING"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NO_COMPILE_BATCHING.rst:6
msgid ""
"Turn off compile batching when using :ref:`Visual Studio Generators`."
msgstr "使用 :ref:`Visual Studio Generators` 时关闭编译批处理。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NO_COMPILE_BATCHING.rst:8
msgid ""
"This variable is used to initialize the :prop_tgt:`VS_NO_COMPILE_BATCHING`"
" property on all targets when they are created.  See that target property "
"for additional information."
msgstr ""
"此变量用于在创建所有目标时初始化所有目标上的 :prop_tgt:`VS_NO_COMPILE_BATCHING` "
"属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NO_COMPILE_BATCHING.rst:15
msgid ""
"This shows setting the property for the target ``foo`` using the variable."
msgstr "这显示了使用变量为目标“foo”设置属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:2
msgid "CMAKE_VS_NUGET_PACKAGE_RESTORE"
msgstr "CMAKE_VS_NUGET_PACKAGE_RESTORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:6
msgid ""
"When using a Visual Studio generator, this cache variable controls if "
"msbuild should automatically attempt to restore NuGet packages prior to a "
"build. NuGet packages can be defined using the "
":prop_tgt:`VS_PACKAGE_REFERENCES` property on a target. If no package "
"references are defined, this setting will do nothing."
msgstr ""
"使用 Visual Studio 生成器时，此缓存变量控制 msbuild 是否应在构建之前自动尝试还原 NuGet 包。可以使用目标上的 "
":prop_tgt:`VS_PACKAGE_REFERENCES` 属性定义 NuGet 包。如果未定义包引用，则此设置将不执行任何操作。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:12
msgid ""
"The command line option ``--resolve-package-references`` can be used "
"alternatively to control the resolve behavior globally. This option will "
"take precedence over the cache variable."
msgstr "命令行选项``--resolve-package-references`` 可以替代地用于全局控制解析行为。此选项将优先于缓存变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:16
msgid ""
"Targets that use the :prop_tgt:`DOTNET_SDK` are required to run a restore "
"before building. Disabling this option may cause the build to fail in such"
" projects."
msgstr "使用 :prop_tgt:`DOTNET_SDK` 的目标需要在构建之前运行恢复。禁用此选项可能会导致构建在此类项目中失败。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:20
msgid "This setting is stored as a cache entry. Default value is ``ON``."
msgstr "此设置存储为缓存条目。默认值为 ``ON``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NUGET_PACKAGE_RESTORE.rst:22
msgid "See also the :prop_tgt:`VS_PACKAGE_REFERENCES` property."
msgstr "另请参阅 :prop_tgt:`VS_PACKAGE_REFERENCES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NsightTegra_VERSION.rst:2
msgid "CMAKE_VS_NsightTegra_VERSION"
msgstr "CMAKE_VS_NsightTegra_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_NsightTegra_VERSION.rst:6
msgid ""
"When using a Visual Studio generator with the "
":variable:`CMAKE_SYSTEM_NAME` variable set to ``Android``, this variable "
"contains the version number of the installed NVIDIA Nsight Tegra Visual "
"Studio Edition."
msgstr ""
"当使用 CMAKE_SYSTEM_NAME 变量设置为 Android 的 Visual Studio 生成器时，此变量包含已安装的 NVIDIA "
"Nsight Tegra Visual Studio Edition 的版本号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME.rst:2
msgid "CMAKE_VS_PLATFORM_NAME"
msgstr "CMAKE_VS_PLATFORM_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME.rst:6
msgid "Visual Studio target platform name used by the current generator."
msgstr "当前生成器使用的 Visual Studio 目标平台名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME.rst:8
msgid ""
"VS 8 and above allow project files to specify a target platform. CMake "
"provides the name of the chosen platform in this variable. See the "
":variable:`CMAKE_GENERATOR_PLATFORM` variable for details."
msgstr ""
"VS 8 及更高版本允许项目文件指定目标平台。 CMake "
"在此变量中提供所选平台的名称。有关详细信息，请参阅 :variable:`CMAKE_GENERATOR_PLATFORM` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME.rst:12
msgid "See also the :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable."
msgstr "另请参阅 :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME_DEFAULT.rst:2
msgid "CMAKE_VS_PLATFORM_NAME_DEFAULT"
msgstr "CMAKE_VS_PLATFORM_NAME_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME_DEFAULT.rst:6
msgid ""
"Default for the Visual Studio target platform name for the current "
"generator without considering the value of the "
":variable:`CMAKE_GENERATOR_PLATFORM` variable.  For :ref:`Visual Studio "
"Generators` for VS 2017 and below this is always ``Win32``.  For VS 2019 "
"and above this is based on the host platform."
msgstr ""
"当前生成器的 Visual Studio 目标平台名称的默认值，不考虑 CMAKE_GENERATOR_PLATFORM 变量的值。对于 VS "
"2017 及以下版本的 Visual Studio Generators，这始终是 Win32。对于 VS 2019 "
"及更高版本，这是基于主机平台的。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_NAME_DEFAULT.rst:11
msgid "See also the :variable:`CMAKE_VS_PLATFORM_NAME` variable."
msgstr "另请参阅 :variable:`CMAKE_VS_PLATFORM_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET.rst:2
msgid "CMAKE_VS_PLATFORM_TOOLSET"
msgstr "CMAKE_VS_PLATFORM_TOOLSET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET.rst:4
msgid "Visual Studio Platform Toolset name."
msgstr "Visual Studio 平台工具集名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET.rst:6
msgid ""
"VS 10 and above use MSBuild under the hood and support multiple compiler "
"toolchains.  CMake may specify a toolset explicitly, such as ``v110`` for "
"VS 11 or ``Windows7.1SDK`` for 64-bit support in VS 10 Express.  CMake "
"provides the name of the chosen toolset in this variable."
msgstr ""
"VS 10 及更高版本在后台使用 MSBuild 并支持多个编译器工具链。 CMake 可以明确指定一个工具集，例如 VS 11 的“v110”或 "
"VS 10 Express 中的 64 位支持的“Windows7.1SDK”。 CMake 在此变量中提供所选工具集的名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET.rst:12
msgid "See the :variable:`CMAKE_GENERATOR_TOOLSET` variable for details."
msgstr "有关详细信息，请参阅 :variable:`CMAKE_GENERATOR_TOOLSET` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA.rst:2
msgid "CMAKE_VS_PLATFORM_TOOLSET_CUDA"
msgstr "CMAKE_VS_PLATFORM_TOOLSET_CUDA"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA.rst:6
msgid "NVIDIA CUDA Toolkit version whose Visual Studio toolset to use."
msgstr "要使用其 Visual Studio 工具集的 NVIDIA CUDA 工具包版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA.rst:8
msgid ""
"The :ref:`Visual Studio Generators` for VS 2010 and above support using a "
"CUDA toolset provided by a CUDA Toolkit.  The toolset version number may "
"be specified by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of the form"
" ``cuda=8.0``. Or it is automatically detected if a path to a standalone "
"CUDA directory is specified in the form ``cuda=C:\\path\\to\\cuda``. If "
"none is specified CMake will choose a default version. CMake provides the "
"selected CUDA toolset version in this variable. The value may be empty if "
"no CUDA Toolkit with Visual Studio integration is installed."
msgstr ""
"VS 2010 及更高版本的 :ref:`Visual Studio Generators` 支持使用 CUDA 工具包提供的 CUDA "
"工具集。工具集版本号可以由 CMAKE_GENERATOR_TOOLSET 中的字段指定，格式为 cuda=8.0。或者，如果以 "
"``cuda=C:\\path\\to\\cuda`` 的形式指定独立 CUDA 目录的路径，则会自动检测到它。如果未指定，CMake "
"将选择默认版本。 CMake 在此变量中提供选定的 CUDA 工具集版本。如果未安装带有 Visual Studio 集成的 CUDA "
"工具包，则该值可能为空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR.rst:2
msgid "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR"
msgstr "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR.rst:6
msgid ""
"Path to standalone NVIDIA CUDA Toolkit (eg. extracted from installer)."
msgstr "独立 NVIDIA CUDA 工具包的路径（例如，从安装程序中提取）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR.rst:8
msgid ""
"The :ref:`Visual Studio Generators` for VS 2010 and above support using a "
"standalone (non-installed) NVIDIA CUDA toolkit.  The path may be specified"
" by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of the form "
"``cuda=C:\\path\\to\\cuda``.  The given directory must at least contain "
"the nvcc compiler in path ``.\\bin`` and must provide Visual Studio "
"integration files in path ``.\\extras\\visual_studio_integration\\ "
"MSBuildExtensions\\``. One can create a standalone CUDA toolkit directory "
"by either opening a installer with 7zip or copying the files that are "
"extracted by the running installer. The value may be empty if no path to a"
" standalone CUDA Toolkit was specified."
msgstr ""
"VS 2010 及更高版本的 :ref:`Visual Studio Generators` 支持使用独立（未安装）的 NVIDIA CUDA "
"工具包。路径可以由 CMAKE_GENERATOR_TOOLSET 中的字段指定，格式为 "
"``cuda=C:\\path\\to\\cuda``。给定目录必须至少包含路径“.\\bin”中的 nvcc "
"编译器，并且必须在路径“.\\extras\\visual_studio_integration\\MSBuildExtensions\\”中提供 "
"Visual Studio 集成文件。可以通过使用 7zip 打开安装程序或复制正在运行的安装程序提取的文件来创建独立的 CUDA "
"工具包目录。如果未指定独立 CUDA 工具包的路径，则该值可能为空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE.rst:2
msgid "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE"
msgstr "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE.rst:6
msgid "Visual Studio preferred tool architecture."
msgstr "Visual Studio 首选工具架构。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE.rst:8
msgid ""
"The :ref:`Visual Studio Generators` for VS 2013 and above support using "
"either the 32-bit or 64-bit host toolchains by specifying a ``host=x86`` "
"or ``host=x64`` value in the :variable:`CMAKE_GENERATOR_TOOLSET` option. "
"CMake provides the selected toolchain architecture preference in this "
"variable (``x86``, ``x64``, ``ARM64`` or empty)."
msgstr ""
"VS 2013 及更高版本的 Visual Studio Generators 通过在变量中指定 host=x86 或 host=x64 "
"值来支持使用 32 位或 64 位主机工具链 :`CMAKE_GENERATOR_TOOLSET` 选项。 CMake "
"在此变量中提供选定的工具链架构首选项（``x86``、``x64``、``ARM64`` 或空）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:2
msgid "CMAKE_VS_PLATFORM_TOOLSET_VERSION"
msgstr "CMAKE_VS_PLATFORM_TOOLSET_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:6
msgid "Visual Studio Platform Toolset version."
msgstr "Visual Studio 平台工具集版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:8
msgid ""
"The :ref:`Visual Studio Generators` for VS 2017 and above allow to select "
"minor versions of the same toolset. The toolset version number may be "
"specified by a field in :variable:`CMAKE_GENERATOR_TOOLSET` of the form "
"``version=14.11``. If none is specified CMake will choose a default "
"toolset. The value may be empty if no minor version was selected and the "
"default is used."
msgstr ""
"VS 2017 及更高版本的 :ref:`Visual Studio Generators` 允许选择同一工具集的次要版本。工具集版本号可以由 "
"CMAKE_GENERATOR_TOOLSET 中的字段指定，格式为 version=14.11。如果未指定，CMake "
"将选择默认工具集。如果未选择次要版本并使用默认值，则该值可能为空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:15
msgid ""
"If the value is not empty, it is the version number that MSBuild uses in "
"its ``Microsoft.VCToolsVersion.*.props`` file names."
msgstr "如果该值不为空，则它是 MSBuild 在其“Microsoft.VCToolsVersion.*.props”文件名中使用的版本号。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:20
msgid ""
"VS 16.9's toolset may also be specified as ``14.28.16.9`` because VS 16.10"
" uses the file name ``Microsoft.VCToolsVersion.14.28.16.9.props``."
msgstr ""
"VS 16.9 的工具集也可以指定为“14.28.16.9”，因为 VS 16.10 "
"使用文件名“Microsoft.VCToolsVersion.14.28.16.9.props”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:24
msgid "Three-Component MSVC Toolset Versions"
msgstr "三组件 MSVC 工具集版本"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_PLATFORM_TOOLSET_VERSION.rst:28
msgid ""
"The ``version=`` field may be given a three-component toolset version such"
" as ``14.28.29910``, and CMake will convert it to the name used by MSBuild"
" ``Microsoft.VCToolsVersion.*.props`` files.  This is useful to "
"distinguish between VS 16.8's ``14.28.29333`` toolset and VS 16.9's "
"``14.28.29910`` toolset.  It also matches ``vcvarsall``'s ``-vcvars_ver=``"
" behavior."
msgstr ""
"``version=`` 字段可能会被赋予一个由三部分组成的工具集版本，例如 ``14.28.29910``，CMake 会将其转换为 "
"MSBuild ``Microsoft.VCToolsVersion.*.props`` 文件使用的名称.这有助于区分 VS 16.8 "
"的“14.28.29333”工具集和 VS 16.9 的“14.28.29910”工具集。它还匹配``vcvarsall`` "
"的``-vcvars_ver=`` 行为。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_EXCLUDE_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES"
msgstr "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_EXCLUDE_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Exclude "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认排除目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES"
msgstr "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Executable "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认的可执行目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_INCLUDE_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_INCLUDE_DIRECTORIES"
msgstr "CMAKE_VS_SDK_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_INCLUDE_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Include "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认包含目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_LIBRARY_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_LIBRARY_DIRECTORIES"
msgstr "CMAKE_VS_SDK_LIBRARY_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_LIBRARY_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Library "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认库目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES"
msgstr "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Library WinRT "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认库 WinRT 目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_REFERENCE_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_REFERENCE_DIRECTORIES"
msgstr "CMAKE_VS_SDK_REFERENCE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_REFERENCE_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Reference "
"Directories."
msgstr "此变量允许覆盖 Visual Studio 默认参考目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_SOURCE_DIRECTORIES.rst:2
msgid "CMAKE_VS_SDK_SOURCE_DIRECTORIES"
msgstr "CMAKE_VS_SDK_SOURCE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_SDK_SOURCE_DIRECTORIES.rst:6
msgid ""
"This variable allows to override Visual Studio default Source Directories."
msgstr "此变量允许覆盖 Visual Studio 默认源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER.rst:2
msgid "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER"
msgstr "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER.rst:6
msgid "Visual Studio target framework identifier."
msgstr "Visual Studio 目标框架标识符。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER.rst:8
msgid ""
"In some cases, the :ref:`Visual Studio Generators` may use an explicit "
"value for the MSBuild ``TargetFrameworkIdentifier`` setting in ``.csproj``"
" files. CMake provides the chosen value in this variable."
msgstr ""
"在某些情况下， :ref:`Visual Studio Generators` 可能会在 ``.csproj`` 文件中使用 MSBuild "
"``TargetFrameworkIdentifier`` 设置的显式值。 CMake 在此变量中提供选定的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER.rst:12
msgid ""
"See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` and "
":variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`."
msgstr ""
"另见 :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` "
"和 :variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION.rst:2
msgid "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION"
msgstr "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION.rst:6
msgid "Visual Studio target framework targets version."
msgstr "Visual Studio 目标框架目标版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION.rst:8
msgid ""
"In some cases, the :ref:`Visual Studio Generators` may use an explicit "
"value for the MSBuild ``TargetFrameworkTargetsVersion`` setting in "
"``.csproj`` files. CMake provides the chosen value in this variable."
msgstr ""
"在某些情况下， :ref:`Visual Studio Generators` 可能会在 `.csproj`` 文件中使用 MSBuild "
"``TargetFrameworkTargetsVersion`` 设置的显式值。 CMake 在此变量中提供选定的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION.rst:12
msgid ""
"See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` and "
":variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER`."
msgstr ""
"另见 :variable:`CMAKE_VS_TARGET_FRAMEWORK_VERSION` "
"和 :variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst:2
msgid "CMAKE_VS_TARGET_FRAMEWORK_VERSION"
msgstr "CMAKE_VS_TARGET_FRAMEWORK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst:6
msgid "Visual Studio target framework version."
msgstr "Visual Studio 目标框架版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst:8
msgid ""
"In some cases, the :ref:`Visual Studio Generators` may use an explicit "
"value for the MSBuild ``TargetFrameworkVersion`` setting in ``.csproj`` "
"files. CMake provides the chosen value in this variable."
msgstr ""
"在某些情况下， :ref:`Visual Studio Generators` 可能会在 ``.csproj`` 文件中使用 MSBuild "
"``TargetFrameworkVersion`` 设置的显式值。 CMake 在此变量中提供选定的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst:12
msgid ""
"See the :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` variable and "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target property to specify "
"custom ``TargetFrameworkVersion`` values for project targets."
msgstr ""
"请参阅 :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` 变量和 "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` 目标属性以指定项目目标的自定义 "
"``TargetFrameworkVersion`` 值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_TARGET_FRAMEWORK_VERSION.rst:16
msgid ""
"See also :variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER` and "
":variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`."
msgstr ""
"另见 :variable:`CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER` "
"和 :variable:`CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER.rst:2
msgid "CMAKE_VS_VERSION_BUILD_NUMBER"
msgstr "CMAKE_VS_VERSION_BUILD_NUMBER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER.rst:6
msgid "Visual Studio version."
msgstr "视觉工作室版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER.rst:8
msgid ""
":ref:`Visual Studio Generators` for VS 2017 and above set this variable to"
" the Visual Studio version build number in the format "
"``<major>.<minor>.<date>.<build>``."
msgstr ""
"VS 2017 及更高版本的 Visual Studio Generators 将此变量设置为 Visual Studio 版本内部版本号，格式为 "
"<major>.<minor>.<date>.<build>``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_VERSION_BUILD_NUMBER.rst:14
msgid "See also the :variable:`CMAKE_GENERATOR_INSTANCE` variable."
msgstr "另请参阅 :variable:`CMAKE_GENERATOR_INSTANCE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst:2
msgid "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION"
msgstr "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst:6
msgid "Visual Studio Windows Target Platform Version."
msgstr "Visual Studio Windows 目标平台版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst:8
msgid ""
"When targeting Windows 10 and above Visual Studio 2015 and above support "
"specification of a target Windows version to select a corresponding SDK. "
"The :variable:`CMAKE_SYSTEM_VERSION` variable may be set to specify a "
"version.  Otherwise CMake computes a default version based on the Windows "
"SDK versions available.  The chosen Windows target version number is "
"provided in ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION``.  If no Windows "
"10 SDK is available this value will be empty."
msgstr ""
"针对Windows 10及以上版本时，Visual Studio 2015及以上版本支持指定目标Windows版本选择对应的SDK。 "
":variable:`CMAKE_SYSTEM_VERSION` 变量可以设置为指定一个版本。否则 CMake 会根据可用的 Windows SDK"
" 版本计算默认版本。选择的 Windows 目标版本号在 CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION "
"中提供。如果没有可用的 Windows 10 SDK，则此值为空。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst:16
msgid ""
"One may set a ``CMAKE_WINDOWS_KITS_10_DIR`` *environment variable* to an "
"absolute path to tell CMake to look for Windows 10 SDKs in a custom "
"location.  The specified directory is expected to contain "
"``Include/10.0.*`` directories."
msgstr ""
"可以将 ``CMAKE_WINDOWS_KITS_10_DIR`` *环境变量* 设置为绝对路径，以告诉 CMake 在自定义位置查找 "
"Windows 10 SDK。指定目录应包含“Include/10.0.*”目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.rst:21
msgid ""
"See also :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`."
msgstr "另见 :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM.rst:2
msgid "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM"
msgstr "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM.rst:6
msgid ""
"Override the :ref:`Windows 10 SDK Maximum Version for VS 2015` and beyond."
msgstr "覆盖 :ref:`Windows 10 SDK 最高版本 VS 2015` 及更高版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM.rst:8
msgid ""
"The ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`` variable may be "
"set to a false value (e.g. ``OFF``, ``FALSE``, or ``0``) or the SDK "
"version to use as the maximum (e.g. ``10.0.14393.0``).  If unset, the "
"default depends on which version of Visual Studio is targeted by the "
"current generator."
msgstr ""
"``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM`` 变量可以设置为假值（例如 "
"``OFF``、``FALSE`` 或 ``0``）或用作最大值的 SDK 版本（例如 ``10.0. "
"14393.0``）。如果未设置，则默认值取决于当前生成器针对哪个版本的 Visual Studio。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM.rst:13
msgid ""
"This can be used in conjunction with :variable:`CMAKE_SYSTEM_VERSION`, "
"which CMake uses to select "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`."
msgstr ""
"这可以与 :variable:`CMAKE_SYSTEM_VERSION` 结合使用，CMake 使用它来选择 "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINRT_BY_DEFAULT.rst:2
msgid "CMAKE_VS_WINRT_BY_DEFAULT"
msgstr "CMAKE_VS_WINRT_BY_DEFAULT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINRT_BY_DEFAULT.rst:6
msgid ""
"Inform :ref:`Visual Studio Generators` for VS 2010 and above that the "
"target platform enables WinRT compilation by default and it needs to be "
"explicitly disabled if ``/ZW`` or :prop_tgt:`VS_WINRT_COMPONENT` is "
"omitted (as opposed to enabling it when either of those options is "
"present)"
msgstr ""
"通知 VS 2010 及更高版本的 Visual Studio Generators 目标平台默认启用 WinRT 编译，如果省略 /ZW 或 "
"VS_WINRT_COMPONENT（相对于当存在这些选项中的任何一个时启用它）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINRT_BY_DEFAULT.rst:12
msgid ""
"This makes cmake configuration consistent in terms of WinRT among "
"platforms - if you did not enable the WinRT compilation explicitly, it "
"will be disabled (by either not enabling it or explicitly disabling it)"
msgstr ""
"这使得 cmake 配置在平台之间的 WinRT 方面保持一致 - 如果您没有明确启用 WinRT 编译，它将被禁用（通过不启用它或明确禁用它）"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINRT_BY_DEFAULT.rst:16
msgid ""
"Note: WinRT compilation is always explicitly disabled for C language "
"source files, even if it is expliclty enabled for a project"
msgstr "注意：对于 C 语言源文件，始终明确禁用 WinRT 编译，即使它为项目明确启用也是如此"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_VS_WINRT_BY_DEFAULT.rst:19
msgid ""
"This variable is meant to be set by a :variable:`toolchain file "
"<CMAKE_TOOLCHAIN_FILE>` for such platforms."
msgstr "此变量旨在由此类平台的 :variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_DEPRECATED.rst:2
msgid "CMAKE_WARN_DEPRECATED"
msgstr "CMAKE_WARN_DEPRECATED"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_DEPRECATED.rst:4
msgid "Whether to issue warnings for deprecated functionality."
msgstr "是否针对已弃用的功能发出警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_DEPRECATED.rst:6
msgid ""
"If not ``FALSE``, use of deprecated functionality will issue warnings. If "
"this variable is not set, CMake behaves as if it were set to ``TRUE``."
msgstr "如果不是“FALSE”，则使用已弃用的功能将发出警告。如果未设置此变量，CMake 的行为就像将其设置为“TRUE”一样。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_DEPRECATED.rst:9
msgid ""
"When running :manual:`cmake(1)`, this option can be enabled with the "
":option:`-Wdeprecated <cmake -Wdeprecated>` option, or disabled with the "
":option:`-Wno-deprecated <cmake -Wno-deprecated>` option."
msgstr ""
"运行 :manual:`cmake(1)` 时，可以使用 :option:`-Wdeprecated <cmake -Wdeprecated>` "
"选项启用此选项，或使用 :option:`-Wno-deprecated <cmake -Wno- 禁用此选项弃用>` 选项。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:2
msgid "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION"
msgstr "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:4
msgid ""
"Ask ``cmake_install.cmake`` script to warn each time a file with absolute "
"``INSTALL DESTINATION`` is encountered."
msgstr "每次遇到带有绝对“安装目标”的文件时，要求“cmake_install.cmake”脚本发出警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:7
msgid ""
"This variable is used by CMake-generated ``cmake_install.cmake`` scripts. "
"If one sets this variable to ``ON`` while running the script, it may get "
"warning messages from the script."
msgstr ""
"此变量由 CMake 生成的“cmake_install.cmake”脚本使用。如果在运行脚本时将此变量设置为 "
"``ON``，它可能会从脚本中收到警告消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:2
msgid "CMAKE_WATCOM_RUNTIME_LIBRARY"
msgstr "CMAKE_WATCOM_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the Watcom runtime library for use by compilers targeting the "
"Watcom ABI. This variable is used to initialize the "
":prop_tgt:`WATCOM_RUNTIME_LIBRARY` property on all targets as they are "
"created.  It is also propagated by calls to the :command:`try_compile` "
"command into the test project."
msgstr ""
"选择 Watcom 运行时库供以 Watcom ABI 为目标的编译器使用。此变量用于在所有目标创建时初始化 "
"WATCOM_RUNTIME_LIBRARY 属性。它还通过调用 :command:`try_compile` 命令传播到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:2
msgid "``SingleThreaded``"
msgstr "``单线程``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Compile without additional flags to use a single-threaded statically-"
"linked runtime library."
msgstr "在没有附加标志的情况下编译以使用单线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:6
msgid "``SingleThreadedDLL``"
msgstr "``单线程DLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Compile with ``-br`` or equivalent flag(s) to use a single-threaded "
"dynamically-linked runtime library. This is not available for Linux "
"targets."
msgstr "使用“-br”或等效标志编译以使用单线程动态链接运行时库。这不适用于 Linux 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:9
msgid ""
"Compile with ``-bm`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-bm”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:12
msgid ""
"Compile with ``-bm -br`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library. This is not available for Linux "
"targets."
msgstr "使用“-bm -br”或等效标志进行编译以使用多线程动态链接运行时库。这不适用于 Linux 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:16
msgid ""
"The value is ignored on non-Watcom compilers but an unsupported value will"
" be rejected as an error when using a compiler targeting the Watcom ABI."
msgstr "该值在非 Watcom 编译器上会被忽略，但在使用针对 Watcom ABI 的编译器时，不受支持的值将作为错误被拒绝。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:19
msgid ""
"The value may also be the empty string (``\"\"``) in which case no runtime"
" library selection flag will be added explicitly by CMake."
msgstr "该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 不会显式添加运行时库选择标志。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:15
msgid ""
"Use :manual:`generator expressions <cmake-generator-expressions(7)>` to "
"support per-configuration specification."
msgstr ""
"使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"来支持每个配置规范。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:18
msgid "For example, the code:"
msgstr "例如，代码："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:24
msgid ""
"selects for all following targets a multi-threaded statically-linked "
"runtime library."
msgstr "为所有以下目标选择多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:27
msgid ""
"If this variable is not set then the :prop_tgt:`WATCOM_RUNTIME_LIBRARY` "
"target property will not be set automatically.  If that property is not "
"set then CMake uses the default value ``MultiThreadedDLL`` on Windows and "
"``SingleThreaded`` on other platforms to select a Watcom runtime library."
msgstr ""
"如果未设置此变量，则不会自动设置 WATCOM_RUNTIME_LIBRARY 目标属性。如果未设置该属性，则 CMake 在 Windows "
"上使用默认值“MultiThreadedDLL”，在其他平台上使用“SingleThreaded”来选择 Watcom 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WATCOM_RUNTIME_LIBRARY.rst:34
msgid ""
"This variable has effect only when policy :policy:`CMP0136` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the Watcom ABI."
msgstr ""
"只有在第一个使用针对 Watcom ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0136 "
"设置为 NEW 时，此变量才有效."

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WIN32_EXECUTABLE.rst:2
msgid "CMAKE_WIN32_EXECUTABLE"
msgstr "CMAKE_WIN32_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WIN32_EXECUTABLE.rst:4
msgid "Default value for :prop_tgt:`WIN32_EXECUTABLE` of targets."
msgstr "目标的 :prop_tgt:`WIN32_EXECUTABLE` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WIN32_EXECUTABLE.rst:6
msgid ""
"This variable is used to initialize the :prop_tgt:`WIN32_EXECUTABLE` "
"property on all the targets.  See that target property for additional "
"information."
msgstr "此变量用于初始化所有目标上的 WIN32_EXECUTABLE 属性。有关其他信息，请参阅该目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.rst:2
msgid "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS"
msgstr "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.rst:6
msgid ""
"Default value for :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property. "
"This variable is used to initialize the property on each target as it is "
"created."
msgstr ""
":prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` 目标属性的默认值。此变量用于在创建每个目标时初始化其属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:2
msgid "CMAKE_XCODE_ATTRIBUTE_<an-attribute>"
msgstr "CMAKE_XCODE_ATTRIBUTE_<属性>"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:6
msgid "Set Xcode target attributes directly."
msgstr "直接设置 Xcode 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:8
msgid ""
"Tell the :generator:`Xcode` generator to set ``<an-attribute>`` to a given"
" value in the generated Xcode project.  Ignored on other generators."
msgstr ""
"告诉 :generator:`Xcode` 生成器在生成的 Xcode 项目中将 ``<an-attribute>`` "
"设置为给定值。在其他生成器上被忽略。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:11
msgid ""
"This offers low-level control over the generated Xcode project file. It is"
" meant as a last resort for specifying settings that CMake does not "
"otherwise have a way to control.  Although this can override a setting "
"CMake normally produces on its own, doing so bypasses CMake's model of the"
" project and can break things."
msgstr ""
"这提供了对生成的 Xcode 项目文件的低级控制。它是指定 CMake 无法控制的设置的最后手段。虽然这可以覆盖 CMake "
"通常自行生成的设置，但这样做会绕过 CMake 的项目模型并可能破坏某些东西。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:17
msgid ""
"See the :prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` target property to set "
"attributes on a specific target."
msgstr "请参阅 :prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` 目标属性以在特定目标上设置属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_ATTRIBUTE_an-attribute.rst:20
msgid ""
"Contents of ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions.  See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` 的内容可以使用语法为``$<...>`` "
"的“生成器表达式”。请参阅 :manual:`cmake-generator-expressions(7)` "
"手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:2
msgid "CMAKE_XCODE_BUILD_SYSTEM"
msgstr "CMAKE_XCODE_BUILD_SYSTEM"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:6
msgid "Xcode build system selection."
msgstr "Xcode 构建系统选择。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:8
msgid ""
"The :generator:`Xcode` generator defines this variable to indicate which "
"variant of the Xcode build system will be used.  The value is the version "
"of Xcode in which the corresponding build system first became mature "
"enough for use by CMake.  The possible values are:"
msgstr ""
":generator:`Xcode` 生成器定义此变量以指示将使用 Xcode 构建系统的哪个变体。该值是 Xcode "
"的版本，其中相应的构建系统首先变得足够成熟以供 CMake 使用。可能的值是："

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:15
msgid "``1``"
msgstr "``1``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:14
msgid ""
"The original Xcode build system. This is the default when using Xcode 11.x"
" or below."
msgstr "原始的 Xcode 构建系统。这是使用 Xcode 11.x 或更低版本时的默认设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:20
msgid "``12``"
msgstr "``12``"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:18
msgid ""
"The Xcode \"new build system\" introduced by Xcode 10. It became mature "
"enough for use by CMake in Xcode 12. This is the default when using Xcode "
"12.x or above."
msgstr ""
"Xcode 10 引入的 Xcode“新构建系统”。它已经足够成熟，可供 Xcode 12 中的 CMake 使用。这是使用 Xcode 12.x "
"或更高版本时的默认设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_BUILD_SYSTEM.rst:22
msgid ""
"The ``CMAKE_XCODE_BUILD_SYSTEM`` variable is informational and should not "
"be modified by project code.  See the :ref:`Xcode Build System Selection` "
"documentation section to select the Xcode build system."
msgstr ""
"``CMAKE_XCODE_BUILD_SYSTEM`` 变量是信息性的，不应由项目代码修改。请参阅 :ref:`Xcode 构建系统选择` "
"文档部分以选择 Xcode 构建系统。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_SCHEME.rst:2
msgid "CMAKE_XCODE_GENERATE_SCHEME"
msgstr "CMAKE_XCODE_GENERATE_SCHEME"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_SCHEME.rst:6
msgid ""
"If enabled, the :generator:`Xcode` generator will generate schema files.  "
"These are useful to invoke analyze, archive, build-for-testing and test "
"actions from the command line."
msgstr "如果启用，Xcode 生成器将生成模式文件。这些对于从命令行调用分析、存档、测试构建和测试操作很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_SCHEME.rst:10
msgid ""
"This variable initializes the :prop_tgt:`XCODE_GENERATE_SCHEME` target "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_GENERATE_SCHEME 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY.rst:2
msgid "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY"
msgstr "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY.rst:6
msgid ""
"If enabled, the :generator:`Xcode` generator will generate only a single "
"Xcode project file for the topmost :command:`project()` command instead of"
" generating one for every ``project()`` command."
msgstr ""
"如果启用， :generator:`Xcode` 生成器将只为最顶层的 :command:`project()` 命令生成一个 Xcode "
"项目文件，而不是为每个 ``project()`` 命令生成一个。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY.rst:10
msgid ""
"This could be useful to speed up the CMake generation step for large "
"projects and to work-around a bug in the ``ZERO_CHECK`` logic."
msgstr "这可能有助于加快大型项目的 CMake 生成步骤，并解决“ZERO_CHECK”逻辑中的错误。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_LINK_BUILD_PHASE_MODE.rst:2
msgid "CMAKE_XCODE_LINK_BUILD_PHASE_MODE"
msgstr "CMAKE_XCODE_LINK_BUILD_PHASE_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_LINK_BUILD_PHASE_MODE.rst:6
msgid ""
"This variable is used to initialize the "
":prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE` property on targets. It affects "
"the methods that the :generator:`Xcode` generator uses to link different "
"kinds of libraries.  Its default value is ``NONE``."
msgstr ""
"此变量用于初始化目标上的 XCODE_LINK_BUILD_PHASE_MODE 属性。它会影响 Xcode "
"生成器用来链接不同类型库的方法。它的默认值为 ``NONE``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_PLATFORM_TOOLSET.rst:2
msgid "CMAKE_XCODE_PLATFORM_TOOLSET"
msgstr "CMAKE_XCODE_PLATFORM_TOOLSET"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_PLATFORM_TOOLSET.rst:4
msgid "Xcode compiler selection."
msgstr "Xcode 编译器选择。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_PLATFORM_TOOLSET.rst:6
msgid ""
":generator:`Xcode` supports selection of a compiler from one of the "
"installed toolsets.  CMake provides the name of the chosen toolset in this"
" variable, if any is explicitly selected (e.g.  via the :option:`cmake -T`"
" option)."
msgstr ""
":generator:`Xcode` 支持从已安装的工具集中选择一个编译器。 CMake "
"在此变量中提供所选工具集的名称，如果明确选择了任何工具集（例如，通过 :option:`cmake -T` 选项）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER.rst:2
msgid "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER"
msgstr "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER.rst:6
msgid ""
"Whether to enable ``Address Sanitizer`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 Address Sanitizer。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ADDRESS_SANITIZER 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:11
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE.rst:12
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_STACK.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:14
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS.rst:13
msgid ""
"Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property "
"documentation to see all Xcode schema related properties."
msgstr "请参阅 :prop_tgt:`XCODE_GENERATE_SCHEME` 目标属性文档以查看所有与 Xcode 架构相关的属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:2
msgid "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN"
msgstr "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:6
msgid ""
"Whether to enable ``Detect use of stack after return`` in the Diagnostics "
"section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“返回后检测堆栈的使用”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN` property on "
"all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:2
msgid "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING"
msgstr "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:6
msgid ""
"Whether to enable ``Allow debugging when using document Versions Browser``"
" in the Options section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的选项部分启用“使用文档版本浏览器时允许调试”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:10
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:2
msgid "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER"
msgstr "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:6
msgid ""
"Whether to disable the ``Main Thread Checker`` in the Diagnostics section "
"of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分禁用“主线程检查器”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:2
msgid "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS"
msgstr "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:6
msgid ""
"Whether to enable ``Dynamic Library Loads`` in the Diagnostics section of "
"the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“动态库加载”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS` property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:2
msgid "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE"
msgstr "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:6
msgid ""
"Whether to enable ``Dynamic Linker API usage`` in the Diagnostics section "
"of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“动态链接器 API 使用”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE` property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:2
msgid "CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION"
msgstr "CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:6
msgid ""
"Property value for ``Metal: API Validation`` in the Options section of the"
" generated Xcode scheme."
msgstr "生成的 Xcode 方案的选项部分中“金属：API 验证”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ENABLE_GPU_API_VALIDATION 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:2
msgid "CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE"
msgstr "CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:6
msgid ""
"Property value for ``GPU Frame Capture`` in the Options section of the "
"generated Xcode scheme. Example values are `Metal` and `Disabled`."
msgstr "生成的 Xcode 方案的选项部分中“GPU 帧捕获”的属性值。示例值为“Metal”和“Disabled”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:10
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:2
msgid "CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION"
msgstr "CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:6
msgid ""
"Property value for ``Metal: Shader Validation`` in the Options section of "
"the generated Xcode scheme."
msgstr "生成的 Xcode 方案的选项部分中“金属：着色器验证”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst:2
msgid "CMAKE_XCODE_SCHEME_ENVIRONMENT"
msgstr "CMAKE_XCODE_SCHEME_ENVIRONMENT"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst:6
msgid ""
"Specify environment variables that should be added to the Arguments "
"section of the generated Xcode scheme."
msgstr "指定应添加到生成的 Xcode 方案的 Arguments 部分的环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst:9
msgid ""
"If set to a list of environment variables and values of the form "
"``MYVAR=value`` those environment variables will be added to the scheme."
msgstr "如果设置为“MYVAR=value”形式的环境变量和值列表，这些环境变量将被添加到方案中。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ENVIRONMENT.rst:13
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_ENVIRONMENT` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ENVIRONMENT 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC.rst:2
msgid "CMAKE_XCODE_SCHEME_GUARD_MALLOC"
msgstr "CMAKE_XCODE_SCHEME_GUARD_MALLOC"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC.rst:6
msgid ""
"Whether to enable ``Guard Malloc`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用 ``Guard Malloc``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_GUARD_MALLOC.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_GUARD_MALLOC` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_GUARD_MALLOC 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:2
msgid "CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION"
msgstr "CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:6
msgid "Set the build configuration to run the target."
msgstr "设置构建配置以运行目标。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:8
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION` property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_LAUNCH_CONFIGURATION 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE.rst:2
msgid "CMAKE_XCODE_SCHEME_LAUNCH_MODE"
msgstr "CMAKE_XCODE_SCHEME_LAUNCH_MODE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE.rst:6
msgid ""
"Property value for ``Launch`` in the Info section of the generated Xcode "
"scheme."
msgstr "生成的 Xcode 方案的信息部分中“启动”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_LAUNCH_MODE.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_LAUNCH_MODE` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_LAUNCH_MODE 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:2
msgid "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP"
msgstr "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:6
msgid ""
"Whether to enable the ``Main Thread Checker`` option ``Pause on issues`` "
"in the Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“主线程检查器”选项“问题暂停”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:10
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP` property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:2
msgid "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES"
msgstr "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:6
msgid ""
"Whether to enable ``Malloc Guard Edges`` in the Diagnostics section of the"
" generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Guard Edges”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_MALLOC_GUARD_EDGES` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_MALLOC_GUARD_EDGES 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE.rst:2
msgid "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE"
msgstr "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE.rst:6
msgid ""
"Whether to enable ``Malloc Scribble`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Scribble”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_MALLOC_SCRIBBLE` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_MALLOC_SCRIBBLE 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_STACK.rst:2
msgid "CMAKE_XCODE_SCHEME_MALLOC_STACK"
msgstr "CMAKE_XCODE_SCHEME_MALLOC_STACK"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_STACK.rst:6
msgid ""
"Whether to enable ``Malloc Stack`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Stack”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_MALLOC_STACK.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_MALLOC_STACK` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_MALLOC_STACK 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER.rst:2
msgid "CMAKE_XCODE_SCHEME_THREAD_SANITIZER"
msgstr "CMAKE_XCODE_SCHEME_THREAD_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER.rst:6
msgid ""
"Whether to enable ``Thread Sanitizer`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 ``Thread Sanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_THREAD_SANITIZER 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:2
msgid "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP"
msgstr "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:6
msgid ""
"Whether to enable ``Thread Sanitizer - Pause on issues`` in the "
"Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Thread Sanitizer - Pause on issues”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER_STOP` property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_THREAD_SANITIZER_STOP 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:2
msgid "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER"
msgstr "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:6
msgid ""
"Whether to enable ``Undefined Behavior Sanitizer`` in the Diagnostics "
"section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 ``Undefined Behavior Sanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:9
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER` property on all "
"targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:2
msgid "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP"
msgstr "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:6
msgid ""
"Whether to enable ``Undefined Behavior Sanitizer`` option ``Pause on "
"issues`` in the Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“未定义的行为消毒器”选项“出现问题时暂停”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:10
msgid ""
"This variable initializes the "
":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP` property on "
"all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY.rst:2
msgid "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY"
msgstr "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY.rst:6
msgid ""
"Specify the ``Working Directory`` of the *Run* and *Profile* actions in "
"the generated Xcode scheme."
msgstr "在生成的 Xcode 方案中指定 *Run* 和 *Profile* 操作的“工作目录”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_WORKING_DIRECTORY.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_WORKING_DIRECTORY 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS.rst:2
msgid "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS"
msgstr "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS.rst:6
msgid ""
"Whether to enable ``Zombie Objects`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“僵尸对象”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS.rst:9
msgid ""
"This variable initializes the :prop_tgt:`XCODE_SCHEME_ZOMBIE_OBJECTS` "
"property on all targets."
msgstr "此变量初始化所有目标上的 XCODE_SCHEME_ZOMBIE_OBJECTS 属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_XCCONFIG.rst:2
msgid "CMAKE_XCODE_XCCONFIG"
msgstr "CMAKE_XCODE_XCCONFIG"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_XCCONFIG.rst:6
msgid ""
"If set, the :generator:`Xcode` generator will register the specified file "
"as a global XCConfig file. For target-level XCConfig files see the "
":prop_tgt:`XCODE_XCCONFIG` target property."
msgstr ""
"如果设置，Xcode 生成器会将指定文件注册为全局 XCConfig 文件。对于目标级 XCConfig "
"文件，请参阅:prop_tgt:`XCODE_XCCONFIG` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_XCCONFIG.rst:10
msgid ""
"This feature is intended to ease migration from native Xcode projects to "
"CMake projects."
msgstr "此功能旨在简化从本机 Xcode 项目到 CMake 项目的迁移。"

#: ../../cmake-prefix/src/cmake/Help/variable/CMAKE_XCODE_XCCONFIG.rst:13
msgid ""
"Contents of ``CMAKE_XCODE_XCCONFIG`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``CMAKE_XCODE_XCCONFIG`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ABSOLUTE_DESTINATION_FILES.rst:2
msgid "CPACK_ABSOLUTE_DESTINATION_FILES"
msgstr "CPACK_ABSOLUTE_DESTINATION_FILES"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ABSOLUTE_DESTINATION_FILES.rst:6
msgid ""
"This variable is a Read-Only variable which is set internally by CPack "
"during installation and before packaging using "
":variable:`CMAKE_ABSOLUTE_DESTINATION_FILES` defined in "
"``cmake_install.cmake`` scripts.  The value can be used within CPack "
"project configuration file and/or ``CPack<GEN>.cmake`` file of ``<GEN>`` "
"generator."
msgstr ""
"此变量是一个只读变量，由 CPack 在安装期间和打包之前使用 cmake_install.cmake 脚本中定义的 "
"CMAKE_ABSOLUTE_DESTINATION_FILES 内部设置。该值可以在 CPack 项目配置文件和/或 ``<GEN>`` 生成器的"
" ``CPack<GEN>.cmake`` 文件中使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.rst:2
msgid "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY"
msgstr "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.rst:4
msgid ""
"Boolean toggle to include/exclude top level directory (component case)."
msgstr "布尔切换以包含/排除顶级目录（组件案例）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY.rst:6
msgid ""
"Similar usage as :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY` but for the "
"component case.  See :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY` "
"documentation for the detail."
msgstr ""
"与 :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY` "
"类似的用法，但用于组件情况。有关详细信息，请参阅 :variable:`CPACK_INCLUDE_TOPLEVEL_DIRECTORY` 文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:2
msgid "CPACK_CUSTOM_INSTALL_VARIABLES"
msgstr "CPACK_CUSTOM_INSTALL_VARIABLES"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:6
msgid ""
"CPack variables (set via e.g. :option:`cpack -D`, ``CPackConfig.cmake`` or"
" :variable:`CPACK_PROJECT_CONFIG_FILE` scripts) are not directly visible "
"in installation scripts.  Instead, one can pass a list of "
"``varName=value`` pairs in the ``CPACK_CUSTOM_INSTALL_VARIABLES`` "
"variable.  At install time, each list item will result in a variable of "
"the specified name (``varName``) being set to the given ``value``.  The "
"``=`` can be omitted for an empty ``value``."
msgstr ""
"CPack 变量（通过例如 :option:`cpack -D`、``CPackConfig.cmake`` 或 "
":variable:`CPACK_PROJECT_CONFIG_FILE` 脚本设置）在安装脚本中不直接可见。相反，可以在 "
"CPACK_CUSTOM_INSTALL_VARIABLES 变量中传递一组 varName=value "
"对。在安装时，每个列表项都会导致指定名称（``varName``）的变量被设置为给定的``value``。对于空的“值”，可以省略“=”。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:14
msgid ""
"``CPACK_CUSTOM_INSTALL_VARIABLES`` allows the packaging installation to be"
" influenced by the user or driving script at CPack runtime without having "
"to regenerate the install scripts."
msgstr ""
"``CPACK_CUSTOM_INSTALL_VARIABLES`` 允许打包安装在 CPack "
"运行时受到用户或驱动脚本的影响，而无需重新生成安装脚本。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:33
msgid ""
"With the above example snippet, :manual:`cpack <cpack(1)>` will by default"
" run the installation script with ``ENABLE_COMPRESSION`` unset, resulting "
"in a package containing the uncompressed ``large.txt``.  This can be "
"overridden when invoking :manual:`cpack <cpack(1)>` like so:"
msgstr ""
"对于上面的示例片段， :manual:`cpack <cpack(1)>` 将默认运行未设置 ``ENABLE_COMPRESSION`` "
"的安装脚本，从而生成包含未压缩的 ``large.txt`` 的包。这可以在调用 :manual:`cpack <cpack(1)>` "
"时被覆盖，如下所示："

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_CUSTOM_INSTALL_VARIABLES.rst:42
msgid ""
"The installation script will then run with ``ENABLE_COMPRESSION`` set to "
"``TRUE``, resulting in a package containing the compressed "
"``large.txt.xz`` instead."
msgstr ""
"然后安装脚本将在 ``ENABLE_COMPRESSION`` 设置为 ``TRUE`` 的情况下运行，结果生成一个包含压缩的 "
"``large.txt.xz`` 的包。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:2
msgid "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION"
msgstr "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:4
msgid ""
"Ask CPack to error out as soon as a file with absolute ``INSTALL "
"DESTINATION`` is encountered."
msgstr "一旦遇到具有绝对“INSTALL DESTINATION”的文件，就要求 CPack 出错。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION.rst:7
msgid ""
"The fatal error is emitted before the installation of the offending file "
"takes place.  Some CPack generators, like ``NSIS``, enforce this "
"internally.  This variable triggers the definition of "
":variable:`CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION` when CPack runs."
msgstr ""
"在安装有问题的文件之前发出致命错误。一些 CPack 生成器，如 ``NSIS``，在内部强制执行此操作。当 CPack 运行时，此变量会触发 "
"CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION 的定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst:2
msgid "CPACK_INCLUDE_TOPLEVEL_DIRECTORY"
msgstr "CPACK_INCLUDE_TOPLEVEL_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst:4
msgid "Boolean toggle to include/exclude top level directory."
msgstr "布尔切换以包含/排除顶级目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst:6
msgid ""
"When preparing a package CPack installs the item under the so-called top "
"level directory.  The purpose of is to include (set to ``1`` or ``ON`` or "
"``TRUE``) the top level directory in the package or not (set to ``0`` or "
"``OFF`` or ``FALSE``)."
msgstr ""
"当准备一个包时，CPack "
"将项目安装在所谓的顶级目录下。的目的是包括（设置为``1``或``ON``或``TRUE``）包中的顶级目录或不包括（设置为``0``或``OFF``或“假”）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst:11
msgid ""
"Each CPack generator has a built-in default value for this variable. E.g."
"  Archive generators (ZIP, TGZ, ...) includes the top level whereas RPM or"
" DEB don't.  The user may override the default value by setting this "
"variable."
msgstr ""
"每个 CPack 生成器都有这个变量的内置默认值。例如。存档生成器（ZIP、TGZ、...）包括顶层，而 RPM 或 DEB "
"不包括。用户可以通过设置此变量来覆盖默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INCLUDE_TOPLEVEL_DIRECTORY.rst:16
msgid ""
"There is a similar variable "
":variable:`CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY` which may be used "
"to override the behavior for the component packaging case which may have "
"different default value for historical (now backward compatibility) "
"reason."
msgstr ""
"有一个类似的变量 :variable:`CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY` "
"可用于覆盖组件包装案例的行为，由于历史原因（现在向后兼容）可能具有不同的默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:2
msgid "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS"
msgstr "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:6
msgid ""
"Default permissions for implicitly created directories during packaging."
msgstr "打包期间隐式创建的目录的默认权限。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:8
msgid ""
"This variable serves the same purpose during packaging as the "
":variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable serves "
"during installation (e.g. ``make install``)."
msgstr ""
"此变量在打包过程中的作用与 :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` "
"变量在安装过程中的作用相同（例如，``make install``）。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS.rst:12
msgid ""
"If `include(CPack)` is used then by default this variable is set to the "
"content of :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`."
msgstr ""
"如果使用“include(CPack)”，则默认情况下此变量设置为 "
"CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS 的内容。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_PACKAGING_INSTALL_PREFIX.rst:2
msgid "CPACK_PACKAGING_INSTALL_PREFIX"
msgstr "CPACK_PACKAGING_INSTALL_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_PACKAGING_INSTALL_PREFIX.rst:4
msgid "The prefix used in the built package."
msgstr "构建包中使用的前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_PACKAGING_INSTALL_PREFIX.rst:6
msgid ""
"Each CPack generator has a default value (like ``/usr``).  This default "
"value may be overwritten from the ``CMakeLists.txt`` or the "
":manual:`cpack(1)` command line by setting an alternative value.  Example:"
msgstr ""
"每个 CPack 生成器都有一个默认值（如 ``/usr``）。通过设置替代值，可以从 CMakeLists.txt 或 "
":manual:`cpack(1)` 命令行覆盖此默认值。例子："

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_PACKAGING_INSTALL_PREFIX.rst:14
msgid ""
"This is not the same purpose as :variable:`CMAKE_INSTALL_PREFIX` which is "
"used when installing from the build tree without building a package."
msgstr "这与 CMAKE_INSTALL_PREFIX 的目的不同，CMAKE_INSTALL_PREFIX 在从构建树安装而不构建包时使用。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_SET_DESTDIR.rst:2
msgid "CPACK_SET_DESTDIR"
msgstr "CPACK_SET_DESTDIR"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_SET_DESTDIR.rst:4
msgid ""
"Boolean toggle to make CPack use ``DESTDIR`` mechanism when packaging."
msgstr "布尔切换，使 CPack 在打包时使用 ``DESTDIR`` 机制。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_SET_DESTDIR.rst:6
msgid ""
"``DESTDIR`` means DESTination DIRectory.  It is commonly used by makefile "
"users in order to install software at non-default location.  It is a basic"
" relocation mechanism that should not be used on Windows (see "
":variable:`CMAKE_INSTALL_PREFIX` documentation).  It is usually invoked "
"like this:"
msgstr ""
"``DESTDIR`` 表示目标目录。 makefile 用户通常使用它在非默认位置安装软件。这是一种基本的重定位机制，不应在 Windows "
"上使用（请参阅 :variable:`CMAKE_INSTALL_PREFIX` 文档）。它通常是这样调用的："

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_SET_DESTDIR.rst:16
msgid ""
"which will install the concerned software using the installation prefix, "
"e.g. ``/usr/local`` prepended with the ``DESTDIR`` value which finally "
"gives ``/home/john/usr/local``.  When preparing a package, CPack first "
"installs the items to be packaged in a local (to the build tree) directory"
" by using the same ``DESTDIR`` mechanism.  Nevertheless, if "
"``CPACK_SET_DESTDIR`` is set then CPack will set ``DESTDIR`` before doing "
"the local install.  The most noticeable difference is that without "
"``CPACK_SET_DESTDIR``, CPack uses "
":variable:`CPACK_PACKAGING_INSTALL_PREFIX` as a prefix whereas with "
"``CPACK_SET_DESTDIR`` set, CPack will use :variable:`CMAKE_INSTALL_PREFIX`"
" as a prefix."
msgstr ""
"它将使用安装前缀安装相关软件，例如``/usr/local`` 加上``DESTDIR`` "
"值，最终给出``/home/john/usr/local``。准备包时，CPack 首先使用相同的 ``DESTDIR`` "
"机制将要打包的项目安装到本地（到构建树）目录中。尽管如此，如果设置了“CPACK_SET_DESTDIR”，那么 CPack "
"将在进行本地安装之前设置“DESTDIR”。最明显的区别是，如果没有 ``CPACK_SET_DESTDIR``，CPack 使用 "
":variable:`CPACK_PACKAGING_INSTALL_PREFIX` 作为前缀，而设置 ``CPACK_SET_DESTDIR`` "
"后，CPack 将使用 :variable:`CMAKE_INSTALL_PREFIX` 作为前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_SET_DESTDIR.rst:27
msgid ""
"Manually setting ``CPACK_SET_DESTDIR`` may help (or simply be necessary) "
"if some install rules uses absolute ``DESTINATION`` (see CMake "
":command:`install` command).  However, starting with CPack/CMake 2.8.3 RPM"
" and DEB installers tries to handle ``DESTDIR`` automatically so that it "
"is seldom necessary for the user to set it."
msgstr ""
"如果某些安装规则使用绝对的 ``DESTINATION``（参见 CMake:command:`install` 命令），手动设置 "
"``CPACK_SET_DESTDIR`` 可能会有所帮助（或者仅仅是必要的）。但是，从 CPack/CMake 2.8.3 RPM 开始，DEB "
"安装程序会尝试自动处理 ``DESTDIR``，因此用户很少需要设置它。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:2
msgid "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION"
msgstr "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:4
msgid ""
"Ask CPack to warn each time a file with absolute ``INSTALL DESTINATION`` "
"is encountered."
msgstr "每次遇到带有绝对“安装目标”的文件时，要求 CPack 发出警告。"

#: ../../cmake-prefix/src/cmake/Help/variable/CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION.rst:7
msgid ""
"This variable triggers the definition of "
":variable:`CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION` when CPack runs "
"``cmake_install.cmake`` scripts."
msgstr ""
"当 CPack 运行“cmake_install.cmake”脚本时，此变量会触发 "
"CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION 的定义。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BINARY_DIRECTORY.rst:2
msgid "CTEST_BINARY_DIRECTORY"
msgstr "CTEST_BINARY_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BINARY_DIRECTORY.rst:6
msgid ""
"Specify the CTest ``BuildDirectory`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``BuildDirectory`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BUILD_COMMAND.rst:2
msgid "CTEST_BUILD_COMMAND"
msgstr "CTEST_BUILD_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BUILD_COMMAND.rst:6
msgid ""
"Specify the CTest ``MakeCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MakeCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BUILD_NAME.rst:2
msgid "CTEST_BUILD_NAME"
msgstr "CTEST_BUILD_NAME"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BUILD_NAME.rst:6
msgid ""
"Specify the CTest ``BuildName`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``BuildName`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BZR_COMMAND.rst:2
msgid "CTEST_BZR_COMMAND"
msgstr "CTEST_BZR_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BZR_COMMAND.rst:6
msgid ""
"Specify the CTest ``BZRCommand`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``BZRCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BZR_UPDATE_OPTIONS.rst:2
msgid "CTEST_BZR_UPDATE_OPTIONS"
msgstr "CTEST_BZR_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_BZR_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``BZRUpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``BZRUpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CHANGE_ID.rst:2
msgid "CTEST_CHANGE_ID"
msgstr "CTEST_CHANGE_ID"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CHANGE_ID.rst:6
msgid ""
"Specify the CTest ``ChangeId`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``ChangeId`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CHANGE_ID.rst:9
msgid ""
"This setting allows CTest to pass arbitrary information about this build "
"up to CDash.  One use of this feature is to allow CDash to post comments "
"on your pull request if anything goes wrong with your build."
msgstr ""
"此设置允许 CTest 将有关此构建的任意信息传递给 CDash。此功能的一个用途是允许 CDash "
"在您的构建出现任何问题时对您的拉取请求发表评论。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CHECKOUT_COMMAND.rst:2
msgid "CTEST_CHECKOUT_COMMAND"
msgstr "CTEST_CHECKOUT_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CHECKOUT_COMMAND.rst:6
msgid ""
"Tell the :command:`ctest_start` command how to checkout or initialize the "
"source directory in a :manual:`ctest(1)` dashboard client script."
msgstr ""
"告诉 :command:`ctest_start` 命令如何在 :manual:`ctest(1)` 仪表板客户端脚本中检出或初始化源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CONFIGURATION_TYPE.rst:2
msgid "CTEST_CONFIGURATION_TYPE"
msgstr "CTEST_CONFIGURATION_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CONFIGURATION_TYPE.rst:6
msgid ""
"Specify the CTest ``DefaultCTestConfigurationType`` setting in a "
":manual:`ctest(1)` dashboard client script."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DefaultCTestConfigurationType`` "
"设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CONFIGURATION_TYPE.rst:9
msgid ""
"If the configuration type is set via :option:`-C \\<cfg\\> <ctest -C>` "
"from the command line then this variable is populated accordingly."
msgstr "如果配置类型是通过 :option:`-C \\<cfg\\> <ctest -C>` 从命令行设置的，那么这个变量会相应地填充。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CONFIGURE_COMMAND.rst:2
msgid "CTEST_CONFIGURE_COMMAND"
msgstr "CTEST_CONFIGURE_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CONFIGURE_COMMAND.rst:6
msgid ""
"Specify the CTest ``ConfigureCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``ConfigureCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:2
msgid "CTEST_COVERAGE_COMMAND"
msgstr "CTEST_COVERAGE_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:6
msgid ""
"Specify the CTest ``CoverageCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``CoverageCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:10
msgid "Cobertura"
msgstr "科贝图拉"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:12
msgid ""
"Using `Cobertura`_ as the coverage generation within your multi-module "
"Java project can generate a series of XML files."
msgstr "使用“Cobertura”作为多模块 Java 项目中的覆盖生成可以生成一系列 XML 文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:15
msgid ""
"The Cobertura Coverage parser expects to read the coverage data from a "
"single XML file which contains the coverage data for all modules. "
"Cobertura has a program with the ability to merge given ``cobertura.ser`` "
"files and then another program to generate a combined XML file from the "
"previous merged file.  For command line testing, this can be done by hand "
"prior to CTest looking for the coverage files. For script builds, set the "
"``CTEST_COVERAGE_COMMAND`` variable to point to a file which will perform "
"these same steps, such as a ``.sh`` or ``.bat`` file."
msgstr ""
"Cobertura Coverage 解析器期望从包含所有模块的覆盖数据的单个 XML 文件中读取覆盖数据。 Cobertura "
"有一个程序能够合并给定的“cobertura.ser”文件，然后另一个程序可以从之前的合并文件生成一个组合的 XML 文件。对于命令行测试，这可以在"
" CTest "
"查找覆盖率文件之前手动完成。对于脚本构建，将“CTEST_COVERAGE_COMMAND”变量设置为指向将执行这些相同步骤的文件，例如“.sh”或“.bat”文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:28
msgid ""
"where the ``run-coverage-and-consolidate.sh`` script is perhaps created by"
" the :command:`configure_file` command and might contain the following "
"code:"
msgstr ""
"其中 ``run-coverage-and-consolidate.sh`` 脚本可能是由 :command:`configure_file` "
"命令创建的，可能包含以下代码："

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:40
msgid ""
"The script uses ``find`` to capture the paths to all of the "
"``cobertura.ser`` files found below the project's source directory.  It "
"keeps the list of files and supplies it as an argument to the ``cobertura-"
"merge`` program. The ``--datafile`` argument signifies where the result of"
" the merge will be kept."
msgstr ""
"该脚本使用“find”来捕获在项目源目录下找到的所有“cobertura.ser”文件的路径。它保留文件列表并将其作为参数提供给“cobertura-"
"merge”程序。 ``--datafile`` 参数表示合并结果的保存位置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:45
msgid ""
"The combined ``coberturamerge.ser`` file is then used to generate the XML "
"report using the ``cobertura-report`` program.  The call to the cobertura-"
"report program requires some named arguments."
msgstr ""
"组合的 ``coberturamerge.ser`` 文件然后用于使用 ``cobertura-report`` 程序生成 XML 报告。对 "
"cobertura-report 程序的调用需要一些命名参数。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:50
msgid "``--datafila``"
msgstr "``--数据文件``"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:50
msgid "path to the merged ``.ser`` file"
msgstr "合并的 ``.ser`` 文件的路径"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:53
msgid "``--destination``"
msgstr "``--目的地``"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:53
msgid "path to put the output files(s)"
msgstr "放置输出文件的路径"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:56
msgid "``--format``"
msgstr "``--格式``"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:56
msgid "file format to write output in: xml or html"
msgstr "写入输出的文件格式：xml 或 html"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_COMMAND.rst:58
msgid ""
"The rest of the supplied arguments consist of the full paths to the "
"``/src/main/java`` directories of each module within the source tree. "
"These directories are needed and should not be forgotten."
msgstr "其余提供的参数包括源代码树中每个模块的 ``/src/main/java`` 目录的完整路径。这些目录是必需的，不应忘记。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_EXTRA_FLAGS.rst:2
msgid "CTEST_COVERAGE_EXTRA_FLAGS"
msgstr "CTEST_COVERAGE_EXTRA_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_COVERAGE_EXTRA_FLAGS.rst:6
msgid ""
"Specify the CTest ``CoverageExtraFlags`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``CoverageExtraFlags`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CURL_OPTIONS.rst:2
msgid "CTEST_CURL_OPTIONS"
msgstr "CTEST_CURL_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CURL_OPTIONS.rst:6
msgid ""
"Specify the CTest ``CurlOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``CurlOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_COVERAGE_EXCLUDE.rst:2
msgid "CTEST_CUSTOM_COVERAGE_EXCLUDE"
msgstr "CTEST_CUSTOM_COVERAGE_EXCLUDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_COVERAGE_EXCLUDE.rst:4
msgid ""
"A list of regular expressions which will be used to exclude files by their"
" path from coverage output by the :command:`ctest_coverage` command."
msgstr "正则表达式列表，用于通过路径从 ctest_coverage 命令的覆盖输出中排除文件。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_XXX.txt:1
msgid ""
"It is initialized by :manual:`ctest(1)`, but may be edited in a "
"``CTestCustom`` file. See :command:`ctest_read_custom_files` "
"documentation."
msgstr ""
"它由 :manual:`ctest(1)` 初始化，但可以在 ``CTestCustom`` "
"文件中进行编辑。请参阅 :command:`ctest_read_custom_files` 文档。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_EXCEPTION.rst:2
msgid "CTEST_CUSTOM_ERROR_EXCEPTION"
msgstr "CTEST_CUSTOM_ERROR_EXCEPTION"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_EXCEPTION.rst:4
msgid ""
"A list of regular expressions which will be used to exclude when detecting"
" error messages in build outputs by the :command:`ctest_build` command."
msgstr "在通过 ctest_build 命令检测构建输出中的错误消息时，将用于排除的正则表达式列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_MATCH.rst:2
msgid "CTEST_CUSTOM_ERROR_MATCH"
msgstr "CTEST_CUSTOM_ERROR_MATCH"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_MATCH.rst:4
msgid ""
"A list of regular expressions which will be used to detect error messages "
"in build outputs by the :command:`ctest_build` command."
msgstr "正则表达式列表，用于通过 ctest_build 命令检测构建输出中的错误消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_POST_CONTEXT.rst:2
msgid "CTEST_CUSTOM_ERROR_POST_CONTEXT"
msgstr "CTEST_CUSTOM_ERROR_POST_CONTEXT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_POST_CONTEXT.rst:4
msgid ""
"The number of lines to include as context which follow an error message by"
" the :command:`ctest_build` command. The default is 10."
msgstr "包含在 :command:`ctest_build` 命令错误消息后作为上下文的行数。默认值为 10。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT.rst:2
msgid "CTEST_CUSTOM_ERROR_PRE_CONTEXT"
msgstr "CTEST_CUSTOM_ERROR_PRE_CONTEXT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_ERROR_PRE_CONTEXT.rst:4
msgid ""
"The number of lines to include as context which precede an error message "
"by the :command:`ctest_build` command. The default is 10."
msgstr "在 :command:`ctest_build` 命令的错误消息之前作为上下文包含的行数。默认值为 10。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.rst:2
msgid "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE"
msgstr "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.rst:4
msgid ""
"When saving a failing test's output, this is the maximum size, in bytes, "
"that will be collected by the :command:`ctest_test` command. Defaults to "
"307200 (300 KiB). See :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` for "
"possible truncation modes."
msgstr ""
"保存失败测试的输出时，这是将由 ctest_test 命令收集的最大大小（以字节为单位）。默认为 307200 (300 "
"KiB)。有关可能的截断模式，请参阅 :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.rst:9
#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.rst:9
msgid ""
"If a test's output contains the literal string \"CTEST_FULL_OUTPUT\", the "
"output will not be truncated and may exceed the maximum size."
msgstr "如果测试的输出包含文字字符串“CTEST_FULL_OUTPUT”，则输出不会被截断并且可能超过最大大小。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE.rst:14
msgid ""
"For controlling the output collection of passing tests, see "
":variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE`."
msgstr "要控制通过测试的输出集合，请参阅 :variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS.rst:2
msgid "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS"
msgstr "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS.rst:4
msgid ""
"The maximum number of errors in a single build step which will be "
"detected. After this, the :command:`ctest_test` command will truncate the "
"output. Defaults to 50."
msgstr "将检测到的单个构建步骤中的最大错误数。此后， :command:`ctest_test` 命令将截断输出。默认为 50。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.rst:2
msgid "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS"
msgstr "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS.rst:4
msgid ""
"The maximum number of warnings in a single build step which will be "
"detected. After this, the :command:`ctest_test` command will truncate the "
"output. Defaults to 50."
msgstr "将检测到的单个构建步骤中的最大警告数。此后， :command:`ctest_test` 命令将截断输出。默认为 50。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.rst:2
msgid "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE"
msgstr "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.rst:4
msgid ""
"When saving a passing test's output, this is the maximum size, in bytes, "
"that will be collected by the :command:`ctest_test` command. Defaults to "
"1024 (1 KiB). See :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` for "
"possible truncation modes."
msgstr ""
"保存通过测试的输出时，这是将由 ctest_test 命令收集的最大大小（以字节为单位）。默认为 1024 (1 "
"KiB)。有关可能的截断模式，请参阅 :variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE.rst:14
msgid ""
"For controlling the output collection of failing tests, see "
":variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE`."
msgstr "要控制失败测试的输出集合，请参阅 :variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MEMCHECK_IGNORE.rst:2
msgid "CTEST_CUSTOM_MEMCHECK_IGNORE"
msgstr "CTEST_CUSTOM_MEMCHECK_IGNORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_MEMCHECK_IGNORE.rst:4
msgid ""
"A list of regular expressions to use to exclude tests during the "
":command:`ctest_memcheck` command."
msgstr "用于在 ctest_memcheck 命令期间排除测试的正则表达式列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_POST_MEMCHECK.rst:2
msgid "CTEST_CUSTOM_POST_MEMCHECK"
msgstr "CTEST_CUSTOM_POST_MEMCHECK"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_POST_MEMCHECK.rst:4
msgid ""
"A list of commands to run at the end of the :command:`ctest_memcheck` "
"command."
msgstr "在 ctest_memcheck 命令末尾运行的命令列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_POST_TEST.rst:2
msgid "CTEST_CUSTOM_POST_TEST"
msgstr "CTEST_CUSTOM_POST_TEST"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_POST_TEST.rst:4
msgid ""
"A list of commands to run at the end of the :command:`ctest_test` command."
msgstr "在 :command:`ctest_test` 命令末尾运行的命令列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_PRE_MEMCHECK.rst:2
msgid "CTEST_CUSTOM_PRE_MEMCHECK"
msgstr "CTEST_CUSTOM_PRE_MEMCHECK"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_PRE_MEMCHECK.rst:4
msgid ""
"A list of commands to run at the start of the :command:`ctest_memcheck` "
"command."
msgstr "在 ctest_memcheck 命令开始时运行的命令列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_PRE_TEST.rst:2
msgid "CTEST_CUSTOM_PRE_TEST"
msgstr "CTEST_CUSTOM_PRE_TEST"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_PRE_TEST.rst:4
msgid ""
"A list of commands to run at the start of the :command:`ctest_test` "
"command."
msgstr "在 :command:`ctest_test` 命令开始运行的命令列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_TESTS_IGNORE.rst:2
msgid "CTEST_CUSTOM_TESTS_IGNORE"
msgstr "CTEST_CUSTOM_TESTS_IGNORE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_TESTS_IGNORE.rst:4
msgid ""
"A list of test names to be excluded from the set of tests run by the "
":command:`ctest_test` command."
msgstr "要从 ctest_test 命令运行的测试集中排除的测试名称列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION.rst:2
msgid "CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION"
msgstr "CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION.rst:6
msgid ""
"Set the test output truncation mode in case a maximum size is configured "
"via the :variable:`CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE` or "
":variable:`CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE` variables. By "
"default the ``tail`` of the output will be truncated. Other possible "
"values are ``middle`` and ``head``."
msgstr ""
"设置测试输出截断模式，以防通过 CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 或 "
"CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE "
"变量配置了最大大小。默认情况下，输出的“尾巴”将被截断。其他可能的值是 ``middle`` 和 ``head``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_WARNING_EXCEPTION.rst:2
msgid "CTEST_CUSTOM_WARNING_EXCEPTION"
msgstr "CTEST_CUSTOM_WARNING_EXCEPTION"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_WARNING_EXCEPTION.rst:4
msgid ""
"A list of regular expressions which will be used to exclude when detecting"
" warning messages in build outputs by the :command:`ctest_build` command."
msgstr "在通过 ctest_build 命令检测构建输出中的警告消息时，将用于排除的正则表达式列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_WARNING_MATCH.rst:2
msgid "CTEST_CUSTOM_WARNING_MATCH"
msgstr "CTEST_CUSTOM_WARNING_MATCH"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CUSTOM_WARNING_MATCH.rst:4
msgid ""
"A list of regular expressions which will be used to detect warning "
"messages in build outputs by the :command:`ctest_build` command."
msgstr "正则表达式列表，用于通过 ctest_build 命令检测构建输出中的警告消息。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_CHECKOUT.rst:2
msgid "CTEST_CVS_CHECKOUT"
msgstr "CTEST_CVS_CHECKOUT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_CHECKOUT.rst:6
msgid "Deprecated.  Use :variable:`CTEST_CHECKOUT_COMMAND` instead."
msgstr "已弃用。请改用 :variable:`CTEST_CHECKOUT_COMMAND`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_COMMAND.rst:2
msgid "CTEST_CVS_COMMAND"
msgstr "CTEST_CVS_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_COMMAND.rst:6
msgid ""
"Specify the CTest ``CVSCommand`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``CVSCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_UPDATE_OPTIONS.rst:2
msgid "CTEST_CVS_UPDATE_OPTIONS"
msgstr "CTEST_CVS_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_CVS_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``CVSUpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``CVSUpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_LOCATION.rst:2
msgid "CTEST_DROP_LOCATION"
msgstr "CTEST_DROP_LOCATION"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_LOCATION.rst:6
msgid ""
"Specify the CTest ``DropLocation`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DropLocation`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_METHOD.rst:2
msgid "CTEST_DROP_METHOD"
msgstr "CTEST_DROP_METHOD"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_METHOD.rst:6
msgid ""
"Specify the CTest ``DropMethod`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DropMethod`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE.rst:2
msgid "CTEST_DROP_SITE"
msgstr "CTEST_DROP_SITE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE.rst:6
msgid ""
"Specify the CTest ``DropSite`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DropSite`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_CDASH.rst:2
msgid "CTEST_DROP_SITE_CDASH"
msgstr "CTEST_DROP_SITE_CDASH"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_CDASH.rst:6
msgid ""
"Specify the CTest ``IsCDash`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``IsCDash`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_PASSWORD.rst:2
msgid "CTEST_DROP_SITE_PASSWORD"
msgstr "CTEST_DROP_SITE_PASSWORD"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_PASSWORD.rst:6
msgid ""
"Specify the CTest ``DropSitePassword`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DropSitePassword`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_USER.rst:2
msgid "CTEST_DROP_SITE_USER"
msgstr "CTEST_DROP_SITE_USER"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_DROP_SITE_USER.rst:6
msgid ""
"Specify the CTest ``DropSiteUser`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``DropSiteUser`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_EXTRA_COVERAGE_GLOB.rst:2
msgid "CTEST_EXTRA_COVERAGE_GLOB"
msgstr "CTEST_EXTRA_COVERAGE_GLOB"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_EXTRA_COVERAGE_GLOB.rst:6
msgid ""
"A list of regular expressions which will be used to find files which "
"should be covered by the :command:`ctest_coverage` command."
msgstr "将用于查找应由 ctest_coverage 命令覆盖的文件的正则表达式列表。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_COMMAND.rst:2
msgid "CTEST_GIT_COMMAND"
msgstr "CTEST_GIT_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_COMMAND.rst:6
msgid ""
"Specify the CTest ``GITCommand`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``GITCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_INIT_SUBMODULES.rst:2
msgid "CTEST_GIT_INIT_SUBMODULES"
msgstr "CTEST_GIT_INIT_SUBMODULES"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_INIT_SUBMODULES.rst:6
msgid ""
"Specify the CTest ``GITInitSubmodules`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``GITInitSubmodules`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_UPDATE_CUSTOM.rst:2
msgid "CTEST_GIT_UPDATE_CUSTOM"
msgstr "CTEST_GIT_UPDATE_CUSTOM"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_UPDATE_CUSTOM.rst:6
msgid ""
"Specify the CTest ``GITUpdateCustom`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``GITUpdateCustom`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_UPDATE_OPTIONS.rst:2
msgid "CTEST_GIT_UPDATE_OPTIONS"
msgstr "CTEST_GIT_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_GIT_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``GITUpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``GITUpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_HG_COMMAND.rst:2
msgid "CTEST_HG_COMMAND"
msgstr "CTEST_HG_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_HG_COMMAND.rst:6
msgid ""
"Specify the CTest ``HGCommand`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``HGCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_HG_UPDATE_OPTIONS.rst:2
msgid "CTEST_HG_UPDATE_OPTIONS"
msgstr "CTEST_HG_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_HG_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``HGUpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``HGUpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_LABELS_FOR_SUBPROJECTS.rst:2
msgid "CTEST_LABELS_FOR_SUBPROJECTS"
msgstr "CTEST_LABELS_FOR_SUBPROJECTS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_LABELS_FOR_SUBPROJECTS.rst:6
msgid ""
"Specify the CTest ``LabelsForSubprojects`` setting in a :manual:`ctest(1)`"
" dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``LabelsForSubprojects`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_COMMAND.rst:2
msgid "CTEST_MEMORYCHECK_COMMAND"
msgstr "CTEST_MEMORYCHECK_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_COMMAND.rst:6
msgid ""
"Specify the CTest ``MemoryCheckCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MemoryCheckCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS.rst:2
msgid "CTEST_MEMORYCHECK_COMMAND_OPTIONS"
msgstr "CTEST_MEMORYCHECK_COMMAND_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_COMMAND_OPTIONS.rst:6
msgid ""
"Specify the CTest ``MemoryCheckCommandOptions`` setting in a "
":manual:`ctest(1)` dashboard client script."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MemoryCheckCommandOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.rst:2
msgid "CTEST_MEMORYCHECK_SANITIZER_OPTIONS"
msgstr "CTEST_MEMORYCHECK_SANITIZER_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.rst:6
msgid ""
"Specify the CTest ``MemoryCheckSanitizerOptions`` setting in a "
":manual:`ctest(1)` dashboard client script."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MemoryCheckSanitizerOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_SANITIZER_OPTIONS.rst:9
msgid ""
"CTest prepends correct sanitizer options ``*_OPTIONS`` environment "
"variable to executed command. CTests adds its own ``log_path`` to "
"sanitizer options, don't provide your own ``log_path``."
msgstr ""
"CTest 将正确的消毒剂选项“*_OPTIONS”环境变量添加到已执行的命令中。 CTests 将自己的 ``log_path`` "
"添加到消毒剂选项中，不要提供您自己的 ``log_path``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE.rst:2
msgid "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE"
msgstr "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_SUPPRESSIONS_FILE.rst:6
msgid ""
"Specify the CTest ``MemoryCheckSuppressionFile`` setting in a "
":manual:`ctest(1)` dashboard client script."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MemoryCheckSuppressionFile`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_TYPE.rst:2
msgid "CTEST_MEMORYCHECK_TYPE"
msgstr "CTEST_MEMORYCHECK_TYPE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_MEMORYCHECK_TYPE.rst:6
msgid ""
"Specify the CTest ``MemoryCheckType`` setting in a :manual:`ctest(1)` "
"dashboard client script. Valid values are ``Valgrind``, ``Purify``, "
"``BoundsChecker``, ``DrMemory``, ``CudaSanitizer``, ``ThreadSanitizer``, "
"``AddressSanitizer``, ``LeakSanitizer``, ``MemorySanitizer`` and "
"``UndefinedBehaviorSanitizer``."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``MemoryCheckType`` 设置。有效值为 "
"``Valgrind``、``Purify``、``BoundsChecker``、``DrMemory``、``CudaSanitizer``、``ThreadSanitizer``、``AddressSanitizer``、``LeakSanitizer``"
" ，``MemorySanitizer`` 和``UndefinedBehaviorSanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_NIGHTLY_START_TIME.rst:2
msgid "CTEST_NIGHTLY_START_TIME"
msgstr "CTEST_NIGHTLY_START_TIME"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_NIGHTLY_START_TIME.rst:6
msgid ""
"Specify the CTest ``NightlyStartTime`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``NightlyStartTime`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_NIGHTLY_START_TIME.rst:9
msgid ""
"Note that this variable must always be set for a nightly build in a "
"dashboard script. It is needed so that nightly builds can be properly "
"grouped together in CDash."
msgstr "请注意，必须始终在仪表板脚本中为夜间构建设置此变量。它是必需的，以便夜间构建可以在 CDash 中正确地组合在一起。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_CLIENT.rst:2
msgid "CTEST_P4_CLIENT"
msgstr "CTEST_P4_CLIENT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_CLIENT.rst:6
msgid ""
"Specify the CTest ``P4Client`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``P4Client`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_COMMAND.rst:2
msgid "CTEST_P4_COMMAND"
msgstr "CTEST_P4_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_COMMAND.rst:6
msgid ""
"Specify the CTest ``P4Command`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``P4Command`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_OPTIONS.rst:2
msgid "CTEST_P4_OPTIONS"
msgstr "CTEST_P4_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_OPTIONS.rst:6
msgid ""
"Specify the CTest ``P4Options`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``P4Options`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_UPDATE_OPTIONS.rst:2
msgid "CTEST_P4_UPDATE_OPTIONS"
msgstr "CTEST_P4_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_P4_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``P4UpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``P4UpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_RESOURCE_SPEC_FILE.rst:2
msgid "CTEST_RESOURCE_SPEC_FILE"
msgstr "CTEST_RESOURCE_SPEC_FILE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_RESOURCE_SPEC_FILE.rst:6
msgid ""
"Specify the CTest ``ResourceSpecFile`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``ResourceSpecFile`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_RESOURCE_SPEC_FILE.rst:9
msgid ""
"This can also be used to specify the resource spec file from a CMake "
"build. If no ``RESOURCE_SPEC_FILE`` is passed to :command:`ctest_test`, "
"and ``CTEST_RESOURCE_SPEC_FILE`` is not specified in the dashboard script,"
" the value of this variable from the build is used."
msgstr ""
"这也可以用于指定来自 CMake 构建的资源规范文件。如果没有 ``RESOURCE_SPEC_FILE`` "
"传递给 :command:`ctest_test`，并且没有在仪表板脚本中指定 "
"``CTEST_RESOURCE_SPEC_FILE``，则使用来自构建的这个变量的值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_RUN_CURRENT_SCRIPT.rst:2
msgid "CTEST_RUN_CURRENT_SCRIPT"
msgstr "CTEST_RUN_CURRENT_SCRIPT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_RUN_CURRENT_SCRIPT.rst:6
msgid ""
"Setting this to 0 prevents :manual:`ctest(1)` from being run again when it"
" reaches the end of a script run by calling :option:`ctest -S`."
msgstr ""
"将此设置为 0 可防止 :manual:`ctest(1)` 在通过调用 :option:`ctest -S` 到达脚本运行末尾时再次运行。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SCP_COMMAND.rst:2
msgid "CTEST_SCP_COMMAND"
msgstr "CTEST_SCP_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SCP_COMMAND.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TRIGGER_SITE.rst:6
msgid "Legacy option.  Not used."
msgstr "遗留选项。不曾用过。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SCRIPT_DIRECTORY.rst:2
msgid "CTEST_SCRIPT_DIRECTORY"
msgstr "CTEST_SCRIPT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SCRIPT_DIRECTORY.rst:4
msgid ""
"The directory containing the top-level CTest script. The concept is "
"similar to :variable:`CMAKE_SOURCE_DIR`."
msgstr "包含顶级 CTest 脚本的目录。这个概念类似于 :variable:`CMAKE_SOURCE_DIR`。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SITE.rst:2
msgid "CTEST_SITE"
msgstr "CTEST_SITE网站"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SITE.rst:6
msgid ""
"Specify the CTest ``Site`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``Site`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SOURCE_DIRECTORY.rst:2
msgid "CTEST_SOURCE_DIRECTORY"
msgstr "CTEST_SOURCE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SOURCE_DIRECTORY.rst:6
msgid ""
"Specify the CTest ``SourceDirectory`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SourceDirectory`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SUBMIT_INACTIVITY_TIMEOUT.rst:2
msgid "CTEST_SUBMIT_INACTIVITY_TIMEOUT"
msgstr "CTEST_SUBMIT_INACTIVITY_TIMEOUT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SUBMIT_INACTIVITY_TIMEOUT.rst:6
msgid ""
"Specify the CTest ``SubmitInactivityTimeout`` setting in a "
":manual:`ctest(1)` dashboard client script."
msgstr ""
"在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SubmitInactivityTimeout`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SUBMIT_URL.rst:2
msgid "CTEST_SUBMIT_URL"
msgstr "CTEST_SUBMIT_URL"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SUBMIT_URL.rst:6
msgid ""
"Specify the CTest ``SubmitURL`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SubmitURL`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_COMMAND.rst:2
msgid "CTEST_SVN_COMMAND"
msgstr "CTEST_SVN_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_COMMAND.rst:6
msgid ""
"Specify the CTest ``SVNCommand`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SVNCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_OPTIONS.rst:2
msgid "CTEST_SVN_OPTIONS"
msgstr "CTEST_SVN_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_OPTIONS.rst:6
msgid ""
"Specify the CTest ``SVNOptions`` setting in a :manual:`ctest(1)` dashboard"
" client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SVNOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_UPDATE_OPTIONS.rst:2
msgid "CTEST_SVN_UPDATE_OPTIONS"
msgstr "CTEST_SVN_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_SVN_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``SVNUpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``SVNUpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TEST_LOAD.rst:2
msgid "CTEST_TEST_LOAD"
msgstr "CTEST_TEST_LOAD"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TEST_LOAD.rst:6
msgid ""
"Specify the ``TestLoad`` setting in the :ref:`CTest Test Step` of a "
":manual:`ctest(1)` dashboard client script.  This sets the default value "
"for the ``TEST_LOAD`` option of the :command:`ctest_test` command."
msgstr ""
"在 :ref:`ctest(1)` 仪表板客户端脚本的 :ref:`CTest Test Step` 中指定 ``TestLoad`` 设置。这为 "
":command:`ctest_test` 命令的 ``TEST_LOAD`` 选项设置了默认值。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TEST_TIMEOUT.rst:2
msgid "CTEST_TEST_TIMEOUT"
msgstr "CTEST_TEST_TIMEOUT"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TEST_TIMEOUT.rst:6
msgid ""
"Specify the CTest ``TimeOut`` setting in a :manual:`ctest(1)` dashboard "
"client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``TimeOut`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_TRIGGER_SITE.rst:2
msgid "CTEST_TRIGGER_SITE"
msgstr "CTEST_TRIGGER_SITE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_COMMAND.rst:2
msgid "CTEST_UPDATE_COMMAND"
msgstr "CTEST_UPDATE_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_COMMAND.rst:6
msgid ""
"Specify the CTest ``UpdateCommand`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``UpdateCommand`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_OPTIONS.rst:2
msgid "CTEST_UPDATE_OPTIONS"
msgstr "CTEST_UPDATE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_OPTIONS.rst:6
msgid ""
"Specify the CTest ``UpdateOptions`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``UpdateOptions`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_VERSION_ONLY.rst:2
msgid "CTEST_UPDATE_VERSION_ONLY"
msgstr "CTEST_UPDATE_VERSION_ONLY"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_VERSION_ONLY.rst:6
msgid ""
"Specify the CTest :ref:`UpdateVersionOnly <UpdateVersionOnly>` setting in "
"a :manual:`ctest(1)` dashboard client script."
msgstr "在仪表板客户端脚本中指定 CTest:ref:`UpdateVersionOnly <UpdateVersionOnly>` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_VERSION_OVERRIDE.rst:2
msgid "CTEST_UPDATE_VERSION_OVERRIDE"
msgstr "CTEST_UPDATE_VERSION_OVERRIDE"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_UPDATE_VERSION_OVERRIDE.rst:6
msgid ""
"Specify the CTest :ref:`UpdateVersionOverride <UpdateVersionOverride>` "
"setting in a :manual:`ctest(1)` dashboard client script."
msgstr ""
"在仪表板客户端脚本中指定 CTest:ref:`UpdateVersionOverride <UpdateVersionOverride>` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_USE_LAUNCHERS.rst:2
msgid "CTEST_USE_LAUNCHERS"
msgstr "CTEST_USE_LAUNCHERS"

#: ../../cmake-prefix/src/cmake/Help/variable/CTEST_USE_LAUNCHERS.rst:6
msgid ""
"Specify the CTest ``UseLaunchers`` setting in a :manual:`ctest(1)` "
"dashboard client script."
msgstr "在 :manual:`ctest(1)` 仪表板客户端脚本中指定 CTest ``UseLaunchers`` 设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/CYGWIN.rst:2
msgid "CYGWIN"
msgstr "赛格文"

#: ../../cmake-prefix/src/cmake/Help/variable/CYGWIN.rst:4
msgid "``True`` for Cygwin."
msgstr "Cygwin 的 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/CYGWIN.rst:6
msgid "Set to ``true`` when using Cygwin."
msgstr "使用 Cygwin 时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/ENV.rst:2
msgid "ENV"
msgstr "环境变量"

#: ../../cmake-prefix/src/cmake/Help/variable/ENV.rst:4
msgid "Operator to read environment variables."
msgstr "运算符读取环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/ENV.rst:6
msgid "Use the syntax ``$ENV{VAR}`` to read environment variable ``VAR``."
msgstr "使用语法“$ENV{VAR}”读取环境变量“VAR”。"

#: ../../cmake-prefix/src/cmake/Help/variable/ENV.rst:8
msgid ""
"To test whether an environment variable is defined, use the signature "
"``if(DEFINED ENV{<name>})`` of the :command:`if` command."
msgstr "要测试是否定义了环境变量，请使用 :command:`if` 命令的签名 ``if(DEFINED ENV{<name>})``。"

#: ../../cmake-prefix/src/cmake/Help/variable/ENV.rst:11
msgid ""
"For general information on environment variables, see the "
":ref:`Environment Variables <CMake Language Environment Variables>` "
"section in the :manual:`cmake-language(7)` manual."
msgstr ""
"有关环境变量的一般信息，请参阅 :ref:`cmake-language(7)` 手册中的 :ref:`Environment Variables "
"<CMake Language Environment Variables>` 部分。"

#: ../../cmake-prefix/src/cmake/Help/variable/EXECUTABLE_OUTPUT_PATH.rst:2
msgid "EXECUTABLE_OUTPUT_PATH"
msgstr "可执行输出路径"

#: ../../cmake-prefix/src/cmake/Help/variable/EXECUTABLE_OUTPUT_PATH.rst:4
msgid "Old executable location variable."
msgstr "旧的可执行位置变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/EXECUTABLE_OUTPUT_PATH.rst:6
msgid ""
"The target property :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` supersedes this "
"variable for a target if it is set.  Executable targets are otherwise "
"placed in this directory."
msgstr ""
"目标属性 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` "
"取代目标的此变量（如果已设置）。可执行目标以其他方式放置在该目录中。"

#: ../../cmake-prefix/src/cmake/Help/variable/GHSMULTI.rst:2
msgid "GHSMULTI"
msgstr "高斯多路"

#: ../../cmake-prefix/src/cmake/Help/variable/GHSMULTI.rst:6
msgid "``1`` when using :generator:`Green Hills MULTI` generator."
msgstr "``1`` 使用 :generator:`Green Hills MULTI` 生成器时。"

#: ../../cmake-prefix/src/cmake/Help/variable/GHSMULTI.rst:8
msgid ""
"Also, Set to ``1`` when the target system is a Green Hills platform (i.e. "
"When :variable:`CMAKE_SYSTEM_NAME` is ``GHS-MULTI``)."
msgstr ""
"此外，当目标系统是 Green Hills 平台时（即当 :variable:`CMAKE_SYSTEM_NAME` 是 ``GHS-MULTI`` 时）设置为 "
"``1``。"

#: ../../cmake-prefix/src/cmake/Help/variable/IOS.rst:2
msgid "IOS"
msgstr "操作系统"

#: ../../cmake-prefix/src/cmake/Help/variable/IOS.rst:6
msgid ""
"Set to ``1`` when the target system (:variable:`CMAKE_SYSTEM_NAME`) is "
"``iOS``."
msgstr "当目标系统 (:variable:`CMAKE_SYSTEM_NAME`) 为 ``iOS`` 时设置为 ``1``。"

#: ../../cmake-prefix/src/cmake/Help/variable/LIBRARY_OUTPUT_PATH.rst:2
msgid "LIBRARY_OUTPUT_PATH"
msgstr "库输出路径"

#: ../../cmake-prefix/src/cmake/Help/variable/LIBRARY_OUTPUT_PATH.rst:4
msgid "Old library location variable."
msgstr "旧库位置变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/LIBRARY_OUTPUT_PATH.rst:6
msgid ""
"The target properties :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`, "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and "
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` supersede this variable for a target "
"if they are set.  Library targets are otherwise placed in this directory."
msgstr ""
"目标属性 "
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`、 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` "
"和 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` 将取代目标的此变量（如果已设置）。库目标以其他方式放置在此目录中。"

#: ../../cmake-prefix/src/cmake/Help/variable/LINUX.rst:2
msgid "LINUX"
msgstr "Linux操作系统"

#: ../../cmake-prefix/src/cmake/Help/variable/LINUX.rst:6
msgid "Set to true when the target system is Linux."
msgstr "当目标系统是 Linux 时设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/variable/MINGW.rst:2
msgid "MINGW"
msgstr "明威"

#: ../../cmake-prefix/src/cmake/Help/variable/MINGW.rst:6
msgid "``True`` when using MinGW"
msgstr "使用 MinGW 时为 ``True``"

#: ../../cmake-prefix/src/cmake/Help/variable/MINGW.rst:8
msgid "Set to ``true`` when the compiler is some version of MinGW."
msgstr "当编译器是某个版本的 MinGW 时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC.rst:2
msgid "MSVC"
msgstr "MSVC"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC.rst:4
msgid ""
"Set to ``true`` when the compiler is some version of Microsoft Visual C++ "
"or another compiler simulating the Visual C++ ``cl`` command-line syntax."
msgstr ""
"当编译器是某个版本的 Microsoft Visual C++ 或另一个模拟 Visual C++ ``cl`` 命令行语法的编译器时，设置为 "
"``true``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC.rst:7
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_TOOLSET_VERSION.rst:25
msgid "See also the :variable:`MSVC_VERSION` variable."
msgstr "另请参阅 :variable:`MSVC_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC10.rst:2
msgid "MSVC10"
msgstr "MSVC10"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC10.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC11.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC12.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC14.rst:6
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC60.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC70.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC71.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC80.rst:4
#: ../../cmake-prefix/src/cmake/Help/variable/MSVC90.rst:4
msgid "Discouraged.  Use the :variable:`MSVC_VERSION` variable instead."
msgstr "灰心。请改用 :variable:`MSVC_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC10.rst:6
msgid ""
"``True`` when using the Microsoft Visual Studio ``v100`` toolset (``cl`` "
"version 16) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v100`` 工具集（``cl`` 版本 16）或模拟它的其他编译器时为 "
"``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC11.rst:2
msgid "MSVC11"
msgstr "MSVC11"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC11.rst:6
msgid ""
"``True`` when using the Microsoft Visual Studio ``v110`` toolset (``cl`` "
"version 17) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v110`` 工具集（``cl`` 版本 17）或模拟它的其他编译器时为 "
"``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC12.rst:2
msgid "MSVC12"
msgstr "MSVC12"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC12.rst:6
msgid ""
"``True`` when using the Microsoft Visual Studio ``v120`` toolset (``cl`` "
"version 18) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v120`` 工具集（``cl`` 版本 18）或模拟它的其他编译器时为 "
"``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC14.rst:2
msgid "MSVC14"
msgstr "MSVC14"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC14.rst:8
msgid ""
"``True`` when using the Microsoft Visual Studio ``v140`` or ``v141`` "
"toolset (``cl`` version 19) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v140`` 或 ``v141`` 工具集（``cl`` 版本 "
"19）或模拟它的其他编译器时为 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC60.rst:2
msgid "MSVC60"
msgstr "MSVC60"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC60.rst:6
msgid "``True`` when using Microsoft Visual C++ 6.0."
msgstr "使用 Microsoft Visual C++ 6.0 时为“真”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC60.rst:8
msgid ""
"Set to ``true`` when the compiler is version 6.0 of Microsoft Visual C++."
msgstr "当编译器是 Microsoft Visual C++ 6.0 版时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC70.rst:2
msgid "MSVC70"
msgstr "MSVC70"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC70.rst:6
msgid "``True`` when using Microsoft Visual C++ 7.0."
msgstr "使用 Microsoft Visual C++ 7.0 时为“真”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC70.rst:8
msgid ""
"Set to ``true`` when the compiler is version 7.0 of Microsoft Visual C++."
msgstr "当编译器是 Microsoft Visual C++ 7.0 版时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC71.rst:2
msgid "MSVC71"
msgstr "MSVC71"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC71.rst:6
msgid "``True`` when using Microsoft Visual C++ 7.1."
msgstr "使用 Microsoft Visual C++ 7.1 时为“真”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC71.rst:8
msgid ""
"Set to ``true`` when the compiler is version 7.1 of Microsoft Visual C++."
msgstr "当编译器是 Microsoft Visual C++ 7.1 版时设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC80.rst:2
msgid "MSVC80"
msgstr "MSVC80"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC80.rst:6
msgid ""
"``True`` when using the Microsoft Visual Studio ``v80`` toolset (``cl`` "
"version 14) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v80`` 工具集（``cl`` 版本 14）或模拟它的其他编译器时为 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC90.rst:2
msgid "MSVC90"
msgstr "MSVC90"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC90.rst:6
msgid ""
"``True`` when using the Microsoft Visual Studio ``v90`` toolset (``cl`` "
"version 15) or another compiler that simulates it."
msgstr ""
"使用 Microsoft Visual Studio ``v90`` 工具集（``cl`` 版本 15）或模拟它的其他编译器时为 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_IDE.rst:2
msgid "MSVC_IDE"
msgstr "MSVC_IDE"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_IDE.rst:4
msgid "``True`` when using the Microsoft Visual C++ IDE."
msgstr "使用 Microsoft Visual C++ IDE 时为“真”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_IDE.rst:6
msgid ""
"Set to ``true`` when the target platform is the Microsoft Visual C++ IDE, "
"as opposed to the command line compiler."
msgstr "当目标平台是 Microsoft Visual C++ IDE 而不是命令行编译器时，设置为“true”。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_IDE.rst:11
msgid ""
"This variable is only available after compiler detection has been "
"performed, so it is not available to toolchain files or before the first "
":command:`project` or :command:`enable_language` call which uses an MSVC-"
"like compiler."
msgstr ""
"此变量仅在执行编译器检测后可用，因此它不可用于工具链文件或在使用类 MSVC 编译器的第一个 :command:`project` 或 "
":command:`enable_language` 调用之前。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_TOOLSET_VERSION.rst:2
msgid "MSVC_TOOLSET_VERSION"
msgstr "MSVC_TOOLSET_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_TOOLSET_VERSION.rst:6
msgid ""
"The toolset version of Microsoft Visual C/C++ being used if any. If MSVC-"
"like is being used, this variable is set based on the version of the "
"compiler as given by the :variable:`MSVC_VERSION` variable."
msgstr ""
"正在使用的 Microsoft Visual C/C++ 的工具集版本（如果有）。如果正在使用 MSVC-like，则根据 MSVC_VERSION"
" 变量给出的编译器版本设置此变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_TOOLSET_VERSION.rst:10
msgid "Known toolset version numbers are::"
msgstr "已知的工具集版本号是：："

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_TOOLSET_VERSION.rst:22
msgid ""
"Compiler versions newer than those known to CMake will be reported as the "
"latest known toolset version."
msgstr "比 CMake 已知的版本更新的编译器版本将被报告为最新的已知工具集版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_VERSION.rst:2
msgid "MSVC_VERSION"
msgstr "MSVC_VERSION 版本"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_VERSION.rst:4
msgid ""
"The version of Microsoft Visual C/C++ being used if any. If a compiler "
"simulating Visual C++ is being used, this variable is set to the toolset "
"version simulated as given by the ``_MSC_VER`` preprocessor definition."
msgstr ""
"使用的 Microsoft Visual C/C++ 版本（如果有）。如果正在使用模拟 Visual C++ "
"的编译器，则此变量将设置为“_MSC_VER”预处理器定义所模拟的工具集版本。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_VERSION.rst:9
msgid "Known version numbers are::"
msgstr "已知的版本号是：："

#: ../../cmake-prefix/src/cmake/Help/variable/MSVC_VERSION.rst:24
msgid ""
"See also the  :variable:`CMAKE_<LANG>_COMPILER_VERSION` and "
":variable:`MSVC_TOOLSET_VERSION` variable."
msgstr ""
"另请参阅 :variable:`CMAKE_<LANG>_COMPILER_VERSION` 和 :variable:`MSVC_TOOLSET_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/MSYS.rst:2
msgid "MSYS"
msgstr "管理系统"

#: ../../cmake-prefix/src/cmake/Help/variable/MSYS.rst:6
msgid "``True`` when using the :generator:`MSYS Makefiles` generator."
msgstr "使用 :generator:`MSYS Makefiles` 生成器时为 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_BINARY_DIR.rst:2
msgid "<PROJECT-NAME>_BINARY_DIR"
msgstr "<项目名称>_BINARY_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_BINARY_DIR.rst:4
msgid "Top level binary directory for the named project."
msgstr "指定项目的顶级二进制目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_BINARY_DIR.rst:6
msgid ""
"A variable is created with the name used in the :command:`project` "
"command, and is the binary directory for the project.  This can be useful "
"when :command:`add_subdirectory` is used to connect several projects."
msgstr ""
"使用 :command:`project` 命令中使用的名称创建一个变量，它是项目的二进制目录。这在 "
":command:`add_subdirectory` 用于连接多个项目时很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_DESCRIPTION.rst:2
msgid "<PROJECT-NAME>_DESCRIPTION"
msgstr "<项目名称>_DESCRIPTION"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_DESCRIPTION.rst:6
msgid ""
"Value given to the ``DESCRIPTION`` option of the most recent call to the "
":command:`project` command with project name ``<PROJECT-NAME>``, if any."
msgstr ""
"赋予项目名称“<PROJECT-NAME>”的最近一次调用 :command:`project` 命令的 ``DESCRIPTION`` "
"选项的值，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_HOMEPAGE_URL.rst:2
msgid "<PROJECT-NAME>_HOMEPAGE_URL"
msgstr "<PROJECT-NAME>_HOMEPAGE_URL"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_HOMEPAGE_URL.rst:6
msgid ""
"Value given to the ``HOMEPAGE_URL`` option of the most recent call to the "
":command:`project` command with project name ``<PROJECT-NAME>``, if any."
msgstr ""
"赋予最近调用 :command:`project 命令的 ``HOMEPAGE_URL`` 选项的值，项目名称为 ``<PROJECT-"
"NAME>``，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:2
msgid "<PROJECT-NAME>_IS_TOP_LEVEL"
msgstr "<PROJECT-NAME>_IS_TOP_LEVEL"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:6
msgid ""
"A boolean variable indicating whether the named project was called in a "
"top level ``CMakeLists.txt`` file."
msgstr "一个布尔变量，指示命名项目是否在顶级“CMakeLists.txt”文件中被调用。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:9
msgid ""
"To obtain the value from the most recent call to :command:`project` in the"
" current directory scope or above, see the "
":variable:`PROJECT_IS_TOP_LEVEL` variable."
msgstr ""
"要从当前目录范围内或以上的最近一次调用 :command:`project` 中获取值，请参阅 "
":variable:`PROJECT_IS_TOP_LEVEL` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:13
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:24
msgid "The variable value will be true in:"
msgstr "变量值将在以下情况下为真："

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:15
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:26
msgid "the top-level directory of the project"
msgstr "项目的顶级目录"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:16
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:27
msgid ""
"the top-level directory of an external project added by "
":module:`ExternalProject`"
msgstr ":module:`ExternalProject` 添加的外部项目的顶级目录"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:18
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:29
msgid ""
"a directory added by :command:`add_subdirectory` that does not also "
"contain a :command:`project` call"
msgstr "由 :command:`add_subdirectory` 添加的目录，但不包含 :command:`project` 调用"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:20
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:31
msgid ""
"a directory added by :command:`FetchContent_MakeAvailable`, if the fetched"
" content does not contain a :command:`project` call"
msgstr ""
"由 :command:`FetchContent_MakeAvailable` 添加的目录，如果获取的内容不包含 :command:`project` "
"调用"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:23
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:34
msgid "The variable value will be false in:"
msgstr "变量值在以下情况下将为假："

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:25
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:36
msgid ""
"a directory added by :command:`add_subdirectory` that also contains a "
":command:`project` call"
msgstr "由 :command:`add_subdirectory` 添加的目录，其中还包含一个 :command:`project` 调用"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_IS_TOP_LEVEL.rst:27
#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:38
msgid ""
"a directory added by :command:`FetchContent_MakeAvailable`, if the fetched"
" content contains a :command:`project` call"
msgstr ""
"由 :command:`FetchContent_MakeAvailable` 添加的目录，如果获取的内容包含 :command:`project`"
" 调用"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_SOURCE_DIR.rst:2
msgid "<PROJECT-NAME>_SOURCE_DIR"
msgstr "<项目名称>_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_SOURCE_DIR.rst:4
msgid "Top level source directory for the named project."
msgstr "指定项目的顶级源目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_SOURCE_DIR.rst:6
msgid ""
"A variable is created with the name used in the :command:`project` "
"command, and is the source directory for the project.  This can be useful "
"when :command:`add_subdirectory` is used to connect several projects."
msgstr ""
"使用 :command:`project` 命令中使用的名称创建一个变量，它是项目的源目录。这在 "
":command:`add_subdirectory` 用于连接多个项目时很有用。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION.rst:2
msgid "<PROJECT-NAME>_VERSION"
msgstr "<项目名称>_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION.rst:4
msgid ""
"Value given to the ``VERSION`` option of the most recent call to the "
":command:`project` command with project name ``<PROJECT-NAME>``, if any."
msgstr ""
"赋予最近调用 :command:`project 命令的 ``VERSION`` 选项的值，项目名称为 ``<PROJECT-"
"NAME>``，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION.rst:7
msgid ""
"See also the component-wise version variables :variable:`<PROJECT-"
"NAME>_VERSION_MAJOR`, :variable:`<PROJECT-NAME>_VERSION_MINOR`, "
":variable:`<PROJECT-NAME>_VERSION_PATCH`, and :variable:`<PROJECT-"
"NAME>_VERSION_TWEAK`."
msgstr ""
"另请参阅组件版本变量 :variable:`<PROJECT-NAME>_VERSION_MAJOR`、 :variable:`<PROJECT-"
"NAME>_VERSION_MINOR`、 :variable:`<PROJECT-NAME>_VERSION_PATCH` 和:variable:`< "
"PROJECT-NAME>_VERSION_TWEAK`。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_MAJOR.rst:2
msgid "<PROJECT-NAME>_VERSION_MAJOR"
msgstr "<项目名称>_VERSION_MAJOR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_MAJOR.rst:4
msgid ""
"First version number component of the :variable:`<PROJECT-NAME>_VERSION` "
"variable as set by the :command:`project` command."
msgstr ""
":variable:`<PROJECT-NAME>_VERSION` 变量的第一个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_MINOR.rst:2
msgid "<PROJECT-NAME>_VERSION_MINOR"
msgstr "<PROJECT-NAME>_VERSION_MINOR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_MINOR.rst:4
msgid ""
"Second version number component of the :variable:`<PROJECT-NAME>_VERSION` "
"variable as set by the :command:`project` command."
msgstr ""
":variable:`<PROJECT-NAME>_VERSION` 变量的第二个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_PATCH.rst:2
msgid "<PROJECT-NAME>_VERSION_PATCH"
msgstr "<PROJECT-NAME>_VERSION_PATCH"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_PATCH.rst:4
msgid ""
"Third version number component of the :variable:`<PROJECT-NAME>_VERSION` "
"variable as set by the :command:`project` command."
msgstr ""
":variable:`<PROJECT-NAME>_VERSION` 变量的第三个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_TWEAK.rst:2
msgid "<PROJECT-NAME>_VERSION_TWEAK"
msgstr "<项目名称>_VERSION_TWEAK"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT-NAME_VERSION_TWEAK.rst:4
msgid ""
"Fourth version number component of the :variable:`<PROJECT-NAME>_VERSION` "
"variable as set by the :command:`project` command."
msgstr ""
":variable:`<PROJECT-NAME>_VERSION` 变量的第四个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_BINARY_DIR.rst:2
msgid "PROJECT_BINARY_DIR"
msgstr "PROJECT_BINARY_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_BINARY_DIR.rst:4
msgid "Full path to build directory for project."
msgstr "项目构建目录的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_BINARY_DIR.rst:6
msgid ""
"This is the binary directory of the most recent :command:`project` "
"command."
msgstr "这是最近的 :command:`project` 命令的二进制目录。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_DESCRIPTION.rst:2
msgid "PROJECT_DESCRIPTION"
msgstr "项目介绍"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_DESCRIPTION.rst:6
msgid "Short project description given to the project command."
msgstr "项目命令的简短项目描述。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_DESCRIPTION.rst:8
msgid ""
"This is the description given to the most recently called "
":command:`project` command in the current directory scope or above.  To "
"obtain the description of the top level project, see the "
":variable:`CMAKE_PROJECT_DESCRIPTION` variable."
msgstr ""
"这是对当前目录范围或以上目录中最近调用的 :command:`project` "
"命令的描述。要获取顶级项目的描述，请参阅 :variable:`CMAKE_PROJECT_DESCRIPTION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_HOMEPAGE_URL.rst:2
msgid "PROJECT_HOMEPAGE_URL"
msgstr "PROJECT_HOMEPAGE_URL"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_HOMEPAGE_URL.rst:6
msgid "The homepage URL of the project."
msgstr "项目的主页 URL。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_HOMEPAGE_URL.rst:8
msgid ""
"This is the homepage URL given to the most recently called "
":command:`project` command in the current directory scope or above.  To "
"obtain the homepage URL of the top level project, see the "
":variable:`CMAKE_PROJECT_HOMEPAGE_URL` variable."
msgstr ""
"这是当前目录范围或以上目录中最近调用的 :command:`project` 命令的主页 URL。要获取顶级项目的主页 "
"URL，请参阅 :variable:`CMAKE_PROJECT_HOMEPAGE_URL` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:2
msgid "PROJECT_IS_TOP_LEVEL"
msgstr "PROJECT_IS_TOP_LEVEL"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:6
msgid ""
"A boolean variable indicating whether the most recently called "
":command:`project` command in the current scope or above was in the top "
"level ``CMakeLists.txt`` file."
msgstr ""
"一个布尔变量，指示在当前范围或更高范围内最近调用的 :command:`project` 命令是否在顶级 ``CMakeLists.txt`` "
"文件中。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_IS_TOP_LEVEL.rst:10
msgid ""
"Some modules should only be included as part of the top level "
"``CMakeLists.txt`` file to not cause unintended side effects in the build "
"tree, and this variable can be used to conditionally execute such code. "
"For example, consider the :module:`CTest` module, which creates targets "
"and options:"
msgstr ""
"一些模块应该只作为顶级 CMakeLists.txt "
"文件的一部分包含在内，以免在构建树中造成意外的副作用，并且此变量可用于有条件地执行此类代码。例如，考虑 CTest 模块，它创建目标和选项："

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_NAME.rst:2
msgid "PROJECT_NAME"
msgstr "项目名"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_NAME.rst:4
msgid "Name of the project given to the project command."
msgstr "提供给项目命令的项目名称。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_NAME.rst:6
msgid ""
"This is the name given to the most recently called :command:`project` "
"command in the current directory scope or above.  To obtain the name of "
"the top level project, see the :variable:`CMAKE_PROJECT_NAME` variable."
msgstr ""
"这是在当前目录范围或以上范围内最近调用的 :command:`project` 命令的名称。要获取顶级项目的名称，请参阅 "
":variable:`CMAKE_PROJECT_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_SOURCE_DIR.rst:2
msgid "PROJECT_SOURCE_DIR"
msgstr "PROJECT_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_SOURCE_DIR.rst:4
msgid ""
"This is the source directory of the last call to the :command:`project` "
"command made in the current directory scope or one of its parents. Note, "
"it is not affected by calls to :command:`project` made within a child "
"directory scope (i.e. from within a call to :command:`add_subdirectory` "
"from the current scope)."
msgstr ""
"这是在当前目录范围或其父目录范围内最后一次调用 :command:`project` 命令的源目录。请注意，它不受在子目录范围内调用 "
":command:`project` 的影响（即从当前范围调用 :command:`add_subdirectory`）。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION.rst:2
msgid "PROJECT_VERSION"
msgstr "项目版本"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION.rst:4
msgid ""
"Value given to the ``VERSION`` option of the most recent call to the "
":command:`project` command, if any."
msgstr "赋予最近调用 :command:`project` 命令的 ``VERSION`` 选项的值，如果有的话。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION.rst:7
msgid ""
"See also the component-wise version variables "
":variable:`PROJECT_VERSION_MAJOR`, :variable:`PROJECT_VERSION_MINOR`, "
":variable:`PROJECT_VERSION_PATCH`, and :variable:`PROJECT_VERSION_TWEAK`."
msgstr ""
"另请参阅组件版本变量 :variable:`PROJECT_VERSION_MAJOR`、 :variable:`PROJECT_VERSION_MINOR`、 :variable:`PROJECT_VERSION_PATCH`"
" 和 :variable:`PROJECT_VERSION_TWEAK`。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_MAJOR.rst:2
msgid "PROJECT_VERSION_MAJOR"
msgstr "PROJECT_VERSION_MAJOR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_MAJOR.rst:4
msgid ""
"First version number component of the :variable:`PROJECT_VERSION` variable"
" as set by the :command:`project` command."
msgstr ":command:`project` 命令设置的 :variable:`PROJECT_VERSION` 变量的第一个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_MINOR.rst:2
msgid "PROJECT_VERSION_MINOR"
msgstr "PROJECT_VERSION_MINOR"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_MINOR.rst:4
msgid ""
"Second version number component of the :variable:`PROJECT_VERSION` "
"variable as set by the :command:`project` command."
msgstr ":variable:`PROJECT_VERSION` 变量的第二个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_PATCH.rst:2
msgid "PROJECT_VERSION_PATCH"
msgstr "PROJECT_VERSION_PATCH"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_PATCH.rst:4
msgid ""
"Third version number component of the :variable:`PROJECT_VERSION` variable"
" as set by the :command:`project` command."
msgstr ":command:`project` 命令设置的 :variable:`PROJECT_VERSION` 变量的第三个版本号组件。"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_TWEAK.rst:2
msgid "PROJECT_VERSION_TWEAK"
msgstr "PROJECT_VERSION_TWEAK"

#: ../../cmake-prefix/src/cmake/Help/variable/PROJECT_VERSION_TWEAK.rst:4
msgid ""
"Fourth version number component of the :variable:`PROJECT_VERSION` "
"variable as set by the :command:`project` command."
msgstr ":variable:`PROJECT_VERSION` 变量的第四个版本号组件，由 :command:`project` 命令设置。"

#: ../../cmake-prefix/src/cmake/Help/variable/PackageName_ROOT.rst:2
msgid "<PackageName>_ROOT"
msgstr "<包名>_ROOT"

#: ../../cmake-prefix/src/cmake/Help/variable/PackageName_ROOT.rst:6
msgid ""
"Calls to :command:`find_package(<PackageName>)` will search in prefixes "
"specified by the ``<PackageName>_ROOT`` CMake variable, where "
"``<PackageName>`` is the (case-preserved) name given to the "
":command:`find_package` call and ``_ROOT`` is literal. For example, "
"``find_package(Foo)`` will search prefixes specified in the ``Foo_ROOT`` "
"CMake variable (if set).  See policy :policy:`CMP0074`."
msgstr ""
"调用 :command:`find_package(<PackageName>)` 将在 ``<PackageName>_ROOT`` CMake "
"变量指定的前缀中搜索，其中 ``<PackageName>`` 是给定的（保留大小写的）名称 :command:`find_package` 调用和 "
"``_ROOT`` 是文字。例如，``find_package(Foo)`` 将搜索 ``Foo_ROOT`` CMake "
"变量（如果设置）中指定的前缀。请参阅政策:policy:`CMP0074`。"

#: ../../cmake-prefix/src/cmake/Help/variable/PackageName_ROOT.rst:13
msgid ""
"This variable may hold a single prefix or a :ref:`semicolon-separated list"
" <CMake Language Lists>` of multiple prefixes."
msgstr "此变量可以包含单个前缀或一个 :ref:`分号分隔的列表 <CMake Language Lists>` 的多个前缀。"

#: ../../cmake-prefix/src/cmake/Help/variable/PackageName_ROOT.rst:16
msgid "See also the :envvar:`<PackageName>_ROOT` environment variable."
msgstr "另请参阅 :envvar:`<PackageName>_ROOT` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/UNIX.rst:2
msgid "UNIX"
msgstr "UNIX"

#: ../../cmake-prefix/src/cmake/Help/variable/UNIX.rst:4
msgid ""
"Set to ``True`` when the target system is UNIX or UNIX-like (e.g. "
":variable:`APPLE` and :variable:`CYGWIN`).  The "
":variable:`CMAKE_SYSTEM_NAME` variable should be queried if a more "
"specific understanding of the target system is required."
msgstr ""
"当目标系统是 UNIX 或类 UNIX（例如 :variable:`APPLE` 和 :variable:`CYGWIN`）时设置为 "
"``True``。如果需要对目标系统有更具体的了解，应该查询 :variable:`CMAKE_SYSTEM_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/variable/WIN32.rst:2
msgid "WIN32"
msgstr "Win32"

#: ../../cmake-prefix/src/cmake/Help/variable/WIN32.rst:4
msgid "Set to ``True`` when the target system is Windows, including Win64."
msgstr "当目标系统是 Windows（包括 Win64）时设置为“True”。"

#: ../../cmake-prefix/src/cmake/Help/variable/WINCE.rst:2
msgid "WINCE"
msgstr "WinCE"

#: ../../cmake-prefix/src/cmake/Help/variable/WINCE.rst:6
msgid ""
"True when the :variable:`CMAKE_SYSTEM_NAME` variable is set to "
"``WindowsCE``."
msgstr "当 :variable:`CMAKE_SYSTEM_NAME` 变量设置为 ``WindowsCE`` 时为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/WINDOWS_PHONE.rst:2
msgid "WINDOWS_PHONE"
msgstr "WINDOWS_PHONE"

#: ../../cmake-prefix/src/cmake/Help/variable/WINDOWS_PHONE.rst:6
msgid ""
"True when the :variable:`CMAKE_SYSTEM_NAME` variable is set to "
"``WindowsPhone``."
msgstr "当 :variable:`CMAKE_SYSTEM_NAME` 变量设置为 ``WindowsPhone`` 时为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/WINDOWS_STORE.rst:2
msgid "WINDOWS_STORE"
msgstr "WINDOWS_STORE"

#: ../../cmake-prefix/src/cmake/Help/variable/WINDOWS_STORE.rst:6
msgid ""
"True when the :variable:`CMAKE_SYSTEM_NAME` variable is set to "
"``WindowsStore``."
msgstr "当 :variable:`CMAKE_SYSTEM_NAME` 变量设置为 ``WindowsStore`` 时为真。"

#: ../../cmake-prefix/src/cmake/Help/variable/XCODE.rst:2
msgid "XCODE"
msgstr "X代码"

#: ../../cmake-prefix/src/cmake/Help/variable/XCODE.rst:6
msgid "``True`` when using :generator:`Xcode` generator."
msgstr "使用 :generator:`Xcode` 生成器时为 ``True``。"

#: ../../cmake-prefix/src/cmake/Help/variable/XCODE_VERSION.rst:2
msgid "XCODE_VERSION"
msgstr "XCODE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/variable/XCODE_VERSION.rst:4
msgid "Version of Xcode (:generator:`Xcode` generator only)."
msgstr "Xcode 版本（仅限:generator:`Xcode` 生成器）。"

#: ../../cmake-prefix/src/cmake/Help/variable/XCODE_VERSION.rst:6
msgid ""
"Under the :generator:`Xcode` generator, this is the version of Xcode as "
"specified in ``Xcode.app/Contents/version.plist`` (such as ``3.1.2``)."
msgstr ""
"在 :generator:`Xcode` 生成器下，这是在 ``Xcode.app/Contents/version.plist`` 中指定的 "
"Xcode 版本（例如 ``3.1.2``）。"
