# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.12.1\n"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:2
msgid "ADDITIONAL_CLEAN_FILES"
msgstr "ADDITIONAL_CLEAN_FILES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:6
msgid ""
"A :ref:`;-list <CMake Language Lists>` of files or directories that will "
"be removed as a part of the global ``clean`` target.  It can be used to "
"specify files and directories that are generated as part of building the "
"target or that are directly associated with the target in some way (e.g. "
"created as a result of running the target)."
msgstr ""
"A :ref:`;-list <CMake Language Lists>` 将作为全局 ``clean`` "
"目标的一部分删除的文件或目录。它可用于指定作为构建目标的一部分生成的文件和目录，或者以某种方式与目标直接关联的文件和目录（例如，作为运行目标的结果创建）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:12
msgid ""
"For custom targets, if such files can be captured as outputs or byproducts"
" instead, then that should be preferred over adding them to this property."
" If an additional clean file is used by multiple targets or isn't target-"
"specific, then the :prop_dir:`ADDITIONAL_CLEAN_FILES` directory property "
"may be the more appropriate property to use."
msgstr ""
"对于自定义目标，如果可以将此类文件捕获为输出或副产品，则应优先于将它们添加到此属性。如果一个额外的干净文件被多个目标使用或者不是特定于目标的，那么 "
":prop_dir:`ADDITIONAL_CLEAN_FILES` 目录属性可能是更合适的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:18
msgid ""
"Relative paths are allowed and are interpreted relative to the current "
"binary directory."
msgstr "相对路径是允许的，并且相对于当前二进制目录进行解释。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:21
msgid ""
"Contents of ``ADDITIONAL_CLEAN_FILES`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``ADDITIONAL_CLEAN_FILES`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ADDITIONAL_CLEAN_FILES.rst:24
msgid ""
"This property only works for the :generator:`Ninja` and the Makefile "
"generators.  It is ignored by other generators."
msgstr "此属性仅适用于 :generator:`Ninja` 和 Makefile 生成器。它被其他生成器忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AIX_EXPORT_ALL_SYMBOLS.rst:2
msgid "AIX_EXPORT_ALL_SYMBOLS"
msgstr "AIX_EXPORT_ALL_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AIX_EXPORT_ALL_SYMBOLS.rst:6
msgid ""
"On AIX, CMake automatically exports all symbols from shared libraries, and"
" from executables with the :prop_tgt:`ENABLE_EXPORTS` target property set."
" Explicitly disable this boolean property to suppress the behavior and "
"export no symbols by default.  In this case it is expected that the "
"project will use other means to export some symbols."
msgstr ""
"在 AIX 上，CMake 自动从共享库和带有 :prop_tgt:`ENABLE_EXPORTS` "
"目标属性集的可执行文件中导出所有符号。明确禁用此布尔属性以抑制行为并默认不导出任何符号。在这种情况下，预计该项目将使用其他方式导出一些符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AIX_EXPORT_ALL_SYMBOLS.rst:12
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_AIX_EXPORT_ALL_SYMBOLS` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_AIX_EXPORT_ALL_SYMBOLS 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIASED_TARGET.rst:2
msgid "ALIASED_TARGET"
msgstr "ALIASED_TARGET"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIASED_TARGET.rst:4
msgid "Name of target aliased by this target."
msgstr "此目标别名的目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIASED_TARGET.rst:6
msgid ""
"If this is an :ref:`Alias Target <Alias Targets>`, this property contains "
"the name of the target aliased."
msgstr "如果这是 :ref:`Alias Target <Alias Targets>`，则此属性包含目标别名的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIAS_GLOBAL.rst:2
msgid "ALIAS_GLOBAL"
msgstr "ALIAS_GLOBAL"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIAS_GLOBAL.rst:6
msgid ""
"Read-only property indicating of whether an :ref:`ALIAS target <Alias "
"Targets>` is globally visible."
msgstr "指示 :ref:`ALIAS 目标 <Alias Targets>` 是否全局可见的只读属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIAS_GLOBAL.rst:9
msgid ""
"The boolean value of this property is ``TRUE`` for aliases to "
":ref:`IMPORTED targets <Imported Targets>` created with the ``GLOBAL`` "
"options to :command:`add_executable()` or :command:`add_library()`, "
"``FALSE`` otherwise. It is undefined for targets built within the project."
msgstr ""
"此属性的布尔值为 ``TRUE`` 用于:ref:`IMPORTED 目标 <Imported Targets>` 使用 ``GLOBAL`` "
"选项创建的别名到 :command:`add_executable()` 或 :command:`add_library ()`, "
"``FALSE`` 否则。对于项目中构建的目标，它是未定义的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ALIAS_GLOBAL.rst:17
msgid ""
"Promoting an :ref:`IMPORTED target <Imported Targets>` from ``LOCAL`` to "
"``GLOBAL`` scope by changing the value or :prop_tgt:`IMPORTED_GLOBAL` "
"target property do not change the scope of local aliases."
msgstr ""
"通过更改值或 :prop_tgt:`IMPORTED_GLOBAL` 目标属性将 :ref:`IMPORTED 目标 <Imported "
"Targets>` 从 ``LOCAL`` 提升到 ``GLOBAL`` 范围不会更改本地别名的范围。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS.rst:2
msgid "ANDROID_ANT_ADDITIONAL_OPTIONS"
msgstr "ANDROID_ANT_ADDITIONAL_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ANT_ADDITIONAL_OPTIONS.rst:6
msgid ""
"Set the additional options for Android Ant build system. This is a string "
"value containing all command line options for the Ant build. This property"
" is initialized by the value of the "
":variable:`CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS` variable if it is set "
"when a target is created."
msgstr ""
"为 Android Ant 构建系统设置附加选项。这是一个字符串值，包含 Ant 构建的所有命令行选项。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_API.rst:2
msgid "ANDROID_API"
msgstr "ANDROID_API"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_API.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this property sets the Android target API version (e.g. "
"``15``). The version number must be a positive decimal integer.  This "
"property is initialized by the value of the :variable:`CMAKE_ANDROID_API` "
"variable if it is set when a target is created."
msgstr ""
"当 :ref:`使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 进行交叉编译` "
"时，此属性设置 Android 目标 API 版本（例如 ``15``）。版本号必须是十进制正整数。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_API 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_API_MIN.rst:2
msgid "ANDROID_API_MIN"
msgstr "ANDROID_API_MIN"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_API_MIN.rst:6
msgid ""
"Set the Android MIN API version (e.g. ``9``).  The version number must be "
"a positive decimal integer.  This property is initialized by the value of "
"the :variable:`CMAKE_ANDROID_API_MIN` variable if it is set when a target "
"is created.  Native code builds using this API version."
msgstr ""
"设置 Android MIN API 版本（例如 ``9``）。版本号必须是十进制正整数。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_API_MIN 变量的值初始化。本机代码使用此 API 版本构建。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:2
msgid "ANDROID_ARCH"
msgstr "ANDROID_ARCH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this property sets the Android target architecture."
msgstr ""
"当 :ref:`使用 NVIDIA Nsight Tegra Visual Studio Edition 为 Android 进行交叉编译` "
"时，此属性设置 Android 目标架构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:9
msgid ""
"This is a string property that could be set to the one of the following "
"values:"
msgstr "这是一个字符串属性，可以设置为以下值之一："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:12
msgid "``armv7-a``: \"ARMv7-A (armv7-a)\""
msgstr "``armv7-a``: \"ARMv7-A (armv7-a)\""

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:13
msgid "``armv7-a-hard``: \"ARMv7-A, hard-float ABI (armv7-a)\""
msgstr "``armv7-a-hard``: \"ARMv7-A, hard-float ABI (armv7-a)\""

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:14
msgid "``arm64-v8a``: \"ARMv8-A, 64bit (arm64-v8a)\""
msgstr "``arm64-v8a``: \"ARMv8-A, 64bit (arm64-v8a)\""

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:15
msgid "``x86``: \"x86 (x86)\""
msgstr "``x86``: \"x86 (x86)\""

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:16
msgid "``x86_64``: \"x86_64 (x86_64)\""
msgstr "``x86_64``: \"x86_64 (x86_64)\""

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ARCH.rst:18
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_ARCH` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ANDROID_ARCH 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ASSETS_DIRECTORIES.rst:2
msgid "ANDROID_ASSETS_DIRECTORIES"
msgstr "ANDROID_ASSETS_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_ASSETS_DIRECTORIES.rst:6
msgid ""
"Set the Android assets directories to copy into the main assets folder "
"before build. This a string property that contains the directory paths "
"separated by semicolon. This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_ASSETS_DIRECTORIES` variable if it is set when a "
"target is created."
msgstr ""
"将 Android "
"资产目录设置为在构建之前复制到主资产文件夹中。这是一个字符串属性，其中包含以分号分隔的目录路径。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_ASSETS_DIRECTORIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_GUI.rst:2
msgid "ANDROID_GUI"
msgstr "ANDROID_GUI"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_GUI.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this property specifies whether to build an executable as"
" an application package on Android."
msgstr ""
"当 :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio"
" Edition` 时，此属性指定是否将可执行文件构建为 Android 上的应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_GUI.rst:10
msgid ""
"When this property is set to true the executable when built for Android "
"will be created as an application package.  This property is initialized "
"by the value of the :variable:`CMAKE_ANDROID_GUI` variable if it is set "
"when a target is created."
msgstr ""
"当此属性设置为 true 时，为 Android 构建的可执行文件将创建为应用程序包。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_GUI 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_GUI.rst:15
msgid ""
"Add the ``AndroidManifest.xml`` source file explicitly to the target "
":command:`add_executable` command invocation to specify the root directory"
" of the application package source."
msgstr ""
"将 ``AndroidManifest.xml`` 源文件显式添加到目标 :command:`add_executable` "
"命令调用以指定应用程序包源的根目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DEPENDENCIES.rst:2
msgid "ANDROID_JAR_DEPENDENCIES"
msgstr "ANDROID_JAR_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DEPENDENCIES.rst:6
msgid ""
"Set the Android property that specifies JAR dependencies. This is a string"
" value property. This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_JAR_DEPENDENCIES` variable if it is set when a "
"target is created."
msgstr ""
"设置指定 JAR 依赖项的 Android 属性。这是一个字符串值属性。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_JAR_DEPENDENCIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DIRECTORIES.rst:2
msgid "ANDROID_JAR_DIRECTORIES"
msgstr "ANDROID_JAR_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DIRECTORIES.rst:6
msgid ""
"Set the Android property that specifies directories to search for the JAR "
"libraries."
msgstr "设置指定目录的 Android 属性以搜索 JAR 库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DIRECTORIES.rst:9
msgid ""
"This a string property that contains the directory paths separated by "
"semicolons. This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_JAR_DIRECTORIES` variable if it is set when a "
"target is created."
msgstr ""
"这是一个字符串属性，其中包含以分号分隔的目录路径。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_JAR_DIRECTORIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAR_DIRECTORIES.rst:14
msgid ""
"Contents of ``ANDROID_JAR_DIRECTORIES`` may use \"generator expressions\" "
"with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions."
msgstr ""
"``ANDROID_JAR_DIRECTORIES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAVA_SOURCE_DIR.rst:2
msgid "ANDROID_JAVA_SOURCE_DIR"
msgstr "ANDROID_JAVA_SOURCE_DIR"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_JAVA_SOURCE_DIR.rst:6
msgid ""
"Set the Android property that defines the Java source code root "
"directories. This a string property that contains the directory paths "
"separated by semicolon. This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_JAVA_SOURCE_DIR` variable if it is set when a "
"target is created."
msgstr ""
"设置定义 Java 源代码根目录的 Android 属性。这是一个字符串属性，其中包含以分号分隔的目录路径。如果在创建目标时设置了此属性，则该属性由"
" CMAKE_ANDROID_JAVA_SOURCE_DIR 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.rst:2
msgid "ANDROID_NATIVE_LIB_DEPENDENCIES"
msgstr "ANDROID_NATIVE_LIB_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.rst:6
msgid ""
"Set the Android property that specifies the .so dependencies. This is a "
"string property."
msgstr "设置指定 .so 依赖项的 Android 属性。这是一个字符串属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.rst:9
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES` variable if it is set "
"when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DEPENDENCIES.rst:13
msgid ""
"Contents of ``ANDROID_NATIVE_LIB_DEPENDENCIES`` may use \"generator "
"expressions\" with the syntax ``$<...>``. See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions."
msgstr ""
"``ANDROID_NATIVE_LIB_DEPENDENCIES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst:2
msgid "ANDROID_NATIVE_LIB_DIRECTORIES"
msgstr "ANDROID_NATIVE_LIB_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst:6
msgid ""
"Set the Android property that specifies directories to search for the "
"``.so`` libraries."
msgstr "设置指定目录的 Android 属性以搜索 ``.so`` 库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst:9
msgid ""
"This a string property that contains the directory paths separated by "
"semicolons."
msgstr "这是一个字符串属性，其中包含以分号分隔的目录路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst:12
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES` variable if it is set "
"when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_NATIVE_LIB_DIRECTORIES.rst:16
msgid ""
"Contents of ``ANDROID_NATIVE_LIB_DIRECTORIES`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions."
msgstr ""
"``ANDROID_NATIVE_LIB_DIRECTORIES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROCESS_MAX.rst:2
msgid "ANDROID_PROCESS_MAX"
msgstr "ANDROID_PROCESS_MAX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROCESS_MAX.rst:6
msgid ""
"Set the Android property that defines the maximum number of a parallel "
"Android NDK compiler processes (e.g. ``4``). This property is initialized "
"by the value of the :variable:`CMAKE_ANDROID_PROCESS_MAX` variable if it "
"is set when a target is created."
msgstr ""
"设置定义并行 Android NDK 编译器进程的最大数量的 Android 属性（例如 ``4``）。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_PROCESS_MAX 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROGUARD.rst:2
msgid "ANDROID_PROGUARD"
msgstr "ANDROID_PROGUARD"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROGUARD.rst:6
msgid ""
"When this property is set to true that enables the ProGuard tool to "
"shrink, optimize, and obfuscate the code by removing unused code and "
"renaming classes, fields, and methods with semantically obscure names. "
"This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_PROGUARD` variable if it is set when a target is "
"created."
msgstr ""
"当此属性设置为 true 时，ProGuard "
"工具可以通过删除未使用的代码并使用语义模糊的名称重命名类、字段和方法来缩小、优化和混淆代码。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_PROGUARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROGUARD_CONFIG_PATH.rst:2
msgid "ANDROID_PROGUARD_CONFIG_PATH"
msgstr "ANDROID_PROGUARD_CONFIG_PATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_PROGUARD_CONFIG_PATH.rst:6
msgid ""
"Set the Android property that specifies the location of the ProGuard "
"config file. Leave empty to use the default one. This a string property "
"that contains the path to ProGuard config file. This property is "
"initialized by the value of the "
":variable:`CMAKE_ANDROID_PROGUARD_CONFIG_PATH` variable if it is set when "
"a target is created."
msgstr ""
"设置指定 ProGuard 配置文件位置的 Android 属性。留空以使用默认值。这是一个包含 ProGuard "
"配置文件路径的字符串属性。如果在创建目标时设置了此属性，则该属性由 CMAKE_ANDROID_PROGUARD_CONFIG_PATH "
"变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_SECURE_PROPS_PATH.rst:2
msgid "ANDROID_SECURE_PROPS_PATH"
msgstr "ANDROID_SECURE_PROPS_PATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_SECURE_PROPS_PATH.rst:6
msgid ""
"Set the Android property that states the location of the secure properties"
" file. This is a string property that contains the file path. This "
"property is initialized by the value of the "
":variable:`CMAKE_ANDROID_SECURE_PROPS_PATH` variable if it is set when a "
"target is created."
msgstr ""
"设置声明安全属性文件位置的 Android 属性。这是一个包含文件路径的字符串属性。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ANDROID_SECURE_PROPS_PATH 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_SKIP_ANT_STEP.rst:2
msgid "ANDROID_SKIP_ANT_STEP"
msgstr "ANDROID_SKIP_ANT_STEP"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_SKIP_ANT_STEP.rst:6
msgid ""
"Set the Android property that defines whether or not to skip the Ant build"
" step. This is a boolean property initialized by the value of the "
":variable:`CMAKE_ANDROID_SKIP_ANT_STEP` variable if it is set when a "
"target is created."
msgstr ""
"设置定义是否跳过 Ant 构建步骤的 Android 属性。这是一个布尔属性，由 CMAKE_ANDROID_SKIP_ANT_STEP "
"变量的值初始化，如果它是在创建目标时设置的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:2
msgid "ANDROID_STL_TYPE"
msgstr "ANDROID_STL_TYPE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:6
msgid ""
"When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual "
"Studio Edition`, this property specifies the type of STL support for the "
"project. This is a string property that could set to the one of the "
"following values:"
msgstr ""
"当 :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio"
" Edition` 时，此属性指定项目的 STL 支持类型。这是一个字符串属性，可以设置为以下值之一："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:10
msgid "``none``"
msgstr "``没有``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:11
msgid "No C++ Support"
msgstr "不支持 C++"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:12
msgid "``system``"
msgstr "``系统``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:13
msgid "Minimal C++ without STL"
msgstr "没有 STL 的最小 C++"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:14
msgid "``gabi++_static``"
msgstr "``gabi++_static``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:15
msgid "GAbi++ Static"
msgstr "GAbi++静态"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:16
msgid "``gabi++_shared``"
msgstr "``gabi++_shared``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:17
msgid "GAbi++ Shared"
msgstr "GAbi++共享"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:18
msgid "``gnustl_static``"
msgstr "``gnustl_static``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:19
msgid "GNU libstdc++ Static"
msgstr "GNU libstdc++ 静态"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:20
msgid "``gnustl_shared``"
msgstr "``gnustl_shared``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:21
msgid "GNU libstdc++ Shared"
msgstr "GNU libstdc++ 共享"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:22
msgid "``stlport_static``"
msgstr "``stlport_static``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:23
msgid "STLport Static"
msgstr "STL端口静态"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:25
msgid "``stlport_shared``"
msgstr "``stlport_shared``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:25
msgid "STLport Shared"
msgstr "STL端口共享"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ANDROID_STL_TYPE.rst:27
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ANDROID_STL_TYPE` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ANDROID_STL_TYPE 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.rst:2
msgid "ARCHIVE_OUTPUT_DIRECTORY"
msgstr "ARCHIVE_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XXX_OUTPUT_DIRECTORY.txt:1
msgid "Output directory in which to build |XXX| target files."
msgstr "构建 |XXX| 的输出目录目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XXX_OUTPUT_DIRECTORY.txt:3
msgid ""
"This property specifies the directory into which |xxx| target files should"
" be built.  The property value may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>`. Multi-configuration generators "
"(:ref:`Visual Studio <Visual Studio Generators>`, :generator:`Xcode`, "
":generator:`Ninja Multi-Config`) append a per-configuration subdirectory "
"to the specified directory unless a generator expression is used."
msgstr ""
"此属性指定 |xxx| 所在的目录应该构建目标文件。属性值可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。多配置生成器（:ref:`Visual Studio <Visual Studio "
"Generators>`，:generator:`Xcode`，:generator:`Ninja Multi-"
"Config`）将每个配置的子目录附加到指定目录，除非生成器表达式是用过的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XXX_OUTPUT_DIRECTORY.txt:11
msgid ""
"This property is initialized by the value of the "
"|CMAKE_XXX_OUTPUT_DIRECTORY| variable if it is set when a target is "
"created."
msgstr "此属性由 |CMAKE_XXX_OUTPUT_DIRECTORY| 的值初始化变量，如果它是在创建目标时设置的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.rst:9
msgid ""
"See also the :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` target "
"property."
msgstr "另见:prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "ARCHIVE_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:4
msgid ""
"Per-configuration output directory for :ref:`ARCHIVE <Archive Output "
"Artifacts>` target files."
msgstr ":ref:`ARCHIVE <Archive Output Artifacts>` 目标文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:7
msgid ""
"This is a per-configuration version of the "
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` target property, but multi-"
"configuration generators (VS, Xcode) do NOT append a per-configuration "
"subdirectory to the specified directory.  This property is initialized by "
"the value of the :variable:`CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>` "
"variable if it is set when a target is created."
msgstr ""
"这是 :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY` "
"目标属性的每个配置版本，但多配置生成器（VS、Xcode）不会将每个配置子目录附加到指定目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY_CONFIG.rst:15
msgid ""
"Contents of ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` may use "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` 的内容可以使用 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_NAME.rst:2
msgid "ARCHIVE_OUTPUT_NAME"
msgstr "ARCHIVE_OUTPUT_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XXX_OUTPUT_NAME.txt:1
msgid "Output name for |XXX| target files."
msgstr "|XXX| 的输出名称目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XXX_OUTPUT_NAME.txt:3
msgid ""
"This property specifies the base name for |xxx| target files.  It "
"overrides :prop_tgt:`OUTPUT_NAME` and :prop_tgt:`OUTPUT_NAME_<CONFIG>` "
"properties."
msgstr ""
"此属性指定 |xxx| 的基本名称目标文件。它会覆盖 :prop_tgt:`OUTPUT_NAME` 和 "
":prop_tgt:`OUTPUT_NAME_<CONFIG>` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_NAME.rst:8
msgid ""
"See also the :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` target property."
msgstr "另请参阅 :prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.rst:2
msgid "ARCHIVE_OUTPUT_NAME_<CONFIG>"
msgstr "ARCHIVE_OUTPUT_NAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.rst:4
msgid ""
"Per-configuration output name for :ref:`ARCHIVE <Archive Output "
"Artifacts>` target files."
msgstr ":ref:`ARCHIVE <Archive Output Artifacts>` 目标文件的每个配置输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ARCHIVE_OUTPUT_NAME_CONFIG.rst:7
msgid ""
"This is the configuration-specific version of the "
":prop_tgt:`ARCHIVE_OUTPUT_NAME` target property."
msgstr "这是 :prop_tgt:`ARCHIVE_OUTPUT_NAME` 目标属性的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:2
msgid "AUTOGEN_BUILD_DIR"
msgstr "AUTOGEN_BUILD_DIR"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:6
msgid ""
"Directory where :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and "
":prop_tgt:`AUTORCC` generate files for the target."
msgstr ""
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` 为目标生成文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:9
msgid ""
"The directory is created on demand and automatically added to the "
":prop_tgt:`ADDITIONAL_CLEAN_FILES` target property."
msgstr "该目录是按需创建的，并自动添加到 ADDITIONAL_CLEAN_FILES 目标属性中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:12
msgid ""
"When unset or empty the directory ``<dir>/<target-name>_autogen`` is used "
"where ``<dir>`` is :variable:`CMAKE_CURRENT_BINARY_DIR` and ``<target-"
"name>`` is :prop_tgt:`NAME`."
msgstr ""
"取消设置或清空时，使用目录 ``<dir>/<target-name>_autogen``，其中 ``<dir>`` "
"是 :variable:`CMAKE_CURRENT_BINARY_DIR` 和 ``<target-name>`` 是：prop_tgt :`名字`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:16
msgid "By default ``AUTOGEN_BUILD_DIR`` is unset."
msgstr "默认情况下，``AUTOGEN_BUILD_DIR`` 未设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_BUILD_DIR.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:26
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:22
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:250
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:25
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:34
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_EXECUTABLE.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:24
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MOC_OPTIONS.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:20
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:61
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_EXECUTABLE.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:84
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_EXECUTABLE.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:22
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_SEARCH_PATHS.rst:13
msgid ""
"See the :manual:`cmake-qt(7)` manual for more information on using CMake "
"with Qt."
msgstr "有关在 Qt 中使用 CMake 的更多信息，请参阅 :manual:`cmake-qt(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:2
msgid "AUTOGEN_ORIGIN_DEPENDS"
msgstr "AUTOGEN_ORIGIN_DEPENDS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:6
msgid ""
"Switch for forwarding origin target dependencies to the corresponding "
"``_autogen`` target."
msgstr "用于将原始目标依赖项转发到相应的 _autogen 目标的开关。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:9
msgid ""
"Targets which have their :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` "
"property ``ON`` have a corresponding ``_autogen`` target which generates "
"``moc`` and ``uic`` files.  As this ``_autogen`` target is created at "
"generate-time, it is not possible to define dependencies of it using e.g."
"  :command:`add_dependencies`.  Instead the ``AUTOGEN_ORIGIN_DEPENDS`` "
"target property decides whether the origin target dependencies should be "
"forwarded to the ``_autogen`` target or not."
msgstr ""
"具有 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 属性 ``ON`` 的目标具有相应的 "
"``_autogen`` 目标，该目标生成 ``moc`` 和 ``uic`` 文件。由于此 _autogen "
"目标是在生成时创建的，因此无法使用例如定义它的依赖项 :command:`add_dependencies`。相反，``AUTOGEN_ORIGIN_DEPENDS``"
" 目标属性决定是否应将原始目标依赖项转发到 ``_autogen`` 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:17
msgid ""
"By default ``AUTOGEN_ORIGIN_DEPENDS`` is initialized from "
":variable:`CMAKE_AUTOGEN_ORIGIN_DEPENDS` which is ``ON`` by default."
msgstr ""
"默认情况下，``AUTOGEN_ORIGIN_DEPENDS`` 是从 CMAKE_AUTOGEN_ORIGIN_DEPENDS "
"初始化的，默认情况下是 ``ON``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:20
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:15
msgid ""
"In total the dependencies of the ``_autogen`` target are composed from"
msgstr "总的来说，``_autogen`` 目标的依赖项由"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:22
msgid ""
"forwarded origin target dependencies (enabled by default via "
"``AUTOGEN_ORIGIN_DEPENDS``)"
msgstr "转发源目标依赖项（默认情况下通过 ``AUTOGEN_ORIGIN_DEPENDS`` 启用）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:24
msgid ""
"additional user defined dependencies from "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS`"
msgstr "来自 :prop_tgt:`AUTOGEN_TARGET_DEPENDS` 的额外用户定义依赖项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:30
msgid "Note"
msgstr "笔记"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:32
msgid ""
"Disabling ``AUTOGEN_ORIGIN_DEPENDS`` is useful to avoid building of origin"
" target dependencies when building the ``_autogen`` target only. This is "
"especially interesting when a :variable:`global autogen target "
"<CMAKE_GLOBAL_AUTOGEN_TARGET>` is enabled."
msgstr ""
"禁用“AUTOGEN_ORIGIN_DEPENDS”有助于避免在仅构建“_autogen”目标时构建原始目标依赖项。这在启用 "
":variable:`global autogen target <CMAKE_GLOBAL_AUTOGEN_TARGET>` 时特别有趣。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_ORIGIN_DEPENDS.rst:37
msgid ""
"When the ``_autogen`` target doesn't require all the origin target's "
"dependencies, and ``AUTOGEN_ORIGIN_DEPENDS`` is disabled, it might be "
"necessary to extend :prop_tgt:`AUTOGEN_TARGET_DEPENDS` to add missing "
"dependencies."
msgstr ""
"当 `_autogen`` 目标不需要所有原始目标的依赖项，并且 ``AUTOGEN_ORIGIN_DEPENDS`` 被禁用时，可能需要扩展 "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS` 以添加缺少的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:2
msgid "AUTOGEN_PARALLEL"
msgstr "AUTOGEN_PARALLEL"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:6
msgid ""
"Number of parallel ``moc`` or ``uic`` processes to start when using "
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC`."
msgstr "使用 AUTOMOC 和 AUTOUIC 时要启动的并行 ``moc`` 或 ``uic`` 进程数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:9
msgid ""
"The custom ``<origin>_autogen`` target starts a number of threads of which"
" each one parses a source file and on demand starts a ``moc`` or ``uic`` "
"process.  ``AUTOGEN_PARALLEL`` controls how many parallel threads (and "
"therefore ``moc`` or ``uic`` processes) are started."
msgstr ""
"自定义的 ``<origin>_autogen`` 目标启动了许多线程，每个线程解析一个源文件，并根据需要启动一个 ``moc`` 或 "
"``uic`` 进程。 ``AUTOGEN_PARALLEL`` 控制启动了多少个并行线程（因此还有 ``moc`` 或 ``uic`` 进程）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:14
msgid ""
"An empty (or unset) value or the string ``AUTO`` sets the number of "
"threads/processes to the number of physical CPUs on the host system."
msgstr "空（或未设置）值或字符串“AUTO”将线程/进程数设置为主机系统上的物理 CPU 数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:16
msgid ""
"A positive non zero integer value sets the exact thread/process count."
msgstr "正的非零整数值设置确切的线程/进程计数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:17
msgid "Otherwise a single thread/process is started."
msgstr "否则将启动单个线程/进程。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_PARALLEL.rst:19
msgid ""
"By default ``AUTOGEN_PARALLEL`` is initialized from "
":variable:`CMAKE_AUTOGEN_PARALLEL`."
msgstr "默认情况下，``AUTOGEN_PARALLEL`` 是从 CMAKE_AUTOGEN_PARALLEL 初始化的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:2
msgid "AUTOGEN_TARGET_DEPENDS"
msgstr "AUTOGEN_TARGET_DEPENDS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:4
msgid ""
"Additional target dependencies of the corresponding ``_autogen`` target."
msgstr "相应的 _autogen 目标的附加目标依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:6
msgid ""
"Targets which have their :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` "
"property ``ON`` have a corresponding ``_autogen`` target which generates "
"``moc`` and ``uic`` files.  As this ``_autogen`` target is created at "
"generate-time, it is not possible to define dependencies of it using e.g."
"  :command:`add_dependencies`.  Instead the ``AUTOGEN_TARGET_DEPENDS`` "
"target property can be set to a :ref:`;-list <CMake Language Lists>` of "
"additional dependencies for the ``_autogen`` target.  Dependencies can be "
"target names or file names."
msgstr ""
"具有 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 属性 ``ON`` 的目标具有相应的 "
"``_autogen`` 目标，该目标生成 ``moc`` 和 ``uic`` 文件。由于此 _autogen "
"目标是在生成时创建的，因此无法使用例如定义它的依赖项 :command:`add_dependencies`。相反，``AUTOGEN_TARGET_DEPENDS``"
" 目标属性可以设置为 :ref:`;-list <CMake Language Lists>` 用于 ``_autogen`` "
"目标的附加依赖项。依赖项可以是目标名称或文件名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:17
msgid ""
"forwarded origin target dependencies (enabled by default via "
":prop_tgt:`AUTOGEN_ORIGIN_DEPENDS`)"
msgstr "转发源目标依赖项（默认情况下通过 :prop_tgt:`AUTOGEN_ORIGIN_DEPENDS` 启用）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:19
msgid "additional user defined dependencies from ``AUTOGEN_TARGET_DEPENDS``"
msgstr "来自 ``AUTOGEN_TARGET_DEPENDS`` 的额外用户定义依赖项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:25
msgid "Use cases"
msgstr "用例"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:27
msgid ""
"If :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` depends on a file that is "
"either"
msgstr "如果 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 依赖于一个文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:29
msgid ""
"a :prop_sf:`GENERATED` non C++ file (e.g. a :prop_sf:`GENERATED` ``.json``"
" or ``.ui`` file) or"
msgstr ""
"一个 :prop_sf:`GENERATED` 非 C++ 文件（例如 :prop_sf:`GENERATED` ``.json`` 或 "
"``.ui`` 文件）或"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:31
msgid ""
"a :prop_sf:`GENERATED` C++ file that isn't recognized by "
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` because it's skipped by "
":prop_sf:`SKIP_AUTOMOC`, :prop_sf:`SKIP_AUTOUIC`, :prop_sf:`SKIP_AUTOGEN` "
"or :policy:`CMP0071` or"
msgstr ""
":prop_sf:`AUTOMOC` 和 :prop_tgt:`AUTOUIC` 无法识别的 C++ 文件，因为它被 "
":prop_sf:`SKIP_AUTOMOC`、 :prop_sf:`SKIP_AUTOUIC`、 :prop_sf:` 跳过SKIP_AUTOGEN`"
" 或 :policy:`CMP0071` 或"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:34
msgid "a file that isn't in the origin target's sources"
msgstr "不在原始目标源中的文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOGEN_TARGET_DEPENDS.rst:36
msgid "it must be added to ``AUTOGEN_TARGET_DEPENDS``."
msgstr "它必须添加到“AUTOGEN_TARGET_DEPENDS”中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:2
msgid "AUTOMOC"
msgstr "奥托莫克"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:4
msgid "Should the target be processed with auto-moc (for Qt projects)."
msgstr "是否应使用 auto-moc 处理目标（对于 Qt 项目）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:6
msgid ""
"``AUTOMOC`` is a boolean specifying whether CMake will handle the Qt "
"``moc`` preprocessor automatically, i.e.  without having to use commands "
"like :module:`QT4_WRAP_CPP() <FindQt4>`, ``QT5_WRAP_CPP()``, etc. "
"Currently, Qt versions 4 to 6 are supported."
msgstr ""
"``AUTOMOC`` 是一个布尔值，指定 CMake 是否会自动处理 Qt ``moc`` "
"预处理器，即不必使用像 :module:`QT4_WRAP_CPP() <FindQt4>`, ``QT5_WRAP_CPP()``, etc. "
"目前，支持 Qt 版本 4 到 6。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:11
msgid ""
"This property is initialized by the value of the :variable:`CMAKE_AUTOMOC`"
" variable if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_AUTOMOC 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:14
msgid ""
"When this property is set ``ON``, CMake will scan the header and source "
"files at build time and invoke ``moc`` accordingly."
msgstr "当此属性设置为“ON”时，CMake 将在构建时扫描头文件和源文件并相应地调用“moc”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:19
msgid "Header file processing"
msgstr "头文件处理"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:21
msgid ""
"At configuration time, a list of header files that should be scanned by "
"``AUTOMOC`` is computed from the target's sources."
msgstr "在配置时，应由“AUTOMOC”扫描的头文件列表是根据目标源计算的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:24
msgid "All header files in the target's sources are added to the scan list."
msgstr "目标源中的所有头文件都添加到扫描列表中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:25
msgid ""
"For all C++ source files ``<source_base>.<source_extension>`` in the "
"target's sources, CMake searches for"
msgstr "对于目标源中的所有 C++ 源文件 ``<source_base>.<source_extension>``，CMake 搜索"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:28
msgid ""
"a regular header with the same base name "
"(``<source_base>.<header_extention>``) and"
msgstr "具有相同基本名称的常规标头（``<source_base>.<header_extention>``）和"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:30
msgid ""
"a private header with the same base name and a ``_p`` suffix "
"(``<source_base>_p.<header_extention>``)"
msgstr "具有相同基本名称和 ``_p`` 后缀的私有标头 (``<source_base>_p.<header_extention>``)"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:33
msgid "and adds these to the scan list."
msgstr "并将它们添加到扫描列表中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:35
msgid ""
"At build time, CMake scans each unknown or modified header file from the "
"list and searches for"
msgstr "在构建时，CMake 从列表中扫描每个未知的或修改过的头文件并搜索"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:38
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:62
msgid "a Qt macro from :prop_tgt:`AUTOMOC_MACRO_NAMES`,"
msgstr "来自 :prop_tgt:`AUTOMOC_MACRO_NAMES` 的 Qt 宏，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:39
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:65
msgid ""
"additional file dependencies from the ``FILE`` argument of a "
"``Q_PLUGIN_METADATA`` macro and"
msgstr "来自 ``Q_PLUGIN_METADATA`` 宏的 ``FILE`` 参数的附加文件依赖项和"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:41
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:67
msgid ""
"additional file dependencies detected by filters defined in "
":prop_tgt:`AUTOMOC_DEPEND_FILTERS`."
msgstr "由 AUTOMOC_DEPEND_FILTERS 中定义的过滤器检测到的附加文件依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:44
msgid ""
"If a Qt macro is found, then the header will be compiled by the ``moc`` to"
" the output file ``moc_<base_name>.cpp``.  The complete output file path "
"is described in the section `Output file location`_."
msgstr ""
"如果找到 Qt 宏，则头文件将由 ``moc`` 编译为输出文件 "
"``moc_<base_name>.cpp``。完整的输出文件路径在“输出文件位置”一节中进行了描述。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:48
msgid ""
"The header will be ``moc`` compiled again if a file from the additional "
"file dependencies changes."
msgstr "如果附加文件依赖项中的文件发生更改，则标头将再次编译“moc”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:51
msgid ""
"Header ``moc`` output files ``moc_<base_name>.cpp`` can be included in "
"source files.  In the section `Including header moc files in sources`_ "
"there is more information on that topic."
msgstr ""
"头文件 ``moc`` 输出文件 ``moc_<base_name>.cpp`` 可以包含在源文件中。在“在源代码中包含头文件 "
"moc”一节中，有关于该主题的更多信息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:57
msgid "Source file processing"
msgstr "源文件处理"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:59
msgid ""
"At build time, CMake scans each unknown or modified C++ source file from "
"the target's sources for"
msgstr "在构建时，CMake 从目标源中扫描每个未知或修改过的 C++ 源文件以查找"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:63
msgid ""
"includes of header ``moc`` files (see `Including header moc files in "
"sources`_),"
msgstr "包含头``moc``文件（参见`在源中包含头moc文件`_），"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:70
msgid ""
"If a Qt macro is found, then the C++ source file "
"``<base>.<source_extension>`` is expected to as well contain an include "
"statement"
msgstr "如果找到 Qt 宏，则 C++ 源文件“<base>.<source_extension>”也应该包含一个 include 语句"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:79
msgid ""
"The source file then will be compiled by the ``moc`` to the output file "
"``<base>.moc``.  A description of the complete output file path is in "
"section `Output file location`_."
msgstr "然后源文件将由 ``moc`` 编译为输出文件 ``<base>.moc``。完整输出文件路径的描述在“输出文件位置”部分。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:83
msgid ""
"The source will be ``moc`` compiled again if a file from the additional "
"file dependencies changes."
msgstr "如果附加文件依赖项中的文件发生更改，源代码将再次编译“moc”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:87
msgid "Including header moc files in sources"
msgstr "在源代码中包含标题 moc 文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:89
msgid ""
"A source file can include the ``moc`` output file of a header "
"``<header_base>.<header_extension>`` by using an include statement of the "
"form"
msgstr ""
"源文件可以通过使用形式的 include 语句来包含标头 ``<header_base>.<header_extension>`` 的``moc``"
" 输出文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:98
msgid ""
"If the ``moc`` output file of a header is included by a source, it will be"
" generated in a different location than if it was not included.  This is "
"described in the section `Output file location`_."
msgstr "如果头文件的 ``moc`` 输出文件被源包含，它将在与未包含时不同的位置生成。这在“输出文件位置”部分中有描述。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:104
msgid "Output file location"
msgstr "输出文件位置"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:107
msgid "Included moc output files"
msgstr "包括 moc 输出文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:109
msgid ""
"``moc`` output files that are included by a source file will be generated "
"in"
msgstr "源文件包含的``moc``输出文件将在"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:111
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:37
msgid ""
"``<AUTOGEN_BUILD_DIR>/include`` for single configuration generators or in"
msgstr "``<AUTOGEN_BUILD_DIR>/include`` 用于单个配置生成器或在"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:113
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:38
msgid ""
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` for :prop_gbl:`multi "
"configuration <GENERATOR_IS_MULTI_CONFIG>` generators."
msgstr ""
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` 用于 :prop_gbl:`多配置 "
"<GENERATOR_IS_MULTI_CONFIG>` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:116
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:41
msgid ""
"Where ``<AUTOGEN_BUILD_DIR>`` is the value of the target property "
":prop_tgt:`AUTOGEN_BUILD_DIR`."
msgstr "其中``<AUTOGEN_BUILD_DIR>`` 是目标属性的值:prop_tgt:`AUTOGEN_BUILD_DIR`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:119
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:44
msgid ""
"The include directory is automatically added to the target's "
":prop_tgt:`INCLUDE_DIRECTORIES`."
msgstr "包含目录会自动添加到目标的 :prop_tgt:`INCLUDE_DIRECTORIES`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:123
msgid "Not included moc output files"
msgstr "不包括 moc 输出文件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:125
msgid ""
"``moc`` output files that are not included in a source file will be "
"generated in"
msgstr "未包含在源文件中的``moc``输出文件将生成"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:128
msgid ""
"``<AUTOGEN_BUILD_DIR>/<SOURCE_DIR_CHECKSUM>`` for single configuration "
"generators or in,"
msgstr "``<AUTOGEN_BUILD_DIR>/<SOURCE_DIR_CHECKSUM>`` 用于单个配置生成器或在，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:130
msgid ""
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>/<SOURCE_DIR_CHECKSUM>`` for "
":prop_gbl:`multi configuration <GENERATOR_IS_MULTI_CONFIG>` generators."
msgstr ""
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>/<SOURCE_DIR_CHECKSUM>`` 用于 "
":prop_gbl:`多配置 <GENERATOR_IS_MULTI_CONFIG>` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:133
msgid ""
"Where ``<SOURCE_DIR_CHECKSUM>`` is a checksum computed from the relative "
"parent directory path of the ``moc`` input file.  This scheme allows to "
"have ``moc`` input files with the same name in different directories."
msgstr ""
"其中``<SOURCE_DIR_CHECKSUM>``是根据``moc``输入文件的相对父目录路径计算的校验和。该方案允许在不同目录中具有相同名称的"
" ``moc`` 输入文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:137
msgid ""
"All not included ``moc`` output files will be included automatically by "
"the CMake generated file"
msgstr "所有未包含的 ``moc`` 输出文件将由 CMake 生成的文件自动包含"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:140
msgid "``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp``, or"
msgstr "``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp``，或者"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:141
msgid "``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``,"
msgstr "``<AUTOGEN_BUILD_DIR>/mocs_compilation_$<CONFIG>.cpp``,"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:143
msgid "which is added to the target's sources."
msgstr "它被添加到目标的源中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:147
msgid "Qt version detection"
msgstr "Qt版本检测"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:149
msgid ""
"``AUTOMOC`` enabled targets need to know the Qt major and minor version "
"they're working with.  The major version usually is provided by the "
"``INTERFACE_QT_MAJOR_VERSION`` property of the ``Qt[456]Core`` library, "
"that the target links to.  To find the minor version, CMake builds a list "
"of available Qt versions from"
msgstr ""
"``AUTOMOC`` 启用的目标需要知道他们正在使用的 Qt 主要和次要版本。主要版本通常由目标链接到的``Qt [456] "
"Core``库的``INTERFACE_QT_MAJOR_VERSION``属性提供。为了找到次要版本，CMake 构建了一个可用的 Qt 版本列表"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:155
msgid ""
"``Qt6Core_VERSION_MAJOR`` and ``Qt6Core_VERSION_MINOR`` variables (usually"
" set by ``find_package(Qt6...)``)"
msgstr ""
"``Qt6Core_VERSION_MAJOR`` 和 ``Qt6Core_VERSION_MINOR`` 变量（通常由 "
"``find_package(Qt6...)`` 设置）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:157
msgid ""
"``Qt6Core_VERSION_MAJOR`` and ``Qt6Core_VERSION_MINOR`` directory "
"properties"
msgstr "``Qt6Core_VERSION_MAJOR`` 和 ``Qt6Core_VERSION_MINOR`` 目录属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:158
msgid ""
"``Qt5Core_VERSION_MAJOR`` and ``Qt5Core_VERSION_MINOR`` variables (usually"
" set by ``find_package(Qt5...)``)"
msgstr ""
"``Qt5Core_VERSION_MAJOR`` 和 ``Qt5Core_VERSION_MINOR`` 变量（通常由 "
"``find_package(Qt5...)`` 设置）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:160
msgid ""
"``Qt5Core_VERSION_MAJOR`` and ``Qt5Core_VERSION_MINOR`` directory "
"properties"
msgstr "``Qt5Core_VERSION_MAJOR`` 和 ``Qt5Core_VERSION_MINOR`` 目录属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:161
msgid ""
"``QT_VERSION_MAJOR`` and ``QT_VERSION_MINOR``  variables (usually set by "
"``find_package(Qt4...)``)"
msgstr ""
"``QT_VERSION_MAJOR`` 和 ``QT_VERSION_MINOR`` 变量（通常由 "
"``find_package(Qt4...)`` 设置）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:163
msgid "``QT_VERSION_MAJOR`` and ``QT_VERSION_MINOR``  directory properties"
msgstr "``QT_VERSION_MAJOR`` 和 ``QT_VERSION_MINOR`` 目录属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:165
msgid ""
"in the context of the :command:`add_executable` or :command:`add_library` "
"call."
msgstr "在 :command:`add_executable` 或 :command:`add_library` 调用的上下文中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:167
msgid ""
"Assumed  ``INTERFACE_QT_MAJOR_VERSION`` is a valid number, the first entry"
" in the list with a matching major version is taken.  If no matching major"
" version was found, an error is generated. If  "
"``INTERFACE_QT_MAJOR_VERSION`` is not a valid number, the first entry in "
"the list is taken."
msgstr ""
"假设 ``INTERFACE_QT_MAJOR_VERSION`` "
"是一个有效的数字，列表中的第一个条目与匹配的主要版本被采用。如果未找到匹配的主要版本，则会生成错误。如果 "
"``INTERFACE_QT_MAJOR_VERSION`` 不是有效数字，则采用列表中的第一个条目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:173
msgid ""
"A ``find_package(Qt[456]...)`` call sets the "
"``QT/Qt[56]Core_VERSION_MAJOR/MINOR`` variables.  If the call is in a "
"different context than the :command:`add_executable` or "
":command:`add_library` call, e.g. in a function, then the version "
"variables might not be available to the ``AUTOMOC`` enabled target. In "
"that case the version variables can be forwarded from the "
"``find_package(Qt[456]...)`` calling context to the "
":command:`add_executable` or :command:`add_library` calling context as "
"directory properties. The following Qt5 example demonstrates the "
"procedure."
msgstr ""
"``find_package(Qt[456]...)`` 调用设置了 ``QT/Qt[56]Core_VERSION_MAJOR/MINOR`` "
"变量。如果调用与 :command:`add_executable` 或 :command:`add_library` "
"调用处于不同的上下文中，例如在函数中，则版本变量可能无法用于启用“AUTOMOC”的目标。在那种情况下，版本变量可以从``find_package(Qt[456]...)``"
" 调用上下文转发到 :command:`add_executable` 或 :command:`add_library` 调用上下文作为目录属性。以下 "
"Qt5 示例演示了该过程。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:202
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:49
msgid "Modifiers"
msgstr "修饰符"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:204
msgid ""
":prop_tgt:`AUTOMOC_EXECUTABLE`: The ``moc`` executable will be detected "
"automatically, but can be forced to a certain binary using this target "
"property."
msgstr ""
":prop_tgt:`AUTOMOC_EXECUTABLE`：``moc`` 可执行文件将被自动检测，但可以使用此目标属性强制为某个二进制文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:208
msgid ""
":prop_tgt:`AUTOMOC_MOC_OPTIONS`: Additional command line options for "
"``moc`` can be set in this target property."
msgstr ":prop_tgt:`AUTOMOC_MOC_OPTIONS`：可以在此目标属性中设置 ``moc`` 的其他命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:211
msgid ""
":prop_tgt:`AUTOMOC_MACRO_NAMES`: This list of Qt macro names can be "
"extended to search for additional macros in headers and sources."
msgstr ":prop_tgt:`AUTOMOC_MACRO_NAMES`：可以扩展此 Qt 宏名称列表以在标头和源中搜索其他宏。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:215
msgid ""
":prop_tgt:`AUTOMOC_DEPEND_FILTERS`: ``moc`` dependency file names can be "
"extracted from headers or sources by defining file name filters in this "
"target property."
msgstr ""
":prop_tgt:`AUTOMOC_DEPEND_FILTERS`：``moc`` "
"依赖文件名可以通过在此目标属性中定义文件名过滤器从标头或源中提取。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:219
msgid ""
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`: Compiler pre definitions for "
"``moc`` are written to the ``moc_predefs.h`` file. The generation of this "
"file can be enabled or disabled in this target property."
msgstr ""
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES`：``moc`` 的编译器预定义被写入 "
"``moc_predefs.h`` 文件。可以在此目标属性中启用或禁用此文件的生成。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:223
msgid ""
":prop_sf:`SKIP_AUTOMOC`: Sources and headers can be excluded from "
"``AUTOMOC`` processing by setting this source file property."
msgstr ":prop_sf:`SKIP_AUTOMOC`：通过设置此源文件属性，可以从``AUTOMOC`` 处理中排除源和标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:227
msgid ""
":prop_sf:`SKIP_AUTOGEN`: Source files can be excluded from ``AUTOMOC``, "
":prop_tgt:`AUTOUIC` and :prop_tgt:`AUTORCC` processing by setting this "
"source file property."
msgstr ""
":prop_sf:`SKIP_AUTOGEN`：通过设置此源文件属性，源文件可以从 ``AUTOMOC``、 :prop_tgt:`AUTOUIC` "
"和 :prop_tgt:`AUTORCC` 处理中排除。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:232
msgid ""
":prop_gbl:`AUTOGEN_SOURCE_GROUP`: This global property can be used to "
"group files generated by ``AUTOMOC`` or :prop_tgt:`AUTORCC` together in an"
" IDE, e.g.  in MSVS."
msgstr ""
":prop_gbl:`AUTOGEN_SOURCE_GROUP`：此全局属性可用于在 IDE 中将由 ``AUTOMOC`` 或 "
":prop_tgt:`AUTORCC` 生成的文件分组在一起，例如在 MSVS 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:236
msgid ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`: This global property can be used to "
"group ``AUTOMOC``, :prop_tgt:`AUTOUIC` and :prop_tgt:`AUTORCC` targets "
"together in an IDE, e.g.  in MSVS."
msgstr ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`：此全局属性可用于在 IDE 中将 "
"``AUTOMOC``、 :prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` 目标组合在一起，例如在 MSVS 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:241
msgid ""
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`: A global ``autogen`` target, that"
" depends on all ``AUTOMOC`` or :prop_tgt:`AUTOUIC` generated "
"``<ORIGIN>_autogen`` targets in the project, will be generated when this "
"variable is ``ON``."
msgstr ""
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`: 一个全局的``autogen`` "
"目标，它依赖于项目中所有``AUTOMOC`` 或 :prop_tgt:`AUTOUIC` 生成的``<ORIGIN>_autogen`` "
"目标，将在以下时间生成这个变量是 ``ON``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC.rst:246
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:80
msgid ""
":prop_tgt:`AUTOGEN_PARALLEL`: This target property controls the number of "
"``moc`` or ``uic`` processes to start in parallel during builds."
msgstr ""
":prop_tgt:`AUTOGEN_PARALLEL`：此目标属性控制在构建期间并行启动的 ``moc`` 或 ``uic`` 进程的数量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:2
msgid "AUTOMOC_COMPILER_PREDEFINES"
msgstr "AUTOMOC_COMPILER_PREDEFINES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:6
msgid ""
"Boolean value used by :prop_tgt:`AUTOMOC` to determine if the compiler pre"
" definitions file ``moc_predefs.h`` should be generated."
msgstr ":prop_tgt:`AUTOMOC` 使用的布尔值，以确定是否应生成编译器预定义文件 ``moc_predefs.h``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:9
msgid ""
"CMake generates a ``moc_predefs.h`` file with compiler pre definitions "
"from the output of the command defined in "
":variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "
"<CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` when"
msgstr "当"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:14
msgid ":prop_tgt:`AUTOMOC` is enabled,"
msgstr ":prop_tgt:`AUTOMOC` 已启用，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:15
msgid "``AUTOMOC_COMPILER_PREDEFINES`` is enabled,"
msgstr "``AUTOMOC_COMPILER_PREDEFINES`` 已启用，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:16
msgid ""
":variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "
"<CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` isn't empty and"
msgstr ""
":variable:`CMAKE_CXX_COMPILER_PREDEFINES_COMMAND "
"<CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND>` 不为空并且"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:17
msgid "the Qt version is greater or equal 5.8."
msgstr "Qt 版本大于或等于 5.8。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:19
msgid ""
"The ``moc_predefs.h`` file, which is generated in "
":prop_tgt:`AUTOGEN_BUILD_DIR`, is passed to ``moc`` as the argument to the"
" ``--include`` option."
msgstr ""
"在 :prop_tgt:`AUTOGEN_BUILD_DIR` 中生成的``moc_predefs.h`` 文件被传递给``moc`` "
"作为``--include`` 选项的参数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_COMPILER_PREDEFINES.rst:22
msgid ""
"By default ``AUTOMOC_COMPILER_PREDEFINES`` is initialized from "
":variable:`CMAKE_AUTOMOC_COMPILER_PREDEFINES`, which is ON by default."
msgstr ""
"默认情况下，``AUTOMOC_COMPILER_PREDEFINES`` 是从 CMAKE_AUTOMOC_COMPILER_PREDEFINES"
" 初始化的，默认情况下为 ON。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:2
msgid "AUTOMOC_DEPEND_FILTERS"
msgstr "AUTOMOC_DEPEND_FILTERS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:6
msgid ""
"Filter definitions used by :prop_tgt:`AUTOMOC` to extract file names from "
"a source file that are registered as additional dependencies for the "
"``moc`` file of the source file."
msgstr ""
":prop_tgt:`AUTOMOC` 用于从源文件中提取文件名的过滤器定义，这些文件名已注册为源文件的 ``moc`` 文件的附加依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:10
msgid ""
"Filters are defined as ``KEYWORD;REGULAR_EXPRESSION`` pairs. First the "
"file content is searched for ``KEYWORD``. If it is found at least once, "
"then file names are extracted by successively searching for "
"``REGULAR_EXPRESSION`` and taking the first match group."
msgstr ""
"过滤器被定义为“KEYWORD;REGULAR_EXPRESSION”对。首先在文件内容中搜索“KEYWORD”。如果至少找到一次，则通过连续搜索“REGULAR_EXPRESSION”并获取第一个匹配组来提取文件名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:15
msgid "The file name found in the first match group is searched for"
msgstr "搜索第一个匹配组中找到的文件名"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:17
msgid "first in the vicinity of the source file"
msgstr "首先在源文件附近"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:18
msgid "and afterwards in the target's :prop_tgt:`INCLUDE_DIRECTORIES`."
msgstr "然后在目标的 :prop_tgt:`INCLUDE_DIRECTORIES` 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:20
msgid ""
"If any of the extracted files changes, then the ``moc`` file for the "
"source file gets rebuilt even when the source file itself doesn't change."
msgstr "如果任何提取的文件发生更改，那么即使源文件本身没有更改，也会重建源文件的 ``moc`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:23
msgid ""
"If any of the extracted files is :prop_sf:`GENERATED` or if it is not in "
"the target's sources, then it might be necessary to add it to the "
"``_autogen`` target  dependencies. See :prop_tgt:`AUTOGEN_TARGET_DEPENDS` "
"for reference."
msgstr ""
"如果任何提取的文件是 :prop_sf:`GENERATED` 或者如果它不在目标源中，则可能需要将其添加到 ``_autogen`` "
"目标依赖项中。请参阅 :prop_tgt:`AUTOGEN_TARGET_DEPENDS` 以供参考。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:28
msgid ""
"By default ``AUTOMOC_DEPEND_FILTERS`` is initialized from "
":variable:`CMAKE_AUTOMOC_DEPEND_FILTERS`, which is empty by default."
msgstr ""
"默认情况下，``AUTOMOC_DEPEND_FILTERS`` 从 CMAKE_AUTOMOC_DEPEND_FILTERS 初始化，默认为空。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:31
msgid ""
"From Qt 5.15.0 on this variable is ignored as moc is able to output the "
"correct dependencies."
msgstr "从 Qt 5.15.0 开始，这个变量被忽略，因为 moc 能够输出正确的依赖关系。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:39
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:31
msgid "Example 1"
msgstr "示例 1"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:41
msgid ""
"A header file ``my_class.hpp`` uses a custom macro ``JSON_FILE_MACRO`` "
"which is defined in an other header ``macros.hpp``. We want the ``moc`` "
"file of ``my_class.hpp`` to depend on the file name argument of "
"``JSON_FILE_MACRO``::"
msgstr ""
"头文件“my_class.hpp”使用自定义宏“JSON_FILE_MACRO”，它在另一个头文件“macros.hpp”中定义。我们希望 "
"``my_class.hpp`` 的 ``moc`` 文件依赖于 ``JSON_FILE_MACRO`` 的文件名参数 ::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:54
msgid ""
"In ``CMakeLists.txt`` we add a filter to "
":variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` like this::"
msgstr ""
"在 ``CMakeLists.txt`` 中，我们向 :variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` "
"添加了一个过滤器，如下所示："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:62
msgid ""
"We assume ``info.json`` is a plain (not :prop_sf:`GENERATED`) file that is"
" listed in the target's source.  Therefore we do not need to add it to "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS`."
msgstr ""
"我们假设 ``info.json`` 是目标源中列出的普通（不是 :prop_sf:`GENERATED`）文件。因此我们不需要将它添加到 "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:67
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:41
msgid "Example 2"
msgstr "示例 2"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:69
msgid ""
"In the target ``my_target`` a header file ``complex_class.hpp`` uses a "
"custom macro ``JSON_BASED_CLASS`` which is defined in an other header "
"``macros.hpp``::"
msgstr ""
"在目标“my_target”中，头文件“complex_class.hpp”使用自定义宏“JSON_BASED_CLASS”，它在另一个头文件“macros.hpp”中定义："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:91
msgid ""
"Since ``complex_class.hpp`` doesn't contain a ``Q_OBJECT`` macro it would "
"be ignored by :prop_tgt:`AUTOMOC`.  We change this by adding "
"``JSON_BASED_CLASS`` to :variable:`CMAKE_AUTOMOC_MACRO_NAMES`::"
msgstr ""
"由于 ``complex_class.hpp`` 不包含 ``Q_OBJECT`` 宏，它会被 :prop_tgt:`AUTOMOC` "
"忽略。我们通过将 ``JSON_BASED_CLASS`` 添加到 :variable:`CMAKE_AUTOMOC_MACRO_NAMES`::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:97
msgid ""
"We want the ``moc`` file of ``complex_class.hpp`` to depend on "
"``meta.json``.  So we add a filter to "
":variable:`CMAKE_AUTOMOC_DEPEND_FILTERS`::"
msgstr ""
"我们希望 ``complex_class.hpp`` 的 ``moc`` 文件依赖于 ``meta.json``。所以我们添加一个过滤器到 "
":variable:`CMAKE_AUTOMOC_DEPEND_FILTERS`::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_DEPEND_FILTERS.rst:106
msgid ""
"Additionally we assume ``meta.json`` is :prop_sf:`GENERATED` which is why "
"we have to add it to :prop_tgt:`AUTOGEN_TARGET_DEPENDS`::"
msgstr ""
"此外，我们假设 ``meta.json`` 是 :prop_sf:`GENERATED` 这就是为什么我们必须将它添加到 "
":prop_tgt:`AUTOGEN_TARGET_DEPENDS`::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_EXECUTABLE.rst:2
msgid "AUTOMOC_EXECUTABLE"
msgstr "AUTOMOC_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_EXECUTABLE.rst:6
msgid ""
"``AUTOMOC_EXECUTABLE`` is file path pointing to the ``moc`` executable to "
"use for :prop_tgt:`AUTOMOC` enabled files. Setting this property will make"
" CMake skip the automatic detection of the ``moc`` binary as well as the "
"sanity-tests normally run to ensure that the binary is available and "
"working as expected."
msgstr ""
"``AUTOMOC_EXECUTABLE`` 是指向``moc`` 可执行文件的文件路径，用于:prop_tgt:`AUTOMOC` "
"启用文件。设置此属性将使 CMake 跳过对 ``moc`` 二进制文件的自动检测以及正常运行的完整性测试，以确保二进制文件可用并按预期工作。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_EXECUTABLE.rst:12
msgid ""
"Usually this property does not need to be set. Only consider this property"
" if auto-detection of ``moc`` can not work -- e.g. because you are "
"building the ``moc`` binary as part of your project."
msgstr ""
"通常不需要设置此属性。仅当“moc”的自动检测不起作用时才考虑此属性——例如因为您正在构建 ``moc`` 二进制文件作为项目的一部分。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:2
msgid "AUTOMOC_MACRO_NAMES"
msgstr "AUTOMOC_MACRO_NAMES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:6
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` list of macro "
"names used by :prop_tgt:`AUTOMOC` to determine if a C++ file needs to be "
"processed by ``moc``."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` AUTOMOC 使用的宏名称列表，以确定 C++ 文件是否需要由 "
"``moc`` 处理。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:9
msgid ""
"This property is only used if the :prop_tgt:`AUTOMOC` property is ``ON`` "
"for this target."
msgstr "此属性仅在 :prop_tgt:`AUTOMOC` 属性为此目标为 ``ON`` 时使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:12
msgid ""
"When running :prop_tgt:`AUTOMOC`, CMake searches for the strings listed in"
" ``AUTOMOC_MACRO_NAMES`` in C++ source and header files. If any of the "
"strings is found"
msgstr ""
"运行 :prop_tgt:`AUTOMOC 时，CMake 在 C++ 源文件和头文件中搜索 `AUTOMOC_MACRO_NAMES`` "
"中列出的字符串。如果找到任何字符串"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:16
msgid "as the first non space string on a new line or"
msgstr "作为新行上的第一个非空格字符串或"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:17
msgid "as the first non space string after a ``{`` on a new line,"
msgstr "作为新行上 ``{`` 之后的第一个非空格字符串，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:19
msgid "then the file will be processed by ``moc``."
msgstr "然后文件将由 ``moc`` 处理。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:21
msgid ""
"By default ``AUTOMOC_MACRO_NAMES`` is initialized from "
":variable:`CMAKE_AUTOMOC_MACRO_NAMES`."
msgstr "默认情况下，``AUTOMOC_MACRO_NAMES`` 是从 CMAKE_AUTOMOC_MACRO_NAMES 初始化的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_COMPILE_BATCHING.rst:17
msgid "Example"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MACRO_NAMES.rst:30
msgid ""
"In this case the ``Q_OBJECT`` macro is hidden inside another macro called "
"``CUSTOM_MACRO``.  To let CMake know that source files that contain "
"``CUSTOM_MACRO`` need to be ``moc`` processed, we call::"
msgstr ""
"在这种情况下，``Q_OBJECT`` 宏隐藏在另一个名为 ``CUSTOM_MACRO`` 的宏中。为了让 CMake 知道包含 "
"``CUSTOM_MACRO`` 的源文件需要进行 ``moc`` 处理，我们调用："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MOC_OPTIONS.rst:2
msgid "AUTOMOC_MOC_OPTIONS"
msgstr "AUTOMOC_MOC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MOC_OPTIONS.rst:4
msgid "Additional options for ``moc`` when using :prop_tgt:`AUTOMOC`"
msgstr "使用 :prop_tgt:`AUTOMOC` 时 ``moc`` 的附加选项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MOC_OPTIONS.rst:6
msgid ""
"This property is only used if the :prop_tgt:`AUTOMOC` property is ``ON`` "
"for this target.  In this case, it holds additional command line options "
"which will be used when ``moc`` is executed during the build, i.e. it is "
"equivalent to the optional ``OPTIONS`` argument of the "
":module:`qt4_wrap_cpp() <FindQt4>` macro."
msgstr ""
"此属性仅在 :prop_tgt:`AUTOMOC` 属性为此目标为 ``ON`` "
"时使用。在这种情况下，它包含额外的命令行选项，这些选项将在构建期间执行 ``moc`` 时使用，即它等效于 "
":module:`qt4_wrap_cpp() <FindQt4 的可选 ``OPTIONS`` 参数>`宏。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_MOC_OPTIONS.rst:12
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_AUTOMOC_MOC_OPTIONS` variable if it is set when a target "
"is created, or an empty string otherwise."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_AUTOMOC_MOC_OPTIONS 变量的值初始化，否则为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:2
msgid "AUTOMOC_PATH_PREFIX"
msgstr "AUTOMOC_PATH_PREFIX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:6
msgid ""
"When this property is ``ON``, CMake will generate the ``-p`` path prefix "
"option for ``moc`` on :prop_tgt:`AUTOMOC` enabled Qt targets."
msgstr "当此属性为 ``ON`` 时，CMake 将为启用了 Qt 目标的 ``moc`` 生成 ``-p`` 路径前缀选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:9
msgid ""
"To generate the path prefix, CMake tests if the header compiled by ``moc``"
" is in any of the target :command:`include directories "
"<target_include_directories>`.  If so, CMake will compute the relative "
"path accordingly.  If the header is not in the :command:`include "
"directories <target_include_directories>`, CMake will omit the ``-p`` path"
" prefix option.  ``moc`` usually generates a relative include path in that"
" case."
msgstr ""
"为了生成路径前缀，CMake 会测试由``moc`` 编译的标头是否在任何目标中 :command:`include "
"目录<target_include_directories>`。如果是这样，CMake 将相应地计算相对路径。如果标头不在 "
":command:`include directories <target_include_directories>` 中，CMake 将忽略 "
"``-p`` 路径前缀选项。在这种情况下，``moc`` 通常会生成相对包含路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:17
msgid ""
"``AUTOMOC_PATH_PREFIX`` is initialized from the variable "
":variable:`CMAKE_AUTOMOC_PATH_PREFIX`, which is ``OFF`` by default."
msgstr ""
"``AUTOMOC_PATH_PREFIX`` 从变量 :variable:`CMAKE_AUTOMOC_PATH_PREFIX` 初始化，默认为 "
"``OFF``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:24
msgid "Reproducible builds"
msgstr "可重现的构建"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:26
msgid ""
"For reproducible builds it is recommended to keep headers that are ``moc``"
" compiled in one of the target :command:`include directories "
"<target_include_directories>` and set ``AUTOMOC_PATH_PREFIX`` to ``ON``.  "
"This ensures that:"
msgstr ""
"对于可重现的构建，建议将 ``moc`` 的标头保留在目标之一中:command:`include 目录 "
"<target_include_directories>` 并将 ``AUTOMOC_PATH_PREFIX`` 设置为 ``ON``。这确保："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:31
msgid "``moc`` output files are identical on different build setups,"
msgstr "``moc`` 输出文件在不同的构建设置上是相同的，"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOMOC_PATH_PREFIX.rst:32
msgid ""
"``moc`` output files will compile correctly when the source and/or build "
"directory is a symbolic link."
msgstr "当源和/或构建目录是符号链接时，``moc`` 输出文件将正确编译。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:2
msgid "AUTORCC"
msgstr "AUTORCC 认证"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:4
msgid "Should the target be processed with auto-rcc (for Qt projects)."
msgstr "是否应使用 auto-rcc 处理目标（对于 Qt 项目）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:6
msgid ""
"``AUTORCC`` is a boolean specifying whether CMake will handle the Qt "
"``rcc`` code generator automatically, i.e. without having to use commands "
"like :module:`QT4_ADD_RESOURCES() <FindQt4>`, ``QT5_ADD_RESOURCES()``, "
"etc.  Currently, Qt versions 4 to 6 are supported."
msgstr ""
"``AUTORCC`` 是一个布尔值，指定 CMake 是否会自动处理 Qt ``rcc`` "
"代码生成器，即不必使用像 :module:`QT4_ADD_RESOURCES() <FindQt4>`, "
"``QT5_ADD_RESOURCES()`` 这样的命令等。目前支持Qt 4到6版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:11
msgid ""
"When this property is ``ON``, CMake will handle ``.qrc`` files added as "
"target sources at build time and invoke ``rcc`` accordingly. This property"
" is initialized by the value of the :variable:`CMAKE_AUTORCC` variable if "
"it is set when a target is created."
msgstr ""
"当此属性为“ON”时，CMake 将处理在构建时作为目标源添加的“.qrc”文件，并相应地调用“rcc”。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_AUTORCC 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:16
msgid ""
"By default ``AUTORCC`` is processed by a :command:`custom command "
"<add_custom_command>`. If the ``.qrc`` file is :prop_sf:`GENERATED`, a "
":command:`custom target <add_custom_target>` is used instead."
msgstr ""
"默认情况下，``AUTORCC`` 由 :command:`自定义命令 <add_custom_command>` 处理。如果``.qrc`` "
"文件是 :prop_sf:`GENERATED`，则使用 :command:`自定义目标<add_custom_target>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:21
msgid ""
"When there are multiple ``.qrc`` files with the same name, CMake will "
"generate unspecified unique output file names for ``rcc``.  Therefore, if "
"``Q_INIT_RESOURCE()`` or ``Q_CLEANUP_RESOURCE()`` need to be used, the "
"``.qrc`` file name must be unique."
msgstr ""
"当存在多个同名的 .qrc 文件时，CMake 将为 rcc "
"生成未指定的唯一输出文件名。因此，如果需要使用``Q_INIT_RESOURCE()`` "
"或``Q_CLEANUP_RESOURCE()``，``.qrc`` 文件名必须是唯一的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:30
msgid ""
":prop_tgt:`AUTORCC_EXECUTABLE`: The ``rcc`` executable will be detected "
"automatically, but can be forced to a certain binary by setting this "
"target property."
msgstr ""
":prop_tgt:`AUTORCC_EXECUTABLE`：``rcc`` 可执行文件将被自动检测，但可以通过设置此目标属性强制为某个二进制文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:34
msgid ""
":prop_tgt:`AUTORCC_OPTIONS`: Additional command line options for ``rcc`` "
"can be set via this target property.  The corresponding "
":prop_sf:`AUTORCC_OPTIONS` source file property can be used to specify "
"options to be applied only to a specific ``.qrc`` file."
msgstr ""
":prop_tgt:`AUTORCC_OPTIONS`：可以通过此目标属性设置 ``rcc`` 的其他命令行选项。相应的 "
":prop_sf:`AUTORCC_OPTIONS` 源文件属性可用于指定仅应用于特定 ``.qrc`` 文件的选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:39
msgid ""
":prop_sf:`SKIP_AUTORCC`: ``.qrc`` files can be excluded from ``AUTORCC`` "
"processing by setting this source file property."
msgstr ""
":prop_sf:`SKIP_AUTORCC`：通过设置此源文件属性，可以将``.qrc`` 文件从``AUTORCC`` 处理中排除。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:43
msgid ""
":prop_sf:`SKIP_AUTOGEN`: Source files can be excluded from "
":prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and ``AUTORCC`` processing by "
"setting this source file property."
msgstr ""
":prop_sf:`SKIP_AUTOGEN`：通过设置此源文件属性，可以将源文件从 "
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 ``AUTORCC`` 处理中排除。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:48
msgid ""
":prop_gbl:`AUTOGEN_SOURCE_GROUP`: This global property can be used to "
"group files generated by :prop_tgt:`AUTOMOC` or ``AUTORCC`` together in an"
" IDE, e.g.  in MSVS."
msgstr ""
":prop_gbl:`AUTOGEN_SOURCE_GROUP`：此全局属性可用于在 IDE 中将由 :prop_tgt:`AUTOMOC` 或 "
"``AUTORCC`` 生成的文件分组在一起，例如在 MSVS 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:52
msgid ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`: This global property can be used to "
"group :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and ``AUTORCC`` targets "
"together in an IDE, e.g.  in MSVS."
msgstr ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`：此全局属性可用于在 IDE 中将 "
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 ``AUTORCC`` 目标组合在一起，例如在 MSVS 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC.rst:57
msgid ""
":variable:`CMAKE_GLOBAL_AUTORCC_TARGET`: A global ``autorcc`` target that "
"depends on all ``AUTORCC`` targets in the project will be generated when "
"this variable is ``ON``."
msgstr ""
":variable:`CMAKE_GLOBAL_AUTORCC_TARGET`：当此变量为 ``ON`` 时，将生成依赖于项目中所有 "
"``AUTORCC`` 目标的全局 ``autorcc`` 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_EXECUTABLE.rst:2
msgid "AUTORCC_EXECUTABLE"
msgstr "AUTORCC_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_EXECUTABLE.rst:6
msgid ""
"``AUTORCC_EXECUTABLE`` is file path pointing to the ``rcc`` executable to "
"use for :prop_tgt:`AUTORCC` enabled files. Setting this property will make"
" CMake skip the automatic detection of the ``rcc`` binary as well as the "
"sanity-tests normally run to ensure that the binary is available and "
"working as expected."
msgstr ""
"``AUTORCC_EXECUTABLE`` 是指向 ``rcc`` 可执行文件的文件路径，用于 :prop_tgt:`AUTORCC` "
"启用文件。设置此属性将使 CMake 跳过对 ``rcc`` 二进制文件的自动检测以及正常运行的完整性测试，以确保二进制文件可用并按预期工作。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_EXECUTABLE.rst:12
msgid ""
"Usually this property does not need to be set. Only consider this property"
" if auto-detection of ``rcc`` can not work -- e.g. because you are "
"building the ``rcc`` binary as part of your project."
msgstr ""
"通常不需要设置此属性。仅当 ``rcc`` 的自动检测不起作用时才考虑此属性——例如因为您正在构建 ``rcc`` 二进制文件作为项目的一部分。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:2
msgid "AUTORCC_OPTIONS"
msgstr "AUTORCC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:4
msgid "Additional options for ``rcc`` when using :prop_tgt:`AUTORCC`"
msgstr "使用 :prop_tgt:`AUTORCC` 时 ``rcc`` 的附加选项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:6
msgid ""
"This property holds additional command line options which will be used "
"when ``rcc`` is executed during the build via :prop_tgt:`AUTORCC`, i.e. it"
" is equivalent to the optional ``OPTIONS`` argument of the "
":module:`qt4_add_resources() <FindQt4>` macro."
msgstr ""
"此属性包含额外的命令行选项，当通过 :prop_tgt:`AUTORCC` 在构建期间执行 ``rcc`` 时将使用这些选项，即它等效于 "
":module:`qt4_add_resources 的可选 ``OPTIONS`` 参数() <FindQt4>` 宏。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_AUTORCC_OPTIONS` variable if it is set when a target is "
"created, or an empty string otherwise."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_AUTORCC_OPTIONS 变量的值初始化，否则为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:15
msgid ""
"The options set on the target may be overridden by "
":prop_sf:`AUTORCC_OPTIONS` set on the ``.qrc`` source file."
msgstr "在目标上设置的选项可能会被在 .qrc 源文件上设置的 AUTORCC_OPTIONS 覆盖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTORCC_OPTIONS.rst:22
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:26
msgid "EXAMPLE"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:2
msgid "AUTOUIC"
msgstr "自动档"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:4
msgid "Should the target be processed with auto-uic (for Qt projects)."
msgstr "是否应使用 auto-uic 处理目标（对于 Qt 项目）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:6
msgid ""
"``AUTOUIC`` is a boolean specifying whether CMake will handle the Qt "
"``uic`` code generator automatically, i.e. without having to use commands "
"like :module:`QT4_WRAP_UI() <FindQt4>`, ``QT5_WRAP_UI()``, etc. Currently,"
" Qt versions 4 to 6 are supported."
msgstr ""
"``AUTOUIC`` 是一个布尔值，指定 CMake 是否会自动处理 Qt ``uic`` "
"代码生成器，即不必使用像 :module:`QT4_WRAP_UI() <FindQt4>`, ``QT5_WRAP_UI()`` "
"这样的命令等。目前支持Qt 4到6版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:11
msgid ""
"This property is initialized by the value of the :variable:`CMAKE_AUTOUIC`"
" variable if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_AUTOUIC 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:14
msgid ""
"When this property is ``ON``, CMake will scan the header and source files "
"at build time and invoke ``uic`` accordingly."
msgstr "当此属性为“ON”时，CMake 将在构建时扫描头文件和源文件并相应地调用“uic”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:19
msgid "Header and source file processing"
msgstr "头文件和源文件处理"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:21
msgid ""
"At build time, CMake scans each header and source file from the target's "
"sources for include statements of the form"
msgstr "在构建时，CMake 扫描目标源中的每个头文件和源文件，以查找包含以下形式的语句"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:28
msgid ""
"Once such an include statement is found in a file, CMake searches for the "
"``uic`` input file ``<ui_base>.ui``"
msgstr "一旦在文件中找到这样的包含语句，CMake 就会搜索 ``uic`` 输入文件 ``<ui_base>.ui``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:31
msgid "in the vicinity of the file and"
msgstr "在文件附近和"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:32
msgid "in the :prop_tgt:`AUTOUIC_SEARCH_PATHS` of the target."
msgstr "在目标的 :prop_tgt:`AUTOUIC_SEARCH_PATHS` 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:34
msgid ""
"If the ``<ui_base>.ui`` file was found, ``uic`` is called on it to "
"generate ``ui_<ui_base>.h`` in the directory"
msgstr "如果找到 ``<ui_base>.ui`` 文件，则在其上调用 ``uic`` 以在目录中生成 ``ui_<ui_base>.h``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:51
msgid ""
":prop_tgt:`AUTOUIC_EXECUTABLE`: The ``uic`` executable will be detected "
"automatically, but can be forced to a certain binary using this target "
"property."
msgstr ""
":prop_tgt:`AUTOUIC_EXECUTABLE`：``uic`` 可执行文件将被自动检测，但可以使用此目标属性强制为某个二进制文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:55
msgid ""
":prop_tgt:`AUTOUIC_OPTIONS`: Additional command line options for ``uic`` "
"can be set via this target property.  The corresponding "
":prop_sf:`AUTOUIC_OPTIONS` source file property can be used to specify "
"options to be applied only to a specific ``<base_name>.ui`` file."
msgstr ""
":prop_tgt:`AUTOUIC_OPTIONS`：可以通过此目标属性设置 ``uic`` 的其他命令行选项。相应的 "
":prop_sf:`AUTOUIC_OPTIONS` 源文件属性可用于指定仅应用于特定 ``<base_name>.ui`` 文件的选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:61
msgid ""
":prop_sf:`SKIP_AUTOUIC`: Source files can be excluded from ``AUTOUIC`` "
"processing by setting this source file property."
msgstr ":prop_sf:`SKIP_AUTOUIC`：通过设置此源文件属性，可以将源文件排除在``AUTOUIC`` 处理之外。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:65
msgid ""
":prop_sf:`SKIP_AUTOGEN`: Source files can be excluded from "
":prop_tgt:`AUTOMOC`, ``AUTOUIC`` and :prop_tgt:`AUTORCC` processing by "
"setting this source file property."
msgstr ""
":prop_sf:`SKIP_AUTOGEN`：通过设置此源文件属性，可以从 :prop_tgt:`AUTOMOC`、`AUTOUIC`` 和 "
":prop_tgt:`AUTORCC` 处理中排除源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:70
msgid ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`: This global property can be used to "
"group :prop_tgt:`AUTOMOC`, ``AUTOUIC`` and :prop_tgt:`AUTORCC` targets "
"together in an IDE, e.g.  in MSVS."
msgstr ""
":prop_gbl:`AUTOGEN_TARGETS_FOLDER`：此全局属性可用于在 IDE 中将 "
":prop_tgt:`AUTOMOC`、``AUTOUIC`` 和 :prop_tgt:`AUTORCC` 目标组合在一起，例如在 MSVS 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC.rst:75
msgid ""
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`: A global ``autogen`` target, that"
" depends on all :prop_tgt:`AUTOMOC` or ``AUTOUIC`` generated "
"``<ORIGIN>_autogen`` targets in the project, will be generated when this "
"variable is ``ON``."
msgstr ""
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`: "
"一个全局的``autogen``目标，它依赖于项目中所有的 :prop_tgt:`AUTOMOC`或``AUTOUIC``生成的``<ORIGIN>_autogen``目标，将在这个变量是"
" ``ON``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_EXECUTABLE.rst:2
msgid "AUTOUIC_EXECUTABLE"
msgstr "AUTOUIC_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_EXECUTABLE.rst:6
msgid ""
"``AUTOUIC_EXECUTABLE`` is file path pointing to the ``uic`` executable to "
"use for :prop_tgt:`AUTOUIC` enabled files. Setting this property will make"
" CMake skip the automatic detection of the ``uic`` binary as well as the "
"sanity-tests normally run to ensure that the binary is available and "
"working as expected."
msgstr ""
"``AUTOUIC_EXECUTABLE`` 是指向 ``uic`` 可执行文件的文件路径，用于:prop_tgt:`AUTOUIC` "
"启用文件。设置此属性将使 CMake 跳过对 ``uic`` 二进制文件的自动检测以及正常运行的完整性测试，以确保二进制文件可用并按预期工作。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_EXECUTABLE.rst:12
msgid ""
"Usually this property does not need to be set. Only consider this property"
" if auto-detection of ``uic`` can not work -- e.g. because you are "
"building the ``uic`` binary as part of your project."
msgstr ""
"通常不需要设置此属性。仅当 uic 的自动检测不起作用时才考虑此属性——例如因为您正在构建 ``uic`` 二进制文件作为项目的一部分。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:2
msgid "AUTOUIC_OPTIONS"
msgstr "AUTOUIC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:4
msgid "Additional options for ``uic`` when using :prop_tgt:`AUTOUIC`"
msgstr "使用 :prop_tgt:`AUTOUIC` 时 ``uic`` 的附加选项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:6
msgid ""
"This property holds additional command line options which will be used "
"when ``uic`` is executed during the build via :prop_tgt:`AUTOUIC`, i.e. it"
" is equivalent to the optional ``OPTIONS`` argument of the "
":module:`qt4_wrap_ui() <FindQt4>` macro."
msgstr ""
"此属性包含额外的命令行选项，这些选项将在构建期间通过 AUTOUIC 执行 ``uic`` 时使用，即它等效于 "
":module:`qt4_wrap_ui 的可选 ``OPTIONS`` 参数() <FindQt4>` 宏。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_AUTOUIC_OPTIONS` variable if it is set when a target is "
"created, or an empty string otherwise."
msgstr "如果在创建目标时设置此属性，则此属性由 CMAKE_AUTOUIC_OPTIONS 变量的值初始化，否则为空字符串。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:15
msgid ""
"The options set on the target may be overridden by "
":prop_sf:`AUTOUIC_OPTIONS` set on the ``.ui`` source file."
msgstr "在目标上设置的选项可能会被在 .ui 源文件上设置的 AUTOUIC_OPTIONS 覆盖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_OPTIONS.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:23
msgid ""
"This property may use \"generator expressions\" with the syntax "
"``$<...>``. See the :manual:`cmake-generator-expressions(7)` manual for "
"available expressions."
msgstr ""
"此属性可以使用语法为“$<...>”的“生成器表达式”。请参阅 :manual:`cmake-generator-expressions(7)` "
"手册了解可用的表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_SEARCH_PATHS.rst:2
msgid "AUTOUIC_SEARCH_PATHS"
msgstr "AUTOUIC_SEARCH_PATHS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_SEARCH_PATHS.rst:6
msgid ""
"Search path list used by :prop_tgt:`AUTOUIC` to find included ``.ui`` "
"files."
msgstr ":prop_tgt:`AUTOUIC` 用于查找包含的 ``.ui`` 文件的搜索路径列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/AUTOUIC_SEARCH_PATHS.rst:9
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_AUTOUIC_SEARCH_PATHS` variable if it is set when a target"
" is created. Otherwise it is empty."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_AUTOUIC_SEARCH_PATHS 变量的值初始化。否则它是空的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BINARY_DIR.rst:2
msgid "BINARY_DIR"
msgstr "二进制目录"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BINARY_DIR.rst:6
msgid ""
"This read-only property reports the value of the "
":variable:`CMAKE_CURRENT_BINARY_DIR` variable in the directory in which "
"the target was defined."
msgstr "此只读属性报告定义目标的目录中的 CMAKE_CURRENT_BINARY_DIR 变量的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:2
msgid "BUILD_RPATH"
msgstr "构建路径"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:6
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` specifying "
"runtime path (``RPATH``) entries to add to binaries linked in the build "
"tree (for platforms that support it).  By default, CMake sets the runtime "
"path of binaries in the build tree to contain search paths it knows are "
"needed to find the shared libraries they link. Projects may set "
"``BUILD_RPATH`` to specify additional search paths."
msgstr ""
":ref:`分号分隔的列表 <CMake Language Lists>` 指定运行时路径 (``RPATH``) "
"条目以添加到构建树中链接的二进制文件（对于支持它的平台）。默认情况下，CMake "
"将构建树中二进制文件的运行时路径设置为包含它知道查找它们链接的共享库所需的搜索路径。项目可以设置“BUILD_RPATH”来指定额外的搜索路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:13
msgid ""
"The build-tree runtime path will *not* be used for binaries in the install"
" tree.  It will be replaced with the install-tree runtime path during the "
"installation step.  See also the :prop_tgt:`INSTALL_RPATH` target "
"property."
msgstr ""
"构建树运行时路径*不会*用于安装树中的二进制文件。在安装步骤中，它将替换为安装树运行时路径。另请参阅 "
":prop_tgt:`INSTALL_RPATH` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:18
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_BUILD_RPATH` if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_BUILD_RPATH 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:32
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS.rst:13
msgid ""
"This property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"此属性支持 :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:24
msgid "Other settings that affect the build-tree runtime path include:"
msgstr "影响构建树运行时路径的其他设置包括："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:26
msgid ""
"The :variable:`CMAKE_SKIP_RPATH` variable completely disables runtime "
"paths in both the build tree and install tree."
msgstr ":variable:`CMAKE_SKIP_RPATH` 变量完全禁用构建树和安装树中的运行时路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:29
msgid ""
"The :prop_tgt:`SKIP_BUILD_RPATH` target property disables setting any "
"runtime path in the build tree."
msgstr ":prop_tgt:`SKIP_BUILD_RPATH` 目标属性禁止在构建树中设置任何运行时路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:32
msgid ""
"The :prop_tgt:`BUILD_RPATH_USE_ORIGIN` target property causes the "
"automatically-generated runtime path to use entries relative to "
"``$ORIGIN``."
msgstr ""
":prop_tgt:`BUILD_RPATH_USE_ORIGIN` 目标属性导致自动生成的运行时路径使用相对于 ``$ORIGIN`` 的条目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH.rst:35
msgid ""
"The :prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property causes binaries "
"in the build tree to be built with the install-tree runtime path."
msgstr ":prop_tgt:`BUILD_WITH_INSTALL_RPATH` 目标属性导致构建树中的二进制文件使用安装树运行时路径构建。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:2
msgid "BUILD_RPATH_USE_ORIGIN"
msgstr "BUILD_RPATH_USE_ORIGIN"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:6
msgid "Whether to use relative paths for the build ``RPATH``."
msgstr "是否使用相对路径构建 ``RPATH``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:8
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_BUILD_RPATH_USE_ORIGIN`."
msgstr "此属性由变量 CMAKE_BUILD_RPATH_USE_ORIGIN 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:11
msgid ""
"On platforms that support runtime paths (``RPATH``) with the ``$ORIGIN`` "
"token, setting this property to ``TRUE`` enables relative paths in the "
"build ``RPATH`` for executables and shared libraries that point to shared "
"libraries in the same build tree."
msgstr ""
"在支持带有 `$ORIGIN`` 标记的运行时路径 (``RPATH``) 的平台上，将此属性设置为 ``TRUE`` 在构建 ``RPATH`` "
"中为可执行文件和共享库启用相对路径到同一构建树中的共享库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:16
msgid ""
"Normally the build ``RPATH`` of a binary contains absolute paths to the "
"directory of each shared library it links to.  The ``RPATH`` entries for "
"directories contained within the build tree can be made relative to enable"
" relocatable builds and to help achieve reproducible builds by omitting "
"the build directory from the build environment."
msgstr ""
"通常，二进制文件的构建“RPATH”包含指向它链接到的每个共享库目录的绝对路径。构建树中包含的目录的 ``RPATH`` "
"条目可以相对于启用可重定位构建并通过从构建环境中省略构建目录来帮助实现可重现的构建。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_RPATH_USE_ORIGIN.rst:22
msgid ""
"This property has no effect on platforms that do not support the "
"``$ORIGIN`` token in ``RPATH``, or when the :variable:`CMAKE_SKIP_RPATH` "
"variable is set. The runtime path set through the :prop_tgt:`BUILD_RPATH` "
"target property is also unaffected by this property."
msgstr ""
"此属性对不支持 ``RPATH`` 中的 ``$ORIGIN`` 标记的平台没有影响，或者当设置了 "
":variable:`CMAKE_SKIP_RPATH` 变量时。通过 BUILD_RPATH 目标属性设置的运行时路径也不受此属性的影响。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_NAME_DIR.rst:2
msgid "BUILD_WITH_INSTALL_NAME_DIR"
msgstr "BUILD_WITH_INSTALL_NAME_DIR"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_NAME_DIR.rst:6
msgid ""
"``BUILD_WITH_INSTALL_NAME_DIR`` is a boolean specifying whether the macOS "
"``install_name`` of a target in the build tree uses the directory given by"
" :prop_tgt:`INSTALL_NAME_DIR`.  This setting only applies to targets on "
"macOS."
msgstr ""
"``BUILD_WITH_INSTALL_NAME_DIR`` 是一个布尔值，指定构建树中目标的 macOS ``install_name`` "
"是否使用 :prop_tgt:`INSTALL_NAME_DIR` 给出的目录。此设置仅适用于 macOS 上的目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_NAME_DIR.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_BUILD_WITH_INSTALL_NAME_DIR` if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_BUILD_WITH_INSTALL_NAME_DIR 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_NAME_DIR.rst:14
msgid ""
"If this property is not set and policy :policy:`CMP0068` is not ``NEW``, "
"the value of :prop_tgt:`BUILD_WITH_INSTALL_RPATH` is used in its place."
msgstr "如果此属性未设置且策略 CMP0068 不是 NEW，则使用 BUILD_WITH_INSTALL_RPATH 的值代替它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_RPATH.rst:2
msgid "BUILD_WITH_INSTALL_RPATH"
msgstr "BUILD_WITH_INSTALL_RPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_RPATH.rst:4
msgid ""
"``BUILD_WITH_INSTALL_RPATH`` is a boolean specifying whether to link the "
"target in the build tree with the :prop_tgt:`INSTALL_RPATH`.  This takes "
"precedence over :prop_tgt:`SKIP_BUILD_RPATH` and avoids the need for "
"relinking before installation."
msgstr ""
"``BUILD_WITH_INSTALL_RPATH`` 是一个布尔值，指定是否将构建树中的目标与 "
":prop_tgt:`INSTALL_RPATH` 链接起来。这优先于 :prop_tgt:`SKIP_BUILD_RPATH` "
"并且避免了在安装前重新链接的需要。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_RPATH.rst:9
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_BUILD_WITH_INSTALL_RPATH` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_BUILD_WITH_INSTALL_RPATH 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUILD_WITH_INSTALL_RPATH.rst:13
msgid ""
"If policy :policy:`CMP0068` is not ``NEW``, this property also controls "
"use of :prop_tgt:`INSTALL_NAME_DIR` in the build tree on macOS.  Either "
"way, the :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` target property takes "
"precedence."
msgstr ""
"如果策略:policy:`CMP0068` 不是 ``NEW``，此属性还控制在 macOS "
"上的构建树中使用:prop_tgt:`INSTALL_NAME_DIR`。无论哪种方式， :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR`"
" 目标属性优先。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE.rst:2
msgid "BUNDLE"
msgstr "捆"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE.rst:4
msgid "This target is a ``CFBundle`` on the macOS."
msgstr "这个目标是 macOS 上的 ``CFBundle``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE.rst:6
msgid ""
"If a module library target has this property set to true it will be built "
"as a ``CFBundle`` when built on the mac.  It will have the directory "
"structure required for a ``CFBundle`` and will be suitable to be used for "
"creating Browser Plugins or other application resources."
msgstr ""
"如果模块库目标将此属性设置为 true，则在 mac 上构建时它将构建为 CFBundle。它将具有 CFBundle "
"所需的目录结构，并且适合用于创建浏览器插件或其他应用程序资源。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE_EXTENSION.rst:2
msgid "BUNDLE_EXTENSION"
msgstr "BUNDLE_EXTENSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE_EXTENSION.rst:4
msgid ""
"The file extension used to name a :prop_tgt:`BUNDLE`, a "
":prop_tgt:`FRAMEWORK`, or a :prop_tgt:`MACOSX_BUNDLE` target on the macOS "
"and iOS."
msgstr ""
"用于命名 macOS 和 iOS 上的 :prop_tgt:`BUNDLE`、 :prop_tgt:`FRAMEWORK` 或 "
":prop_tgt:`MACOSX_BUNDLE` 目标的文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/BUNDLE_EXTENSION.rst:7
msgid ""
"The default value is ``bundle``, ``framework``, or ``app`` for the "
"respective target types."
msgstr "对于各自的目标类型，默认值为“bundle”、“framework”或“app”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:2
msgid "COMMON_LANGUAGE_RUNTIME"
msgstr "COMMON_LANGUAGE_RUNTIME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:6
msgid ""
"By setting this target property, the target is configured to build with "
"``C++/CLI`` support."
msgstr "通过设置此目标属性，目标被配置为使用“C++/CLI”支持进行构建。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:9
msgid ""
"The Visual Studio generator defines the ``clr`` parameter depending on the"
" value of the ``COMMON_LANGUAGE_RUNTIME`` target property:"
msgstr "Visual Studio 生成器根据“COMMON_LANGUAGE_RUNTIME”目标属性的值定义“clr”参数："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:12
msgid "Not Set (default)"
msgstr "未设置（默认）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:14
msgid "Native C++."
msgstr "本机 C++。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:16
msgid "``\"\"`` (set but empty)"
msgstr "``\"\"``（设置但为空）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:18
msgid "Mixed unmanaged/managed C++ using .NET Framework."
msgstr "使用 .NET Framework 的混合非托管/托管 C++。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:25
msgid "``netcore``"
msgstr "``网核``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:23
msgid "Mixed unmanaged/managed C++ using .NET Core."
msgstr "使用 .NET Core 的混合非托管/托管 C++。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:25
msgid "This required VS 2019's v142 toolset or higher."
msgstr "这需要 VS 2019 的 v142 工具集或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:27
msgid "``pure``"
msgstr "``纯``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:29
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:33
msgid "Managed C++."
msgstr "托管 C++。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:31
msgid "``safe``"
msgstr "``安全``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:35
msgid ""
"This property is only evaluated :ref:`Visual Studio Generators` for VS "
"2010 and above."
msgstr "此属性仅针对 VS 2010 及更高版本评估 :ref:`Visual Studio Generators`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:38
msgid ""
"To be able to build managed C++ targets with VS 2017 and above the "
"component ``C++/CLI support`` must be installed, which may not be done by "
"default."
msgstr "为了能够使用 VS 2017 及更高版本构建托管 C++ 目标，必须安装组件“C++/CLI 支持”，默认情况下可能不会安装。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMMON_LANGUAGE_RUNTIME.rst:41
msgid "See also :prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME`"
msgstr "另请参阅:prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst:2
msgid "COMPATIBLE_INTERFACE_BOOL"
msgstr "COMPATIBLE_INTERFACE_BOOL"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst:4
msgid "Properties which must be compatible with their link interface"
msgstr "必须与其链接接口兼容的属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst:6
msgid ""
"The ``COMPATIBLE_INTERFACE_BOOL`` property may contain a list of "
"properties for this target which must be consistent when evaluated as a "
"boolean with the ``INTERFACE`` variant of the property in all linked "
"dependees.  For example, if a property ``FOO`` appears in the list, then "
"for each dependee, the ``INTERFACE_FOO`` property content in all of its "
"dependencies must be consistent with each other, and with the ``FOO`` "
"property in the depender."
msgstr ""
"``COMPATIBLE_INTERFACE_BOOL`` "
"属性可能包含此目标的属性列表，当评估为布尔值时必须与所有链接的依赖项中属性的``INTERFACE`` "
"变体一致。例如，如果一个属性``FOO``出现在列表中，那么对于每个依赖者，其所有依赖项中的``INTERFACE_FOO``属性内容必须相互一致，并与``FOO``属性在依赖者中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst:14
msgid ""
"Consistency in this sense has the meaning that if the property is set, "
"then it must have the same boolean value as all others, and if the "
"property is not set, then it is ignored."
msgstr "这个意义上的一致性意味着如果设置了属性，那么它必须与所有其他属性具有相同的布尔值，如果未设置属性，则忽略它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_BOOL.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_STRING.rst:14
msgid ""
"Note that for each dependee, the set of properties specified in this "
"property must not intersect with the set specified in any of the other "
":ref:`Compatible Interface Properties`."
msgstr ""
"请注意，对于每个依赖者，此属性中指定的属性集不得与任何其他 :ref:`Compatible Interface Properties` "
"中指定的属性集相交。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.rst:2
msgid "COMPATIBLE_INTERFACE_NUMBER_MAX"
msgstr "COMPATIBLE_INTERFACE_NUMBER_MAX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.rst:4
msgid "Properties whose maximum value from the link interface will be used."
msgstr "将使用来自链接接口的最大值的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MAX.rst:6
msgid ""
"The ``COMPATIBLE_INTERFACE_NUMBER_MAX`` property may contain a list of "
"properties for this target whose maximum value may be read at generate "
"time when evaluated in the ``INTERFACE`` variant of the property in all "
"linked dependees.  For example, if a property ``FOO`` appears in the list,"
" then for each dependee, the ``INTERFACE_FOO`` property content in all of "
"its dependencies will be compared with each other and with the ``FOO`` "
"property in the depender.  When reading the ``FOO`` property at generate "
"time, the maximum value will be returned. If the property is not set, then"
" it is ignored."
msgstr ""
"``COMPATIBLE_INTERFACE_NUMBER_MAX`` "
"属性可能包含此目标的属性列表，当在所有链接的依赖项中的属性的``INTERFACE`` "
"变体中进行评估时，其最大值可以在生成时读取。例如，如果一个属性``FOO``出现在列表中，那么对于每个依赖者，其所有依赖项中的``INTERFACE_FOO``属性内容将相互比较并与``FOO``属性进行比较依赖者。在生成时读取“FOO”属性时，将返回最大值。如果未设置该属性，则忽略它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.rst:2
msgid "COMPATIBLE_INTERFACE_NUMBER_MIN"
msgstr "COMPATIBLE_INTERFACE_NUMBER_MIN"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_NUMBER_MIN.rst:6
msgid ""
"The ``COMPATIBLE_INTERFACE_NUMBER_MIN`` property may contain a list of "
"properties for this target whose minimum value may be read at generate "
"time when evaluated in the ``INTERFACE`` variant of the property of all "
"linked dependees.  For example, if a property ``FOO`` appears in the list,"
" then for each dependee, the ``INTERFACE_FOO`` property content in all of "
"its dependencies will be compared with each other and with the ``FOO`` "
"property in the depender. When reading the ``FOO`` property at generate "
"time, the minimum value will be returned.  If the property is not set, "
"then it is ignored."
msgstr ""
"``COMPATIBLE_INTERFACE_NUMBER_MIN`` "
"属性可能包含此目标的属性列表，当在所有链接的从属属性的``INTERFACE`` "
"变体中进行评估时，可以在生成时读取其最小值。例如，如果一个属性``FOO``出现在列表中，那么对于每个依赖者，其所有依赖项中的``INTERFACE_FOO``属性内容将相互比较并与``FOO``属性进行比较依赖者。在生成时读取“FOO”属性时，将返回最小值。如果未设置该属性，则忽略它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_STRING.rst:2
msgid "COMPATIBLE_INTERFACE_STRING"
msgstr "COMPATIBLE_INTERFACE_STRING"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_STRING.rst:4
msgid "Properties which must be string-compatible with their link interface"
msgstr "必须与其链接接口字符串兼容的属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPATIBLE_INTERFACE_STRING.rst:6
msgid ""
"The ``COMPATIBLE_INTERFACE_STRING`` property may contain a list of "
"properties for this target which must be the same when evaluated as a "
"string in the ``INTERFACE`` variant of the property all linked dependees. "
"For example, if a property ``FOO`` appears in the list, then for each "
"dependee, the ``INTERFACE_FOO`` property content in all of its "
"dependencies must be equal with each other, and with the ``FOO`` property "
"in the depender.  If the property is not set, then it is ignored."
msgstr ""
"``COMPATIBLE_INTERFACE_STRING`` 属性可能包含此目标的属性列表，当在所有链接的从属属性的``INTERFACE`` "
"变体中作为字符串进行评估时，这些属性必须相同。例如，如果一个属性``FOO``出现在列表中，那么对于每个依赖者，其所有依赖项中的``INTERFACE_FOO``属性内容必须彼此相等，并且与``FOO``属性在依赖者中。如果未设置该属性，则忽略它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:2
msgid "COMPILE_DEFINITIONS"
msgstr "编译定义"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:4
msgid "Preprocessor definitions for compiling a target's sources."
msgstr "用于编译目标源的预处理器定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:6
msgid ""
"The ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated "
"list of preprocessor definitions using the syntax ``VAR`` or "
"``VAR=value``. Function-style definitions are not supported.  CMake will "
"automatically escape the value correctly for the native build system (note"
" that CMake language syntax may require escapes to specify some values)."
msgstr ""
"``COMPILE_DEFINITIONS`` 属性可以使用语法``VAR`` 或``VAR=value`` "
"设置为以分号分隔的预处理器定义列表。不支持函数样式定义。 CMake 将自动为本机构建系统正确转义该值（请注意，CMake "
"语言语法可能需要转义以指定某些值）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:13
msgid ""
"CMake will automatically drop some definitions that are not supported by "
"the native build tool."
msgstr "CMake 会自动删除一些本机构建工具不支持的定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:16
msgid "Any leading ``-D`` on an item will be removed."
msgstr "项目上任何前导的 ``-D`` 都将被删除。"

#: ../../cmake-prefix/src/cmake/Help/include/COMPILE_DEFINITIONS_DISCLAIMER.txt:1
msgid ""
"Disclaimer: Most native build tools have poor support for escaping certain"
" values.  CMake has work-arounds for many cases but some values may just "
"not be possible to pass correctly.  If a value does not seem to be escaped"
" correctly, do not attempt to work-around the problem by adding escape "
"sequences to the value.  Your work-around may break in a future version of"
" CMake that has improved escape support.  Instead consider defining the "
"macro in a (configured) header file.  Then report the limitation.  Known "
"limitations include::"
msgstr ""
"免责声明：大多数本机构建工具对转义某些值的支持很差。 CMake "
"在许多情况下都有解决方法，但某些值可能无法正确传递。如果某个值似乎没有正确转义，请不要尝试通过向该值添加转义序列来解决问题。您的解决方法可能会在改进了转义支持的未来版本的"
" CMake 中中断。而是考虑在（已配置的）头文件中定义宏。然后报告限制。已知限制包括："

#: ../../cmake-prefix/src/cmake/Help/include/COMPILE_DEFINITIONS_DISCLAIMER.txt:17
msgid ""
"CMake does not reject these values outright because they do work in some "
"cases.  Use with caution."
msgstr "CMake 不会完全拒绝这些值，因为它们在某些情况下确实有效。谨慎使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:21
msgid ""
"Contents of ``COMPILE_DEFINITIONS`` may use \"generator expressions\" with"
" the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``COMPILE_DEFINITIONS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS.rst:26
msgid ""
"The corresponding :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` property may be"
" set to specify per-configuration definitions.  Generator expressions "
"should be preferred instead of setting the alternative property."
msgstr ""
"可以设置相应的 :prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` "
"属性来指定每个配置的定义。应该首选生成器表达式，而不是设置替代属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:2
msgid "COMPILE_DEFINITIONS_<CONFIG>"
msgstr "COMPILE_DEFINITIONS_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:4
msgid "Ignored.  See CMake Policy :policy:`CMP0043`."
msgstr "忽略。请参阅 CMake 政策:policy:`CMP0043`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:6
msgid "Per-configuration preprocessor definitions on a target."
msgstr "目标上的每个配置预处理器定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:8
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`COMPILE_DEFINITIONS` where ``<CONFIG>`` is an upper-case name "
"(ex. ``COMPILE_DEFINITIONS_DEBUG``)."
msgstr ""
"这是 :prop_tgt:`COMPILE_DEFINITIONS` 的特定配置版本，其中 ``<CONFIG>`` 是大写名称（例如 "
"``COMPILE_DEFINITIONS_DEBUG``）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:11
msgid ""
"Contents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions.  See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``COMPILE_DEFINITIONS_<CONFIG>`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_DEFINITIONS_CONFIG.rst:16
msgid ""
"Generator expressions should be preferred instead of setting this "
"property."
msgstr "应该首选生成器表达式而不是设置此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FEATURES.rst:2
msgid "COMPILE_FEATURES"
msgstr "COMPILE_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FEATURES.rst:6
msgid "Compiler features enabled for this target."
msgstr "为此目标启用的编译器功能。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FEATURES.rst:8
msgid ""
"The list of features in this property are a subset of the features listed "
"in the :variable:`CMAKE_C_COMPILE_FEATURES`, "
":variable:`CMAKE_CUDA_COMPILE_FEATURES`, and "
":variable:`CMAKE_CXX_COMPILE_FEATURES` variables."
msgstr ""
"此属性中的功能列表是 CMAKE_C_COMPILE_FEATURES、CMAKE_CUDA_COMPILE_FEATURES 和 "
"CMAKE_CXX_COMPILE_FEATURES 变量中列出的功能的子集。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FEATURES.rst:12
msgid ""
"Contents of ``COMPILE_FEATURES`` may use \"generator expressions\" with "
"the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-compile-"
"features(7)` manual for information on compile features and a list of "
"supported compilers."
msgstr ""
"``COMPILE_FEATURES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关编译功能的信息和支持的编译器列表，请参阅 "
":manual:`cmake-compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FLAGS.rst:2
msgid "COMPILE_FLAGS"
msgstr "COMPILE_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FLAGS.rst:4
msgid "Additional flags to use when compiling this target's sources."
msgstr "编译此目标的源代码时要使用的其他标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FLAGS.rst:6
msgid ""
"The ``COMPILE_FLAGS`` property sets additional compiler flags used to "
"build sources within the target.  Use :prop_tgt:`COMPILE_DEFINITIONS` to "
"pass additional preprocessor definitions."
msgstr ""
"``COMPILE_FLAGS`` 属性设置用于在目标内构建源的附加编译器标志。使用 :prop_tgt:`COMPILE_DEFINITIONS`"
" 传递额外的预处理器定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_FLAGS.rst:10
msgid ""
"This property is deprecated.  Use the :prop_tgt:`COMPILE_OPTIONS` property"
" or the :command:`target_compile_options` command instead."
msgstr ""
"此属性已弃用。请改用 :prop_tgt:`COMPILE_OPTIONS` 属性或 "
":command:`target_compile_options` 命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_OPTIONS.rst:2
msgid "COMPILE_OPTIONS"
msgstr "编译选项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_OPTIONS.rst:4
msgid "List of options to pass to the compiler."
msgstr "传递给编译器的选项列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_OPTIONS.rst:6
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of options specified so far for its target.  Use the "
":command:`target_compile_options` command to append more options. The "
"options will be added after flags in the :variable:`CMAKE_<LANG>_FLAGS` "
"and :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` variables, but before those "
"propagated from dependencies by the :prop_tgt:`INTERFACE_COMPILE_OPTIONS` "
"property."
msgstr ""
"此属性包含到目前为止为其目标指定的选项的 :ref:`分号分隔列表 <CMake Language Lists>`。使用 "
":command:`target_compile_options` 命令附加更多选项。这些选项将添加在 CMAKE_<LANG>_FLAGS 和 "
"CMAKE_<LANG>_FLAGS_<CONFIG> 变量中的标志之后，但在 INTERFACE_COMPILE_OPTIONS "
"属性从依赖项传播的那些之前."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_OPTIONS.rst:14
msgid ""
"This property is initialized by the :prop_dir:`COMPILE_OPTIONS` directory "
"property when a target is created, and is used by the generators to set "
"the options for the compiler."
msgstr "此属性在创建目标时由 :prop_dir:`COMPILE_OPTIONS` 目录属性初始化，生成器使用它来设置编译器的选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_OPTIONS.rst:18
msgid ""
"Contents of ``COMPILE_OPTIONS`` may use \"generator expressions\" with the"
" syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``COMPILE_OPTIONS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/command/OPTIONS_SHELL.txt:2
msgid "Option De-duplication"
msgstr "选项重复数据删除"

#: ../../cmake-prefix/src/cmake/Help/command/OPTIONS_SHELL.txt:4
msgid ""
"The final set of options used for a target is constructed by accumulating "
"options from the current target and the usage requirements of its "
"dependencies.  The set of options is de-duplicated to avoid repetition."
msgstr "用于目标的最终选项集是通过累积当前目标的选项及其依赖项的使用要求而构建的。对选项集进行去重以避免重复。"

#: ../../cmake-prefix/src/cmake/Help/command/OPTIONS_SHELL.txt:8
msgid ""
"While beneficial for individual options, the de-duplication step can break"
" up option groups.  For example, ``-option A -option B`` becomes ``-option"
" A B``.  One may specify a group of options using shell-like quoting along"
" with a ``SHELL:`` prefix.  The ``SHELL:`` prefix is dropped, and the rest"
" of the option string is parsed using the :command:`separate_arguments` "
"``UNIX_COMMAND`` mode. For example, ``\"SHELL:-option A\" \"SHELL:-option "
"B\"`` becomes ``-option A -option B``."
msgstr ""
"虽然对单个选项有利，但重复数据删除步骤可以分解选项组。例如，“-option A -option B”变为“-option A B”。可以使用类似 "
"shell 的引号和 ``SHELL:`` 前缀来指定一组选项。 ``SHELL:`` 前缀被删除，选项字符串的其余部分使用 "
":command:`separate_arguments` ``UNIX_COMMAND`` 模式进行解析。例如，``\"SHELL:-option"
" A\" \"SHELL:-option B\"`` 变为 ``-option A -option B``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME.rst:2
msgid "COMPILE_PDB_NAME"
msgstr "COMPILE_PDB_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME.rst:6
msgid ""
"Output name for the MS debug symbol ``.pdb`` file generated by the "
"compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号 ``.pdb`` 文件的输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME.rst:9
msgid ""
"This property specifies the base name for the debug symbols file. If not "
"set, the default is unspecified."
msgstr "此属性指定调试符号文件的基本名称。如果未设置，则默认为未指定。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NOTE.txt:2
msgid ""
"The compiler-generated program database files are specified by the ``/Fd``"
" compiler flag and are not the same as linker-generated program database "
"files specified by the ``/pdb`` linker flag. Use the |PDB_XXX| property to"
" specify the latter."
msgstr ""
"编译器生成的程序数据库文件由“/Fd”编译器标志指定，与“/pdb”链接器标志指定的链接器生成的程序数据库文件不同。使用 "
"|PDB_XXX|属性来指定后者。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME_CONFIG.rst:2
msgid "COMPILE_PDB_NAME_<CONFIG>"
msgstr "COMPILE_PDB_NAME_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME_CONFIG.rst:6
msgid ""
"Per-configuration output name for the MS debug symbol ``.pdb`` file "
"generated by the compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号“.pdb”文件的每个配置输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_NAME_CONFIG.rst:9
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`COMPILE_PDB_NAME`."
msgstr "这是 :prop_tgt:`COMPILE_PDB_NAME` 的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.rst:2
msgid "COMPILE_PDB_OUTPUT_DIRECTORY"
msgstr "COMPILE_PDB_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.rst:6
msgid ""
"Output directory for the MS debug symbol ``.pdb`` file generated by the "
"compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号 ``.pdb`` 文件的输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY.rst:9
msgid ""
"This property specifies the directory into which the MS debug symbols will"
" be placed by the compiler.  This property is initialized by the value of "
"the :variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY` variable if it is set "
"when a target is created."
msgstr ""
"此属性指定编译器将放置 MS 调试符号的目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "COMPILE_PDB_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:6
msgid ""
"Per-configuration output directory for the MS debug symbol ``.pdb`` file "
"generated by the compiler while building source files."
msgstr "编译器在构建源文件时生成的 MS 调试符号“.pdb”文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_PDB_OUTPUT_DIRECTORY_CONFIG.rst:9
msgid ""
"This is a per-configuration version of "
":prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY`, but multi-configuration "
"generators (Visual Studio, Xcode) do NOT append a per-configuration "
"subdirectory to the specified directory.  This property is initialized by "
"the value of the :variable:`CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>` "
"variable if it is set when a target is created."
msgstr ""
"这是 :prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` 的按配置版本，但多配置生成器（Visual "
"Studio、Xcode）不会将按配置子目录附加到指定目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:2
msgid "COMPILE_WARNING_AS_ERROR"
msgstr "COMPILE_WARNING_AS_ERROR"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:6
msgid ""
"Specify whether to treat warnings on compile as errors. If enabled, adds a"
" flag to treat warnings on compile as errors. If the :option:`cmake "
"--compile-no-warning-as-error` option is given on the :manual:`cmake(1)` "
"command line, this property is ignored."
msgstr ""
"指定是否将编译时的警告视为错误。如果启用，添加一个标志以将编译时的警告视为错误。如果 :option:`cmake --compile-no-"
"warning-as-error` 选项在 :manual:`cmake(1)` 命令行中给出，这个属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:11
msgid ""
"This property is not implemented for all compilers.  It is silently "
"ignored if there is no implementation for the compiler being used.  The "
"currently implemented :variable:`compiler IDs <CMAKE_<LANG>_COMPILER_ID>` "
"are:"
msgstr ""
"并非所有编译器都实现此属性。如果没有正在使用的编译器的实现，它会被默默地忽略。当前实现的 :variable:`编译器 ID "
"<CMAKE_<LANG>_COMPILER_ID>` 是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:15
msgid "``GNU``"
msgstr "``GNU``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:16
msgid "``Clang``"
msgstr "``铛``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:17
msgid "``AppleClang``"
msgstr "``AppleClang``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:18
msgid "``Fujitsu``"
msgstr "``富士通``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:19
msgid "``FujitsuClang``"
msgstr "``FujitsuClang``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:20
msgid "``IBMClang``"
msgstr "``IBMClang``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:21
msgid "``Intel``"
msgstr "``英特尔``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:22
msgid "``IntelLLVM``"
msgstr "``IntelLLVM``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:23
msgid "``LCC``"
msgstr "``低成本航运公司``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:24
msgid "``MSVC``"
msgstr "``MSVC``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:25
msgid "``NVHPC``"
msgstr "``NVHPC``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:26
msgid "``NVIDIA`` (CUDA)"
msgstr "``NVIDIA`` (CUDA)"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:27
msgid "``QCC``"
msgstr "``品管中心``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:28
msgid "``SunPro``"
msgstr "``SunPro``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:29
msgid "``Tasking``"
msgstr "``任务``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:30
msgid "``TI``"
msgstr "``TI``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:31
msgid "``VisualAge``"
msgstr "``视觉时代``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:32
msgid "``XL``"
msgstr "``XL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:33
msgid "``XLClang``"
msgstr "``XLClang``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/COMPILE_WARNING_AS_ERROR.rst:35
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_COMPILE_WARNING_AS_ERROR` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_COMPILE_WARNING_AS_ERROR 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_OUTPUT_NAME.rst:2
msgid "<CONFIG>_OUTPUT_NAME"
msgstr "<配置>_OUTPUT_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_OUTPUT_NAME.rst:4
msgid ""
"Old per-configuration target file base name. Use "
":prop_tgt:`OUTPUT_NAME_<CONFIG>` instead."
msgstr "旧的每配置目标文件基本名称。使用 :prop_tgt:`OUTPUT_NAME_<CONFIG>` 代替。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_OUTPUT_NAME.rst:7
msgid ""
"This is a configuration-specific version of the :prop_tgt:`OUTPUT_NAME` "
"target property."
msgstr "这是 :prop_tgt:`OUTPUT_NAME` 目标属性的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_POSTFIX.rst:2
msgid "<CONFIG>_POSTFIX"
msgstr "<配置>_POSTFIX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_POSTFIX.rst:4
msgid ""
"Postfix to append to the target file name for configuration ``<CONFIG>``."
msgstr "后缀附加到配置``<CONFIG>``的目标文件名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_POSTFIX.rst:6
msgid ""
"When building with configuration ``<CONFIG>`` the value of this property "
"is appended to the target file name built on disk.  For non-executable "
"targets, this property is initialized by the value of the "
":variable:`CMAKE_<CONFIG>_POSTFIX` variable if it is set when a target is "
"created.  This property is ignored on macOS for Frameworks and App "
"Bundles."
msgstr ""
"当使用配置“<CONFIG>”构建时，此属性的值附加到磁盘上构建的目标文件名。对于不可执行的目标，此属性由 "
":variable:`CMAKE_<CONFIG>_POSTFIX` 变量的值初始化（如果它是在创建目标时设置的）。对于框架和应用程序包，此属性在 "
"macOS 上会被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CONFIG_POSTFIX.rst:12
msgid ""
"For macOS see also the :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>`"
" target property."
msgstr ""
"对于 macOS，另请参阅 :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CROSSCOMPILING_EMULATOR.rst:2
msgid "CROSSCOMPILING_EMULATOR"
msgstr "交叉编译仿真器"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CROSSCOMPILING_EMULATOR.rst:6
msgid ""
"Use the given emulator to run executables created when crosscompiling. "
"This command will be added as a prefix to :command:`add_test`, "
":command:`add_custom_command`, and :command:`add_custom_target` commands "
"for built target system executables."
msgstr ""
"使用给定的模拟器运行交叉编译时创建的可执行文件。此命令将作为前缀添加到 "
":command:`add_test`、 :command:`add_custom_command` 和 "
":command:`add_custom_target` 命令以构建目标系统可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CROSSCOMPILING_EMULATOR.rst:11
msgid ""
"If this property contains a :ref:`semicolon-separated list <CMake Language"
" Lists>`, then the first value is the command and remaining values are its"
" arguments."
msgstr "如果此属性包含 :ref:`分号分隔列表 <CMake Language Lists>`，则第一个值是命令，其余值是其参数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CROSSCOMPILING_EMULATOR.rst:16
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CROSSCOMPILING_EMULATOR 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:2
msgid "CUDA_ARCHITECTURES"
msgstr "CUDA_架构"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:6
msgid "List of architectures to generate device code for."
msgstr "为其生成设备代码的体系结构列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:8
msgid ""
"An architecture can be suffixed by either ``-real`` or ``-virtual`` to "
"specify the kind of architecture to generate code for. If no suffix is "
"given then code is generated for both real and virtual architectures."
msgstr ""
"架构可以加上“-real”或“-virtual”作为后缀，以指定要为其生成代码的架构类型。如果没有给出后缀，则会为真实和虚拟架构生成代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:8
msgid ""
"A non-empty false value (e.g. ``OFF``) disables adding architectures. This"
" is intended to support packagers and rare cases where full control over "
"the passed flags is required."
msgstr "非空的假值（例如 ``OFF``）禁止添加架构。这是为了支持打包程序和需要完全控制传递的标志的罕见情况。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CUDA_ARCHITECTURES` variable if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CUDA_ARCHITECTURES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:20
msgid ""
"The ``CUDA_ARCHITECTURES`` target property must be set to a non-empty "
"value on targets that compile CUDA sources, or it is an error.  See policy"
" :policy:`CMP0104`."
msgstr ""
"``CUDA_ARCHITECTURES`` 目标属性必须在编译 CUDA "
"源代码的目标上设置为非空值，否则它是一个错误。请参阅政策:policy:`CMP0104`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:23
msgid ""
"The ``CUDA_ARCHITECTURES`` may be set to one of the following special "
"values:"
msgstr "``CUDA_ARCHITECTURES`` 可以设置为以下特殊值之一："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:29
msgid "``all``"
msgstr "``全部``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:28
msgid ""
"Compile for all supported major and minor real architectures, and the "
"highest major virtual architecture."
msgstr "编译所有支持的主要和次要真实架构，以及最高的主要虚拟架构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:35
msgid "``all-major``"
msgstr "``所有主要``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:34
msgid ""
"Compile for all supported major real architectures, and the highest major "
"virtual architecture."
msgstr "为所有支持的主要真实架构和最高的主要虚拟架构编译。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:40
msgid "``native``"
msgstr "``原生``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:40
msgid "Compile for the architecture(s) of the host's GPU(s)."
msgstr "针对主机 GPU 的架构进行编译。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:43
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:15
msgid "Examples"
msgstr "例子"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:49
msgid ""
"Generates code for real and virtual architectures ``30``, ``50`` and "
"``72``."
msgstr "为真实和虚拟架构“30”、“50”和“72”生成代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:55
msgid ""
"Generates code for real architecture ``70`` and virtual architecture "
"``72``."
msgstr "为真实架构“70”和虚拟架构“72”生成代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_ARCHITECTURES.rst:61
msgid "CMake will not pass any architecture flags to the compiler."
msgstr "CMake 不会将任何架构标志传递给编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_EXTENSIONS.rst:2
msgid "CUDA_EXTENSIONS"
msgstr "CUDA_扩展"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_EXTENSIONS.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_EXTENSIONS.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_EXTENSIONS.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_EXTENSIONS.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:6
msgid ""
"Boolean specifying whether compiler specific extensions are requested."
msgstr "指定是否请求编译器特定扩展的布尔值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This "
"property is ``ON`` by default. The basic CUDA/C++ standard level is "
"controlled by the :prop_tgt:`CUDA_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”而不是“-std=c++11”。默认情况下，此属性为"
" ``ON``。基本的 CUDA/C++ 标准级别由 :prop_tgt:`CUDA_STANDARD` 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_EXTENSIONS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:63
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD_REQUIRED.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_EXTENSIONS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:61
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD_REQUIRED.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_EXTENSIONS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:50
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD_REQUIRED.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_EXTENSIONS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:49
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD_REQUIRED.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_COMPILE_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:23
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:32
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:31
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:58
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:17
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:17
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:41
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:17
msgid ""
"See the :manual:`cmake-compile-features(7)` manual for information on "
"compile features and a list of supported compilers."
msgstr "有关编译功能的信息和支持的编译器列表，请参阅 :manual:`cmake-compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_EXTENSIONS.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CUDA_EXTENSIONS` variable if set when a target is created"
" and otherwise by the value of :variable:`CMAKE_CUDA_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_CUDA_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_CUDA_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT> "
"的值初始化（参见:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_PTX_COMPILATION.rst:2
msgid "CUDA_PTX_COMPILATION"
msgstr "CUDA_PTX_编译"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_PTX_COMPILATION.rst:6
msgid ""
"Compile CUDA sources to ``.ptx`` files instead of ``.obj`` files within "
":ref:`Object Libraries`."
msgstr ""
"将 CUDA 源代码编译为 ``.ptx`` 文件，而不是 :ref:`Object Libraries` 中的 ``.obj`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_PTX_COMPILATION.rst:9
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DPI_AWARE.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:12
msgid "For example:"
msgstr "例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:2
msgid "CUDA_RESOLVE_DEVICE_SYMBOLS"
msgstr "CUDA_RESOLVE_DEVICE_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:6
msgid ""
"CUDA only: Enables device linking for the specific library target where "
"required."
msgstr "仅限 CUDA：在需要时为特定库目标启用设备链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:9
msgid ""
"If set, this will tell the required compilers to enable device linking on "
"the library target. Device linking is an additional link step required by "
"some CUDA compilers when :prop_tgt:`CUDA_SEPARABLE_COMPILATION` is "
"enabled. Normally device linking is deferred until a shared library or "
"executable is generated, allowing for multiple static libraries to resolve"
" device symbols at the same time when they are used by a shared library or"
" executable."
msgstr ""
"如果设置，这将告诉所需的编译器在库目标上启用设备链接。设备链接是一些 CUDA 编译器在启用 CUDA_SEPARABLE_COMPILATION "
"时需要的额外链接步骤。通常设备链接会延迟到生成共享库或可执行文件时，允许多个静态库在共享库或可执行文件使用时同时解析设备符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:17
msgid ""
"If this property or :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` is "
"unset, static libraries are treated as if it is disabled while shared, "
"module, and executable targets behave as if it is on."
msgstr ""
"如果此属性或 :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` "
"未设置，则静态库将被视为已禁用，而共享、模块和可执行目标的行为就像它已打开一样。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:21
msgid ""
"If :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` has been defined, this "
"property is initialized to the value the variable and overriding the "
"default behavior."
msgstr ""
"如果 :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` 已定义，此属性将初始化为变量值并覆盖默认行为。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:25
msgid ""
"Note that device linking is not supported for :ref:`Object Libraries`."
msgstr "请注意，设备链接不支持 :ref:`Object Libraries`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RESOLVE_DEVICE_SYMBOLS.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_SEPARABLE_COMPILATION.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_COMPILE.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_LINK.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:12
msgid "For instance:"
msgstr "例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:2
msgid "CUDA_RUNTIME_LIBRARY"
msgstr "CUDA_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the CUDA runtime library for use by compilers targeting the CUDA "
"language."
msgstr "选择 CUDA 运行时库供面向 CUDA 语言的编译器使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:8
msgid "The allowed case insensitive values are:"
msgstr "允许的不区分大小写的值是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:2
msgid "``None``"
msgstr "``没有``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Link with ``-cudart=none`` or equivalent flag(s) to use no CUDA runtime "
"library."
msgstr "与“-cudart=none”或等效标志链接以不使用 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:5
msgid "``Shared``"
msgstr "``共享``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Link with ``-cudart=shared`` or equivalent flag(s) to use a dynamically-"
"linked CUDA runtime library."
msgstr "与“-cudart=shared”或等效标志链接以使用动态链接的 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:9
msgid "``Static``"
msgstr "``静态``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY-VALUES.txt:8
msgid ""
"Link with ``-cudart=static`` or equivalent flag(s) to use a statically-"
"linked CUDA runtime library."
msgstr "与“-cudart=static”或等效标志链接以使用静态链接的 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:12
msgid ""
"Contents of ``CUDA_RUNTIME_LIBRARY`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``CUDA_RUNTIME_LIBRARY`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:15
msgid ""
"If that property is not set then CMake uses an appropriate default value "
"based on the compiler to select the CUDA runtime library."
msgstr "如果未设置该属性，则 CMake 根据编译器使用适当的默认值来选择 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_RUNTIME_LIBRARY.rst:20
msgid ""
"This property has effect only when the ``CUDA`` language is enabled. To "
"control the CUDA runtime linking when only using the CUDA SDK with the "
"``C`` or ``C++`` language we recommend using the :module:`FindCUDAToolkit`"
" module."
msgstr ""
"此属性仅在启用 ``CUDA`` 语言时有效。要在仅使用带有“C”或“C++”语言的 CUDA SDK 时控制 CUDA 运行时链接，我们建议使用 "
"FindCUDAToolkit 模块。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_SEPARABLE_COMPILATION.rst:2
msgid "CUDA_SEPARABLE_COMPILATION"
msgstr "CUDA_SEPARABLE_COMPILATION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_SEPARABLE_COMPILATION.rst:6
msgid "CUDA only: Enables separate compilation of device code"
msgstr "仅限 CUDA：启用设备代码的单独编译"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_SEPARABLE_COMPILATION.rst:8
msgid ""
"If set this will enable separable compilation for all CUDA files for the "
"given target."
msgstr "如果设置，这将为给定目标的所有 CUDA 文件启用可分离编译。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_SEPARABLE_COMPILATION.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CUDA_SEPARABLE_COMPILATION` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CUDA_SEPARABLE_COMPILATION 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:2
msgid "CUDA_STANDARD"
msgstr "CUDA_标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:6
msgid ""
"The CUDA/C++ standard whose features are requested to build this target."
msgstr "构建此目标需要其功能的 CUDA/C++ 标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:8
msgid ""
"This property specifies the CUDA/C++ standard whose features are requested"
" to build this target.  For some compilers, this results in adding a flag "
"such as ``-std=gnu++11`` to the compile line."
msgstr ""
"此属性指定构建此目标时请求其功能的 CUDA/C++ 标准。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:12
msgid "Supported values are:"
msgstr "支持的值为："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:17
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:15
msgid "``98``"
msgstr "``98``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:15
msgid "CUDA C++98. Note that this maps to the same as ``03`` internally."
msgstr "CUDA C++98。请注意，这在内部映射到与“03”相同的内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:18
msgid "``03``"
msgstr "``03``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:18
msgid "CUDA C++03"
msgstr "CUDA C++03"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:20
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:23
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:21
msgid "``11``"
msgstr "``11``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:21
msgid "CUDA C++11"
msgstr "CUDA C++11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:25
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:23
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:17
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:21
msgid "``14``"
msgstr "``14``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:24
msgid ""
"CUDA C++14. While CMake 3.8 and later *recognize* ``14`` as a valid value,"
" CMake 3.9 was the first version to include support for any compiler."
msgstr ""
"CUDA C++14。虽然 CMake 3.8 及更高版本*将“14”识别为有效值，但 CMake 3.9 是第一个包含对任何编译器的支持的版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:29
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:20
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:24
msgid "``17``"
msgstr "``17``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:28
msgid ""
"CUDA C++17. While CMake 3.8 and later *recognize* ``17`` as a valid value,"
" CMake 3.18 was the first version to include support for any compiler."
msgstr ""
"CUDA C++17。虽然 CMake 3.8 及更高版本*将“17”识别为有效值，但 CMake 3.18 是第一个包含对任何编译器的支持的版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:35
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:33
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:23
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:27
msgid "``20``"
msgstr "``20``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:34
msgid ""
"CUDA C++20. While CMake 3.12 and later *recognize* ``20`` as a valid "
"value, CMake 3.18 was the first version to include support for any "
"compiler."
msgstr ""
"CUDA C++20。虽然 CMake 3.12 及更高版本*将“20”识别为有效值，但 CMake 3.18 "
"是第一个包含对任何编译器的支持的版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:40
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:38
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:33
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:26
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:32
msgid "``23``"
msgstr "``23``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:40
msgid "CUDA C++23"
msgstr "CUDA C++23"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:46
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:44
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:32
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:38
msgid "``26``"
msgstr "``26``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:45
msgid ""
"CUDA C++26. CMake 3.25 and later *recognize* ``26`` as a valid value, no "
"version has support for any compiler."
msgstr "CUDA C++26。 CMake 3.25 及更高版本 *识别* ``26`` 为有效值，没有版本支持任何编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:48
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:46
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:35
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:34
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:40
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:23
msgid ""
"If the value requested does not result in a compile flag being added for "
"the compiler in use, a previous standard flag will be added instead.  This"
" means that using:"
msgstr "如果请求的值不会导致为正在使用的编译器添加编译标志，则会添加以前的标准标志。这意味着使用："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:56
msgid ""
"with a compiler which does not support ``-std=gnu++11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu++03`` flag if supported.  This \"decay\" behavior may be "
"controlled with the :prop_tgt:`CUDA_STANDARD_REQUIRED` target property. "
"Additionally, the :prop_tgt:`CUDA_EXTENSIONS` target property may be used "
"to control whether compiler-specific extensions are enabled on a per-"
"target basis."
msgstr ""
"使用不支持“-std=gnu++11”或等效标志的编译器不会导致错误或警告，但如果支持，则会添加“-std=gnu++03”标志.这种“衰减”行为可以通过"
" :prop_tgt:`CUDA_STANDARD_REQUIRED` "
"目标属性进行控制。此外， :prop_tgt:`CUDA_EXTENSIONS` 目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD.rst:66
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CUDA_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CUDA_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD_REQUIRED.rst:2
msgid "CUDA_STANDARD_REQUIRED"
msgstr "CUDA_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`CUDA_STANDARD` is a "
"requirement."
msgstr "布尔值描述 :prop_tgt:`CUDA_STANDARD` 的值是否是必需的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`CUDA_STANDARD` target property is treated as a requirement.  If"
" this property is ``OFF`` or unset, the :prop_tgt:`CUDA_STANDARD` target "
"property is treated as optional and may \"decay\" to a previous standard "
"if the requested is not available.  For compilers that have no notion of a"
" standard level, such as MSVC 1800 (Visual Studio 2013) and lower, this "
"has no effect."
msgstr ""
"如果此属性设置为 ``ON``，则 :prop_tgt:`CUDA_STANDARD` 目标属性的值将被视为一项要求。如果此属性为 ``OFF`` "
"或未设置，CUDA_STANDARD 目标属性将被视为可选属性，如果请求不可用，则可能会“衰减”到以前的标准。对于没有标准级别概念的编译器，例如 "
"MSVC 1800 (Visual Studio 2013) 及更低版本，这没有效果。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CUDA_STANDARD_REQUIRED.rst:18
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CUDA_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CUDA_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_EXTENSIONS.rst:2
msgid "CXX_EXTENSIONS"
msgstr "CXX_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This "
"property is ``ON`` by default. The basic C++ standard level is controlled "
"by the :prop_tgt:`CXX_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”而不是“-std=c++11”。默认情况下，此属性为"
" ``ON``。基本的 C++ 标准级别由 CXX_STANDARD 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_EXTENSIONS.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CXX_EXTENSIONS` variable if set when a target is created "
"and otherwise by the value of :variable:`CMAKE_CXX_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_CXX_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_CXX_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` "
"的值初始化（请参阅:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS.rst:2
msgid "CXX_MODULE_DIRS"
msgstr "CXX_MODULE_DIRS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS_NAME.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS_NAME.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SETS.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET_NAME.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SETS.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET_NAME.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_HEADER_UNIT_SETS.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_SETS.rst:8
msgid "Experimental. Gated by ``CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API``"
msgstr "实验性的。由 ``CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API`` 控制"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS.rst:10
msgid ""
"Semicolon-separated list of base directories of the target's default C++ "
"module set (i.e. the file set with name and type ``CXX_MODULES``). The "
"property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"目标默认 C++ 模块集的基本目录的分号分隔列表（即名称和类型为“CXX_MODULES”的文件集）。该属性支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS_NAME.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS_NAME.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET_NAME.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET_NAME.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS_NAME.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET_NAME.rst:11
msgid ""
"This property is normally only set by :command:`target_sources(FILE_SET)` "
"rather than being manipulated directly."
msgstr "此属性通常仅由 :command:`target_sources(FILE_SET)` 设置，而不是直接操作。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS.rst:18
msgid ""
"See :prop_tgt:`CXX_MODULE_DIRS_<NAME>` for the list of base directories in"
" other C++ module sets."
msgstr "有关其他 C++ 模块集中的基本目录列表，请参阅:prop_tgt:`CXX_MODULE_DIRS_<NAME>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS_NAME.rst:2
msgid "CXX_MODULE_DIRS_<NAME>"
msgstr "CXX_MODULE_DIRS_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS_NAME.rst:10
msgid ""
"Semicolon-separated list of base directories of the target's ``<NAME>`` "
"C++ module set, which has the set type ``CXX_MODULES``. The property "
"supports :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"目标的“<NAME>”C++ 模块集的基本目录的分号分隔列表，其集类型为“CXX_MODULES”。该属性支持 :manual:`generator"
" expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_DIRS_NAME.rst:17
msgid ""
"See :prop_tgt:`CXX_MODULE_DIRS` for the list of base directories in the "
"default C++ module set. See :prop_tgt:`CXX_MODULE_SETS` for the file set "
"names of all C++ module sets."
msgstr ""
"有关默认 C++ 模块集中的基本目录列表，请参阅:prop_tgt:`CXX_MODULE_DIRS`。有关所有 C++ "
"模块集的文件集名称，请参见:prop_tgt:`CXX_MODULE_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS.rst:2
msgid "CXX_MODULE_HEADER_UNIT_DIRS"
msgstr "CXX_MODULE_HEADER_UNIT_DIRS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS.rst:10
msgid ""
"Semicolon-separated list of base directories of the target's default C++ "
"module header set (i.e. the file set with name and type "
"``CXX_MODULE_HEADER_UNITS``). The property supports :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"目标默认 C++ 模块标头集的基本目录的分号分隔列表（即名称和类型为“CXX_MODULE_HEADER_UNITS”的文件集）。该属性支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS.rst:18
msgid ""
"See :prop_tgt:`CXX_MODULE_HEADER_UNIT_DIRS_<NAME>` for the list of base "
"directories in other C++ module header sets."
msgstr ""
"请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_DIRS_<NAME>` 以获取其他 C++ 模块标头集中的基本目录列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS_NAME.rst:2
msgid "CXX_MODULE_HEADER_UNIT_DIRS_<NAME>"
msgstr "CXX_MODULE_HEADER_UNIT_DIRS_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS_NAME.rst:10
msgid ""
"Semicolon-separated list of base directories of the target's ``<NAME>`` "
"C++ module header set, which has the set type ``CXX_MODULE_HEADER_UNITS``."
" The property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"目标的“<NAME>”C++ 模块标头集的基本目录的分号分隔列表，其集类型为“CXX_MODULE_HEADER_UNITS”。该属性支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_DIRS_NAME.rst:18
msgid ""
"See :prop_tgt:`CXX_MODULE_HEADER_UNIT_DIRS` for the list of base "
"directories in the default C++ module header set. See "
":prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS` for the file set names of all C++ "
"module header sets."
msgstr ""
"请参阅 CXX_MODULE_HEADER_UNIT_DIRS 以获取默认 C++ 模块标头集中的基本目录列表。有关所有 C++ "
"模块标头集的文件集名称，请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET.rst:2
msgid "CXX_MODULE_HEADER_UNIT_SET"
msgstr "CXX_MODULE_HEADER_UNIT_SET"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET.rst:10
msgid ""
"Semicolon-separated list of files in the target's default C++ module "
"header set, (i.e. the file set with name and type "
"``CXX_MODULE_HEADER_UNITS``). If any of the paths are relative, they are "
"computed relative to the target's source directory. The property supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"目标默认 C++ "
"模块标头集中以分号分隔的文件列表（即名称和类型为“CXX_MODULE_HEADER_UNITS”的文件集）。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持"
" :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET.rst:19
msgid ""
"See :prop_tgt:`CXX_MODULE_HEADER_UNIT_SET_<NAME>` for the list of files in"
" other C++ module header sets."
msgstr ""
"请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_SET_<NAME>` 以获取其他 C++ 模块标头集中的文件列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SETS.rst:2
msgid "CXX_MODULE_HEADER_UNIT_SETS"
msgstr "CXX_MODULE_HEADER_UNIT_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SETS.rst:10
msgid ""
"Read-only list of the target's ``PRIVATE`` and ``PUBLIC`` C++ module "
"header sets (i.e. all file sets with the type "
"``CXX_MODULE_HEADER_UNITS``). Files listed in these file sets are treated "
"as source files for the purpose of IDE integration."
msgstr ""
"目标的``PRIVATE`` 和``PUBLIC`` C++ 模块头集的只读列表（即所有类型为``CXX_MODULE_HEADER_UNITS``"
" 的文件集）。出于 IDE 集成的目的，这些文件集中列出的文件被视为源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SETS.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_HEADER_UNIT_SETS.rst:15
msgid ""
"C++ module header sets may be defined using the :command:`target_sources` "
"command ``FILE_SET`` option with type ``CXX_MODULE_HEADER_UNITS``."
msgstr ""
"C++ 模块标头集可以使用类型为 CXX_MODULE_HEADER_UNITS 的 target_sources 命令 FILE_SET "
"选项来定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SETS.rst:18
msgid ""
"See also :prop_tgt:`CXX_MODULE_HEADER_UNIT_SET_<NAME>`, "
":prop_tgt:`CXX_MODULE_HEADER_UNIT_SET` and "
":prop_tgt:`INTERFACE_CXX_MODULE_HEADER_UNIT_SETS`."
msgstr ""
"另请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_SET_<NAME>`、:prop_tgt:`CXX_MODULE_HEADER_UNIT_SET`"
" 和:prop_tgt:`INTERFACE_CXX_MODULE_HEADER_UNIT_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET_NAME.rst:2
msgid "CXX_MODULE_HEADER_UNIT_SET_<NAME>"
msgstr "CXX_MODULE_HEADER_UNIT_SET_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET_NAME.rst:10
msgid ""
"Semicolon-separated list of files in the target's ``<NAME>`` C++ module "
"header set, which has the set type ``CXX_MODULE_HEADER_UNITS``. If any of "
"the paths are relative, they are computed relative to the target's source "
"directory. The property supports :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""
"目标的``<NAME>`` C++ "
"模块标头集中以分号分隔的文件列表，其集类型为``CXX_MODULE_HEADER_UNITS``。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持"
" :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_HEADER_UNIT_SET_NAME.rst:19
msgid ""
"See :prop_tgt:`CXX_MODULE_HEADER_UNIT_SET` for the list of files in the "
"default C++ module header set. See :prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS`"
" for the file set names of all C++ module header sets."
msgstr ""
"有关默认 C++ 模块标头集中的文件列表，请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_SET`。有关所有 C++ "
"模块标头集的文件集名称，请参阅:prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET.rst:2
msgid "CXX_MODULE_SET"
msgstr "CXX_MODULE_SET"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET.rst:10
msgid ""
"Semicolon-separated list of files in the target's default C++ module set, "
"(i.e. the file set with name and type ``CXX_MODULES``). If any of the "
"paths are relative, they are computed relative to the target's source "
"directory. The property supports :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""
"目标默认 C++ "
"模块集中以分号分隔的文件列表（即名称和类型为“CXX_MODULES”的文件集）。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持"
" :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET.rst:19
msgid ""
"See :prop_tgt:`CXX_MODULE_SET_<NAME>` for the list of files in other C++ "
"module sets."
msgstr "有关其他 C++ 模块集中的文件列表，请参阅:prop_tgt:`CXX_MODULE_SET_<NAME>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SETS.rst:2
msgid "CXX_MODULE_SETS"
msgstr "CXX_MODULE_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SETS.rst:10
msgid ""
"Read-only list of the target's ``PRIVATE`` and ``PUBLIC`` C++ module sets "
"(i.e. all file sets with the type ``CXX_MODULES``). Files listed in these "
"file sets are treated as source files for the purpose of IDE integration."
msgstr ""
"目标的 ``PRIVATE`` 和 ``PUBLIC`` C++ 模块集（即所有类型为 ``CXX_MODULES`` 的文件集）的只读列表。出于 "
"IDE 集成的目的，这些文件集中列出的文件被视为源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SETS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_SETS.rst:15
msgid ""
"C++ module sets may be defined using the :command:`target_sources` command"
" ``FILE_SET`` option with type ``CXX_MODULES``."
msgstr "C++ 模块集可以使用类型为 CXX_MODULES 的 target_sources 命令 FILE_SET 选项来定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SETS.rst:17
msgid ""
"See also :prop_tgt:`CXX_MODULE_SET_<NAME>`, :prop_tgt:`CXX_MODULE_SET` and"
" :prop_tgt:`INTERFACE_CXX_MODULE_SETS`."
msgstr ""
"另见:prop_tgt:`CXX_MODULE_SET_<NAME>`、 :prop_tgt:`CXX_MODULE_SET` 和 "
":prop_tgt:`INTERFACE_CXX_MODULE_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET_NAME.rst:2
msgid "CXX_MODULE_SET_<NAME>"
msgstr "CXX_MODULE_SET_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET_NAME.rst:10
msgid ""
"Semicolon-separated list of files in the target's ``<NAME>`` C++ module "
"set, which has the set type ``CXX_MODULES``. If any of the paths are "
"relative, they are computed relative to the target's source directory. The"
" property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"目标的“<NAME>”C++ "
"模块集中以分号分隔的文件列表，其集类型为“CXX_MODULES”。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_MODULE_SET_NAME.rst:18
msgid ""
"See :prop_tgt:`CXX_MODULE_SET` for the list of files in the default C++ "
"module set. See :prop_tgt:`CXX_MODULE_SETS` for the file set names of all "
"C++ module sets."
msgstr ""
"有关默认 C++ 模块集中的文件列表，请参阅:prop_tgt:`CXX_MODULE_SET`。有关所有 C++ "
"模块集的文件集名称，请参见:prop_tgt:`CXX_MODULE_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:2
msgid "CXX_SCAN_FOR_MODULES"
msgstr "CXX_SCAN_FOR_MODULES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:6
msgid ""
"``CXX_SCAN_FOR_MODULES`` is a boolean specifying whether CMake will scan "
"C++ sources in the target for module dependencies.  See also the "
":prop_sf:`CXX_SCAN_FOR_MODULES` for per-source settings which, if set, "
"overrides the target-wide settings."
msgstr ""
"``CXX_SCAN_FOR_MODULES`` 是一个布尔值，指定 CMake 是否将扫描目标中的 C++ 源以查找模块依赖项。另请参阅 "
":prop_sf:`CXX_SCAN_FOR_MODULES` 了解每个源的设置，如果设置，将覆盖目标范围的设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CXX_SCAN_FOR_MODULES` variable if it is set when a target"
" is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CXX_SCAN_FOR_MODULES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:15
msgid ""
"When this property is set ``ON`` or unset, CMake will scan the target's "
"``CXX`` sources at build time and add module dependency information to the"
" compile line as necessary.  When this property is set ``OFF``, CMake will"
" not scan the target's ``CXX`` sources at build time."
msgstr ""
"当此属性设置为“ON”或未设置时，CMake "
"将在构建时扫描目标的“CXX”源，并根据需要将模块依赖信息添加到编译行。当此属性设置为“OFF”时，CMake "
"将不会在构建时扫描目标的“CXX”源。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:20
msgid ""
"Note that scanning is only performed if C++20 or higher is enabled for the"
" target.  Scanning for modules in the target's sources belonging to file "
"sets of type ``CXX_MODULES`` and ``CXX_MODULES_HEADER_UNITS`` is always "
"performed."
msgstr ""
"请注意，仅当为目标启用了 C++20 "
"或更高版本时才会执行扫描。始终执行扫描目标源中属于“CXX_MODULES”和“CXX_MODULES_HEADER_UNITS”类型文件集的模块。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_SCAN_FOR_MODULES.rst:26
msgid ""
"This setting is meaningful only when experimental support for C++ modules "
"has been enabled by the ``CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API`` gate."
msgstr ""
"仅当“CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API”门启用了对 C++ 模块的实验性支持时，此设置才有意义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:2
msgid "CXX_STANDARD"
msgstr "CXX_标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:6
msgid "The C++ standard whose features are requested to build this target."
msgstr "要求构建此目标的 C++ 标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:8
msgid ""
"This property specifies the C++ standard whose features are requested to "
"build this target.  For some compilers, this results in adding a flag such"
" as ``-std=gnu++11`` to the compile line.  For compilers that have no "
"notion of a standard level, such as Microsoft Visual C++ before 2015 "
"Update 3, this has no effect."
msgstr ""
"此属性指定构建此目标时请求其功能的 C++ "
"标准。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”。对于没有标准级别概念的编译器，例如 2015 Update "
"3 之前的 Microsoft Visual C++，这没有影响。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:17
msgid "C++98"
msgstr "C++98"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:20
msgid "C++11"
msgstr "C++11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:23
msgid "C++14"
msgstr "C++14"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:28
msgid "C++17"
msgstr "C++17"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:33
msgid "C++20"
msgstr "C++20"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:38
msgid "C++23"
msgstr "C++23"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:43
msgid ""
"C++26. CMake 3.25 and later *recognize* ``26`` as a valid value, no "
"version has support for any compiler."
msgstr "C++26。 CMake 3.25 及更高版本 *识别* ``26`` 为有效值，没有版本支持任何编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:54
msgid ""
"with a compiler which does not support ``-std=gnu++11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu++98`` flag if supported.  This \"decay\" behavior may be "
"controlled with the :prop_tgt:`CXX_STANDARD_REQUIRED` target property. "
"Additionally, the :prop_tgt:`CXX_EXTENSIONS` target property may be used "
"to control whether compiler-specific extensions are enabled on a per-"
"target basis."
msgstr ""
"使用不支持“-std=gnu++11”或等效标志的编译器不会导致错误或警告，但如果支持，则会添加“-std=gnu++98”标志.这种“衰减”行为可以通过"
" CXX_STANDARD_REQUIRED 目标属性进行控制。此外， :prop_tgt:`CXX_EXTENSIONS` "
"目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD.rst:64
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CXX_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CXX_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD_REQUIRED.rst:2
msgid "CXX_STANDARD_REQUIRED"
msgstr "CXX_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`CXX_STANDARD` is a "
"requirement."
msgstr "描述 :prop_tgt:`CXX_STANDARD` 的值是否为必需的布尔值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`CXX_STANDARD` target property is treated as a requirement.  If "
"this property is ``OFF`` or unset, the :prop_tgt:`CXX_STANDARD` target "
"property is treated as optional and may \"decay\" to a previous standard "
"if the requested is not available.  For compilers that have no notion of a"
" standard level, such as MSVC 1800 (Visual Studio 2013) and lower, this "
"has no effect."
msgstr ""
"如果此属性设置为 ``ON``，则 :prop_tgt:`CXX_STANDARD` 目标属性的值将被视为一项要求。如果此属性为 ``OFF`` "
"或未设置，则 CXX_STANDARD 目标属性被视为可选属性，如果请求不可用，则可能会“衰减”到以前的标准。对于没有标准级别概念的编译器，例如 "
"MSVC 1800 (Visual Studio 2013) 及更低版本，这没有效果。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/CXX_STANDARD_REQUIRED.rst:18
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_CXX_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_CXX_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_EXTENSIONS.rst:2
msgid "C_EXTENSIONS"
msgstr "C_扩展"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This property"
" is ``ON`` by default. The basic C standard level is controlled by the "
":prop_tgt:`C_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu11”而不是“-std=c11”。默认情况下，此属性为"
" ``ON``。基本的 C 标准级别由 :prop_tgt:`C_STANDARD` 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_EXTENSIONS.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_C_EXTENSIONS` variable if set when a target is created "
"and otherwise by the value of :variable:`CMAKE_C_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_C_EXTENSIONS 变量的值初始化，否则由 CMAKE_C_EXTENSIONS_DEFAULT"
" <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` 的值初始化（请参阅:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:2
msgid "C_STANDARD"
msgstr "C_标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:6
msgid "The C standard whose features are requested to build this target."
msgstr "要求构建此目标的 C 标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:8
msgid ""
"This property specifies the C standard whose features are requested to "
"build this target.  For some compilers, this results in adding a flag such"
" as ``-std=gnu11`` to the compile line.  For compilers that have no notion"
" of a C standard level, such as Microsoft Visual C++ before VS 16.7, this "
"property has no effect."
msgstr ""
"此属性指定构建此目标时请求其功能的 C 标准。对于某些编译器，这会导致在编译行中添加诸如“-std=gnu11”之类的标志。对于没有 C "
"标准级别概念的编译器，例如 VS 16.7 之前的 Microsoft Visual C++，此属性无效。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:17
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:15
msgid "``90``"
msgstr "``90``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:17
msgid "C89/C90"
msgstr "C89/C90"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:20
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:18
msgid "``99``"
msgstr "``99``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:20
msgid "C99"
msgstr "C99"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:23
msgid "C11"
msgstr "C11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:28
msgid "C17"
msgstr "C17"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:33
msgid "C23"
msgstr "C23"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:43
msgid ""
"with a compiler which does not support ``-std=gnu11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This \"decay\" "
"behavior may be controlled with the :prop_tgt:`C_STANDARD_REQUIRED` target"
" property. Additionally, the :prop_tgt:`C_EXTENSIONS` target property may "
"be used to control whether compiler-specific extensions are enabled on a "
"per-target basis."
msgstr ""
"使用不支持“-std=gnu11”或等效标志的编译器不会导致错误或警告，但会添加“-std=gnu99”或“-std=gnu90”如果支持则标记。这种“衰减”行为可以通过"
" C_STANDARD_REQUIRED 目标属性来控制。此外， :prop_tgt:`C_EXTENSIONS` "
"目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD.rst:53
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_C_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_C_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD_REQUIRED.rst:2
msgid "C_STANDARD_REQUIRED"
msgstr "C_STANDARD_REQUIRED 要求"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`C_STANDARD` is a "
"requirement."
msgstr "描述 :prop_tgt:`C_STANDARD` 的值是否为必需的布尔值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`C_STANDARD` target property is treated as a requirement.  If "
"this property is ``OFF`` or unset, the :prop_tgt:`C_STANDARD` target "
"property is treated as optional and may \"decay\" to a previous standard "
"if the requested is not available.  For compilers that have no notion of a"
" C standard level, such as Microsoft Visual C++ before VS 16.7, this "
"property has no effect."
msgstr ""
"如果此属性设置为 ``ON``，则 C_STANDARD 目标属性的值将被视为一项要求。如果此属性为 ``OFF`` 或未设置，则 "
"C_STANDARD 目标属性将被视为可选属性，如果请求不可用，则可能会“退化”到以前的标准。对于没有 C 标准级别概念的编译器，例如 VS "
"16.7 之前的 Microsoft Visual C++，此属性无效。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/C_STANDARD_REQUIRED.rst:18
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_C_STANDARD_REQUIRED` variable if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_C_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEBUG_POSTFIX.rst:2
msgid "DEBUG_POSTFIX"
msgstr "DEBUG_POSTFIX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEBUG_POSTFIX.rst:4
msgid "See target property :prop_tgt:`<CONFIG>_POSTFIX`."
msgstr "请参阅目标属性 :prop_tgt:`<CONFIG>_POSTFIX`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEBUG_POSTFIX.rst:6
msgid ""
"This property is a special case of the more-general "
":prop_tgt:`<CONFIG>_POSTFIX` property for the ``DEBUG`` configuration."
msgstr "此属性是更通用的 :prop_tgt:`<CONFIG>_POSTFIX` 属性的特例，用于 ``DEBUG`` 配置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEFINE_SYMBOL.rst:2
msgid "DEFINE_SYMBOL"
msgstr "定义符号"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEFINE_SYMBOL.rst:4
msgid "Define a symbol when compiling this target's sources."
msgstr "编译此目标的源代码时定义一个符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEFINE_SYMBOL.rst:6
msgid ""
"``DEFINE_SYMBOL`` sets the name of the preprocessor symbol defined when "
"compiling sources in a shared library.  If not set here then it is set to "
"``target_EXPORTS`` by default (with some substitutions if the target is "
"not a valid C identifier).  This is useful for headers to know whether "
"they are being included from inside their library or outside to properly "
"setup dllexport/dllimport decorations on Windows."
msgstr ""
"``DEFINE_SYMBOL`` "
"设置在共享库中编译源代码时定义的预处理器符号的名称。如果此处未设置，则默认设置为“target_EXPORTS”（如果目标不是有效的 C "
"标识符，则进行一些替换）。这对于标头了解它们是从库内部还是外部包含以在 Windows 上正确设置 dllexport/dllimport "
"装饰很有用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEFINE_SYMBOL.rst:13
msgid ""
"On POSIX platforms, this can optionally be used to control the visibility "
"of symbols."
msgstr "在 POSIX 平台上，这可以选择性地用于控制符号的可见性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEFINE_SYMBOL.rst:16
msgid ""
"CMake provides support for such decorations with the "
":module:`GenerateExportHeader` module."
msgstr "CMake 使用 :module:`GenerateExportHeader` 模块为此类装饰提供支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_ADDITIONAL_FILES.rst:2
msgid "DEPLOYMENT_ADDITIONAL_FILES"
msgstr "DEPLOYMENT_ADDITIONAL_FILES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_ADDITIONAL_FILES.rst:6
msgid ""
"Set the WinCE project ``AdditionalFiles`` in ``DeploymentTool`` in "
"``.vcproj`` files generated by the :generator:`Visual Studio 9 2008` "
"generator. This is useful when you want to debug on remote WinCE device. "
"Specify additional files that will be copied to the device. For example:"
msgstr ""
"在 Visual Studio 9 2008 生成器生成的 .vcproj 文件中的 DeploymentTool 中设置 WinCE 项目 "
"AdditionalFiles。当您想在远程 WinCE 设备上进行调试时，这很有用。指定将复制到设备的其他文件。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_ADDITIONAL_FILES.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_REMOTE_DIRECTORY.rst:17
msgid "produces::"
msgstr "产生：："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_REMOTE_DIRECTORY.rst:2
msgid "DEPLOYMENT_REMOTE_DIRECTORY"
msgstr "DEPLOYMENT_REMOTE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPLOYMENT_REMOTE_DIRECTORY.rst:6
msgid ""
"Set the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and "
"``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated by"
" the :generator:`Visual Studio 9 2008` generator. This is useful when you "
"want to debug on remote WinCE device. For example:"
msgstr ""
"在 Visual Studio 9 2008 生成器生成的 ``.vcproj`` 文件中的 ``DeploymentTool`` 中设置 "
"WinCE 项目 ``RemoteDirectory`` 和 ``DebuggerTool`` 中的 "
"``RemoteExecutable``。当您想在远程 WinCE 设备上进行调试时，这很有用。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:2
msgid "DEPRECATION"
msgstr "弃用"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:6
msgid "Deprecation message from imported target's developer."
msgstr "来自导入目标开发人员的弃用消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:8
msgid ""
"``DEPRECATION`` is the message regarding a deprecation status to be "
"displayed to downstream users of a target."
msgstr "``DEPRECATION`` 是关于要显示给目标下游用户的弃用状态的消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:11
msgid "The message is formatted as follows:"
msgstr "消息格式如下："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:13
msgid "Lines that do not start in whitespace are wrapped as paragraph text."
msgstr "不以空格开头的行被换行为段落文本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DEPRECATION.rst:14
msgid "Lines that start in whitespace are preserved as preformatted text."
msgstr "以空格开头的行将保留为预格式化文本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DISABLE_PRECOMPILE_HEADERS.rst:2
msgid "DISABLE_PRECOMPILE_HEADERS"
msgstr "DISABLE_PRECOMPILE_HEADERS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DISABLE_PRECOMPILE_HEADERS.rst:6
msgid ""
"Disables the precompilation of header files specified by "
":prop_tgt:`PRECOMPILE_HEADERS` property."
msgstr "禁用由 :prop_tgt:`PRECOMPILE_HEADERS` 属性指定的头文件的预编译。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DISABLE_PRECOMPILE_HEADERS.rst:9
msgid ""
"If the property is not set, CMake will use the value provided by "
":variable:`CMAKE_DISABLE_PRECOMPILE_HEADERS`."
msgstr "如果未设置该属性，CMake 将使用 CMAKE_DISABLE_PRECOMPILE_HEADERS 提供的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:2
msgid "DOTNET_SDK"
msgstr "DOTNET_SDK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:6
msgid ""
"Specify the .NET SDK for C# projects.  For example: ``Microsoft.NET.Sdk``."
msgstr "为 C# 项目指定 .NET SDK。例如：``Microsoft.NET.Sdk``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:8
msgid ""
"This property tells :ref:`Visual Studio Generators` for VS 2019 and above "
"to generate a .NET SDK-style project using the specified SDK. The property"
" is meaningful only to these generators, and only in C# targets.  It is "
"ignored for C++ projects, even if they are managed (e.g. using "
":prop_tgt:`COMMON_LANGUAGE_RUNTIME`)."
msgstr ""
"此属性告诉 VS 2019 及更高版本的 Visual Studio Generators 使用指定的 SDK 生成 .NET SDK "
"样式的项目。该属性仅对这些生成器有意义，并且仅在 C# 目标中。对于 C++ 项目，它会被忽略，即使它们是托管的（例如使用 "
":prop_tgt:`COMMON_LANGUAGE_RUNTIME`）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:14
msgid ""
"This property must be a non-empty string to generate .NET SDK-style "
"projects. CMake does not perform any validations for the value of the "
"property."
msgstr "此属性必须是非空字符串才能生成 .NET SDK 样式的项目。 CMake 不对属性的值执行任何验证。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:17
msgid ""
"This property may be initialized for all targets using the "
":variable:`CMAKE_DOTNET_SDK` variable."
msgstr "可以使用 CMAKE_DOTNET_SDK 变量为所有目标初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_SDK.rst:22
msgid ""
"The :ref:`Visual Studio Generators` in this version of CMake have not yet "
"learned to support :command:`add_custom_command` in .NET SDK-style "
"projects.  It is currently an error to attach a custom command to a target"
" with the ``DOTNET_SDK`` property set."
msgstr ""
"此版本 CMake 中的 :ref:`Visual Studio Generators` 尚未学会在 .NET SDK 样式项目中支持 "
":command:`add_custom_command`。目前将自定义命令附加到具有“DOTNET_SDK”属性集的目标是错误的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK.rst:2
msgid "DOTNET_TARGET_FRAMEWORK"
msgstr "DOTNET_TARGET_FRAMEWORK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK.rst:6
msgid "Specify the .NET target framework."
msgstr "指定 .NET 目标框架。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK.rst:8
msgid ""
"Used to specify the .NET target framework for C++/CLI and C#.  For "
"example: ``netcoreapp2.1``."
msgstr "用于为 C++/CLI 和 C# 指定 .NET 目标框架。例如：``netcoreapp2.1``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst:11
msgid ""
"This property is only evaluated for :ref:`Visual Studio Generators` VS "
"2010 and above."
msgstr "此属性仅针对 :ref:`Visual Studio Generators` VS 2010 及更高版本进行评估。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK.rst:14
msgid ""
"Can be initialized for all targets using the variable "
":variable:`CMAKE_DOTNET_TARGET_FRAMEWORK`."
msgstr "可以使用变量 CMAKE_DOTNET_TARGET_FRAMEWORK 为所有目标初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst:2
msgid "DOTNET_TARGET_FRAMEWORK_VERSION"
msgstr "DOTNET_TARGET_FRAMEWORK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.rst:4
msgid "Specify the .NET target framework version."
msgstr "指定 .NET 目标框架版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst:8
msgid ""
"Used to specify the .NET target framework version for C++/CLI and C#. For "
"example: ``v4.5``."
msgstr "用于指定 C++/CLI 和 C# 的 .NET 目标框架版本。例如：``v4.5``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/DOTNET_TARGET_FRAMEWORK_VERSION.rst:14
msgid ""
"To initialize this variable for all targets set "
":variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` or "
":variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`. If both are set, the "
"latter is ignored."
msgstr ""
"要为所有目标集初始化此变量 :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` "
"或 :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`。如果两者都已设置，则后者将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:2
msgid "ENABLE_EXPORTS"
msgstr "启用出口"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:4
msgid "Specify whether an executable exports symbols for loadable modules."
msgstr "指定可执行文件是否导出可加载模块的符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:6
msgid ""
"Normally an executable does not export any symbols because it is the final"
" program.  It is possible for an executable to export symbols to be used "
"by loadable modules.  When this property is set to true CMake will allow "
"other targets to \"link\" to the executable with the "
":command:`target_link_libraries` command.  On all platforms a target-level"
" dependency on the executable is created for targets that link to it. "
"Handling of the executable on the link lines of the loadable modules "
"varies by platform:"
msgstr ""
"通常可执行文件不会导出任何符号，因为它是最终程序。可执行文件可以导出符号以供可加载模块使用。当此属性设置为 true 时，CMake "
"将允许其他目标使用 target_link_libraries "
"命令“链接”到可执行文件。在所有平台上，都会为链接到可执行文件的目标创建对可执行文件的目标级依赖项。可加载模块链接线上的可执行文件的处理因平台而异："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:15
msgid ""
"On Windows-based systems (including Cygwin) an \"import library\" is "
"created along with the executable to list the exported symbols. Loadable "
"modules link to the import library to get the symbols."
msgstr ""
"在基于 Windows 的系统（包括 Cygwin）上，“导入库”与可执行文件一起创建，以列出导出的符号。可加载模块链接到导入库以获取符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:19
msgid ""
"On macOS, loadable modules link to the executable itself using the "
"``-bundle_loader`` flag."
msgstr "在 macOS 上，可加载模块使用“-bundle_loader”标志链接到可执行文件本身。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:22
msgid ""
"On AIX, a linker \"import file\" is created along with the executable to "
"list the exported symbols for import when linking other targets. Loadable "
"modules link to the import file to get the symbols."
msgstr "在 AIX 上，链接器“导入文件”与可执行文件一起创建，以在链接其他目标时列出要导入的导出符号。可加载模块链接到导入文件以获取符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:26
msgid ""
"On other platforms, loadable modules are simply linked without referencing"
" the executable since the dynamic loader will automatically bind symbols "
"when the module is loaded."
msgstr "在其他平台上，可加载模块只是简单地链接而不引用可执行文件，因为动态加载程序会在加载模块时自动绑定符号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ENABLE_EXPORTS.rst:30
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_ENABLE_EXPORTS` if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_ENABLE_EXPORTS 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:2
msgid "EXCLUDE_FROM_ALL"
msgstr "EXCLUDE_FROM_ALL"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:4
msgid ""
"Set this target property to a true (or false) value to exclude (or "
"include) the target from the \"all\" target of the containing directory "
"and its ancestors.  If excluded, running e.g. ``make`` in the containing "
"directory or its ancestors will not build the target by default."
msgstr ""
"将此目标属性设置为真（或假）值以从包含目录及其祖先的“所有”目标中排除（或包括）目标。如果排除，运行例如默认情况下，包含目录或其祖先中的“make”不会构建目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:9
msgid ""
"If this target property is not set then the target will be included in the"
" \"all\" target of the containing directory.  Furthermore, it will be "
"included in the \"all\" target of its ancestor directories unless the "
":prop_dir:`EXCLUDE_FROM_ALL` directory property is set."
msgstr ""
"如果未设置此目标属性，则目标将包含在包含目录的“所有”目标中。此外，除非设置了 :prop_dir:`EXCLUDE_FROM_ALL` "
"目录属性，否则它将包含在其祖先目录的“所有”目标中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:14
msgid ""
"With ``EXCLUDE_FROM_ALL`` set to false or not set at all, the target will "
"be brought up to date as part of doing a ``make install`` or its "
"equivalent for the CMake generator being used."
msgstr ""
"将 ``EXCLUDE_FROM_ALL`` 设置为 false 或根本不设置，目标将在执行 ``make install`` 或正在使用的 "
"CMake 生成器的等效过程中更新。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:18
msgid ""
"If a target has ``EXCLUDE_FROM_ALL`` set to true, it may still be listed "
"in an :command:`install(TARGETS)` command, but the user is responsible for"
" ensuring that the target's build artifacts are not missing or outdated "
"when an install is performed."
msgstr ""
"如果目标将 ``EXCLUDE_FROM_ALL`` 设置为 true，它可能仍会列在 :command:`install(TARGETS)` "
"命令中，但用户有责任确保目标的构建工件在安装时不会丢失或过时执行安装。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_ALL.rst:26
msgid ""
"Only the \"Ninja Multi-Config\" generator supports a property value that "
"varies by configuration.  For all other generators the value of this "
"property must be the same for all configurations."
msgstr "只有“Ninja Multi-Config”生成器支持因配置而异的属性值。对于所有其他生成器，此属性的值对于所有配置必须相同。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.rst:2
msgid "EXCLUDE_FROM_DEFAULT_BUILD"
msgstr "EXCLUDE_FROM_DEFAULT_BUILD"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.rst:4
msgid "Exclude target from ``Build Solution``."
msgstr "从“构建解决方案”中排除目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD.rst:6
msgid ""
"This property is only used by Visual Studio generators. When set to "
"``TRUE``, the target will not be built when you press ``Build Solution``."
msgstr ""
"此属性仅供 Visual Studio 生成器使用。当设置为 ``TRUE`` 时，当您按下 ``Build Solution`` "
"时将不会构建目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.rst:2
msgid "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>"
msgstr "EXCLUDE_FROM_DEFAULT_BUILD_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.rst:4
msgid ""
"Per-configuration version of target exclusion from ``Build Solution``."
msgstr "从“构建解决方案”中排除目标的每个配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXCLUDE_FROM_DEFAULT_BUILD_CONFIG.rst:6
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD`.  If the generic "
":prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD` is also set on a target, "
"``EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>`` takes precedence in configurations"
" for which it has a value."
msgstr ""
"这是 :prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD` 的特定配置版本。如果泛型 "
":prop_tgt:`EXCLUDE_FROM_DEFAULT_BUILD` 也在目标上设置，则 "
"``EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>`` 在其具有值的配置中优先。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_COMPILE_COMMANDS.rst:2
msgid "EXPORT_COMPILE_COMMANDS"
msgstr "EXPORT_COMPILE_COMMANDS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_COMPILE_COMMANDS.rst:6
msgid ""
"Enable/Disable output of compile commands during generation for a target."
msgstr "在为目标生成期间启用/禁用编译命令的输出。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_COMPILE_COMMANDS.rst:8
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_EXPORT_COMPILE_COMMANDS` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_EXPORT_COMPILE_COMMANDS 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NAME.rst:2
msgid "EXPORT_NAME"
msgstr "EXPORT_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NAME.rst:4
msgid "Exported name for target files."
msgstr "目标文件的导出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NAME.rst:6
msgid ""
"This sets the name for the ``IMPORTED`` target generated by the "
":command:`install(EXPORT)` and :command:`export` commands. If not set, the"
" logical target name is used by default."
msgstr ""
"这设置了由 :command:`install(EXPORT)` 和 :command:`export` 命令生成的 ``IMPORTED`` "
"目标的名称。如果未设置，则默认使用逻辑目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NO_SYSTEM.rst:2
msgid "EXPORT_NO_SYSTEM"
msgstr "EXPORT_NO_SYSTEM"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NO_SYSTEM.rst:6
msgid ""
"This property affects the behavior of the :command:`install(EXPORT)` and "
":command:`export` commands when they install or export the target "
"respectively. When ``EXPORT_NO_SYSTEM`` is set to true, those commands "
"generate an imported target with :prop_tgt:`SYSTEM` property set to false."
msgstr ""
"此属性会影响 :command:`install(EXPORT)` 和 :command:`export` 命令分别安装或导出目标时的行为。当 "
"``EXPORT_NO_SYSTEM`` 设置为 true 时，这些命令会生成一个导入的目标，并将 :prop_tgt:`SYSTEM` 属性设置为"
" false。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_NO_SYSTEM.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:33
msgid ""
"See the :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property to set this "
"behavior on the target *consuming* the include directories rather than the"
" one *providing* them."
msgstr ""
"请参阅 :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` 目标属性以在目标上设置此行为*消费*包含目录而不是*提供*它们。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:2
msgid "EXPORT_PROPERTIES"
msgstr "EXPORT_PROPERTIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:6
msgid "List additional properties to export for a target."
msgstr "列出要为目标导出的其他属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:8
msgid ""
"This property contains a list of property names that should be exported by"
" the :command:`install(EXPORT)` and :command:`export` commands.  By "
"default only a limited number of properties are exported. This property "
"can be used to additionally export other properties as well."
msgstr ""
"此属性包含应由 :command:`install(EXPORT)` 和 :command:`export` "
"命令导出的属性名称列表。默认情况下，仅导出有限数量的属性。此属性也可用于另外导出其他属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:13
msgid ""
"Properties starting with ``INTERFACE_`` or ``IMPORTED_`` are not allowed "
"as they are reserved for internal CMake use."
msgstr "不允许以“INTERFACE_”或“IMPORTED_”开头的属性，因为它们保留供内部 CMake 使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:16
msgid "Properties containing generator expressions are also not allowed."
msgstr "也不允许包含生成器表达式的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EXPORT_PROPERTIES.rst:20
msgid ""
"Since CMake 3.19, :ref:`Interface Libraries` may have arbitrary target "
"properties.  If a project exports an interface library with custom "
"properties, the resulting package may not work with dependents configured "
"by older versions of CMake that reject the custom properties."
msgstr ""
"自 CMake 3.19 起， :ref:`Interface Libraries` "
"可能具有任意目标属性。如果项目导出具有自定义属性的接口库，则生成的包可能无法与由拒绝自定义属性的旧版 CMake 配置的依赖项一起使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EchoString.rst:2
msgid "EchoString"
msgstr "回声串"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EchoString.rst:4
msgid "A message to be displayed when the target is built."
msgstr "构建目标时显示的消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/EchoString.rst:6
msgid ""
"A message to display on some generators (such as :ref:`Makefile "
"Generators`) when the target is built."
msgstr "构建目标时显示在某些生成器（例如 Makefile Generators）上的消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FOLDER.rst:2
msgid "FOLDER"
msgstr "文件夹"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FOLDER.rst:4
msgid ""
"For IDEs that present targets using a folder hierarchy, this property "
"specifies the name of the folder to place the target under. To nest "
"folders, use ``FOLDER`` values such as ``GUI/Dialogs`` with ``/`` "
"characters separating folder levels.  Targets with no ``FOLDER`` property "
"will appear as top level entities.  Targets with the same ``FOLDER`` "
"property value will appear in the same folder as siblings."
msgstr ""
"对于使用文件夹层次结构呈现目标的 IDE，此属性指定放置目标的文件夹的名称。要嵌套文件夹，请使用 ``FOLDER`` 值，例如 "
"``GUI/Dialogs`` 和 ``/`` 字符分隔文件夹级别。没有 ``FOLDER`` 属性的目标将显示为顶级实体。具有相同 "
"``FOLDER`` 属性值的目标将出现在与兄弟姐妹相同的文件夹中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FOLDER.rst:11
msgid ""
"Only some CMake generators honor the ``FOLDER`` property (e.g. "
":generator:`Xcode` or any of the :ref:`Visual Studio <Visual Studio "
"Generators>` generators). Those generators that don't will simply ignore "
"it."
msgstr ""
"只有一些 CMake 生成器支持 ``FOLDER`` 属性（例如:generator:`Xcode` 或任何:ref:`Visual Studio"
" <Visual Studio Generators>` 生成器）。那些不这样做的生成器将简单地忽略它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FOLDER.rst:16
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_FOLDER` if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 :variable:`CMAKE_FOLDER` 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FOLDER.rst:19
msgid ""
"The global property :prop_gbl:`USE_FOLDERS` must be set to true, otherwise"
" the ``FOLDER`` property is ignored."
msgstr "全局属性 :prop_gbl:`USE_FOLDERS` 必须设置为 true，否则 ``FOLDER`` 属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:2
msgid "FRAMEWORK"
msgstr "框架"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:4
msgid ""
"Build ``SHARED`` or ``STATIC`` library as Framework Bundle on the macOS "
"and iOS."
msgstr "在 macOS 和 iOS 上构建 ``SHARED`` 或 ``STATIC`` 库作为 Framework Bundle。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:6
msgid ""
"If such a library target has this property set to ``TRUE`` it will be "
"built as a framework when built on the macOS and iOS.  It will have the "
"directory structure required for a framework and will be suitable to be "
"used with the ``-framework`` option.  This property is initialized by the "
"value of the :variable:`CMAKE_FRAMEWORK` variable if it is set when a "
"target is created."
msgstr ""
"如果此类库目标将此属性设置为“TRUE”，则在 macOS 和 iOS "
"上构建时，它将构建为框架。它将具有框架所需的目录结构，并且适合与“-framework”选项一起使用。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_FRAMEWORK 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:13
msgid ""
"To customize ``Info.plist`` file in the framework, use "
":prop_tgt:`MACOSX_FRAMEWORK_INFO_PLIST` target property."
msgstr ""
"要在框架中自定义 ``Info.plist`` 文件，请使用 :prop_tgt:`MACOSX_FRAMEWORK_INFO_PLIST` "
"目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:16
msgid ""
"For macOS see also the :prop_tgt:`FRAMEWORK_VERSION` target property."
msgstr "对于 macOS，另请参阅 :prop_tgt:`FRAMEWORK_VERSION` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK.rst:18
msgid "Example of creation ``dynamicFramework``:"
msgstr "创建``dynamicFramework``的例子："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:2
msgid "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>"
msgstr "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:6
msgid ""
"Postfix to append to the framework file name for configuration "
"``<CONFIG>``, when using a multi-config generator (like Xcode and Ninja "
"Multi-Config)."
msgstr ""
"当使用多配置生成器（如 Xcode 和 Ninja Multi-Config）时，后缀附加到配置``<CONFIG>`` 的框架文件名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:9
msgid ""
"When building with configuration ``<CONFIG>`` the value of this property "
"is appended to the framework file name built on disk."
msgstr "当使用配置``<CONFIG>`` 构建时，此属性的值附加到磁盘上构建的框架文件名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:12
msgid ""
"For example, given a framework called ``my_fw``, a value of ``_debug`` for"
" the ``FRAMEWORK_MULTI_CONFIG_POSTFIX_DEBUG`` property, and "
"``Debug;Release`` in :variable:`CMAKE_CONFIGURATION_TYPES`, the following "
"relevant files would be created for the ``Debug`` and ``Release`` "
"configurations:"
msgstr ""
"例如，给定一个名为 ``my_fw`` 的框架，``FRAMEWORK_MULTI_CONFIG_POSTFIX_DEBUG`` 属性的值为 "
"``_debug``，以及 :variable:`CMAKE_CONFIGURATION_TYPES` 中的 "
"``Debug;Release``，以下相关文件将为“调试”和“发布”配置创建："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:18
msgid "``Release/my_fw.framework/my_fw``"
msgstr "``发布/my_fw.framework/my_fw``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:19
msgid "``Release/my_fw.framework/Versions/A/my_fw``"
msgstr "``发布/my_fw.framework/Versions/A/my_fw``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:20
msgid "``Debug/my_fw.framework/my_fw_debug``"
msgstr "``调试/my_fw.framework/my_fw_debug``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:21
msgid "``Debug/my_fw.framework/Versions/A/my_fw_debug``"
msgstr "``调试/my_fw.framework/版本/A/my_fw_debug``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:23
msgid ""
"For framework targets, this property is initialized by the value of the "
":variable:`CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` variable if it "
"is set when a target is created."
msgstr ""
"对于框架目标，此属性由 CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG> "
"变量的值初始化（如果它是在创建目标时设置的）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_MULTI_CONFIG_POSTFIX_CONFIG.rst:27
msgid ""
"This property is ignored for non-framework targets, and when using single "
"config generators."
msgstr "对于非框架目标和使用单个配置生成器时，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_VERSION.rst:2
msgid "FRAMEWORK_VERSION"
msgstr "框架版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_VERSION.rst:6
msgid ""
"Version of a framework created using the :prop_tgt:`FRAMEWORK` target "
"property (e.g. ``A``)."
msgstr "使用 :prop_tgt:`FRAMEWORK` 目标属性（例如 ``A``）创建的框架版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/FRAMEWORK_VERSION.rst:9
msgid ""
"This property only affects macOS, as iOS doesn't have versioned directory "
"structure."
msgstr "此属性仅影响 macOS，因为 iOS 没有版本化目录结构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES.rst:2
msgid "Fortran_BUILDING_INSTRINSIC_MODULES"
msgstr "Fortran_BUILDING_INSTRINSIC_MODULES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES.rst:6
msgid ""
"Instructs the CMake Fortran preprocessor that the target is building "
"Fortran intrinsics for building a Fortran compiler."
msgstr "指示 CMake Fortran 预处理器目标正在构建 Fortran 内在函数以构建 Fortran 编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES.rst:9
msgid ""
"This property is off by default and should be turned only on projects that"
" build a Fortran compiler. It should not be turned on for projects that "
"use a Fortran compiler."
msgstr "默认情况下此属性处于关闭状态，应仅在构建 Fortran 编译器的项目上打开。不应为使用 Fortran 编译器的项目打开它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_BUILDING_INSTRINSIC_MODULES.rst:13
msgid ""
"Turning this property on will correctly add dependencies for building "
"Fortran intrinsic modules whereas turning the property off will ignore "
"Fortran intrinsic modules in the dependency graph as they are supplied by "
"the compiler itself."
msgstr ""
"打开此属性将正确添加构建 Fortran 内部模块的依赖项，而关闭此属性将忽略依赖关系图中的 Fortran 内部模块，因为它们由编译器本身提供。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_FORMAT.rst:2
msgid "Fortran_FORMAT"
msgstr "Fortran_格式"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_FORMAT.rst:4
msgid "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout."
msgstr "设置为“FIXED”或“FREE”以指示 Fortran 源布局。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_FORMAT.rst:6
msgid ""
"This property tells CMake whether the Fortran source files in a target use"
" fixed-format or free-format.  CMake will pass the corresponding format "
"flag to the compiler.  Use the source-specific ``Fortran_FORMAT`` property"
" to change the format of a specific source file.  If the variable "
":variable:`CMAKE_Fortran_FORMAT` is set when a target is created its value"
" is used to initialize this property."
msgstr ""
"此属性告诉 CMake 目标中的 Fortran 源文件是使用固定格式还是自由格式。 CMake "
"会将相应的格式标志传递给编译器。使用特定于源的“Fortran_FORMAT”属性来更改特定源文件的格式。如果在创建目标时设置了变量 "
":variable:`CMAKE_Fortran_FORMAT`，则其值用于初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_MODULE_DIRECTORY.rst:2
msgid "Fortran_MODULE_DIRECTORY"
msgstr "Fortran_MODULE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_MODULE_DIRECTORY.rst:4
msgid "Specify output directory for Fortran modules provided by the target."
msgstr "为目标提供的 Fortran 模块指定输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_MODULE_DIRECTORY.rst:6
msgid ""
"If the target contains Fortran source files that provide modules and the "
"compiler supports a module output directory this specifies the directory "
"in which the modules will be placed.  When this property is not set the "
"modules will be placed in the build directory corresponding to the "
"target's source directory.  If the variable "
":variable:`CMAKE_Fortran_MODULE_DIRECTORY` is set when a target is created"
" its value is used to initialize this property."
msgstr ""
"如果目标包含提供模块的 Fortran "
"源文件并且编译器支持模块输出目录，则此指定将放置模块的目录。如果未设置此属性，模块将放置在与目标源目录相对应的构建目录中。如果在创建目标时设置了变量"
" :variable:`CMAKE_Fortran_MODULE_DIRECTORY`，则其值用于初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_MODULE_DIRECTORY.rst:14
msgid ""
"When using one of the :ref:`Visual Studio Generators` with the Intel "
"Fortran plugin installed in Visual Studio, a subdirectory named after the "
"configuration will be appended to the path where modules are created. For "
"example, if ``Fortran_MODULE_DIRECTORY`` is set to ``C:/some/path``, "
"modules will end up in ``C:/some/path/Debug`` (or ``C:/some/path/Release``"
" etc.) when an Intel Fortran ``.vfproj`` file is generated, and in "
"``C:/some/path`` when any other generator is used."
msgstr ""
"当使用 Visual Studio Generators 之一和安装在 Visual Studio 中的英特尔 Fortran "
"插件时，一个以配置命名的子目录将附加到创建模块的路径。例如，如果将“Fortran_MODULE_DIRECTORY”设置为“C:/some/path”，模块将在“C:/some/path/Debug”（或“C:/some/path”中结束）"
" /Release`` 等）当生成 Intel Fortran ``.vfproj`` 文件时，以及当使用任何其他生成器时在 "
"``C:/some/path`` 中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_MODULE_DIRECTORY.rst:22
msgid ""
"Note that some compilers will automatically search the module output "
"directory for modules USEd during compilation but others will not.  If "
"your sources USE modules their location must be specified by "
":prop_tgt:`INCLUDE_DIRECTORIES` regardless of this property."
msgstr ""
"请注意，某些编译器会自动搜索模块输出目录以查找编译期间使用的模块，但其他编译器不会。如果您的源使用模块，则无论此属性如何，它们的位置都必须由 "
":prop_tgt:`INCLUDE_DIRECTORIES` 指定。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:2
msgid "Fortran_PREPROCESS"
msgstr "Fortran_PREPROCESS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:6
msgid ""
"Control whether the Fortran source file should be unconditionally "
"preprocessed."
msgstr "控制是否应无条件预处理 Fortran 源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:9
msgid ""
"If unset or empty, rely on the compiler to determine whether the file "
"should be preprocessed. If explicitly set to ``OFF`` then the file does "
"not need to be preprocessed. If explicitly set to ``ON``, then the file "
"does need to be preprocessed as part of the compilation step."
msgstr ""
"如果未设置或为空，则依靠编译器来确定是否应预处理文件。如果明确设置为 ``OFF`` 则文件不需要预处理。如果明确设置为 "
"``ON``，则文件确实需要作为编译步骤的一部分进行预处理。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:14
msgid ""
"When using the :generator:`Ninja` generator, all source files are first "
"preprocessed in order to generate module dependency information. Setting "
"this property to ``OFF`` will make ``Ninja`` skip this step."
msgstr ""
"使用 :generator:`Ninja` 生成器时，首先对所有源文件进行预处理以生成模块依赖信息。将此属性设置为 ``OFF`` 将使 "
"``Ninja`` 跳过此步骤。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:19
msgid ""
"Use the source-specific :prop_sf:`Fortran_PREPROCESS` property if a single"
" file needs to be preprocessed. If the variable "
":variable:`CMAKE_Fortran_PREPROCESS` is set when a target is created its "
"value is used to initialize this property."
msgstr ""
"如果需要预处理单个文件，请使用特定于源的 Fortran_PREPROCESS 属性。如果在创建目标时设置了变量 "
":variable:`CMAKE_Fortran_PREPROCESS`，则其值用于初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Fortran_PREPROCESS.rst:24
msgid ""
"For some compilers, ``NAG``, ``PGI`` and ``Solaris Studio``, setting this "
"to ``OFF`` will have no effect."
msgstr "对于某些编译器，``NAG``、``PGI`` 和 ``Solaris Studio``，将此设置为 ``OFF`` 将无效。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GENERATOR_FILE_NAME.rst:2
msgid "GENERATOR_FILE_NAME"
msgstr "GENERATOR_FILE_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GENERATOR_FILE_NAME.rst:4
msgid "Generator's file for this target."
msgstr "此目标的生成器文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GENERATOR_FILE_NAME.rst:6
msgid ""
"An internal property used by some generators to record the name of the "
"project or dsp file associated with this target.  Note that at configure "
"time, this property is only set for targets created by "
":command:`include_external_msproject`."
msgstr ""
"一些生成器使用的内部属性，用于记录与此目标关联的项目或 dsp 文件的名称。请注意，在配置时，此属性仅为由 "
":command:`include_external_msproject` 创建的目标设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_INTEGRITY_APP.rst:2
msgid "GHS_INTEGRITY_APP"
msgstr "GHS_INTEGRITY_APP"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_INTEGRITY_APP.rst:6
msgid ""
"``ON`` / ``OFF`` boolean to determine if an executable target should be "
"treated as an `Integrity Application`."
msgstr "``ON`` / ``OFF`` 布尔值，用于确定可执行目标是否应被视为 `Integrity Application`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_INTEGRITY_APP.rst:9
msgid ""
"If no value is set and if a ``.int`` file is added as a source file to the"
" executable target it will be treated as an `Integrity Application`."
msgstr "如果未设置任何值，并且将“.int”文件作为源文件添加到可执行目标，它将被视为“完整性应用程序”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_INTEGRITY_APP.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst:15
msgid "Supported on :generator:`Green Hills MULTI`."
msgstr "支持 :generator:`Green Hills MULTI`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst:2
msgid "GHS_NO_SOURCE_GROUP_FILE"
msgstr "GHS_NO_SOURCE_GROUP_FILE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst:6
msgid ""
"``ON`` / ``OFF`` boolean to control if the project file for a target "
"should be one single file or multiple files."
msgstr "``ON`` / ``OFF`` 布尔值，用于控制目标的项目文件是一个文件还是多个文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst:9
msgid ""
"The default behavior or when the property is ``OFF`` is to generate a "
"project file for the target and then a sub-project file for each source "
"group."
msgstr "默认行为或当属性为 ``OFF`` 时为目标生成一个项目文件，然后为每个源组生成一个子项目文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GHS_NO_SOURCE_GROUP_FILE.rst:12
msgid ""
"When this property is ``ON`` or if "
":variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE` is ``ON`` then only a single "
"project file is generated for the target."
msgstr ""
"当此属性为 ``ON`` 或如果 :variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE` 为 ``ON`` "
"则仅为目标生成一个项目文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GNUtoMS.rst:2
msgid "GNUtoMS"
msgstr "GNUtoMS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GNUtoMS.rst:4
msgid "Convert GNU import library (``.dll.a``) to MS format (``.lib``)."
msgstr "将 GNU 导入库 (``.dll.a``) 转换为 MS 格式 (``.lib``)。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GNUtoMS.rst:6
msgid ""
"When linking a shared library or executable that exports symbols using GNU"
" tools on Windows (MinGW/MSYS) with Visual Studio installed convert the "
"import library (``.dll.a``) from GNU to MS format (``.lib``).  Both import"
" libraries will be installed by :command:`install(TARGETS)` and exported "
"by :command:`install(EXPORT)` and  :command:`export` to be linked by "
"applications with either GNU- or MS-compatible tools."
msgstr ""
"在安装了 Visual Studio 的 Windows (MinGW/MSYS) 上使用 GNU 工具链接导出符号的共享库或可执行文件时，将导入库"
" (``.dll.a``) 从 GNU 格式转换为 MS 格式 (``.lib`` "
").两个导入库都将由安装（TARGETS）安装，并由安装（EXPORT）和导出导出，以便应用程序与 GNU 或 MS 兼容工具链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/GNUtoMS.rst:13
msgid ""
"If the variable ``CMAKE_GNUtoMS`` is set when a target is created its "
"value is used to initialize this property.  The variable must be set prior"
" to the first command that enables a language such as :command:`project` "
"or :command:`enable_language`.  CMake provides the variable as an option "
"to the user automatically when configuring on Windows with GNU tools."
msgstr ""
"如果在创建目标时设置了变量“CMAKE_GNUtoMS”，则其值用于初始化此属性。该变量必须在启用语言的第一个命令之前设置，例如 "
":command:`project` 或 :command:`enable_language`。当在 Windows 上使用 GNU "
"工具进行配置时，CMake 会自动将变量作为选项提供给用户。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HAS_CXX.rst:2
msgid "HAS_CXX"
msgstr "有_CXX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HAS_CXX.rst:4
msgid "Link the target using the C++ linker tool (obsolete)."
msgstr "使用 C++ 链接器工具（过时）链接目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HAS_CXX.rst:6
msgid ""
"This is equivalent to setting the :prop_tgt:`LINKER_LANGUAGE` property to "
"``CXX``."
msgstr "这相当于将 :prop_tgt:`LINKER_LANGUAGE` 属性设置为 ``CXX``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS.rst:2
msgid "HEADER_DIRS"
msgstr "标题目录"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS.rst:6
msgid ""
"Semicolon-separated list of base directories of the target's default "
"header set (i.e. the file set with name and type ``HEADERS``). The "
"property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"目标默认标头集的基本目录的分号分隔列表（即名称和类型为“HEADERS”的文件集）。该属性支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS.rst:13
msgid ""
"See :prop_tgt:`HEADER_DIRS_<NAME>` for the list of base directories in "
"other header sets."
msgstr "请参阅 :prop_tgt:`HEADER_DIRS_<NAME>` 以获取其他标头集中的基本目录列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS_NAME.rst:2
msgid "HEADER_DIRS_<NAME>"
msgstr "HEADER_DIRS_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS_NAME.rst:6
msgid ""
"Semicolon-separated list of base directories of the target's ``<NAME>`` "
"header set, which has the set type ``HEADERS``. The property supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"目标的“<NAME>”标头集的基本目录的分号分隔列表，其集类型为“HEADERS”。该属性支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_DIRS_NAME.rst:13
msgid ""
"See :prop_tgt:`HEADER_DIRS` for the list of base directories in the "
"default header set. See :prop_tgt:`HEADER_SETS` for the file set names of "
"all header sets."
msgstr ""
"请参阅 :prop_tgt:`HEADER_DIRS` 以获取默认标头集中的基本目录列表。有关所有标头集的文件集名称，请参阅 "
":prop_tgt:`HEADER_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET.rst:2
msgid "HEADER_SET"
msgstr "HEADER_SET"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET.rst:6
msgid ""
"Semicolon-separated list of files in the target's default header set, "
"(i.e. the file set with name and type ``HEADERS``). If any of the paths "
"are relative, they are computed relative to the target's source directory."
" The property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
"目标默认标头集中以分号分隔的文件列表（即名称和类型为“HEADERS”的文件集）。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持"
" :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET.rst:15
msgid ""
"See :prop_tgt:`HEADER_SET_<NAME>` for the list of files in other header "
"sets."
msgstr "有关其他标头集中的文件列表，请参阅 :prop_tgt:`HEADER_SET_<NAME>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SETS.rst:2
msgid "HEADER_SETS"
msgstr "HEADER_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SETS.rst:6
msgid ""
"Read-only list of the target's ``PRIVATE`` and ``PUBLIC`` header sets "
"(i.e. all file sets with the type ``HEADERS``). Files listed in these file"
" sets are treated as source files for the purpose of IDE integration. The "
"files also have their :prop_sf:`HEADER_FILE_ONLY` property set to "
"``TRUE``."
msgstr ""
"目标的“PRIVATE”和“PUBLIC”标头集的只读列表（即所有类型为“HEADERS”的文件集）。出于 IDE "
"集成的目的，这些文件集中列出的文件被视为源文件。这些文件的 :prop_sf:`HEADER_FILE_ONLY` 属性也设置为 ``TRUE``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SETS.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS.rst:11
msgid ""
"Header sets may be defined using the :command:`target_sources` command "
"``FILE_SET`` option with type ``HEADERS``."
msgstr ""
"标头集可以使用 :command:`target_sources` 命令的 ``FILE_SET`` 选项和类型为 ``HEADERS`` 来定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SETS.rst:14
msgid ""
"See also :prop_tgt:`HEADER_SET_<NAME>`, :prop_tgt:`HEADER_SET` and "
":prop_tgt:`INTERFACE_HEADER_SETS`."
msgstr ""
"另见 :prop_tgt:`HEADER_SET_<NAME>`、 :prop_tgt:`HEADER_SET` 和 "
":prop_tgt:`INTERFACE_HEADER_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET_NAME.rst:2
msgid "HEADER_SET_<NAME>"
msgstr "HEADER_SET_<名称>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET_NAME.rst:6
msgid ""
"Semicolon-separated list of files in the target's ``<NAME>`` header set, "
"which has the set type ``HEADERS``. If any of the paths are relative, they"
" are computed relative to the target's source directory. The property "
"supports :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"目标的“<NAME>”标头集中以分号分隔的文件列表，其集类型为“HEADERS”。如果任何路径是相对的，则它们是相对于目标的源目录计算的。该属性支持"
" :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HEADER_SET_NAME.rst:14
msgid ""
"See :prop_tgt:`HEADER_SET` for the list of files in the default header "
"set. See :prop_tgt:`HEADER_SETS` for the file set names of all header "
"sets."
msgstr ""
"有关默认标头集中的文件列表，请参阅 :prop_tgt:`HEADER_SET`。有关所有标头集的文件集名称，请参阅 "
":prop_tgt:`HEADER_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:2
msgid "HIP_ARCHITECTURES"
msgstr "HIP_建筑"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:6
msgid "List of AMD GPU architectures to generate device code for."
msgstr "为其生成设备代码的 AMD GPU 架构列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:12
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_HIP_ARCHITECTURES` variable if it is set when a target is"
" created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_HIP_ARCHITECTURES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:15
msgid ""
"The HIP compilation model has two modes: whole and separable. Whole "
"compilation generates device code at compile time. Separable compilation "
"generates device code at link time. Therefore the ``HIP_ARCHITECTURES`` "
"target property should be set on targets that compile or link with any HIP"
" sources."
msgstr ""
"HIP编译模型有两种模式：whole和separable。整个编译在编译时生成设备代码。可分离编译在链接时生成设备代码。因此，``HIP_ARCHITECTURES``"
" 目标属性应该设置在编译或链接到任何 HIP 源的目标上。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_ARCHITECTURES.rst:27
msgid "Generates code for both ``gfx801`` and ``gfx900``."
msgstr "为“gfx801”和“gfx900”生成代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_EXTENSIONS.rst:2
msgid "HIP_EXTENSIONS"
msgstr "HIP_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This "
"property is ``ON`` by default. The basic HIP/C++ standard level is "
"controlled by the :prop_tgt:`HIP_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”而不是“-std=c++11”。默认情况下，此属性为"
" ``ON``。基本的 HIP/C++ 标准级别由 HIP_STANDARD 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_EXTENSIONS.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_HIP_EXTENSIONS` variable if set when a target is created "
"and otherwise by the value of :variable:`CMAKE_HIP_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_HIP_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_HIP_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` "
"的值初始化（请参阅:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:2
msgid "HIP_STANDARD"
msgstr "臀部标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:6
msgid "The HIP/C++ standard requested to build this target."
msgstr "HIP/C++ 标准要求构建此目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:11
msgid "HIP C++98"
msgstr "髋关节 C++98"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:14
msgid "HIP C++11"
msgstr "髋关节 C++11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:17
msgid "HIP C++14"
msgstr "髋关节 C++14"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:20
msgid "HIP C++17"
msgstr "髋关节 C++17"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:23
msgid "HIP C++20"
msgstr "髋关节 C++20"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:26
msgid "HIP C++23"
msgstr "髋关节 C++23"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:31
msgid ""
"HIP C++26. CMake 3.25 and later *recognize* ``26`` as a valid value, no "
"version has support for any compiler."
msgstr "臀部 C++26。 CMake 3.25 及更高版本 *识别* ``26`` 为有效值，没有版本支持任何编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:42
msgid ""
"with a compiler which does not support ``-std=gnu++11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu++98`` flag if supported.  This \"decay\" behavior may be "
"controlled with the :prop_tgt:`HIP_STANDARD_REQUIRED` target property. "
"Additionally, the :prop_tgt:`HIP_EXTENSIONS` target property may be used "
"to control whether compiler-specific extensions are enabled on a per-"
"target basis."
msgstr ""
"使用不支持“-std=gnu++11”或等效标志的编译器不会导致错误或警告，但如果支持，则会添加“-std=gnu++98”标志.这种“衰减”行为可以通过"
" HIP_STANDARD_REQUIRED 目标属性进行控制。此外， :prop_tgt:`HIP_EXTENSIONS` "
"目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD.rst:52
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_HIP_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_HIP_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD_REQUIRED.rst:2
msgid "HIP_STANDARD_REQUIRED"
msgstr "HIP_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`HIP_STANDARD` is a "
"requirement."
msgstr "描述 :prop_tgt:`HIP_STANDARD` 的值是否为必需的布尔值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`HIP_STANDARD` target property is treated as a requirement.  If "
"this property is ``OFF`` or unset, the :prop_tgt:`HIP_STANDARD` target "
"property is treated as optional and may \"decay\" to a previous standard "
"if the requested is not available."
msgstr ""
"如果此属性设置为 ``ON``，则 :prop_tgt:`HIP_STANDARD` 目标属性的值将被视为一项要求。如果此属性为 ``OFF`` "
"或未设置，则 HIP_STANDARD 目标属性将被视为可选属性，如果请求不可用，则可能会“衰减”到以前的标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/HIP_STANDARD_REQUIRED.rst:17
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_HIP_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_HIP_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:2
msgid "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM"
msgstr "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:4
msgid "Specify ``#include`` line transforms for dependencies in a target."
msgstr "为目标中的依赖项指定 ``#include`` 行转换。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:6
msgid ""
"This property specifies rules to transform macro-like ``#include`` lines "
"during implicit dependency scanning of C and C++ source files.  The list "
"of rules must be semicolon-separated with each entry of the form "
"``A_MACRO(%)=value-with-%`` (the ``%`` must be literal).  During "
"dependency scanning occurrences of ``A_MACRO(...)`` on ``#include`` lines "
"will be replaced by the value given with the macro argument substituted "
"for ``%``.  For example, the entry"
msgstr ""
"此属性指定在 C 和 C++ 源文件的隐式依赖扫描期间转换类似宏的 ``#include`` "
"行的规则。规则列表必须以分号分隔，每个条目的形式为“A_MACRO(%)=value-with-%”（“%”必须是文字）。在依赖扫描期间，在 "
"`#include`` 行上出现的 ``A_MACRO(...)`` 将被替换为用宏参数给出的值替换 ``%``。例如，条目"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:18
msgid "will convert lines of the form"
msgstr "将转换表格的行"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:24
msgid "to"
msgstr "到"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:30
msgid "allowing the dependency to be followed."
msgstr "允许遵循依赖关系。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPLICIT_DEPENDS_INCLUDE_TRANSFORM.rst:32
msgid "This property applies to sources in the target on which it is set."
msgstr "此属性适用于设置它的目标中的源。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED.rst:2
msgid "IMPORTED"
msgstr "进口"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED.rst:4
msgid "Read-only indication of whether a target is ``IMPORTED``."
msgstr "目标是否为“IMPORTED”的只读指示。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED.rst:6
msgid ""
"The boolean value of this property is ``True`` for targets created with "
"the ``IMPORTED`` option to :command:`add_executable` or "
":command:`add_library`. It is ``False`` for targets built within the "
"project."
msgstr ""
"对于使用 IMPORTED 选项创建的目标，此属性的布尔值为 True :command:`add_executable` 或 "
":command:`add_library`。对于在项目中构建的目标，它是“False”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME.rst:2
msgid "IMPORTED_COMMON_LANGUAGE_RUNTIME"
msgstr "IMPORTED_COMMON_LANGUAGE_RUNTIME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME.rst:6
msgid "Property to define if the target uses ``C++/CLI``."
msgstr "定义目标是否使用“C++/CLI”的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:10
msgid "Ignored for non-imported targets."
msgstr "忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_COMMON_LANGUAGE_RUNTIME.rst:10
msgid "See also the :prop_tgt:`COMMON_LANGUAGE_RUNTIME` target property."
msgstr "另请参阅 :prop_tgt:`COMMON_LANGUAGE_RUNTIME` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_CONFIGURATIONS.rst:2
msgid "IMPORTED_CONFIGURATIONS"
msgstr "导入配置"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_CONFIGURATIONS.rst:4
msgid "Configurations provided for an IMPORTED target."
msgstr "为 IMPORTED 目标提供的配置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_CONFIGURATIONS.rst:6
msgid ""
"Set this to the list of configuration names available for an IMPORTED "
"target.  The names correspond to configurations defined in the project "
"from which the target is imported.  If the importing project uses a "
"different set of configurations the names may be mapped using the "
"MAP_IMPORTED_CONFIG_<CONFIG> property.  Ignored for non-imported targets."
msgstr ""
"将其设置为可用于 IMPORTED 目标的配置名称列表。这些名称对应于从中导入目标的项目中定义的配置。如果导入项目使用一组不同的配置，则可以使用 "
"MAP_IMPORTED_CONFIG_<CONFIG> 属性映射名称。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:2
msgid "IMPORTED_GLOBAL"
msgstr "进口_全球"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:6
msgid ""
"Indication of whether an :ref:`IMPORTED target <Imported Targets>` is "
"globally visible."
msgstr "指示 :ref:`IMPORTED 目标 <Imported Targets>` 是否全局可见。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:9
msgid ""
"The boolean value of this property is True for targets created with the "
"``IMPORTED`` ``GLOBAL`` options to :command:`add_executable()` or "
":command:`add_library()`. It is always False for targets built within the "
"project."
msgstr ""
"对于使用 ``IMPORTED`` ``GLOBAL`` 选项创建的目标，此属性的布尔值是 True "
":command:`add_executable()` 或 :command:`add_library()`。对于在项目中构建的目标，它始终为 "
"False。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:14
msgid ""
"For targets created with the ``IMPORTED`` option to "
":command:`add_executable()` or :command:`add_library()` but without the "
"additional option ``GLOBAL`` this is False, too. However, setting this "
"property for such a locally ``IMPORTED`` target to True promotes that "
"target to global scope. This promotion can only be done in the same "
"directory where that ``IMPORTED`` target was created in the first place."
msgstr ""
"对于使用 ``IMPORTED`` 选项创建的目标:command:`add_executable()` 或 "
":command:`add_library()` 但没有附加选项 ``GLOBAL`` 这也是 "
"False。但是，将此类本地“IMPORTED”目标的此属性设置为 True "
"会将该目标提升到全局范围。此提升只能在最初创建“IMPORTED”目标的同一目录中进行。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:23
msgid ""
"Once an imported target has been made global, it cannot be changed back to"
" non-global. Therefore, if a project sets this property, it may only "
"provide a value of True. CMake will issue an error if the project tries to"
" set the property to a non-True value, even if the value was already "
"False."
msgstr ""
"一旦导入的目标变为全局目标，就不能再改回非全局目标。因此，如果一个项目设置了这个属性，它可能只提供一个 True 值。如果项目试图将属性设置为非 "
"True 值，即使该值已经是 False，CMake 也会发出错误。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_GLOBAL.rst:30
msgid ""
"Local :ref:`ALIAS targets <Alias Targets>` created before promoting an "
":ref:`IMPORTED target <Imported Targets>` from ``LOCAL`` to ``GLOBAL``, "
"keep their initial scope (see :prop_tgt:`ALIAS_GLOBAL` target property)."
msgstr ""
"在将 :ref:`IMPORTED 目标 <Imported Targets>` 从 ``LOCAL`` 提升到 ``GLOBAL`` "
"之前创建的本地 :ref:`ALIAS 目标 <Alias Targets>`，保持它们的初始范围（参见 :prop_tgt:` "
"ALIAS_GLOBAL` 目标属性）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB.rst:2
msgid "IMPORTED_IMPLIB"
msgstr "导入_IMPLIB"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB.rst:4
msgid "Full path to the import library for an ``IMPORTED`` target."
msgstr "``IMPORTED`` 目标的导入库的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB.rst:6
msgid ""
"Set this to the location of the ``.lib`` part of a Windows DLL, or on AIX "
"set it to an import file created for executables that export symbols (see "
"the :prop_tgt:`ENABLE_EXPORTS` target property). Ignored for non-imported "
"targets."
msgstr ""
"将其设置为 Windows DLL 的 ``.lib`` 部分的位置，或者在 AIX 上将其设置为为导出符号的可执行文件创建的导入文件（请参阅 "
":prop_tgt:`ENABLE_EXPORTS` 目标属性）。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB_CONFIG.rst:2
msgid "IMPORTED_IMPLIB_<CONFIG>"
msgstr "IMPORTED_IMPLIB_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB_CONFIG.rst:4
msgid "<CONFIG>-specific version of :prop_tgt:`IMPORTED_IMPLIB` property."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_IMPLIB` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_IMPLIB_CONFIG.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME_CONFIG.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION_CONFIG.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME_CONFIG.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS_CONFIG.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME_CONFIG.rst:6
msgid ""
"Configuration names correspond to those provided by the project from which"
" the target is imported."
msgstr "配置名称对应于从中导入目标的项目提供的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME.rst:2
msgid "IMPORTED_LIBNAME"
msgstr "IMPORTED_LIBNAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME.rst:6
msgid ""
"Specify the link library name for an :ref:`imported <Imported Targets>` "
":ref:`Interface Library <Interface Libraries>`."
msgstr ""
"为 :ref:`imported <Imported Targets>` :ref:`Interface Library <Interface "
"Libraries>` 指定链接库名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME.rst:9
msgid ""
"An interface library builds no library file itself but does specify usage "
"requirements for its consumers.  The ``IMPORTED_LIBNAME`` property may be "
"set to specify a single library name to be placed on the link line in "
"place of the interface library target name as a requirement for using the "
"interface."
msgstr ""
"接口库本身不构建库文件，但会为其使用者指定使用要求。 ``IMPORTED_LIBNAME`` "
"属性可以设置为指定单个库名称放置在链接行上，以代替接口库目标名称作为使用接口的要求。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME.rst:15
msgid ""
"This property is intended for use in naming libraries provided by a "
"platform SDK for which the full path to a library file may not be known.  "
"The value may be a plain library name such as ``foo`` but may *not* be a "
"path (e.g. ``/usr/lib/libfoo.so``) or a flag (e.g. ``-Wl,...``).  The name"
" is never treated as a library target name even if it happens to name one."
msgstr ""
"此属性旨在用于命名平台 SDK "
"提供的库，其中库文件的完整路径可能未知。该值可以是一个普通的库名称，例如``foo``，但可能*不是*是路径（例如``/usr/lib/libfoo.so``）或标志（例如``-Wl，.."
" .``）。该名称永远不会被视为库目标名称，即使它恰好命名了一个。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME.rst:22
msgid ""
"The ``IMPORTED_LIBNAME`` property is allowed only on :ref:`imported "
"<Imported Targets>` :ref:`Interface Libraries` and is rejected on targets "
"of other types (for which the :prop_tgt:`IMPORTED_LOCATION` target "
"property may be used)."
msgstr ""
"``IMPORTED_LIBNAME`` 属性仅在 :ref:`imported <Imported Targets>` "
":ref:`Interface Libraries` 上被允许，在其他类型的目标上被拒绝（为此 "
":prop_tgt:`IMPORTED_LOCATION` 目标属性可能是用过的）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME_CONFIG.rst:2
msgid "IMPORTED_LIBNAME_<CONFIG>"
msgstr "IMPORTED_LIBNAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LIBNAME_CONFIG.rst:6
msgid "<CONFIG>-specific version of :prop_tgt:`IMPORTED_LIBNAME` property."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LIBNAME` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.rst:2
msgid "IMPORTED_LINK_DEPENDENT_LIBRARIES"
msgstr "IMPORTED_LINK_DEPENDENT_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.rst:4
msgid "Dependent shared libraries of an imported shared library."
msgstr "导入的共享库的依赖共享库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES.rst:6
msgid ""
"Shared libraries may be linked to other shared libraries as part of their "
"implementation.  On some platforms the linker searches for the dependent "
"libraries of shared libraries they are including in the link.  Set this "
"property to the list of dependent shared libraries of an imported library."
"  The list should be disjoint from the list of interface libraries in the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property.  On platforms requiring "
"dependent shared libraries to be found at link time CMake uses this list "
"to add appropriate files or paths to the link command line.  Ignored for "
"non-imported targets."
msgstr ""
"作为实现的一部分，共享库可以链接到其他共享库。在某些平台上，链接器搜索它们包含在链接中的共享库的依赖库。将此属性设置为导入库的依赖共享库列表。该列表应该与"
" :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"属性中的接口库列表不相交。在需要在链接时找到依赖共享库的平台上，CMake 使用此列表将适当的文件或路径添加到链接命令行。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.rst:2
msgid "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>"
msgstr "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.rst:4
msgid ""
"<CONFIG>-specific version of "
":prop_tgt:`IMPORTED_LINK_DEPENDENT_LIBRARIES`."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LINK_DEPENDENT_LIBRARIES`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_DEPENDENT_LIBRARIES_CONFIG.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst:6
msgid ""
"Configuration names correspond to those provided by the project from which"
" the target is imported.  If set, this property completely overrides the "
"generic property for the named configuration."
msgstr "配置名称对应于从中导入目标的项目提供的名称。如果设置，此属性将完全覆盖命名配置的通用属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.rst:2
msgid "IMPORTED_LINK_INTERFACE_LANGUAGES"
msgstr "IMPORTED_LINK_INTERFACE_LANGUAGES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.rst:4
msgid "Languages compiled into an ``IMPORTED`` static library."
msgstr "编译成“IMPORTED”静态库的语言。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.rst:6
msgid ""
"Set this to the list of languages of source files compiled to produce a "
"``STATIC IMPORTED`` library (such as ``C`` or ``CXX``).  CMake accounts "
"for these languages when computing how to link a target to the imported "
"library.  For example, when a C executable links to an imported C++ static"
" library CMake chooses the C++ linker to satisfy language runtime "
"dependencies of the static library."
msgstr ""
"将其设置为编译生成“STATIC IMPORTED”库（例如“C”或“CXX”）的源文件的语言列表。 CMake "
"在计算如何将目标链接到导入的库时会考虑这些语言。例如，当 C 可执行文件链接到导入的 C++ 静态库时，CMake 选择 C++ "
"链接器来满足静态库的语言运行时依赖性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES.rst:13
msgid ""
"This property is ignored for targets that are not ``STATIC`` libraries. "
"This property is ignored for non-imported targets."
msgstr "对于不是 ``STATIC`` 库的目标，此属性将被忽略。对于非导入目标，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.rst:2
msgid "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>"
msgstr "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LANGUAGES_CONFIG.rst:4
msgid ""
"<CONFIG>-specific version of "
":prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LINK_INTERFACE_LANGUAGES`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst:2
msgid "IMPORTED_LINK_INTERFACE_LIBRARIES"
msgstr "IMPORTED_LINK_INTERFACE_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst:4
msgid "Transitive link interface of an ``IMPORTED`` target."
msgstr "``IMPORTED`` 目标的传递链接接口。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst:6
msgid ""
"Set this to the list of libraries whose interface is included when an "
"``IMPORTED`` library target is linked to another target.  The libraries "
"will be included on the link line for the target.  Unlike the "
":prop_tgt:`LINK_INTERFACE_LIBRARIES` property, this property applies to "
"all imported target types, including ``STATIC`` libraries.  This property "
"is ignored for non-imported targets."
msgstr ""
"当 ``IMPORTED`` "
"库目标链接到另一个目标时，将其设置为包含其接口的库列表。这些库将包含在目标的链接行中。与 :prop_tgt:`LINK_INTERFACE_LIBRARIES`"
" 属性不同，此属性适用于所有导入的目标类型，包括 ``STATIC`` 库。对于非导入目标，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst:10
msgid ""
"This property is ignored if the target also has a non-empty "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property."
msgstr "如果目标也有一个非空的 :prop_tgt:`INTERFACE_LINK_LIBRARIES` 属性，这个属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:24
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:13
msgid ""
"This property is deprecated.  Use :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"instead."
msgstr "此属性已弃用。请改用 :prop_tgt:`INTERFACE_LINK_LIBRARIES`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst:2
msgid "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>"
msgstr "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_LIBRARIES_CONFIG.rst:4
msgid ""
"<CONFIG>-specific version of "
":prop_tgt:`IMPORTED_LINK_INTERFACE_LIBRARIES`."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LINK_INTERFACE_LIBRARIES`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.rst:2
msgid "IMPORTED_LINK_INTERFACE_MULTIPLICITY"
msgstr "IMPORTED_LINK_INTERFACE_MULTIPLICITY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.rst:4
msgid "Repetition count for cycles of ``IMPORTED`` static libraries."
msgstr "``IMPORTED`` 静态库循环的重复计数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY.rst:6
msgid ""
"This is :prop_tgt:`LINK_INTERFACE_MULTIPLICITY` for ``IMPORTED`` targets."
msgstr "这是 :prop_tgt:`LINK_INTERFACE_MULTIPLICITY` 用于 ``IMPORTED`` 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:2
msgid "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>"
msgstr "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:4
msgid ""
"<CONFIG>-specific version of "
":prop_tgt:`IMPORTED_LINK_INTERFACE_MULTIPLICITY`."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LINK_INTERFACE_MULTIPLICITY`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:6
msgid ""
"If set, this property completely overrides the generic property for the "
"named configuration."
msgstr "如果设置，此属性将完全覆盖命名配置的通用属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:2
msgid "IMPORTED_LOCATION"
msgstr "导入_位置"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:4
msgid "Full path to the main file on disk for an ``IMPORTED`` target."
msgstr "``IMPORTED`` 目标磁盘上主文件的完整路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:6
msgid ""
"Set this to the location of an ``IMPORTED`` target file on disk.  For "
"executables this is the location of the executable file.  For ``STATIC`` "
"libraries and modules this is the location of the library or module. For "
"``SHARED`` libraries on non-DLL platforms this is the location of the "
"shared library.  For application bundles on macOS this is the location of "
"the executable file inside ``Contents/MacOS`` within the bundle folder. "
"For frameworks on macOS this is the location of the library file symlink "
"just inside the framework folder.  For DLLs this is the location of the "
"``.dll`` part of the library.  For ``UNKNOWN`` libraries this is the "
"location of the file to be linked.  Ignored for non-imported targets."
msgstr ""
"将其设置为磁盘上“IMPORTED”目标文件的位置。对于可执行文件，这是可执行文件的位置。对于 ``STATIC`` "
"库和模块，这是库或模块的位置。对于非 DLL 平台上的“共享”库，这是共享库的位置。对于 macOS "
"上的应用程序包，这是包文件夹内“Contents/MacOS”内的可执行文件的位置。对于 macOS "
"上的框架，这是框架文件夹中库文件符号链接的位置。对于 "
"DLL，这是库的“.dll”部分的位置。对于“未知”库，这是要链接的文件的位置。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:18
msgid ""
"The ``IMPORTED_LOCATION`` target property may be overridden for a given "
"configuration ``<CONFIG>`` by the configuration-specific "
":prop_tgt:`IMPORTED_LOCATION_<CONFIG>` target property.  Furthermore, the "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property may be used to "
"map between a project's configurations and those of an imported target.  "
"If none of these is set then the name of any other configuration listed in"
" the :prop_tgt:`IMPORTED_CONFIGURATIONS` target property may be selected "
"and its :prop_tgt:`IMPORTED_LOCATION_<CONFIG>` value used."
msgstr ""
"``IMPORTED_LOCATION`` 目标属性可能会被特定于配置的 ``<CONFIG>`` "
"目标属性覆盖。此外， :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` "
"目标属性可用于在项目配置和导入目标配置之间进行映射。如果这些都未设置，则可以选择 "
":prop_tgt:`IMPORTED_CONFIGURATIONS` 目标属性中列出的任何其他配置的名称，并使用其 "
":prop_tgt:`IMPORTED_LOCATION_<CONFIG>` 值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:27
msgid ""
"To get the location of an imported target read one of the "
":prop_tgt:`LOCATION` or ``LOCATION_<CONFIG>`` properties."
msgstr "要获取导入目标的位置，请读取 :prop_tgt:`LOCATION` 或 ``LOCATION_<CONFIG>`` 属性之一。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION.rst:30
msgid ""
"For platforms with import libraries (e.g. Windows) see also "
":prop_tgt:`IMPORTED_IMPLIB`."
msgstr "对于具有导入库的平台（例如 Windows），另请参阅 :prop_tgt:`IMPORTED_IMPLIB`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION_CONFIG.rst:2
msgid "IMPORTED_LOCATION_<CONFIG>"
msgstr "IMPORTED_LOCATION_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_LOCATION_CONFIG.rst:4
msgid "<CONFIG>-specific version of :prop_tgt:`IMPORTED_LOCATION` property."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_LOCATION` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME.rst:2
msgid "IMPORTED_NO_SONAME"
msgstr "IMPORTED_NO_SONAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME.rst:4
msgid ""
"Specifies that an ``IMPORTED`` shared library target has no ``soname``."
msgstr "指定 ``IMPORTED`` 共享库目标没有 ``soname``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME.rst:6
msgid ""
"Set this property to true for an imported shared library file that has no "
"``soname`` field.  CMake may adjust generated link commands for some "
"platforms to prevent the linker from using the path to the library in "
"place of its missing ``soname``.  Ignored for non-imported targets."
msgstr ""
"对于没有 ``soname`` 字段的导入共享库文件，将此属性设置为 true。 CMake "
"可能会为某些平台调整生成的链接命令，以防止链接器使用库的路径代替其缺少的 ``soname``。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME_CONFIG.rst:2
msgid "IMPORTED_NO_SONAME_<CONFIG>"
msgstr "IMPORTED_NO_SONAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SONAME_CONFIG.rst:4
msgid ""
"<CONFIG>-specific version of :prop_tgt:`IMPORTED_NO_SONAME` property."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_NO_SONAME` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:2
msgid "IMPORTED_NO_SYSTEM"
msgstr "IMPORTED_NO_SYSTEM"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:8
msgid ""
"``IMPORTED_NO_SYSTEM`` is deprecated. Please use the following "
"alternatives instead:"
msgstr "``IMPORTED_NO_SYSTEM`` 已弃用。请改用以下替代方法："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:11
msgid ""
"Set :prop_tgt:`SYSTEM` to false if you don't want a target's include "
"directories to be treated as system directories when compiling consumers."
msgstr "如果您不希望目标的包含目录在编译消费者时被视为系统目录，请将 :prop_tgt:`SYSTEM` 设置为 false。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:13
msgid ""
"Set :prop_tgt:`EXPORT_NO_SYSTEM` to true if you don't want the include "
"directories of the imported target generated by :command:`install(EXPORT)`"
" and :command:`export` commands to be treated as system directories when "
"compiling consumers."
msgstr ""
"如果您不希望在编译消费者时将 :command:`install(EXPORT)` 和 :command:`export` "
"命令生成的导入目标的包含目录视为系统目录，请将 :prop_tgt:`EXPORT_NO_SYSTEM` 设置为 true ."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:18
msgid ""
"Setting ``IMPORTED_NO_SYSTEM`` to true on an :ref:`imported target "
"<Imported Targets>` specifies that it is not a system target.  This has "
"the following effects:"
msgstr ""
"在 :ref:`导入目标 <Imported Targets> 上将 ``IMPORTED_NO_SYSTEM`` 设置为 true "
"指定它不是系统目标。这具有以下效果："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:22
msgid ""
"Entries of :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` are not treated as "
"system include directories when compiling consumers (regardless of the "
"value of the consumed target's :prop_tgt:`SYSTEM` property), as they would"
" be by default.   Entries of "
":prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` are not affected, and "
"will always be treated as system include directories."
msgstr ""
"INTERFACE_INCLUDE_DIRECTORIES 的条目在编译消费者时不会被视为系统包含目录（无论消费目标的 "
":prop_tgt:`SYSTEM` 属性的值如何），因为它们在默认情况下是这样的。 "
":prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` 的条目不受影响，并且将始终被视为系统包含目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_NO_SYSTEM.rst:29
msgid ""
"This property can also be enabled on a non-imported target.  Doing so does"
" not affect the build system, but does tell the :command:`install(EXPORT)`"
" and :command:`export` commands to enable it on the imported targets they "
"generate."
msgstr ""
"也可以在非导入目标上启用此属性。这样做不会影响构建系统，但会告诉 :command:`install(EXPORT)` "
"和 :command:`export` 命令在它们生成的导入目标上启用它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:2
msgid "IMPORTED_OBJECTS"
msgstr "导入对象"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:6
msgid ""
"A :ref:`semicolon-separated list <CMake Language Lists>` of absolute paths"
" to the object files on disk for an :ref:`imported <Imported targets>` "
":ref:`object library <object libraries>`."
msgstr ""
":ref:`imported <Imported targets>` :ref:`object library <object "
"libraries>` 的磁盘上对象文件的绝对路径的分号分隔列表 <CMake Language Lists>。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:12
msgid ""
"Projects may skip ``IMPORTED_OBJECTS`` if the configuration-specific "
"property :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>` is set instead, except in "
"situations as noted in the section below."
msgstr ""
"如果设置了特定于配置的属性 :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>`，项目可能会跳过 "
"``IMPORTED_OBJECTS``，除非在以下部分中提到的情况。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS_CONFIG.rst:13
msgid "Xcode Generator Considerations"
msgstr "Xcode 生成器注意事项"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:22
msgid ""
"For Apple platforms, a project may be built for more than one "
"architecture. This is controlled by the "
":variable:`CMAKE_OSX_ARCHITECTURES` variable. For all but the "
":generator:`Xcode` generator, CMake invokes compilers once per source file"
" and passes multiple ``-arch`` flags, leading to a single object file "
"which will be a universal binary.  Such object files work well when listed"
" in the ``IMPORTED_OBJECTS`` of a separate CMake build, even for the "
":generator:`Xcode` generator.  But producing such object files with the "
":generator:`Xcode` generator is more difficult, since it invokes the "
"compiler once per architecture for each source file.  Unlike the other "
"generators, it does not generate universal object file binaries."
msgstr ""
"对于 Apple 平台，一个项目可能会针对多个架构构建。这是由 :variable:`CMAKE_OSX_ARCHITECTURES` "
"变量控制的。除了 :generator:`Xcode` 生成器之外，CMake 为每个源文件调用一次编译器并传递多个 ``-arch`` "
"标志，导致一个单一的目标文件，这将是一个通用的二进制文件。当在单独的 CMake 构建的 ``IMPORTED_OBJECTS`` "
"中列出时，此类目标文件可以很好地工作，即使对于 :generator:`Xcode` 生成器也是如此。但是使用 Xcode "
"生成器生成这样的目标文件更加困难，因为它为每个源文件的每个体系结构调用一次编译器。与其他生成器不同，它不生成通用目标文件二进制文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:33
msgid ""
"A further complication with the :generator:`Xcode` generator is that when "
"targeting device platforms (iOS, tvOS or watchOS), the :generator:`Xcode` "
"generator has the ability to use either the device or simulator SDK "
"without needing CMake to be re-run.  The SDK can be selected at build "
"time. But since some architectures can be supported by both the device and"
" the simulator SDKs (e.g. ``arm64`` with Xcode 12 or later), not all "
"combinations can be represented in a single universal binary.  The only "
"solution in this case is to have multiple object files."
msgstr ""
":generator:`Xcode` 生成器的另一个复杂之处在于，当针对设备平台（iOS、tvOS 或 "
"watchOS）时， :generator:`Xcode` 生成器能够使用设备或模拟器 SDK，而无需 CMake重新运行。可以在构建时选择 "
"SDK。但是由于设备和模拟器 SDK 都可以支持某些架构（例如 Xcode 12 "
"或更高版本的“arm64”），因此并非所有组合都可以用一个通用二进制文件表示。在这种情况下唯一的解决方案是拥有多个目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:42
msgid ""
"``IMPORTED_OBJECTS`` doesn't support generator expressions, so every file "
"it lists needs to be valid for every architecture and SDK.  If "
"incorporating object files that are not universal binaries, the path "
"and/or file name of each object file has to somehow encapsulate the "
"different architectures and SDKs.  With the :generator:`Xcode` generator, "
"Xcode variables of the form ``$(...)`` can be used to represent these "
"aspects and Xcode will substitute the appropriate values at build time.  "
"CMake doesn't interpret these variables and embeds them unchanged in the "
"Xcode project file. ``$(CURRENT_ARCH)`` can be used to represent the "
"architecture, while ``$(EFFECTIVE_PLATFORM_NAME)`` can be used to "
"differentiate between SDKs."
msgstr ""
"``IMPORTED_OBJECTS`` 不支持生成器表达式，因此它列出的每个文件都需要对每个架构和 SDK "
"有效。如果包含不是通用二进制文件的目标文件，则每个目标文件的路径和/或文件名必须以某种方式封装不同的体系结构和 SDK。使用 "
":generator:`Xcode` 生成器，形式为 ``$(...)`` 的 Xcode 变量可用于表示这些方面，Xcode "
"将在构建时替换适当的值。 CMake 不解释这些变量并将它们原封不动地嵌入到 Xcode 项目文件中。 ``$(CURRENT_ARCH)`` "
"可用于表示架构，而 ``$(EFFECTIVE_PLATFORM_NAME)`` 可用于区分 SDK。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:53
msgid ""
"The following shows one example of how these two variables can be used to "
"refer to an object file whose location depends on both the SDK and the "
"architecture:"
msgstr "下面显示了一个示例，说明如何使用这两个变量来引用其位置取决于 SDK 和体系结构的目标文件："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:70
msgid ""
"In some cases, you may want to have configuration-specific object files as"
" well.  The ``$(CONFIGURATION)`` Xcode variable is often used for this and"
" can be used in conjunction with the others mentioned above:"
msgstr ""
"在某些情况下，您可能还希望拥有特定于配置的目​​标文件。 ``$(CONFIGURATION)`` Xcode "
"变量通常用于此，并且可以与上面提到的其他变量结合使用："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS.rst:85
msgid ""
"When any Xcode variable is used, CMake is not able to fully evaluate the "
"path(s) at configure time.  One consequence of this is that the "
"configuration-specific :prop_tgt:`IMPORTED_OBJECTS_<CONFIG>` properties "
"cannot be used, since CMake cannot determine whether an object file exists"
" at a particular ``<CONFIG>`` location.  The ``IMPORTED_OBJECTS`` property"
" must be used for these situations and the configuration-specific aspects "
"of the path should be handled by the ``$(CONFIGURATION)`` Xcode variable."
msgstr ""
"当使用任何 Xcode 变量时，CMake 无法在配置时完全评估路径。这样做的一个后果是无法使用特定于配置的 "
"IMPORTED_OBJECTS_<CONFIG> 属性，因为 CMake 无法确定目标文件是否存在于特定的 ``<CONFIG>`` 位置。 "
"``IMPORTED_OBJECTS`` 属性必须用于这些情况，路径的配置特定方面应由 ``$(CONFIGURATION)`` Xcode "
"变量处理。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS_CONFIG.rst:2
msgid "IMPORTED_OBJECTS_<CONFIG>"
msgstr "IMPORTED_OBJECTS_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS_CONFIG.rst:6
msgid ""
"``<CONFIG>``-specific version of :prop_tgt:`IMPORTED_OBJECTS` property."
msgstr "``<CONFIG>``特定版本的 :prop_tgt:`IMPORTED_OBJECTS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_OBJECTS_CONFIG.rst:15
msgid ""
"Do not use this ``<CONFIG>``-specific property if you need to use Xcode "
"variables like ``$(CURRENT_ARCH)`` or ``$(EFFECTIVE_PLATFORM_NAME)`` in "
"the value.  The ``<CONFIG>``-specific properties will be ignored in such "
"cases because CMake cannot determine whether a file exists at the "
"configuration-specific path at configuration time.  For such cases, use "
":prop_tgt:`IMPORTED_OBJECTS` instead."
msgstr ""
"如果您需要在值中使用诸如“$(CURRENT_ARCH)”或“$(EFFECTIVE_PLATFORM_NAME)”之类的 Xcode "
"变量，请不要使用此“<CONFIG>”特定属性。在这种情况下，``<CONFIG>`` 特定的属性将被忽略，因为 CMake "
"在配置时无法确定文件是否存在于特定于配置的路径中。对于这种情况，请改用 :prop_tgt:`IMPORTED_OBJECTS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME.rst:2
msgid "IMPORTED_SONAME"
msgstr "IMPORTED_SONAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME.rst:4
msgid "The ``soname`` of an ``IMPORTED`` target of shared library type."
msgstr "共享库类型的 ``IMPORTED`` 目标的 ``soname``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME.rst:6
msgid ""
"Set this to the ``soname`` embedded in an imported shared library.  This "
"is meaningful only on platforms supporting the feature.  Ignored for non-"
"imported targets."
msgstr "将其设置为嵌入在导入的共享库中的 ``soname``。这仅在支持该功能的平台上有意义。忽略非导入目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME_CONFIG.rst:2
msgid "IMPORTED_SONAME_<CONFIG>"
msgstr "IMPORTED_SONAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORTED_SONAME_CONFIG.rst:4
msgid "<CONFIG>-specific version of :prop_tgt:`IMPORTED_SONAME` property."
msgstr "<CONFIG>-特定版本的 :prop_tgt:`IMPORTED_SONAME` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_PREFIX.rst:2
msgid "IMPORT_PREFIX"
msgstr "导入前缀"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_PREFIX.rst:4
msgid "What comes before the import library name."
msgstr "导入库名称之前的内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_PREFIX.rst:6
msgid ""
"Similar to the target property :prop_tgt:`PREFIX`, but used for import "
"libraries (typically corresponding to a ``DLL``) instead of regular "
"libraries.  A target property that can be set to override the prefix (such"
" as ``lib``) on an import library name."
msgstr ""
"类似于目标属性 :prop_tgt:`PREFIX`，但用于导入库（通常对应于 ``DLL``）而不是常规库。可以设置为覆盖导入库名称上的前缀（例如"
" ``lib``）的目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_SUFFIX.rst:2
msgid "IMPORT_SUFFIX"
msgstr "IMPORT_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_SUFFIX.rst:4
msgid "What comes after the import library name."
msgstr "导入库名称后面的内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IMPORT_SUFFIX.rst:6
msgid ""
"Similar to the target property :prop_tgt:`SUFFIX`, but used for import "
"libraries (typically corresponding to a ``DLL``) instead of regular "
"libraries.  A target property that can be set to override the suffix (such"
" as ``.lib``) on an import library name."
msgstr ""
"类似于目标属性 :prop_tgt:`SUFFIX`，但用于导入库（通常对应于 "
"``DLL``）而不是常规库。可以设置为覆盖导入库名称上的后缀（例如“.lib”）的目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:2
msgid "INCLUDE_DIRECTORIES"
msgstr "INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:4
msgid "List of preprocessor include file search directories."
msgstr "预处理器列表包括文件搜索目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:6
msgid ""
"This property specifies the list of directories given so far to the "
":command:`target_include_directories` command.  In addition to accepting "
"values from that command, values may be set directly on any target using "
"the :command:`set_property` command.  A target gets its initial value for "
"this property from the value of the :prop_dir:`INCLUDE_DIRECTORIES` "
"directory property.  Both directory and target property values are "
"adjusted by calls to the :command:`include_directories` command."
msgstr ""
"此属性指定到目前为止提供给 :command:`target_include_directories` "
"命令的目录列表。除了接受来自该命令的值外，还可以使用 :command:`set_property` 命令直接在任何目标上设置值。目标从 "
":prop_dir:`INCLUDE_DIRECTORIES` 目录属性的值获取此属性的初始值。目录和目标属性值都通过调用 "
":command:`include_directories` 命令进行调整。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:15
msgid ""
"The value of this property is used by the generators to set the include "
"paths for the compiler."
msgstr "生成器使用此属性的值来设置编译器的包含路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:18
msgid ""
"Relative paths should not be added to this property directly. Use one of "
"the commands above instead to handle relative paths."
msgstr "不应将相对路径直接添加到此属性。使用上面的命令之一来处理相对路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INCLUDE_DIRECTORIES.rst:21
msgid ""
"Contents of ``INCLUDE_DIRECTORIES`` may use :manual:`cmake-generator-"
"expressions(7)` with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions.  See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``INCLUDE_DIRECTORIES`` 的内容可以使用 :manual:`cmake-generator-expressions(7)` "
"和语法 ``$<...>``。请参阅 :manual:`cmake-generator-expressions(7)` "
"手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:2
msgid "INSTALL_NAME_DIR"
msgstr "安装_名称_目录"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:4
msgid "Directory name for installed targets on Apple platforms."
msgstr "Apple 平台上已安装目标的目录名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:6
msgid ""
"``INSTALL_NAME_DIR`` is a string specifying the directory portion of the "
"\"install_name\" field of shared libraries on Apple platforms for "
"installed targets.  When not set, the default directory used is determined"
" by :prop_tgt:`MACOSX_RPATH`.  If the "
":prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` property is set, this will be used"
" already in the build tree. Policies :policy:`CMP0068` and "
":policy:`CMP0042` are also relevant."
msgstr ""
"``INSTALL_NAME_DIR`` 是一个字符串，用于指定 Apple "
"平台上已安装目标的共享库的“install_name”字段的目录部分。未设置时，使用的默认目录由 :prop_tgt:`MACOSX_RPATH` "
"确定。如果设置了 :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` "
"属性，它将在构建树中使用。策略 :policy:`CMP0068` 和 :policy:`CMP0042` 也相关。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:13
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_INSTALL_NAME_DIR` if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 :variable:`CMAKE_INSTALL_NAME_DIR` 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:17
msgid ""
"This property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`. In particular, the :genex:`$<INSTALL_PREFIX>` generator "
"expression can be used to set the directory relative to the install-time "
"prefix."
msgstr ""
"此属性支持 :manual:`generator expressions <cmake-generator-"
"expressions(7)>`。特别是， :genex:`$<INSTALL_PREFIX>` 生成器表达式可用于设置相对于安装时前缀的目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_NAME_DIR.rst:21
msgid ""
"On platforms that support runtime paths (``RPATH``), refer to the "
":prop_tgt:`INSTALL_RPATH` target property. Under Windows, the "
":genex:`TARGET_RUNTIME_DLLS` generator expression is related."
msgstr ""
"在支持运行时路径 (``RPATH``) 的平台上，请参考 :prop_tgt:`INSTALL_RPATH` 目标属性。在 Windows "
"下， :genex:`TARGET_RUNTIME_DLLS` 生成器表达式是相关的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:2
msgid "INSTALL_REMOVE_ENVIRONMENT_RPATH"
msgstr "INSTALL_REMOVE_ENVIRONMENT_RPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:6
msgid ""
"Controls whether toolchain-defined rpaths should be removed during "
"installation."
msgstr "控制是否应在安装期间删除工具链定义的 rpaths。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:8
msgid ""
"When a target is being installed, CMake may need to rewrite its rpath "
"information.  This occurs when the install rpath (as specified by the "
":prop_tgt:`INSTALL_RPATH` target property) has different contents to the "
"rpath that the target was built with.  Some toolchains insert their own "
"rpath contents into the binary as part of the build.  By default, CMake "
"will preserve those extra inserted contents in the install rpath.  For "
"those scenarios where such toolchain-inserted entries need to be discarded"
" during install, set the ``INSTALL_REMOVE_ENVIRONMENT_RPATH`` target "
"property to true."
msgstr ""
"安装目标时，CMake 可能需要重写其 rpath 信息。当安装 rpath（由 :prop_tgt:`INSTALL_RPATH` "
"目标属性指定）与构建目标的 rpath 具有不同的内容时，会发生这种情况。一些工具链将自己的 rpath "
"内容作为构建的一部分插入到二进制文件中。默认情况下，CMake 将在安装 rpath "
"中保留那些额外插入的内容。对于在安装过程中需要丢弃此类工具链插入条目的情况，请将“INSTALL_REMOVE_ENVIRONMENT_RPATH”目标属性设置为"
" true。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_REMOVE_ENVIRONMENT_RPATH.rst:17
msgid ""
"This property is initialized by the value of "
":variable:`CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH` when the target is "
"created."
msgstr "创建目标时，此属性由 CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:2
msgid "INSTALL_RPATH"
msgstr "安装路径"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:4
msgid "The rpath to use for installed targets."
msgstr "用于已安装目标的 rpath。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:6
msgid ""
"By default, the install rpath is empty. It can be set using this property,"
" which is a semicolon-separated list specifying the rpath to use in "
"installed targets (for platforms that support it).  This property is "
"initialized by the value of the variable :variable:`CMAKE_INSTALL_RPATH` "
"if it is set when a target is created. Beside setting the install rpath "
"manually, using the :prop_tgt:`INSTALL_RPATH_USE_LINK_PATH` target "
"property it can also be generated automatically by CMake."
msgstr ""
"默认情况下，安装 rpath 为空。它可以使用此属性进行设置，该属性是一个以分号分隔的列表，指定要在已安装目标中使用的 "
"rpath（对于支持它的平台）。如果在创建目标时设置了此属性，则该属性由变量 CMAKE_INSTALL_RPATH "
"的值初始化。除了手动设置安装路径，使用 :prop_tgt:`INSTALL_RPATH_USE_LINK_PATH` 目标属性，它也可以由 "
"CMake 自动生成。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:15
msgid ""
"Normally CMake uses the build tree for the RPATH when building executables"
" etc on systems that use RPATH, see the :prop_tgt:`BUILD_RPATH` target "
"property. When the software is installed the targets are edited (or "
"relinked) by CMake (see :variable:`CMAKE_NO_BUILTIN_CHRPATH`) to have the "
"install RPATH. This editing during installation can be avoided via the "
":prop_tgt:`BUILD_WITH_INSTALL_RPATH` target property."
msgstr ""
"通常 CMake 在使用 RPATH 的系统上构建可执行文件等时使用 RPATH 的构建树，请参阅 :prop_tgt:`BUILD_RPATH` "
"目标属性。安装软件后，CMake 会编辑（或重新链接）目标（请参阅 :variable:`CMAKE_NO_BUILTIN_CHRPATH`）以安装 "
"RPATH。安装期间的这种编辑可以通过 :prop_tgt:`BUILD_WITH_INSTALL_RPATH` 目标属性来避免。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:23
msgid ""
"For handling toolchain-dependent RPATH entries the "
":prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` can be used. Runtime paths "
"can be disabled completely via the :variable:`CMAKE_SKIP_RPATH` variable."
msgstr ""
"为了处理依赖于工具链的 RPATH 条目，可以使用 "
":prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH`。可以通过 CMAKE_SKIP_RPATH "
"变量完全禁用运行时路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:28
msgid ""
"Because the rpath may contain ``${ORIGIN}``, which coincides with CMake "
"syntax, the contents of ``INSTALL_RPATH`` are properly escaped in the "
"``cmake_install.cmake`` script (see policy :policy:`CMP0095`.)"
msgstr ""
"因为 rpath 可能包含 ``${ORIGIN}``，这与 CMake 语法一致，``INSTALL_RPATH`` 的内容在 "
"``cmake_install.cmake`` 脚本中被正确转义（参见策略:policy:`CMP0095` .)"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH.rst:35
msgid ""
"On Apple platforms, refer to the :prop_tgt:`INSTALL_NAME_DIR` target "
"property. Under Windows, the :genex:`TARGET_RUNTIME_DLLS` generator "
"expression is related."
msgstr ""
"在 Apple 平台上，请参考 :prop_tgt:`INSTALL_NAME_DIR` 目标属性。在 Windows "
"下， :genex:`TARGET_RUNTIME_DLLS` 生成器表达式是相关的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.rst:2
msgid "INSTALL_RPATH_USE_LINK_PATH"
msgstr "INSTALL_RPATH_USE_LINK_PATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.rst:4
msgid "Add paths to linker search and installed rpath."
msgstr "将路径添加到链接器搜索和已安装的 rpath。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.rst:6
msgid ""
"``INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``TRUE`` will "
"append to the runtime search path (rpath) of installed binaries any "
"directories outside the project that are in the linker search path or "
"contain linked library files.  The directories are appended after the "
"value of the :prop_tgt:`INSTALL_RPATH` target property."
msgstr ""
"``INSTALL_RPATH_USE_LINK_PATH`` 是一个布尔值，如果设置为 ``TRUE`` 将附加到已安装二进制文件的运行时搜索路径"
" (rpath) 中的链接器搜索路径中或包含链接库文件的项目之外的任何目录。这些目录附加在 :prop_tgt:`INSTALL_RPATH` "
"目标属性的值之后。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INSTALL_RPATH_USE_LINK_PATH.rst:12
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_INSTALL_RPATH_USE_LINK_PATH` if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_INSTALL_RPATH_USE_LINK_PATH 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.rst:2
msgid "INTERFACE_AUTOUIC_OPTIONS"
msgstr "INTERFACE_AUTOUIC_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.rst:4
msgid "List of interface options to pass to uic."
msgstr "传递给 uic 的接口选项列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.rst:6
msgid ""
"Targets may populate this property to publish the options required to use "
"when invoking ``uic``.  Consuming targets can add entries to their own "
":prop_tgt:`AUTOUIC_OPTIONS` property such as "
"``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` to use the uic "
"options specified in the interface of ``foo``. This is done automatically "
"by the :command:`target_link_libraries` command."
msgstr ""
"目标可以填充此属性以发布调用 uic 时需要使用的选项。使用目标可以将条目添加到它们自己的 :prop_tgt:`AUTOUIC_OPTIONS` "
"属性中，例如``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` 以使用在``foo`` "
"的接口中指定的uic 选项。这是由 :command:`target_link_libraries` 命令自动完成的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_AUTOUIC_OPTIONS.rst:13
msgid ""
"This property supports generator expressions.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions."
msgstr ""
"此属性支持生成器表达式。请参阅 :manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_COMPILE_DEFINITIONS.rst:2
msgid "INTERFACE_COMPILE_DEFINITIONS"
msgstr "INTERFACE_COMPILE_DEFINITIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_BUILD_PROPERTY.txt:2
msgid "List of public |property_name| requirements for a library."
msgstr "公共列表 |property_name|对图书馆的要求。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_BUILD_PROPERTY.txt:4
msgid ""
"Targets may populate this property to publish the |property_name| required"
" to compile against the headers for the target.  The |command_name| "
"command populates this property with values given to the ``PUBLIC`` and "
"``INTERFACE`` keywords.  Projects may also get and set the property "
"directly."
msgstr ""
"目标可以填充此属性以发布 |property_name|需要针对目标的标头进行编译。 |命令名称|命令使用赋予 ``PUBLIC`` 和 "
"``INTERFACE`` 关键字的值填充此属性。项目也可以直接获取和设置属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_BUILD_PROPERTY.txt:9
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:13
msgid ""
"When target dependencies are specified using "
":command:`target_link_libraries`, CMake will read this property from all "
"target dependencies to determine the build properties of the consumer."
msgstr ""
"当使用 target_link_libraries 指定目标依赖项时，CMake 将从所有目标依赖项中读取此属性以确定消费者的构建属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_BUILD_PROPERTY.txt:13
msgid ""
"Contents of |PROPERTY_INTERFACE_NAME| may use \"generator expressions\" "
"with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions.  See the :manual:`cmake-"
"buildsystem(7)` -manual for more on defining buildsystem properties."
msgstr ""
"|PROPERTY_INTERFACE_NAME| 的内容可以使用语法为“$<...>”的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` -manual。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_COMPILE_FEATURES.rst:2
msgid "INTERFACE_COMPILE_FEATURES"
msgstr "INTERFACE_COMPILE_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_COMPILE_OPTIONS.rst:2
msgid "INTERFACE_COMPILE_OPTIONS"
msgstr "INTERFACE_COMPILE_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_HEADER_UNIT_SETS.rst:2
msgid "INTERFACE_CXX_MODULE_HEADER_UNIT_SETS"
msgstr "INTERFACE_CXX_MODULE_HEADER_UNIT_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_HEADER_UNIT_SETS.rst:10
msgid ""
"Read-only list of the target's ``PUBLIC`` C++ module header sets (i.e. all"
" file sets with the type ``CXX_MODULE_HEADER_UNITS``). Files listed in "
"these C++ module header sets can be installed with "
":command:`install(TARGETS)` and exported with :command:`install(EXPORT)` "
"and :command:`export`."
msgstr ""
"目标的``PUBLIC`` C++ 模块头集的只读列表（即所有类型为``CXX_MODULE_HEADER_UNITS`` 的文件集）。这些 C++"
" 模块标头集中列出的文件可以使用 :command:`install(TARGETS)` "
"安装并使用 :command:`install(EXPORT)` 和 :command:`export` 导出。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_HEADER_UNIT_SETS.rst:18
msgid "See also :prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS`."
msgstr "另见:prop_tgt:`CXX_MODULE_HEADER_UNIT_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_SETS.rst:2
msgid "INTERFACE_CXX_MODULE_SETS"
msgstr "INTERFACE_CXX_MODULE_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_SETS.rst:10
msgid ""
"Read-only list of the target's ``PUBLIC`` C++ module sets (i.e. all file "
"sets with the type ``CXX_MODULES``). Files listed in these C++ module sets"
" can be installed with :command:`install(TARGETS)` and exported with "
":command:`install(EXPORT)` and :command:`export`."
msgstr ""
"目标的 ``PUBLIC`` C++ 模块集的只读列表（即所有类型为 ``CXX_MODULES`` 的文件集）。这些 C++ "
"模块集中列出的文件可以使用 :command:`install(TARGETS)` 安装并使用 :command:`install(EXPORT)` "
"和 :command:`export` 导出。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_CXX_MODULE_SETS.rst:18
msgid "See also :prop_tgt:`CXX_MODULE_SETS`."
msgstr "另见 :prop_tgt:`CXX_MODULE_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS.rst:2
msgid "INTERFACE_HEADER_SETS"
msgstr "INTERFACE_HEADER_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS.rst:6
msgid ""
"Read-only list of the target's ``INTERFACE`` and ``PUBLIC`` header sets "
"(i.e. all file sets with the type ``HEADERS``). Files listed in these "
"header sets can be installed with :command:`install(TARGETS)` and exported"
" with :command:`install(EXPORT)` and :command:`export`."
msgstr ""
"目标的“INTERFACE”和“PUBLIC”标头集的只读列表（即所有类型为“HEADERS”的文件集）。这些标头集中列出的文件可以使用 :command:`install(TARGETS)`"
" 安装并使用 :command:`install(EXPORT)` 和 :command:`export` 导出。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS.rst:14
msgid "See also :prop_tgt:`HEADER_SETS`."
msgstr "另见 :prop_tgt:`HEADER_SETS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS_TO_VERIFY.rst:2
msgid "INTERFACE_HEADER_SETS_TO_VERIFY"
msgstr "INTERFACE_HEADER_SETS_TO_VERIFY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS_TO_VERIFY.rst:6
msgid ""
"Used to specify which ``PUBLIC`` and ``INTERFACE`` header sets of a target"
" should be verified."
msgstr "用于指定应验证目标的哪些“PUBLIC”和“INTERFACE”标头集。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_HEADER_SETS_TO_VERIFY.rst:9
msgid ""
"This property contains a semicolon-separated list of header sets which "
"should be verified if :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` is set to "
"``TRUE``. If the list is empty, all ``PUBLIC`` and ``INTERFACE`` header "
"sets are verified. (If the project does not want to verify any header sets"
" on the target, simply set :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` to "
"``FALSE``.)"
msgstr ""
"此属性包含一个以分号分隔的标头集列表，如果 :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` 设置为 "
"``TRUE``，则应对其进行验证。如果列表为空，则验证所有 ``PUBLIC`` 和 ``INTERFACE`` 标头集。 "
"（如果项目不想验证目标上的任何标头集，只需将 :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` 设置为 "
"``FALSE``。）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.rst:2
msgid "INTERFACE_INCLUDE_DIRECTORIES"
msgstr "INTERFACE_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.rst:10
msgid ""
"Include directories usage requirements commonly differ between the build-"
"tree and the install-tree.  The ``BUILD_INTERFACE`` and "
"``INSTALL_INTERFACE`` generator expressions can be used to describe "
"separate usage requirements based on the usage location.  Relative paths "
"are allowed within the ``INSTALL_INTERFACE`` expression and are "
"interpreted relative to the installation prefix.  For example:"
msgstr ""
"包含目录的使用要求通常在构建树和安装树之间有所不同。 ``BUILD_INTERFACE`` 和 ``INSTALL_INTERFACE`` "
"生成器表达式可用于根据使用位置描述单独的使用要求。 ``INSTALL_INTERFACE`` "
"表达式中允许使用相对路径，并相对于安装前缀进行解释。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_INCLUDE_DIRECTORIES.rst:25
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:36
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:28
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:17
msgid "Creating Relocatable Packages"
msgstr "创建可重定位包"

#: ../../cmake-prefix/src/cmake/Help/include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt:2
msgid ""
"Note that it is not advisable to populate the :genex:`INSTALL_INTERFACE` "
"of the |INTERFACE_PROPERTY_LINK| of a target with absolute paths to the "
"include directories of dependencies.  That would hard-code into installed "
"packages the include directory paths for dependencies **as found on the "
"machine the package was made on**."
msgstr ""
"请注意，不建议填充 |INTERFACE_PROPERTY_LINK| 的 "
":genex:`INSTALL_INTERFACE`具有到依赖项包含目录的绝对路径的目标。这会将硬编码到已安装的包中，包括依赖项的目录路径**在创建包的机器上**。"

#: ../../cmake-prefix/src/cmake/Help/include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt:8
msgid ""
"The :genex:`INSTALL_INTERFACE` of the |INTERFACE_PROPERTY_LINK| is only "
"suitable for specifying the required include directories for headers "
"provided with the target itself, not those provided by the transitive "
"dependencies listed in its :prop_tgt:`INTERFACE_LINK_LIBRARIES` target "
"property.  Those dependencies should themselves be targets that specify "
"their own header locations in |INTERFACE_PROPERTY_LINK|."
msgstr ""
"|INTERFACE_PROPERTY_LINK| 的 "
":genex:`INSTALL_INTERFACE`仅适用于为目标本身提供的标头指定所需的包含目录，而不适用于其 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` 目标属性中列出的传递依赖项提供的目录。这些依赖项本身应该是在 "
"|INTERFACE_PROPERTY_LINK| 中指定自己的标头位置的目标。"

#: ../../cmake-prefix/src/cmake/Help/include/INTERFACE_INCLUDE_DIRECTORIES_WARNING.txt:15
#: ../../cmake-prefix/src/cmake/Help/include/INTERFACE_LINK_LIBRARIES_WARNING.txt:7
msgid ""
"See the :ref:`Creating Relocatable Packages` section of the "
":manual:`cmake-packages(7)` manual for discussion of additional care that "
"must be taken when specifying usage requirements while creating packages "
"for redistribution."
msgstr ""
"请参阅 :ref:`cmake-packages(7)` 手册的 :ref:`Creating Relocatable Packages` "
"部分，讨论在创建用于重新分发的包时指定使用要求时必须注意的额外注意事项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:2
msgid "INTERFACE_LINK_DEPENDS"
msgstr "INTERFACE_LINK_DEPENDS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:6
msgid ""
"Additional public interface files on which a target binary depends for "
"linking."
msgstr "目标二进制文件链接所依赖的其他公共接口文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:8
msgid ""
"This property is supported only by :generator:`Ninja` and :ref:`Makefile "
"Generators`. It is intended to specify dependencies on \"linker scripts\" "
"for custom Makefile link rules."
msgstr ""
"只有 :generator:`Ninja` 和 :ref:`Makefile Generators` 支持此属性。它旨在为自定义 Makefile "
"链接规则指定对“链接器脚本”的依赖性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:17
msgid ""
"Contents of ``INTERFACE_LINK_DEPENDS`` may use \"generator expressions\" "
"with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions.  See the :manual:`cmake-"
"buildsystem(7)` -manual for more on defining buildsystem properties."
msgstr ""
"``INTERFACE_LINK_DEPENDS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` -manual。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DEPENDS.rst:22
msgid ""
"Link dependency files usage requirements commonly differ between the "
"build-tree and the install-tree.  The ``BUILD_INTERFACE`` and "
"``INSTALL_INTERFACE`` generator expressions can be used to describe "
"separate usage requirements based on the usage location.  Relative paths "
"are allowed within the ``INSTALL_INTERFACE`` expression and are "
"interpreted relative to the installation prefix.  For example:"
msgstr ""
"构建树和安装树之间的链接依赖文件使用要求通常不同。 ``BUILD_INTERFACE`` 和 ``INSTALL_INTERFACE`` "
"生成器表达式可用于根据使用位置描述单独的使用要求。 ``INSTALL_INTERFACE`` "
"表达式中允许使用相对路径，并相对于安装前缀进行解释。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_DIRECTORIES.rst:2
msgid "INTERFACE_LINK_DIRECTORIES"
msgstr "INTERFACE_LINK_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:2
msgid "INTERFACE_LINK_LIBRARIES"
msgstr "INTERFACE_LINK_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:4
msgid "List public interface libraries for a library."
msgstr "列出库的公共接口库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:6
msgid ""
"This property contains the list of transitive link dependencies.  When the"
" target is linked into another target using the "
":command:`target_link_libraries` command, the libraries listed (and "
"recursively their link interface libraries) will be provided to the other "
"target also.  This property is overridden by the "
":prop_tgt:`LINK_INTERFACE_LIBRARIES` or "
":prop_tgt:`LINK_INTERFACE_LIBRARIES_<CONFIG>` property if policy "
":policy:`CMP0022` is ``OLD`` or unset."
msgstr ""
"此属性包含传递链接依赖项的列表。当使用 target_link_libraries "
"命令将目标链接到另一个目标时，列出的库（以及递归地链接接口库）也将提供给另一个目标。如果策略:policy:`CMP0022` 为 ``OLD`` "
"或未设置，则此属性将被 LINK_INTERFACE_LIBRARIES 或 "
":prop_tgt:`LINK_INTERFACE_LIBRARIES_<CONFIG>` 属性覆盖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:15
msgid ""
"The value of this property is used by the generators when constructing the"
" link rule for a dependent target.  A dependent target's direct link "
"dependencies, specified by its :prop_tgt:`LINK_LIBRARIES` target property,"
" are linked first, followed by indirect dependencies from the transitive "
"closure of the direct dependencies' ``INTERFACE_LINK_LIBRARIES`` "
"properties.  See policy :policy:`CMP0022`."
msgstr ""
"生成器在为依赖目标构造链接规则时使用此属性的值。依赖目标的直接链接依赖项，由其 LINK_LIBRARIES "
"目标属性指定，首先链接，然后是来自直接依赖项的传递闭包的间接依赖项 INTERFACE_LINK_LIBRARIES "
"属性。请参阅政策:policy:`CMP0022`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:22
msgid ""
"Contents of ``INTERFACE_LINK_LIBRARIES`` may use \"generator expressions\""
" with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions.  See the :manual:`cmake-"
"buildsystem(7)` manual for more on defining buildsystem properties."
msgstr ""
"``INTERFACE_LINK_LIBRARIES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_INDIRECTION.txt:2
msgid ""
"A call to :command:`target_link_libraries(<target> ...)` may update this "
"property on ``<target>``.  If ``<target>`` was not created in the same "
"directory as the call then :command:`target_link_libraries` will wrap each"
" entry with the form ``::@(directory-id);...;::@``, where the ``::@`` is "
"literal and the ``(directory-id)`` is unspecified. This tells the "
"generators that the named libraries must be looked up in the scope of the "
"caller rather than in the scope in which the ``<target>`` was created.  "
"Valid directory ids are stripped on export by the "
":command:`install(EXPORT)` and :command:`export` commands."
msgstr ""
"调用 :command:`target_link_libraries(<target> ...)` 可能会更新 ``<target>`` "
"上的此属性。如果 ``<target>`` 不是在与调用相同的目录中创建的，那么 :command:`target_link_libraries` "
"将用 ``::@(directory-id);...;::@ 的形式包装每个条目``，其中 ``::@`` 是文字，而 ``(directory-"
"id)`` 未指定。这告诉生成器必须在调用者的范围内查找命名库，而不是在创建“<target>”的范围内。有效的目录 ID 在导出时被 "
":command:`install(EXPORT)` 和 :command:`export` 命令去除。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES.rst:29
msgid ""
"``INTERFACE_LINK_LIBRARIES`` adds transitive link dependencies for a "
"target's dependents.  In advanced use cases, one may update the direct "
"link dependencies of a target's dependents by using the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties."
msgstr ""
"``INTERFACE_LINK_LIBRARIES`` 为目标的依赖项添加传递链接依赖项。在高级用例中，可以使用 "
"INTERFACE_LINK_LIBRARIES_DIRECT 和 INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE "
"目标属性更新目标依赖项的直接链接依赖项。"

#: ../../cmake-prefix/src/cmake/Help/include/INTERFACE_LINK_LIBRARIES_WARNING.txt:2
msgid ""
"Note that it is not advisable to populate the |INTERFACE_PROPERTY_LINK| of"
" a target with absolute paths to dependencies. That would hard-code into "
"installed packages the library file paths for dependencies **as found on "
"the machine the package was made on**."
msgstr ""
"请注意，不建议填充 |INTERFACE_PROPERTY_LINK|具有依赖项绝对路径的目标。这会将依赖项的库文件路径硬编码到已安装的包中 ** "
"在制作包的机器上找到 ** 。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:2
msgid "INTERFACE_LINK_LIBRARIES_DIRECT"
msgstr "INTERFACE_LINK_LIBRARIES_DIRECT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:6
msgid ""
"List of libraries that consumers of this library should treat as direct "
"link dependencies."
msgstr "该库的使用者应视为直接链接依赖项的库列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:9
msgid ""
"This target property may be set to *include* items in a dependent target's"
" final set of direct link dependencies.  See the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target property to "
"exclude items."
msgstr ""
"此目标属性可以设置为 *include* 依赖目标的最终直接链接依赖集中的项目。请参阅 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` 目标属性以排除项目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:14
msgid ""
"The initial set of a dependent target's direct link dependencies is "
"specified by its :prop_tgt:`LINK_LIBRARIES` target property.  Indirect "
"link dependencies are specified by the transitive closure of the direct "
"link dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties. Any "
"link dependency may specify additional direct link dependencies using the "
"``INTERFACE_LINK_LIBRARIES_DIRECT`` target property. The set of direct "
"link dependencies is then filtered to exclude items named by any "
"dependency's :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target "
"property."
msgstr ""
"依赖目标的直接链接依赖项的初始集由其 LINK_LIBRARIES 目标属性指定。间接链接依赖项由直接链接依赖项的 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"属性的传递闭包指定。任何链接依赖项都可以使用“INTERFACE_LINK_LIBRARIES_DIRECT”目标属性指定额外的直接链接依赖项。然后过滤直接链接依赖项集以排除由任何依赖项的"
" INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE 目标属性命名的项目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt:1
msgid ""
"The value of |INTERFACE_PROPERTY_LINK_DIRECT| may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"|INTERFACE_PROPERTY_LINK_DIRECT| 的值可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.txt:6
msgid ""
"The |INTERFACE_PROPERTY_LINK_DIRECT| target property is intended for "
"advanced use cases such as injection of static plugins into a consuming "
"executable.  It should not be used as a substitute for organizing normal "
"calls to :command:`target_link_libraries`."
msgstr ""
"|INTERFACE_PROPERTY_LINK_DIRECT| target "
"属性适用于高级用例，例如将静态插件注入到使用中的可执行文件中。它不应该用作组织对 :command:`target_link_libraries` "
"的正常调用的替代品。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:28
msgid "Direct Link Dependencies as Usage Requirements"
msgstr "直接链接依赖作为使用需求"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:30
msgid ""
"The ``INTERFACE_LINK_LIBRARIES_DIRECT`` and "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties are "
":ref:`usage requirements <Target Usage Requirements>`. Their effects "
"propagate to dependent targets transitively, and can therefore affect the "
"direct link dependencies of every target in a chain of dependent "
"libraries.  Whenever some library target ``X`` links to another library "
"target ``Y`` whose direct or transitive usage requirements contain "
"``INTERFACE_LINK_LIBRARIES_DIRECT`` or "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, the properties may affect "
"``X``'s list of direct link dependencies:"
msgstr ""
"``INTERFACE_LINK_LIBRARIES_DIRECT`` 和 "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` 目标属性是 :ref:`usage requirements"
" <Target Usage "
"Requirements>`。它们的效果可传递地传播到依赖目标，因此可以影响依赖库链中每个目标的直接链接依赖性。每当某些库目标“X”链接到另一个库目标“Y”，其直接或传递使用要求包含“INTERFACE_LINK_LIBRARIES_DIRECT”或“INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE”时，属性可能会影响“X”的列表直接链接依赖项："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:41
msgid ""
"If ``X`` is a shared library or executable, its dependencies are linked. "
"They also affect the usage requirements with which ``X``'s sources are "
"compiled."
msgstr "如果 ``X`` 是一个共享库或可执行文件，它的依赖关系是链接的。它们还会影响编译“X”源代码的使用要求。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:45
msgid ""
"If ``X`` is a static library or object library, it does not actually link,"
" so its dependencies at most affect the usage requirements with which "
"``X``'s sources are compiled."
msgstr "如果 ``X`` 是一个静态库或对象库，它实际上并没有链接，因此它的依赖性最多影响编译 ``X`` 的源代码的使用要求。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:49
msgid ""
"The properties may also affect the list of direct link dependencies on "
"``X``'s dependents:"
msgstr "这些属性还可能会影响“X”依赖项的直接链接依赖项列表："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:52
msgid "If ``X`` links ``Y`` publicly:"
msgstr "如果“X”公开链接“Y”："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:58
msgid ""
"then ``Y`` is placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`, so "
"``Y``'s usage requirements, including ``INTERFACE_LINK_LIBRARIES_DIRECT``,"
" ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the usage requirements "
"declared by the direct link dependencies they add, are propagated to "
"``X``'s dependents."
msgstr ""
"那么``Y``放在``X``的 :prop_tgt:`INTERFACE_LINK_LIBRARIES`中，所以``Y``的使用要求，包括``INTERFACE_LINK_LIBRARIES_DIRECT``，``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``，以及用法由他们添加的直接链接依赖项声明的需求被传播到“X”的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:64
msgid ""
"If ``X`` is a static library or object library, and links ``Y`` privately:"
msgstr "如果``X`` 是静态库或对象库，并且私下链接``Y``："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:70
msgid ""
"then ``$<LINK_ONLY:Y>`` is placed in ``X``'s "
":prop_tgt:`INTERFACE_LINK_LIBRARIES`.  ``Y``'s linking requirements, "
"including ``INTERFACE_LINK_LIBRARIES_DIRECT``, "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, and the transitive link "
"dependencies declared by the direct link dependencies they add, are "
"propagated to ``X``'s dependents.  However, ``Y``'s non-linking usage "
"requirements are blocked by the :genex:`LINK_ONLY` generator expression, "
"and are not propagated to ``X``'s dependents."
msgstr ""
"然后 ``$<LINK_ONLY:Y>`` 被放置在 ``X`` 的 :prop_tgt:`INTERFACE_LINK_LIBRARIES` 中。"
" ``Y`` "
"的链接要求，包括``INTERFACE_LINK_LIBRARIES_DIRECT``、``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``，以及由它们添加的直接链接依赖项声明的传递链接依赖项，被传播到``X``"
" 的依赖项。但是，``Y`` 的非链接使用要求被 :genex:`LINK_ONLY` 生成器表达式阻止，并且不会传播到``X`` 的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:79
msgid ""
"If ``X`` is a shared library or executable, and links ``Y`` privately:"
msgstr "如果 X 是共享库或可执行文件，并且私下链接 Y："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:85
msgid ""
"then ``Y`` is not placed in ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES`, "
"so ``Y``'s usage requirements, even ``INTERFACE_LINK_LIBRARIES_DIRECT`` "
"and ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``, are not propagated to "
"``X``'s dependents."
msgstr ""
"那么``Y``就没有放在``X``的 :prop_tgt:`INTERFACE_LINK_LIBRARIES`中，所以``Y``的使用要求，甚至``INTERFACE_LINK_LIBRARIES_DIRECT``和``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``都不是传播给“X”的家属。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:90
msgid ""
"In all cases, the content of ``X``'s :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"is not affected by ``Y``'s ``INTERFACE_LINK_LIBRARIES_DIRECT`` or "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE``."
msgstr ""
"在所有情况下，``X`` 的 :prop_tgt:`INTERFACE_LINK_LIBRARIES` 的内容不受 ``Y`` 的 "
"``INTERFACE_LINK_LIBRARIES_DIRECT`` 或 "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` 的影响。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:94
msgid ""
"One may limit the effects of ``INTERFACE_LINK_LIBRARIES_DIRECT`` and "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` to a subset of dependent "
"targets by using the :genex:`TARGET_PROPERTY` generator expression. For "
"example, to limit the effects to executable targets, use an entry of the "
"form::"
msgstr ""
"通过使用 TARGET_PROPERTY 生成器表达式，可以将 INTERFACE_LINK_LIBRARIES_DIRECT 和 "
"INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE "
"的影响限制为依赖目标的子集。例如，要将效果限制为可执行目标，请使用以下形式的条目："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:102
msgid ""
"Similarly, to limit the effects to specific targets, use an entry of the "
"form::"
msgstr "同样，要将效果限制在特定目标上，请使用以下形式的条目："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:107
msgid ""
"This entry will only affect targets that set their ``USE_IT`` target "
"property to a true value."
msgstr "此条目只会影响将其“USE_IT”目标属性设置为真值的目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:111
msgid "Direct Link Dependency Ordering"
msgstr "直接链接依赖排序"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:113
msgid ""
"The list of direct link dependencies for a target is computed from an "
"initial ordered list in its :prop_tgt:`LINK_LIBRARIES` target property. "
"For each item, additional direct link dependencies are discovered from its"
" direct and transitive ``INTERFACE_LINK_LIBRARIES_DIRECT`` usage "
"requirements.  Each discovered item is injected before the item that "
"specified it.  However, a discovered item is added at most once, and only "
"if it did not appear anywhere in the initial list. This gives "
":prop_tgt:`LINK_LIBRARIES` control over ordering of those direct link "
"dependencies that it explicitly specifies."
msgstr ""
"目标的直接链接依赖项列表是根据其 :prop_tgt:`LINK_LIBRARIES` "
"目标属性中的初始有序列表计算得出的。对于每个项目，额外的直接链接依赖项是从其直接和传递的“INTERFACE_LINK_LIBRARIES_DIRECT”使用要求中发现的。每个发现的项目都在指定它的项目之前注入。然而，一个发现的项目最多被添加一次，并且只有当它没有出现在初始列表中的任何地方时。这使"
" :prop_tgt:`LINK_LIBRARIES` 可以控制它明确指定的那些直接链接依赖项的排序。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:123
msgid ""
"Once all direct link dependencies have been collected, items named by all "
"of their :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` usage "
"requirements are removed from the final list.  This does not affect the "
"order of the items that remain."
msgstr ""
"一旦收集了所有直接链接依赖项，就会从最终列表中删除由所有 INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE "
"使用要求命名的项目。这不会影响剩余项目的顺序。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:129
msgid "Example: Static Plugins"
msgstr "示例：静态插件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:131
msgid ""
"Consider a static library ``Foo`` that provides a static plugin "
"``FooPlugin`` to consuming application executables, where the "
"implementation of the plugin depends on ``Foo`` and other things. In this "
"case, the application should link to ``FooPlugin`` directly, before "
"``Foo``.  However, the application author only knows about ``Foo``. We can"
" express this as follows:"
msgstr ""
"考虑一个静态库“Foo”，它提供一个静态插件“FooPlugin”来使用应用程序可执行文件，其中插件的实现取决于“Foo”和其他东西。在这种情况下，应用程序应该在"
" ``Foo`` 之前直接链接到 ``FooPlugin``。然而，应用程序作者只知道“Foo”。我们可以这样表达："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:165
msgid ""
"An application ``app`` only needs to specify that it links to ``Foo``:"
msgstr "应用程序 ``app`` 只需要指定它链接到 ``Foo``："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:172
msgid ""
"The ``INTERFACE_LINK_LIBRARIES_DIRECT`` target property on ``Foo`` tells "
"CMake to pretend that ``app`` also links directly to ``FooPlugin``. The "
"``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target property on ``Foo`` "
"tells CMake to pretend that ``app`` did *not* link directly to ``Foo``. "
"Instead, ``Foo`` will be linked as a dependency of ``FooPlugin``.  The "
"final link line for ``app`` will link the libraries in the following "
"order:"
msgstr ""
"``Foo`` 上的``INTERFACE_LINK_LIBRARIES_DIRECT`` 目标属性告诉 CMake 假装 ``app`` "
"也直接链接到 ``FooPlugin``。 ``Foo`` "
"上的``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` 目标属性告诉 CMake 假装``app`` "
"*没有*直接链接到``Foo``。相反，``Foo`` 将作为``FooPlugin`` 的依赖链接。 ``app`` "
"的最终链接行将按以下顺序链接库："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:180
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:231
msgid ""
"``FooPlugin`` as a direct link dependency of ``app`` (via ``Foo``'s usage "
"requirements)."
msgstr "``FooPlugin`` 作为``app`` 的直接链接依赖项（通过``Foo`` 的使用要求）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:182
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:234
msgid "``FooExtras`` as a dependency of ``FooPlugin``."
msgstr "``FooExtras`` 作为``FooPlugin`` 的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:183
msgid "``Foo`` as a dependency of ``FooPlugin`` and ``FooExtras``."
msgstr "``Foo`` 作为``FooPlugin`` 和``FooExtras`` 的依赖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:184
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:236
msgid ""
"``Core`` as a dependency of ``FooPlugin``, ``FooExtras``, and ``Foo``."
msgstr "``Core`` 作为``FooPlugin``、``FooExtras`` 和``Foo`` 的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:186
msgid ""
"Note that without the ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target "
"property, ``Foo`` would be linked twice: once as a direct dependency of "
"``app``, and once as a dependency of ``FooPlugin``."
msgstr ""
"请注意，如果没有“INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE”目标属性，“Foo”将被链接两次：一次作为“app”的直接依赖项，一次作为“FooPlugin”的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:191
msgid "Example: Opt-In Static Plugins"
msgstr "示例：选择加入静态插件"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:193
msgid ""
"In the above `Example: Static Plugins`_, the ``app`` executable specifies "
"that it links directly to ``Foo``.  In a real application, there might be "
"an intermediate library:"
msgstr "在上面的“示例：静态插件”中，“app”可执行文件指定它直接链接到“Foo”。在实际应用中，可能会有一个中间库："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:205
msgid ""
"In this case we do not want ``Foo``'s ``INTERFACE_LINK_LIBRARIES_DIRECT`` "
"and ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target properties to "
"affect the direct dependencies of ``app_impl``.  To avoid this, we can "
"revise the property values to make their effects opt-in:"
msgstr ""
"在这种情况下，我们不希望 ``Foo`` 的 ``INTERFACE_LINK_LIBRARIES_DIRECT`` "
"和``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` 目标属性影响``app_impl`` "
"的直接依赖。为避免这种情况，我们可以修改属性值以使其效果选择加入："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:222
msgid "Now, the ``app`` executable can opt-in to get ``Foo``'s plugin(s):"
msgstr "现在，“app”可执行文件可以选择加入“Foo”的插件："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:228
msgid ""
"The final link line for ``app`` will now link the libraries in the "
"following order:"
msgstr "``app`` 的最终链接行现在将按以下顺序链接库："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:233
msgid "``app_impl`` as a direct link dependency of ``app``."
msgstr "``app_impl`` 作为``app`` 的直接链接依赖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT.rst:235
msgid ""
"``Foo`` as a dependency of ``app_impl``, ``FooPlugin``, and ``FooExtras``."
msgstr "``Foo`` 作为``app_impl``、``FooPlugin`` 和``FooExtras`` 的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:2
msgid "INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE"
msgstr "INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:6
msgid ""
"List of libraries that consumers of this library should *not* treat as "
"direct link dependencies."
msgstr "该库的消费者不应*将其视为直接链接依赖项的库列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:9
msgid ""
"This target property may be set to *exclude* items from a dependent "
"target's final set of direct link dependencies.  This property is "
"processed after the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target "
"property of all other dependencies of the dependent target, so exclusion "
"from direct link dependence takes priority over inclusion."
msgstr ""
"此目标属性可以设置为从依赖目标的最终直接链接依赖项集中*排除*项目。此属性在依赖目标的所有其他依赖项的 "
"INTERFACE_LINK_LIBRARIES_DIRECT 目标属性之后处理，因此从直接链接依赖项中排除优先于包含。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:15
msgid ""
"The initial set of a dependent target's direct link dependencies is "
"specified by its :prop_tgt:`LINK_LIBRARIES` target property.  Indirect "
"link dependencies are specified by the transitive closure of the direct "
"link dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties. Any "
"link dependency may specify additional direct link dependencies using the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target property. The set of "
"direct link dependencies is then filtered to exclude items named by any "
"dependency's ``INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE`` target property."
msgstr ""
"依赖目标的直接链接依赖项的初始集由其 LINK_LIBRARIES 目标属性指定。间接链接依赖项由直接链接依赖项的 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` 属性的传递闭包指定。任何链接依赖项都可以使用 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` "
"目标属性指定额外的直接链接依赖项。然后过滤直接链接依赖项集以排除由任何依赖项的“INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE”目标属性命名的项目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:25
msgid ""
"Excluding an item from a dependent target's direct link dependencies does "
"not mean the dependent target won't link the item.  The item may still be "
"linked as an indirect link dependency via the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property on other dependencies."
msgstr ""
"从依赖目标的直接链接依赖项中排除项目并不意味着依赖目标不会链接该项目。该项目仍然可以通过其他依赖项的 "
"INTERFACE_LINK_LIBRARIES 属性作为间接链接依赖项进行链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE.rst:33
msgid ""
"See the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` target property "
"documentation for more details and examples."
msgstr "有关详细信息和示例，请参阅 :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` 目标属性文档。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_LINK_OPTIONS.rst:2
msgid "INTERFACE_LINK_OPTIONS"
msgstr "INTERFACE_LINK_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.rst:2
msgid "INTERFACE_POSITION_INDEPENDENT_CODE"
msgstr "INTERFACE_POSITION_INDEPENDENT_CODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.rst:4
msgid "Whether consumers need to create a position-independent target"
msgstr "消费者是否需要创建与位置无关的目标"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.rst:6
msgid ""
"The ``INTERFACE_POSITION_INDEPENDENT_CODE`` property informs consumers of "
"this target whether they must set their "
":prop_tgt:`POSITION_INDEPENDENT_CODE` property to ``ON``.  If this "
"property is set to ``ON``, then the :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"property on  all consumers will be set to ``ON``. Similarly, if this "
"property is set to ``OFF``, then the :prop_tgt:`POSITION_INDEPENDENT_CODE`"
" property on all consumers will be set to ``OFF``.  If this property is "
"undefined, then consumers will determine their "
":prop_tgt:`POSITION_INDEPENDENT_CODE` property by other means.  Consumers "
"must ensure that the targets that they link to have a consistent "
"requirement for their ``INTERFACE_POSITION_INDEPENDENT_CODE`` property."
msgstr ""
"``INTERFACE_POSITION_INDEPENDENT_CODE`` 属性通知此目标的消费者他们是否必须将他们的 "
":prop_tgt:`POSITION_INDEPENDENT_CODE` 属性设置为``ON``。如果此属性设置为“ON”，则所有消费者的 "
"POSITION_INDEPENDENT_CODE 属性都将设置为“ON”。同样，如果此属性设置为“OFF”，则所有消费者的 "
"POSITION_INDEPENDENT_CODE 属性都将设置为“OFF”。如果此属性未定义，则消费者将通过其他方式确定其 "
":prop_tgt:`POSITION_INDEPENDENT_CODE` "
"属性。消费者必须确保他们链接的目标对其“INTERFACE_POSITION_INDEPENDENT_CODE”属性有一致的要求。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_POSITION_INDEPENDENT_CODE.rst:18
msgid ""
"Contents of ``INTERFACE_POSITION_INDEPENDENT_CODE`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions. See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``INTERFACE_POSITION_INDEPENDENT_CODE`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅"
" :manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_PRECOMPILE_HEADERS.rst:2
msgid "INTERFACE_PRECOMPILE_HEADERS"
msgstr "INTERFACE_PRECOMPILE_HEADERS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_PRECOMPILE_HEADERS.rst:6
msgid "List of interface header files to precompile into consuming targets."
msgstr "要预编译为使用目标的接口头文件列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_PRECOMPILE_HEADERS.rst:8
msgid ""
"Targets may populate this property to publish the header files for "
"consuming targets to precompile.  The :command:`target_precompile_headers`"
" command populates this property with values given to the ``PUBLIC`` and "
"``INTERFACE`` keywords.  Projects may also get and set the property "
"directly. See the discussion in :command:`target_precompile_headers` for "
"guidance on appropriate use of this property for installed or exported "
"targets."
msgstr ""
"目标可以填充此属性以发布头文件以供使用目标进行预编译。 :command:`target_precompile_headers` 命令使用赋予 "
"``PUBLIC`` 和 ``INTERFACE`` 关键字的值填充此属性。项目也可以直接获取和设置属性。请参阅 "
":command:`target_precompile_headers` 中的讨论，以获取有关为安装或导出的目标适当使用此属性的指导。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_PRECOMPILE_HEADERS.rst:15
msgid ""
"Contents of ``INTERFACE_PRECOMPILE_HEADERS`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions.  See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``INTERFACE_PRECOMPILE_HEADERS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SOURCES.rst:2
msgid "INTERFACE_SOURCES"
msgstr "接口源"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SOURCES.rst:6
msgid "List of interface sources to compile into consuming targets."
msgstr "编译成消费目标的接口源列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SOURCES.rst:8
msgid ""
"Targets may populate this property to publish the sources for consuming "
"targets to compile.  The :command:`target_sources` command populates this "
"property with values given to the ``PUBLIC`` and ``INTERFACE`` keywords.  "
"Projects may also get and set the property directly."
msgstr ""
"目标可以填充此属性以发布要编译的消费目标的源。 :command:`target_sources` 命令使用赋予 ``PUBLIC`` 和 "
"``INTERFACE`` 关键字的值填充此属性。项目也可以直接获取和设置属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SOURCES.rst:13
msgid ""
"When target dependencies are specified using "
":command:`target_link_libraries`, CMake will read this property from all "
"target dependencies to determine the sources of the consumer."
msgstr "当使用 target_link_libraries 指定目标依赖项时，CMake 将从所有目标依赖项中读取此属性以确定消费者的来源。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SOURCES.rst:17
msgid ""
"Contents of ``INTERFACE_SOURCES`` may use \"generator expressions\" with "
"the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``INTERFACE_SOURCES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:2
msgid "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES"
msgstr "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:4
msgid "List of public system include directories for a library."
msgstr "公共系统列表包括图书馆的目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:6
msgid ""
"Targets may populate this property to publish the include directories "
"which contain system headers, and therefore should not result in compiler "
"warnings.  Additionally, system include directories are searched after "
"normal include directories regardless of the order specified."
msgstr ""
"目标可以填充此属性以发布包含系统标头的包含目录，因此不应导致编译器警告。此外，无论指定的顺序如何，都会在正常包含目录之后搜索系统包含目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:11
msgid ""
"When the :command:`target_include_directories` command is given the "
"``SYSTEM`` keyword, it populates this property with values provided after "
"the ``PUBLIC`` and ``INTERFACE`` keywords."
msgstr ""
"当 :command:`target_include_directories` 命令被赋予 ``SYSTEM`` 关键字时，它会使用 "
"``PUBLIC`` 和 ``INTERFACE`` 关键字后提供的值填充此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:15
msgid ""
"Projects may also get and set the property directly, but must be aware "
"that adding directories to this property does not make those directories "
"used during compilation.  Adding directories to this property marks "
"directories as system directories which otherwise would be used in a non-"
"system manner. This can appear similar to duplication, so prefer the high-"
"level :command:`target_include_directories` command with the ``SYSTEM`` "
"keyword and avoid setting the property directly."
msgstr ""
"项目也可以直接获取和设置该属性，但必须注意，向该属性添加目录不会在编译期间使用这些目录。将目录添加到此属性会将目录标记为系统目录，否则将以非系统方式使用。这看起来类似于重复，因此更喜欢带有"
" `SYSTEM`` 关键字的高级 :command:`target_include_directories` 命令，避免直接设置属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:23
msgid ""
"When target dependencies are specified using "
":command:`target_link_libraries`, CMake will read this property from all "
"target dependencies to mark the same include directories as containing "
"system headers."
msgstr ""
"当使用 target_link_libraries 指定目标依赖项时，CMake "
"将从所有目标依赖项中读取此属性，以将相同的包含目录标记为包含系统标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERFACE_SYSTEM_INCLUDE_DIRECTORIES.rst:27
msgid ""
"Contents of ``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions. See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` 的内容可以使用语法为``$<...>`` "
"的“生成器表达式”。请参阅 :manual:`cmake-generator-expressions(7)` "
"手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst:2
msgid "INTERPROCEDURAL_OPTIMIZATION"
msgstr "过程间优化"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst:4
msgid "Enable interprocedural optimization for a target."
msgstr "为目标启用过程间优化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst:6
msgid ""
"If set to true, enables interprocedural optimizations if they are known "
":module:`to be supported <CheckIPOSupported>` by the compiler. Depending "
"on value of policy :policy:`CMP0069`, the error will be reported or "
"ignored, if interprocedural optimization is enabled but not supported."
msgstr ""
"如果设置为 true，则启用程序间优化（如果已知 :module:`编译器支持 <CheckIPOSupported>`。根据 "
"policy:policy:`CMP0069` 的值，如果启用但不支持过程间优化，则将报告或忽略错误。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst:11
msgid ""
"This property is initialized by the "
":variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` variable if it is set when "
"a target is created."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_INTERPROCEDURAL_OPTIMIZATION 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION.rst:15
msgid ""
"There is also the per-configuration "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` target property, which "
"overrides :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` if it is set."
msgstr ""
"还有每个配置 :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` 目标属性，如果已设置，它会覆盖 "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:2
msgid "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>"
msgstr "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:4
msgid "Per-configuration interprocedural optimization for a target."
msgstr "目标的每配置过程间优化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:6
msgid ""
"This is a per-configuration version of "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION`. If set, this property overrides "
"the generic property for the named configuration."
msgstr ""
"这是 :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 的每个配置版本。如果设置，此属性将覆盖命名配置的通用属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/INTERPROCEDURAL_OPTIMIZATION_CONFIG.rst:10
msgid ""
"This property is initialized by the "
":variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>` variable if it is "
"set when a target is created."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG> 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IOS_INSTALL_COMBINED.rst:2
msgid "IOS_INSTALL_COMBINED"
msgstr "IOS_INSTALL_COMBINED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IOS_INSTALL_COMBINED.rst:6
msgid "Build a combined (device and simulator) target when installing."
msgstr "安装时构建一个组合（设备和模拟器）目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IOS_INSTALL_COMBINED.rst:8
msgid ""
"When this property is set to set to false (which is the default) then it "
"will either be built with the device SDK or the simulator SDK depending on"
" the SDK set. But if this property is set to true then the target will at "
"install time also be built for the corresponding SDK and combined into one"
" library."
msgstr ""
"当此属性设置为 false（默认值）时，它将使用设备 SDK 或模拟器 SDK 构建，具体取决于 SDK 集。但是，如果此属性设置为 "
"true，则在安装时也会为相应的 SDK 构建目标并合并到一个库中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IOS_INSTALL_COMBINED.rst:15
msgid ""
"If a selected architecture is available for both: device SDK and simulator"
" SDK it will be built for the SDK selected by "
":variable:`CMAKE_OSX_SYSROOT` and removed from the corresponding SDK."
msgstr ""
"如果选定的体系结构可用于：设备 SDK 和模拟器 SDK，它将为 CMAKE_OSX_SYSROOT 选择的 SDK 构建，并从相应的 SDK "
"中删除。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/IOS_INSTALL_COMBINED.rst:19
msgid "This feature requires at least Xcode version 6."
msgstr "此功能至少需要 Xcode 版本 6。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_DIRECTORY.rst:2
msgid "ISPC_HEADER_DIRECTORY"
msgstr "ISPC_HEADER_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_DIRECTORY.rst:6
msgid ""
"Specify relative output directory for ISPC headers provided by the target."
msgstr "为目标提供的 ISPC 标头指定相对输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_DIRECTORY.rst:8
msgid ""
"If the target contains ISPC source files, this specifies the directory in "
"which the generated headers will be placed. Relative paths are treated "
"with respect to the value of :variable:`CMAKE_CURRENT_BINARY_DIR`. When "
"this property is not set, the headers will be placed a generator defined "
"build directory. If the variable :variable:`CMAKE_ISPC_HEADER_DIRECTORY` "
"is set when a target is created its value is used to initialize this "
"property."
msgstr ""
"如果目标包含 ISPC 源文件，这将指定放置生成的标头的目录。相对路径根据 CMAKE_CURRENT_BINARY_DIR "
"的值进行处理。当此属性未设置时，标头将放置在生成器定义的构建目录中。如果在创建目标时设置了变量 "
":variable:`CMAKE_ISPC_HEADER_DIRECTORY`，则其值用于初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_SUFFIX.rst:2
msgid "ISPC_HEADER_SUFFIX"
msgstr "ISPC_HEADER_SUFFIX"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_SUFFIX.rst:6
msgid ""
"Specify output suffix to be used for ISPC generated headers provided by "
"the target."
msgstr "指定用于目标提供的 ISPC 生成标头的输出后缀。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_SUFFIX.rst:8
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ISPC_HEADER_SUFFIX` variable if it is set when a target  "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ISPC_HEADER_SUFFIX 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_SUFFIX.rst:11
msgid ""
"If the target contains ISPC source files, this specifies the header suffix"
" to be used for the generated headers."
msgstr "如果目标包含 ISPC 源文件，这将指定要用于生成的标头的标头后缀。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_HEADER_SUFFIX.rst:14
msgid "The default value is ``_ispc.h``."
msgstr "默认值为 ``_ispc.h``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:2
msgid "ISPC_INSTRUCTION_SETS"
msgstr "ISPC_INSTRUCTION_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:6
msgid "List of instruction set architectures to generate code for."
msgstr "要为其生成代码的指令集体系结构列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:8
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_ISPC_INSTRUCTION_SETS` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_ISPC_INSTRUCTION_SETS 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:11
msgid ""
"The ``ISPC_INSTRUCTION_SETS`` target property must be used when generating"
" for multiple instruction sets so that CMake can track what object files "
"will be generated."
msgstr "为多个指令集生成时必须使用 ISPC_INSTRUCTION_SETS 目标属性，以便 CMake 可以跟踪将生成哪些目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/ISPC_INSTRUCTION_SETS.rst:21
msgid "Generates code for avx2 and avx512skx target architectures."
msgstr "为 avx2 和 avx512skx 目标架构生成代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_COMPILE.rst:2
msgid "JOB_POOL_COMPILE"
msgstr "JOB_POOL_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_COMPILE.rst:4
msgid "Ninja only: Pool used for compiling."
msgstr "仅限 Ninja：用于编译的池。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_COMPILE.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:8
msgid ""
"The number of parallel compile processes could be limited by defining "
"pools with the global :prop_gbl:`JOB_POOLS` property and then specifying "
"here the pool name."
msgstr "可以通过使用全局 JOB_POOLS 属性定义池，然后在此处指定池名称来限制并行编译进程的数量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_COMPILE.rst:16
msgid ""
"This property is initialized by the value of "
":variable:`CMAKE_JOB_POOL_COMPILE`."
msgstr "此属性由 CMAKE_JOB_POOL_COMPILE 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_LINK.rst:2
msgid "JOB_POOL_LINK"
msgstr "JOB_POOL_LINK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_LINK.rst:4
msgid "Ninja only: Pool used for linking."
msgstr "仅限忍者：用于链接的池。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_LINK.rst:6
msgid ""
"The number of parallel link processes could be limited by defining pools "
"with the global :prop_gbl:`JOB_POOLS` property and then specifying here "
"the pool name."
msgstr "可以通过使用全局 JOB_POOLS 属性定义池，然后在此处指定池名称来限制并行链接进程的数量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_LINK.rst:16
msgid ""
"This property is initialized by the value of "
":variable:`CMAKE_JOB_POOL_LINK`."
msgstr "此属性由 CMAKE_JOB_POOL_LINK 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:2
msgid "JOB_POOL_PRECOMPILE_HEADER"
msgstr "JOB_POOL_PRECOMPILE_HEADER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:6
msgid "Ninja only: Pool used for generating pre-compiled headers."
msgstr "Ninja only：用于生成预编译头文件的池。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:18
msgid ""
"This property is initialized by the value of "
":variable:`CMAKE_JOB_POOL_PRECOMPILE_HEADER`."
msgstr "此属性由 CMAKE_JOB_POOL_PRECOMPILE_HEADER 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/JOB_POOL_PRECOMPILE_HEADER.rst:21
msgid ""
"If neither ``JOB_POOL_PRECOMPILE_HEADER`` nor "
":variable:`CMAKE_JOB_POOL_PRECOMPILE_HEADER` are set then "
":prop_tgt:`JOB_POOL_COMPILE` will be used for this task."
msgstr ""
"如果 JOB_POOL_PRECOMPILE_HEADER 和 CMAKE_JOB_POOL_PRECOMPILE_HEADER 都没有设置，那么 "
"JOB_POOL_COMPILE 将用于此任务。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LABELS.rst:2
msgid "LABELS"
msgstr "标签"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LABELS.rst:4
msgid "Specify a list of text labels associated with a target."
msgstr "指定与目标关联的文本标签列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LABELS.rst:6
msgid "Target label semantics are currently unspecified."
msgstr "目标标签语义目前未指定。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:2
msgid "<LANG>_CLANG_TIDY"
msgstr "<LANG>_CLANG_TIDY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:6
msgid ""
"This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, "
"``OBJC`` or ``OBJCXX``."
msgstr "此属性仅在 ``<LANG>`` 为 ``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时实现。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:9
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for the ``clang-tidy`` tool.  The :ref:`Makefile"
" Generators` and the :generator:`Ninja` generator will run this tool along"
" with the compiler and report a warning if the tool reports any problems."
msgstr ""
"指定一个 :ref:`分号分隔的列表 <CMake Language Lists>`，其中包含 ``clang-tidy`` 工具的命令行。 "
":ref:`Makefile Generators` 和 :generator:`Ninja` "
"生成器将与编译器一起运行此工具，并在工具报告任何问题时报告警告。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:14
msgid ""
"The specified ``clang-tidy`` command line will be invoked with additional "
"arguments specifying the source file and, after ``--``, the full compiler "
"command line."
msgstr "指定的 ``clang-tidy`` 命令行将被调用，附加参数指定源文件，并且在 ``--`` 之后是完整的编译器命令行。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:20
msgid ""
"If the specified ``clang-tidy`` command line includes the ``-p`` option, "
"it will be invoked without ``--`` and the full compiler command line. "
"``clang-tidy`` will look up the source file in the specified compiler "
"commands database."
msgstr ""
"如果指定的 ``clang-tidy`` 命令行包含 ``-p`` 选项，它将在没有 ``--`` 和完整的编译器命令行的情况下被调用。 "
"``clang-tidy`` 将在指定的编译器命令数据库中查找源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY.rst:25
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_CLANG_TIDY` variable if it is set when a target is"
" created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_CLANG_TIDY 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:2
msgid "<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR"
msgstr "<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:6
msgid ""
"This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, "
"``OBJC`` or ``OBJCXX``, and only has an effect when "
":prop_tgt:`<LANG>_CLANG_TIDY` is set."
msgstr ""
"此属性仅在 ``<LANG>`` 为 ``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时实现，并且仅在 "
":prop_tgt:`<LANG 时生效>_CLANG_TIDY` 已设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:10
msgid ""
"Specify a directory for the ``clang-tidy`` tool to put ``.yaml`` files "
"containing its suggested changes in. This can be used for automated mass "
"refactoring by ``clang-tidy``. Each object file that gets compiled will "
"have a corresponding ``.yaml`` file in this directory. After the build is "
"completed, you can run ``clang-apply-replacements`` on this directory to "
"simultaneously apply all suggested changes to the code base. If this "
"property is not an absolute directory, it is assumed to be relative to the"
" target's binary directory. This property should be preferred over adding "
"an ``--export-fixes`` or ``--fix`` argument directly to the "
":prop_tgt:`<LANG>_CLANG_TIDY` property."
msgstr ""
"为 ``clang-tidy`` 工具指定一个目录，以放置包含其建议更改的 ``.yaml`` 文件。这可用于 ``clang-tidy`` "
"的自动大规模重构。每个被编译的目标文件都会在这个目录中有一个相应的 ``.yaml`` 文件。构建完成后，您可以在此目录上运行 ``clang-"
"apply-replacements`` "
"以同时将所有建议的更改应用到代码库。如果此属性不是绝对目录，则假定它是相对于目标的二进制目录的。这个属性应该优先于直接向 "
":prop_tgt:`<LANG>_CLANG_TIDY` 属性添加 ``--export-fixes`` 或 ``--fix`` 参数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:20
msgid ""
"When this property is set, CMake takes ownership of the specified "
"directory, and may create, modify, or delete files and directories within "
"the directory at any time during configure or build time. Users should use"
" a dedicated directory for exporting clang-tidy fixes to avoid having "
"files deleted or overwritten by CMake. Users should not create, modify, or"
" delete files in this directory."
msgstr ""
"设置此属性后，CMake 将获得指定目录的所有权，并且可以在配置或构建期间随时创建、修改或删除目录中的文件和目录。用户应该使用专用目录来导出 "
"clang-tidy 修复，以避免文件被 CMake 删除或覆盖。用户不应在该目录中创建、修改或删除文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CLANG_TIDY_EXPORT_FIXES_DIR.rst:27
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` variable if it is set"
" when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_COMPILER_LAUNCHER.rst:2
msgid "<LANG>_COMPILER_LAUNCHER"
msgstr "<LANG>_COMPILER_LAUNCHER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_COMPILER_LAUNCHER.rst:6
msgid ""
"This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, "
"``Fortran``, ``HIP``, ``ISPC``, ``OBJC``, ``OBJCXX``, or ``CUDA``."
msgstr ""
"此属性仅在 ``<LANG>`` 为 ``C``、``CXX``、``Fortran``、``HIP``、``ISPC``、``OBJC``、 "
"``OBJCXX`` 或 ``CUDA``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_COMPILER_LAUNCHER.rst:9
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for a compiler launching tool. The "
":ref:`Makefile Generators` and the :generator:`Ninja` generator will run "
"this tool and pass the compiler and its arguments to the tool. Some "
"example tools are distcc and ccache."
msgstr ""
"指定一个包含编译器启动工具命令行的 :ref:`分号分隔列表 <CMake Language Lists>`。 :ref:`Makefile "
"Generators` 和 :generator:`Ninja` 生成器将运行此工具并将编译器及其参数传递给该工具。一些示例工具是 distcc 和"
" ccache。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_COMPILER_LAUNCHER.rst:14
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_COMPILER_LAUNCHER 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_COMPILER_LAUNCHER.rst:20
msgid ""
"The property value may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`."
msgstr ""
"属性值可以使用 :manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPCHECK.rst:2
msgid "<LANG>_CPPCHECK"
msgstr "<语言>_CPPCHECK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPCHECK.rst:6
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPLINT.rst:6
msgid "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``."
msgstr "仅当“<LANG>”为“C”或“CXX”时才支持此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPCHECK.rst:8
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for the ``cppcheck`` static analysis tool.  The "
":ref:`Makefile Generators` and the :generator:`Ninja` generator will run "
"``cppcheck`` along with the compiler and report any problems.  If the "
"command-line specifies the exit code options to ``cppcheck`` then the "
"build  will fail if the tool returns non-zero."
msgstr ""
"指定一个 :ref:`分号分隔的列表 <CMake Language Lists>`，其中包含用于 ``cppcheck`` 静态分析工具的命令行。"
" :ref:`Makefile Generators` 和 :generator:`Ninja` 生成器将与编译器一起运行 ``cppcheck``"
" 并报告任何问题。如果命令行将退出代码选项指定为“cppcheck”，那么如果工具返回非零值，构建将失败。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPCHECK.rst:15
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_CPPCHECK` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_CPPCHECK 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPLINT.rst:2
msgid "<LANG>_CPPLINT"
msgstr "<语言>_CPPLINT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPLINT.rst:8
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for the ``cpplint`` style checker.  The "
":ref:`Makefile Generators` and the :generator:`Ninja` generator will run "
"``cpplint`` along with the compiler and report any problems."
msgstr ""
"指定一个 :ref:`分号分隔的列表 <CMake Language Lists>`，其中包含 ``cpplint`` 样式检查器的命令行。 "
":ref:`Makefile Generators` 和 :generator:`Ninja` 生成器将与编译器一起运行 ``cpplint`` "
"并报告任何问题。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_CPPLINT.rst:13
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_CPPLINT` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_CPPLINT 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:2
msgid "<LANG>_EXTENSIONS"
msgstr "<LANG>_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:4
msgid "The variations are:"
msgstr "变化是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:6
msgid ":prop_tgt:`C_EXTENSIONS`"
msgstr ":prop_tgt:`C_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:7
msgid ":prop_tgt:`CXX_EXTENSIONS`"
msgstr ":prop_tgt:`CXX_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:8
msgid ":prop_tgt:`CUDA_EXTENSIONS`"
msgstr ":prop_tgt:`CUDA_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:9
msgid ":prop_tgt:`HIP_EXTENSIONS`"
msgstr ":prop_tgt:`HIP_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:10
msgid ":prop_tgt:`OBJC_EXTENSIONS`"
msgstr ":prop_tgt:`OBJC_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:11
msgid ":prop_tgt:`OBJCXX_EXTENSIONS`"
msgstr ":prop_tgt:`OBJCXX_EXTENSIONS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:13
msgid ""
"These properties specify whether compiler-specific extensions are "
"requested."
msgstr "这些属性指定是否请求特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:15
msgid ""
"These properties are initialized by the value of the "
":variable:`CMAKE_<LANG>_EXTENSIONS` variable if it is set when a target is"
" created and otherwise by the value of "
":variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置了这些属性，则这些属性由 CMAKE_<LANG>_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_<LANG>_EXTENSIONS_DEFAULT 的值初始化（请参阅:policy: `CMP0128`)。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_EXTENSIONS.rst:20
msgid ""
"For supported CMake versions see the respective pages. To control language"
" standard versions see :prop_tgt:`<LANG>_STANDARD`."
msgstr "有关受支持的 CMake 版本，请参阅相应页面。要控制语言标准版本，请参阅 :prop_tgt:`<LANG>_STANDARD`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.rst:2
msgid "<LANG>_INCLUDE_WHAT_YOU_USE"
msgstr "<LANG>_INCLUDE_WHAT_YOU_USE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.rst:6
msgid ""
"This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``."
msgstr "此属性仅在 <LANG> 为 C 或 CXX 时实现。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.rst:8
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for the ``include-what-you-use`` tool.  The "
":ref:`Makefile Generators` and the :generator:`Ninja` generator will run "
"this tool along with the compiler and report a warning if the tool reports"
" any problems."
msgstr ""
"指定一个 :ref:`分号分隔的列表 <CMake Language Lists>`，其中包含 ``include-what-you-use`` "
"工具的命令行。 :ref:`Makefile Generators` 和 :generator:`Ninja` "
"生成器将与编译器一起运行此工具，并在工具报告任何问题时报告警告。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_INCLUDE_WHAT_YOU_USE.rst:13
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE` variable if it is set when a"
" target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_LINKER_LAUNCHER.rst:2
msgid "<LANG>_LINKER_LAUNCHER"
msgstr "<LANG>_LINKER_LAUNCHER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_LINKER_LAUNCHER.rst:6
msgid ""
"This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, "
"``OBJC``, or ``OBJCXX``"
msgstr "此属性仅在 ``<LANG>`` 为 ``C``、``CXX``、``OBJC`` 或 ``OBJCXX`` 时实现"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_LINKER_LAUNCHER.rst:9
msgid ""
"Specify a :ref:`semicolon-separated list <CMake Language Lists>` "
"containing a command line for a linker launching tool. The :ref:`Makefile "
"Generators` and the :generator:`Ninja` generator will run this tool and "
"pass the linker and its arguments to the tool. This is useful for tools "
"such as static analyzers."
msgstr ""
"指定一个包含链接器启动工具命令行的 :ref:`分号分隔列表 <CMake Language Lists>`。 :ref:`Makefile "
"Generators` 和 :generator:`Ninja` 生成器将运行此工具并将链接器及其参数传递给该工具。这对于静态分析器等工具很有用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_LINKER_LAUNCHER.rst:14
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_LINKER_LAUNCHER 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:2
msgid "<LANG>_STANDARD"
msgstr "<语言>_标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:6
msgid ":prop_tgt:`C_STANDARD`"
msgstr ":prop_tgt:`C_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:7
msgid ":prop_tgt:`CXX_STANDARD`"
msgstr ":prop_tgt:`CXX_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:8
msgid ":prop_tgt:`CUDA_STANDARD`"
msgstr ":prop_tgt:`CUDA_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:9
msgid ":prop_tgt:`HIP_STANDARD`"
msgstr ":prop_tgt:`HIP_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:10
msgid ":prop_tgt:`OBJC_STANDARD`"
msgstr ":prop_tgt:`OBJC_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:11
msgid ":prop_tgt:`OBJCXX_STANDARD`"
msgstr ":prop_tgt:`OBJCXX_STANDARD`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:13
msgid ""
"These properties specify language standard versions which are requested. "
"When a newer standard is specified than is supported by the compiler, then"
" it will fallback to the latest supported standard. This \"decay\" "
"behavior may be controlled with the :prop_tgt:`<LANG>_STANDARD_REQUIRED` "
"target property."
msgstr ""
"这些属性指定所请求的语言标准版本。当指定的标准比编译器支持的标准更新时，它将回退到最新支持的标准。这种“衰减”行为可以通过 "
":prop_tgt:`<LANG>_STANDARD_REQUIRED` 目标属性来控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:18
msgid ""
"Note that the actual language standard used may be higher than that "
"specified by ``<LANG>_STANDARD``, regardless of the value of "
":prop_tgt:`<LANG>_STANDARD_REQUIRED`.  In particular, :ref:`transitive "
"usage requirements <Target Usage Requirements>` or the use of "
":manual:`compile features <cmake-compile-features(7)>` can raise the "
"required language standard above what ``<LANG>_STANDARD`` specifies."
msgstr ""
"请注意，无论 :prop_tgt:`<LANG>_STANDARD_REQUIRED` 的值如何，实际使用的语言标准可能高于 "
"``<LANG>_STANDARD`` 指定的标准。特别是， :ref:`transitive usage requirements <Target "
"Usage Requirements>` 或使用:manual:`compile features <cmake-compile-"
"features(7)>` 可以将所需的语言标准提高到 ``<LANG> 以上_STANDARD`` 指定。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:25
msgid ""
"These properties are initialized by the value of the "
":variable:`CMAKE_<LANG>_STANDARD` variable if it is set when a target is "
"created."
msgstr "这些属性由 :variable:`CMAKE_<LANG>_STANDARD` 变量的值初始化，如果它是在创建目标时设置的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD.rst:29
msgid ""
"For supported values and CMake versions see the respective pages. To "
"control compiler-specific extensions see :prop_tgt:`<LANG>_EXTENSIONS`."
msgstr ""
"有关支持的值和 CMake 版本，请参阅相应页面。要控制特定于编译器的扩展，请参阅 :prop_tgt:`<LANG>_EXTENSIONS`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:2
msgid "<LANG>_STANDARD_REQUIRED"
msgstr "<语言>_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:6
msgid ":prop_tgt:`C_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`C_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:7
msgid ":prop_tgt:`CXX_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`CXX_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:8
msgid ":prop_tgt:`CUDA_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`CUDA_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:9
msgid ":prop_tgt:`HIP_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`HIP_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:10
msgid ":prop_tgt:`OBJC_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`OBJC_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:11
msgid ":prop_tgt:`OBJCXX_STANDARD_REQUIRED`"
msgstr ":prop_tgt:`OBJCXX_STANDARD_REQUIRED`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:13
msgid ""
"These properties specify whether the value of :prop_tgt:`<LANG>_STANDARD` "
"is a requirement.  When false or unset, the :prop_tgt:`<LANG>_STANDARD` "
"target property is treated as optional and may \"decay\" to a previous "
"standard if the requested standard is not available.  When "
"``<LANG>_STANDARD_REQUIRED`` is set to true, :prop_tgt:`<LANG>_STANDARD` "
"becomes a hard requirement and a fatal error will be issued if that "
"requirement cannot be met."
msgstr ""
"这些属性指定 :prop_tgt:`<LANG>_STANDARD` 的值是否是必需的。当为 false "
"或未设置时， :prop_tgt:`<LANG>_STANDARD` "
"目标属性被视为可选的，并且如果请求的标准不可用，则可能会“退化”到以前的标准。当``<LANG>_STANDARD_REQUIRED`` 设置为 "
"true 时， :prop_tgt:`<LANG>_STANDARD` 成为硬性要求，如果无法满足该要求，将发出致命错误。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:20
msgid ""
"Note that the actual language standard used may be higher than that "
"specified by :prop_tgt:`<LANG>_STANDARD`, regardless of the value of "
"``<LANG>_STANDARD_REQUIRED``.  In particular, :ref:`transitive usage "
"requirements <Target Usage Requirements>` or the use of :manual:`compile "
"features <cmake-compile-features(7)>` can raise the required language "
"standard above what :prop_tgt:`<LANG>_STANDARD` specifies."
msgstr ""
"请注意，实际使用的语言标准可能高于 :prop_tgt:`<LANG>_STANDARD` 指定的标准，无论 "
"``<LANG>_STANDARD_REQUIRED`` 的值如何。特别是， :ref:`transitive usage requirements "
"<Target Usage Requirements>` 或使用:manual:`compile features <cmake-compile-"
"features(7)>` 可以将所需的语言标准提高到 :prop_tgt:`< LANG>_STANDARD` 指定。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_STANDARD_REQUIRED.rst:27
msgid ""
"These properties are initialized by the value of the "
":variable:`CMAKE_<LANG>_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr ""
"这些属性由 :variable:`CMAKE_<LANG>_STANDARD_REQUIRED` 变量的值初始化，如果它是在创建目标时设置的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_VISIBILITY_PRESET.rst:2
msgid "<LANG>_VISIBILITY_PRESET"
msgstr "<语言>_VISIBILITY_PRESET"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_VISIBILITY_PRESET.rst:4
msgid "Value for symbol visibility compile flags"
msgstr "符号可见性编译标志的值"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_VISIBILITY_PRESET.rst:6
msgid ""
"The ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a"
" visibility related compile option, such as ``-fvisibility=`` for "
"``<LANG>``. This property affects compilation in sources of all types of "
"targets (subject to policy :policy:`CMP0063`)."
msgstr ""
"``<LANG>_VISIBILITY_PRESET`` 属性确定在可见性相关编译选项中传递的值，例如 ``-fvisibility=`` 用于 "
"``<LANG>``。此属性会影响所有类型目标源的编译（受策略 :policy:`CMP0063` 的约束）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LANG_VISIBILITY_PRESET.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_<LANG>_VISIBILITY_PRESET` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_<LANG>_VISIBILITY_PRESET 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.rst:2
msgid "LIBRARY_OUTPUT_DIRECTORY"
msgstr "LIBRARY_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.rst:9
msgid ""
"See also the :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` target "
"property."
msgstr "另请参阅 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "LIBRARY_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:4
msgid ""
"Per-configuration output directory for :ref:`LIBRARY <Library Output "
"Artifacts>` target files."
msgstr ":ref:`LIBRARY <Library Output Artifacts>` 目标文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:7
msgid ""
"This is a per-configuration version of the "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` target property, but multi-"
"configuration generators (:ref:`Visual Studio Generators`, "
":generator:`Xcode`) do NOT append a per-configuration subdirectory to the "
"specified directory.  This property is initialized by the value of the "
":variable:`CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>` variable if it is set "
"when a target is created."
msgstr ""
"这是 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` 目标属性的按配置版本，但多配置生成器（ :ref:`Visual "
"Studio "
"Generators`、 :generator:`Xcode`）不会将按配置的子目录附加到指定的目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_DIRECTORY_CONFIG.rst:16
msgid ""
"Contents of ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` may use "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` 的内容可以使用 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_NAME.rst:2
msgid "LIBRARY_OUTPUT_NAME"
msgstr "LIBRARY_OUTPUT_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_NAME.rst:8
msgid ""
"See also the :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` target property."
msgstr "另请参阅 :prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.rst:2
msgid "LIBRARY_OUTPUT_NAME_<CONFIG>"
msgstr "LIBRARY_OUTPUT_NAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.rst:4
msgid ""
"Per-configuration output name for :ref:`LIBRARY <Library Output "
"Artifacts>` target files."
msgstr ":ref:`LIBRARY <Library Output Artifacts>` 目标文件的每个配置输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LIBRARY_OUTPUT_NAME_CONFIG.rst:7
msgid ""
"This is the configuration-specific version of the "
":prop_tgt:`LIBRARY_OUTPUT_NAME` target property."
msgstr "这是 :prop_tgt:`LIBRARY_OUTPUT_NAME` 目标属性的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINKER_LANGUAGE.rst:2
msgid "LINKER_LANGUAGE"
msgstr "LINKER_LANGUAGE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINKER_LANGUAGE.rst:4
msgid "Specifies language whose compiler will invoke the linker."
msgstr "指定其编译器将调用链接器的语言。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINKER_LANGUAGE.rst:6
msgid ""
"For executables, shared libraries, and modules, this sets the language "
"whose compiler is used to link the target (such as \"C\" or \"CXX\").  A "
"typical value for an executable is the language of the source file "
"providing the program entry point (main).  If not set, the language with "
"the highest linker preference value is the default.  Details of the linker"
" preferences are considered internal, but some limited discussion can be "
"found under the internal :variable:`CMAKE_<LANG>_LINKER_PREFERENCE` "
"variables."
msgstr ""
"对于可执行文件、共享库和模块，这会设置其编译器用于链接目标的语言（例如“C”或“CXX”）。可执行文件的典型值是提供程序入口点 (main) "
"的源文件的语言。如果未设置，则默认使用链接器首选项值最高的语言。链接器首选项的详细信息被认为是内部的，但可以在内部 "
":variable:`CMAKE_<LANG>_LINKER_PREFERENCE` 变量下找到一些有限的讨论。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINKER_LANGUAGE.rst:15
msgid ""
"If this property is not set by the user, it will be calculated at "
"generate-time by CMake."
msgstr "如果用户未设置此属性，它将在生成时由 CMake 计算。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS.rst:2
msgid "LINK_DEPENDS"
msgstr "LINK_DEPENDS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS.rst:4
msgid "Additional files on which a target binary depends for linking."
msgstr "目标二进制文件链接所依赖的附加文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS.rst:6
msgid ""
"Specifies a semicolon-separated list of full-paths to files on which the "
"link rule for this target depends.  The target binary will be linked if "
"any of the named files is newer than it."
msgstr "指定以分号分隔的完整路径列表，指向此目标的链接规则所依赖的文件。如果任何命名文件比它更新，目标二进制文件将被链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS.rst:10
msgid ""
"This property is supported only by :generator:`Ninja` and :ref:`Makefile "
"Generators`.  It is intended to specify dependencies on \"linker scripts\""
" for custom Makefile link rules."
msgstr ""
"只有 :generator:`Ninja` 和 :ref:`Makefile Generators` 支持此属性。它旨在为自定义 Makefile "
"链接规则指定对“链接器脚本”的依赖性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS.rst:15
msgid ""
"Contents of ``LINK_DEPENDS`` may use \"generator expressions\" with the "
"syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``LINK_DEPENDS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS_NO_SHARED.rst:2
msgid "LINK_DEPENDS_NO_SHARED"
msgstr "LINK_DEPENDS_NO_SHARED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS_NO_SHARED.rst:4
msgid "Do not depend on linked shared library files."
msgstr "不要依赖链接的共享库文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS_NO_SHARED.rst:6
msgid ""
"Set this property to true to tell CMake generators not to add file-level "
"dependencies on the shared library files linked by this target.  "
"Modification to the shared libraries will not be sufficient to re-link "
"this target.  Logical target-level dependencies will not be affected so "
"the linked shared libraries will still be brought up to date before this "
"target is built."
msgstr ""
"将此属性设置为 true 以告知 CMake "
"生成器不要向此目标链接的共享库文件添加文件级依赖项。对共享库的修改不足以重新链接此目标。逻辑目标级依赖项不会受到影响，因此链接的共享库仍将在构建此目标之前保持最新。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DEPENDS_NO_SHARED.rst:13
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_LINK_DEPENDS_NO_SHARED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_LINK_DEPENDS_NO_SHARED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DIRECTORIES.rst:2
msgid "LINK_DIRECTORIES"
msgstr "LINK_DIRECTORIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DIRECTORIES.rst:6
msgid ""
"List of directories to use for the link step of shared library, module and"
" executable targets."
msgstr "用于共享库、模块和可执行目标的链接步骤的目录列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DIRECTORIES.rst:9
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of directories specified so far for its target.  Use the "
":command:`target_link_directories` command to append more search "
"directories."
msgstr ""
"此属性包含到目前为止为其目标指定的目录的 :ref:`分号分隔列表 <CMake Language Lists>`。使用 "
":command:`target_link_directories` 命令附加更多搜索目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DIRECTORIES.rst:13
msgid ""
"This property is initialized by the :prop_dir:`LINK_DIRECTORIES` directory"
" property when a target is created, and is used by the generators to set "
"the search directories for the linker."
msgstr "此属性在创建目标时由 :prop_dir:`LINK_DIRECTORIES` 目录属性初始化，生成器使用它来设置链接器的搜索目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_DIRECTORIES.rst:17
msgid ""
"Contents of ``LINK_DIRECTORIES`` may use \"generator expressions\" with "
"the syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``LINK_DIRECTORIES`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS.rst:2
msgid "LINK_FLAGS"
msgstr "LINK_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS.rst:4
msgid ""
"Additional flags to use when linking this target if it is a shared "
"library, module library, or an executable. Static libraries need to use "
":prop_tgt:`STATIC_LIBRARY_OPTIONS` or :prop_tgt:`STATIC_LIBRARY_FLAGS` "
"properties."
msgstr ""
"如果它是共享库、模块库或可执行文件，则在链接此目标时要使用的其他标志。静态库需要使用 "
":prop_tgt:`STATIC_LIBRARY_OPTIONS` 或 :prop_tgt:`STATIC_LIBRARY_FLAGS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS.rst:9
msgid ""
"The ``LINK_FLAGS`` property, managed as a string, can be used to add extra"
" flags to the link step of a target.  :prop_tgt:`LINK_FLAGS_<CONFIG>` will"
" add to the configuration ``<CONFIG>``, for example, ``DEBUG``, "
"``RELEASE``, ``MINSIZEREL``, ``RELWITHDEBINFO``, ..."
msgstr ""
"``LINK_FLAGS`` 属性作为字符串进行管理，可用于向目标的链接步骤添加额外的标志。 "
":prop_tgt:`LINK_FLAGS_<CONFIG>` 将添加到配置 "
"``<CONFIG>``，例如，``DEBUG``、``RELEASE``、``MINSIZEREL``、``RELWITHDEBINFO``、. "
".."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS_CONFIG.rst:11
msgid ""
"This property has been superseded by :prop_tgt:`LINK_OPTIONS` property."
msgstr "此属性已被 :prop_tgt:`LINK_OPTIONS` 属性取代。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS_CONFIG.rst:2
msgid "LINK_FLAGS_<CONFIG>"
msgstr "LINK_FLAGS_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS_CONFIG.rst:4
msgid ""
"Per-configuration linker flags for a ``SHARED`` library, ``MODULE`` or "
"``EXECUTABLE`` target."
msgstr "``SHARED`` 库、``MODULE`` 或 ``EXECUTABLE`` 目标的每个配置链接器标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_FLAGS_CONFIG.rst:7
msgid ""
"This is the configuration-specific version of :prop_tgt:`LINK_FLAGS`."
msgstr "这是 :prop_tgt:`LINK_FLAGS` 的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:2
msgid "LINK_INTERFACE_LIBRARIES"
msgstr "LINK_INTERFACE_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:4
msgid "List public interface libraries for a shared library or executable."
msgstr "列出共享库或可执行文件的公共接口库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:6
msgid ""
"By default linking to a shared library target transitively links to "
"targets with which the library itself was linked.  For an executable with "
"exports (see the :prop_tgt:`ENABLE_EXPORTS` target property) no default "
"transitive link dependencies are used.  This property replaces the default"
" transitive link dependencies with an explicit list.  When the target is "
"linked into another target using the :command:`target_link_libraries` "
"command, the libraries listed (and recursively their link interface "
"libraries) will be provided to the other target also.  If the list is "
"empty then no transitive link dependencies will be incorporated when this "
"target is linked into another target even if the default set is non-empty."
"  This property is initialized by the value of the "
":variable:`CMAKE_LINK_INTERFACE_LIBRARIES` variable if it is set when a "
"target is created.  This property is ignored for ``STATIC`` libraries."
msgstr ""
"默认情况下，链接到共享库目标可传递地链接到库本身所链接的目标。对于具有导出的可执行文件（请参阅 :prop_tgt:`ENABLE_EXPORTS`"
" 目标属性），不使用默认的传递链接依赖项。此属性用显式列表替换默认的传递链接依赖项。当使用 target_link_libraries "
"命令将目标链接到另一个目标时，列出的库（以及递归地链接接口库）也将提供给另一个目标。如果列表为空，那么即使默认集不为空，当此目标链接到另一个目标时，也不会合并任何传递链接依赖项。如果在创建目标时设置了此属性，则该属性由"
" CMAKE_LINK_INTERFACE_LIBRARIES 变量的值初始化。对于 ``STATIC`` 库，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:10
msgid ""
"This property is overridden by the :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"property if policy :policy:`CMP0022` is ``NEW``."
msgstr ""
"如果策略:policy:`CMP0022` 为 ``NEW``，此属性将被 INTERFACE_LINK_LIBRARIES 属性覆盖。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:2
msgid "LINK_INTERFACE_LIBRARIES_<CONFIG>"
msgstr "LINK_INTERFACE_LIBRARIES_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:4
msgid "Per-configuration list of public interface libraries for a target."
msgstr "目标的公共接口库的每个配置列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_LIBRARIES_CONFIG.rst:6
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`LINK_INTERFACE_LIBRARIES`.  If set, this property completely "
"overrides the generic property for the named configuration."
msgstr ""
"这是 :prop_tgt:`LINK_INTERFACE_LIBRARIES` 的特定配置版本。如果设置，此属性将完全覆盖命名配置的通用属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY.rst:2
msgid "LINK_INTERFACE_MULTIPLICITY"
msgstr "LINK_INTERFACE_MULTIPLICITY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY.rst:4
msgid "Repetition count for ``STATIC`` libraries with cyclic dependencies."
msgstr "具有循环依赖性的 ``STATIC`` 库的重复计数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY.rst:6
msgid ""
"When linking to a ``STATIC`` library target with cyclic dependencies the "
"linker may need to scan more than once through the archives in the "
"strongly connected component of the dependency graph.  CMake by default "
"constructs the link line so that the linker will scan through the "
"component at least twice.  This property specifies the minimum number of "
"scans if it is larger than the default.  CMake uses the largest value "
"specified by any target in a component."
msgstr ""
"当链接到具有循环依赖性的 ``STATIC`` 库目标时，链接器可能需要多次扫描依赖图的强连接组件中的档案。 CMake "
"默认构造链接行，以便链接器至少扫描组件两次。如果此属性大于默认值，则指定最小扫描次数。 CMake 使用组件中任何目标指定的最大值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:2
msgid "LINK_INTERFACE_MULTIPLICITY_<CONFIG>"
msgstr "LINK_INTERFACE_MULTIPLICITY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:4
msgid ""
"Per-configuration repetition count for cycles of ``STATIC`` libraries."
msgstr "``STATIC`` 库周期的每个配置重复计数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_INTERFACE_MULTIPLICITY_CONFIG.rst:6
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`LINK_INTERFACE_MULTIPLICITY`.  If set, this property completely"
" overrides the generic property for the named configuration."
msgstr ""
"这是 :prop_tgt:`LINK_INTERFACE_MULTIPLICITY` 的特定配置版本。如果设置，此属性将完全覆盖命名配置的通用属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:2
msgid "LINK_LIBRARIES"
msgstr "LINK_LIBRARIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:4
msgid "List of direct link dependencies."
msgstr "直接链接依赖项列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:6
msgid ""
"This property specifies the list of libraries or targets which will be "
"used for linking.  In addition to accepting values from the "
":command:`target_link_libraries` command, values may be set directly on "
"any target using the :command:`set_property` command."
msgstr ""
"此属性指定将用于链接的库或目标列表。除了从 :command:`target_link_libraries` 命令接受值外，还可以使用 "
":command:`set_property` 命令直接在任何目标上设置值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:11
msgid ""
"The value of this property is used by the generators to construct the link"
" rule for the target.  The direct link dependencies are linked first, "
"followed by indirect dependencies from the transitive closure of the "
"direct dependencies' :prop_tgt:`INTERFACE_LINK_LIBRARIES` properties. See "
"policy :policy:`CMP0022`."
msgstr ""
"生成器使用此属性的值来构造目标的链接规则。首先链接直接链接依赖项，然后链接来自直接依赖项的传递闭包的间接依赖项:prop_tgt:`INTERFACE_LINK_LIBRARIES`"
" 属性。请参阅政策:policy:`CMP0022`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:17
msgid ""
"Contents of ``LINK_LIBRARIES`` may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>` with the syntax ``$<...>``.  Policy "
":policy:`CMP0131` affects the behavior of the :genex:`LINK_ONLY` generator"
" expression for this property."
msgstr ""
"``LINK_LIBRARIES`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>` 语法为 ``$<...>``。策略:policy:`CMP0131` "
"影响此属性的:genex:`LINK_ONLY` 生成器表达式的行为。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:22
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:37
msgid ""
"See the :manual:`cmake-buildsystem(7)` manual for more on defining "
"buildsystem properties."
msgstr "有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES.rst:27
msgid ""
"In advanced use cases, the list of direct link dependencies specified by "
"this property may be updated by usage requirements from dependencies. See "
"the :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties."
msgstr ""
"在高级用例中，此属性指定的直接链接依赖项列表可能会根据依赖项的使用要求进行更新。请参阅 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` 和 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:2
msgid "LINK_LIBRARIES_ONLY_TARGETS"
msgstr "LINK_LIBRARIES_ONLY_TARGETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:6
msgid ""
"Enforce that link items that can be target names are actually existing "
"targets."
msgstr "强制可以是目标名称的链接项实际上是现有目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:8
msgid ""
"Set this property to a true value to enable additional checks on the "
"contents of the :prop_tgt:`LINK_LIBRARIES` and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` target properties, typically "
"populated by :command:`target_link_libraries`. Checks are also applied to "
"libraries added to a target through the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` properties of its "
"dependencies. CMake will verify that link items that might be target names"
" actually name existing targets.  An item is considered a possible target "
"name if:"
msgstr ""
"将此属性设置为真值以启用对 LINK_LIBRARIES 和 INTERFACE_LINK_LIBRARIES 目标属性的内容的额外检查，通常由 "
":command:`target_link_libraries` 填充。检查也适用于通过其依赖项的 "
"INTERFACE_LINK_LIBRARIES_DIRECT 属性添加到目标的库。 CMake "
"将验证可能是目标名称的链接项是否实际命名了现有目标。如果出现以下情况，项目将被视为可能的目标名称："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:16
msgid "it does not contain a ``/`` or ``\\``, and"
msgstr "它不包含``/``或``\\``，并且"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:17
msgid "it does not start in ``-``, and"
msgstr "它不以“-”开头，并且"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:18
msgid "(for historical reasons) it does not start in ``$`` or `````."
msgstr "（由于历史原因）它不是以 ``$`` 或 ````` 开头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:20
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_LINK_LIBRARIES_ONLY_TARGETS` variable when a non-imported"
" target is created.  The property may be explicitly enabled on an imported"
" target to check its link interface."
msgstr ""
"当创建非导入目标时，此属性由 CMAKE_LINK_LIBRARIES_ONLY_TARGETS "
"变量的值初始化。可以在导入的目标上显式启用该属性以检查其链接接口。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:25
msgid ""
"In the following example, CMake will halt with an error at configure time "
"because ``miLib`` is not a target:"
msgstr "在以下示例中，CMake 将在配置时因错误而停止，因为 ``miLib`` 不是目标："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:35
msgid ""
"In order to link toolchain-provided libraries by name while still "
"enforcing ``LINK_LIBRARIES_ONLY_TARGETS``, use an :ref:`imported <Imported"
" Targets>` :ref:`Interface Library <Interface Libraries>` with the "
":prop_tgt:`IMPORTED_LIBNAME` target property:"
msgstr ""
"为了按名称链接工具链提供的库，同时仍然强制执行 ``LINK_LIBRARIES_ONLY_TARGETS``，请使用 :ref:`imported"
" <Imported Targets>` :ref:`Interface Library <Interface Libraries>` 和 "
":prop_tgt:`IMPORTED_LIBNAME`目标属性："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:47
msgid "See also policy :policy:`CMP0028`."
msgstr "另请参阅政策:policy:`CMP0028`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARIES_ONLY_TARGETS.rst:51
msgid ""
"If :prop_tgt:`INTERFACE_LINK_LIBRARIES` contains generator expressions, "
"its actual list of link items may depend on the type and properties of the"
" consuming target.  In such cases CMake may not always detect names of "
"missing targets that only appear for specific consumers. A future version "
"of CMake with improved heuristics may start triggering errors on projects "
"accepted by previous versions of CMake."
msgstr ""
"如果 :prop_tgt:`INTERFACE_LINK_LIBRARIES` "
"包含生成器表达式，它的实际链接项列表可能取决于使用目标的类型和属性。在这种情况下，CMake "
"可能不会总是检测到仅针对特定消费者出现的缺失目标的名称。具有改进的启发式方法的未来版本的 CMake 可能会开始触发以前版本的 CMake "
"接受的项目的错误。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:2
msgid "LINK_LIBRARY_OVERRIDE"
msgstr "LINK_LIBRARY_OVERRIDE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:6
msgid ""
"Override the library features associated with libraries from "
":genex:`LINK_LIBRARY` generator expressions.  This can be used to resolve "
"incompatible library features that result from specifying different "
"features for the same library in different :genex:`LINK_LIBRARY` generator"
" expressions."
msgstr ""
"从 :genex:`LINK_LIBRARY` 生成器表达式覆盖与库关联的库功能。这可用于解决因在不同 LINK_LIBRARY "
"生成器表达式中为同一库指定不同功能而导致的不兼容库功能。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:11
msgid ""
"This property supports overriding multiple libraries and features. It "
"expects a :ref:`semicolon-separated list <CMake Language Lists>`, where "
"each list item has the following form::"
msgstr ""
"此属性支持覆盖多个库和功能。它需要一个 :ref:`分号分隔的列表 <CMake Language Lists>`，其中每个列表项具有以下形式 ::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:17
msgid ""
"For each comma-separated ``link-item``, any existing library feature "
"associated with it will be ignored for the target this property is set on."
"  The item will instead be associated with the specified ``feature``.  "
"Each ``link-item`` can be anything that would be accepted as part of a "
"``library-list`` in a :genex:`LINK_LIBRARY` generator expression."
msgstr ""
"对于每个以逗号分隔的“link-item”，对于设置此属性的目标，与其关联的任何现有库功能都将被忽略。该项目将改为与指定的“功能”相关联。每个 "
"``link-item`` 都可以是在 LINK_LIBRARY` 生成器表达式中被接受为 ``library-list`` 一部分的任何东西。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:40
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:31
msgid ""
"It is also possible to override any feature with the pre-defined "
"``DEFAULT`` library feature.  This effectively discards any feature for "
"that link item, for that target only (``lib3`` in this example):"
msgstr ""
"也可以使用预定义的 ``DEFAULT`` 库功能覆盖任何功能。这有效地丢弃了该链接项的任何功能，仅针对该目标（本例中为 ``lib3``）："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:52
msgid ""
"The above example also demonstrates how to specify different feature "
"overrides for different link items.  See the "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target property for an "
"alternative way of overriding library features for individual libraries, "
"which may be simpler in some cases.  If both properties are defined and "
"specify an override for the same link item, "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` takes precedence over "
"``LINK_LIBRARY_OVERRIDE``."
msgstr ""
"上面的示例还演示了如何为不同的链接项指定不同的功能覆盖。请参阅 :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>`"
" "
"目标属性，了解覆盖单个库的库功能的替代方法，这在某些情况下可能更简单。如果定义了两个属性并为同一链接项指定了覆盖，LINK_LIBRARY_OVERRIDE_<LIBRARY>`"
" 优先于 ``LINK_LIBRARY_OVERRIDE``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:60
msgid ""
"Contents of ``LINK_LIBRARY_OVERRIDE`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``LINK_LIBRARY_OVERRIDE`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE.rst:63
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:49
msgid ""
"For more information about library features, see the "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` and "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variables."
msgstr ""
"有关库功能的更多信息，请参阅 :variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` "
"和 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:2
msgid "LINK_LIBRARY_OVERRIDE_<LIBRARY>"
msgstr "LINK_LIBRARY_OVERRIDE_<LIBRARY>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:6
msgid ""
"Override the library feature associated with ``<LIBRARY>`` from "
":genex:`LINK_LIBRARY` generator expressions.  This can be used to resolve "
"incompatible library features that result from specifying different "
"features for ``<LIBRARY>`` in different :genex:`LINK_LIBRARY` generator "
"expressions."
msgstr ""
"从 :genex:`LINK_LIBRARY` 生成器表达式覆盖与 ``<LIBRARY>`` "
"关联的库功能。这可用于解决由于在不同的 :genex:`LINK_LIBRARY` 生成器表达式中为``<LIBRARY>`` "
"指定不同的特性而导致的不兼容的库特性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:11
msgid ""
"When set on a target, this property holds a single library feature name, "
"which will be applied to ``<LIBRARY>`` when linking that target."
msgstr "当在目标上设置时，此属性包含一个库功能名称，在链接该目标时将应用于“<LIBRARY>”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:40
msgid ""
"See the :prop_tgt:`LINK_LIBRARY_OVERRIDE` target property for an "
"alternative way of overriding library features for multiple libraries at "
"once.  If both properties are defined and specify an override for the same"
" link item, ``LINK_LIBRARY_OVERRIDE_<LIBRARY>`` takes precedence over "
":prop_tgt:`LINK_LIBRARY_OVERRIDE`."
msgstr ""
"请参阅 :prop_tgt:`LINK_LIBRARY_OVERRIDE` "
"目标属性，了解一次覆盖多个库的库功能的替代方法。如果定义了两个属性并为同一链接项指定了覆盖，则 "
"LINK_LIBRARY_OVERRIDE_<LIBRARY>`` 优先于 :prop_tgt:`LINK_LIBRARY_OVERRIDE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_LIBRARY_OVERRIDE_LIBRARY.rst:46
msgid ""
"Contents of ``LINK_LIBRARY_OVERRIDE_<LIBRARY>`` may use :manual:`generator"
" expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``LINK_LIBRARY_OVERRIDE_<LIBRARY>`` 的内容可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:2
msgid "LINK_OPTIONS"
msgstr "LINK_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:6
msgid ""
"List of options to use for the link step of shared library, module and "
"executable targets as well as the device link step. Targets that are "
"static libraries need to use the :prop_tgt:`STATIC_LIBRARY_OPTIONS` target"
" property."
msgstr ""
"用于共享库、模块和可执行目标的链接步骤以及设备链接步骤的选项列表。作为静态库的目标需要使用 "
":prop_tgt:`STATIC_LIBRARY_OPTIONS` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:10
msgid ""
"These options are used for both normal linking and device linking (see "
"policy :policy:`CMP0105`). To control link options for normal and device "
"link steps, :genex:`$<HOST_LINK>` and :genex:`$<DEVICE_LINK>` generator "
"expressions can be used."
msgstr ""
"这些选项用于正常链接和设备链接（请参阅策略:policy:`CMP0105`）。要控制正常和设备链接步骤的链接选项，可以使用 "
":genex:`$<HOST_LINK>` 和 :genex:`$<DEVICE_LINK>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:15
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of options specified so far for its target.  Use the "
":command:`target_link_options` command to append more options."
msgstr ""
"此属性包含到目前为止为其目标指定的选项的 :ref:`分号分隔列表 <CMake Language Lists>`。使用 "
":command:`target_link_options` 命令附加更多选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:19
msgid ""
"This property is initialized by the :prop_dir:`LINK_OPTIONS` directory "
"property when a target is created, and is used by the generators to set "
"the options for the compiler."
msgstr "此属性在创建目标时由 :prop_dir:`LINK_OPTIONS` 目录属性初始化，生成器使用它来设置编译器的选项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:23
msgid ""
"Contents of ``LINK_OPTIONS`` may use \"generator expressions\" with the "
"syntax ``$<...>``.  See the :manual:`cmake-generator-expressions(7)` "
"manual for available expressions.  See the :manual:`cmake-buildsystem(7)` "
"manual for more on defining buildsystem properties."
msgstr ""
"``LINK_OPTIONS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 :manual:`cmake-"
"buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_OPTIONS.rst:30
msgid ""
"This property must be used in preference to :prop_tgt:`LINK_FLAGS` "
"property."
msgstr "此属性必须优先于 :prop_tgt:`LINK_FLAGS` 属性使用。"

#: ../../cmake-prefix/src/cmake/Help/command/DEVICE_LINK_OPTIONS.txt:2
msgid "Host And Device Specific Link Options"
msgstr "主机和设备特定链接选项"

#: ../../cmake-prefix/src/cmake/Help/command/DEVICE_LINK_OPTIONS.txt:4
msgid ""
"When a device link step is involved, which is controlled by "
":prop_tgt:`CUDA_SEPARABLE_COMPILATION` and "
":prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` properties and policy "
":policy:`CMP0105`, the raw options will be delivered to the host and "
"device link steps (wrapped in ``-Xcompiler`` or equivalent for device "
"link). Options wrapped with :genex:`$<DEVICE_LINK:...>` generator "
"expression will be used only for the device link step. Options wrapped "
"with :genex:`$<HOST_LINK:...>` generator expression will be used only for "
"the host link step."
msgstr ""
"当涉及设备链接步骤时，它由 CUDA_SEPARABLE_COMPILATION 和 CUDA_RESOLVE_DEVICE_SYMBOLS "
"属性和策略 CMP0105 控制，原始选项将被传递到主机和设备链接步骤（包装在“-Xcompiler”或设备链接的等效项中）。用 "
":genex:`$<DEVICE_LINK:...>` 生成器表达式包装的选项将仅用于设备链接步骤。用 "
":genex:`$<HOST_LINK:...>` 生成器表达式包装的选项将仅用于主机链接步骤。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:2
msgid "Handling Compiler Driver Differences"
msgstr "处理编译器驱动程序差异"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:4
msgid ""
"To pass options to the linker tool, each compiler driver has its own "
"syntax. The ``LINKER:`` prefix and ``,`` separator can be used to specify,"
" in a portable way, options to pass to the linker tool. ``LINKER:`` is "
"replaced by the appropriate driver option and ``,`` by the appropriate "
"driver separator. The driver prefix and driver separator are given by the "
"values of the :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG` and "
":variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` variables."
msgstr ""
"为了将选项传递给链接器工具，每个编译器驱动程序都有自己的语法。 ``LINKER:`` 前缀和 ``,`` "
"分隔符可用于以可移植的方式指定要传递给链接器工具的选项。 ``LINKER:`` 被适当的驱动程序选项和 ``,`` "
"替换为适当的驱动程序分隔符。驱动程序前缀和驱动程序分隔符由 :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG`"
" 和 :variable:`CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP` 变量的值给出。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:12
msgid ""
"For example, ``\"LINKER:-z,defs\"`` becomes ``-Xlinker -z -Xlinker defs`` "
"for ``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``."
msgstr ""
"例如，``\"LINKER:-z,defs\"`` 变成``-Xlinker -z -Xlinker defs`` 对于``Clang`` "
"和``-Wl,-z,defs`` 对于``GNU GCC ``。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:15
msgid ""
"The ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix "
"expression."
msgstr "``LINKER:`` 前缀可以指定为 ``SHELL:`` 前缀表达式的一部分。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:18
msgid ""
"The ``LINKER:`` prefix supports, as an alternative syntax, specification "
"of arguments using the ``SHELL:`` prefix and space as separator. The "
"previous example then becomes ``\"LINKER:SHELL:-z defs\"``."
msgstr ""
"作为一种替代语法，``LINKER:`` 前缀支持使用``SHELL:`` "
"前缀和空格作为分隔符的参数规范。前面的例子变成了``\"LINKER:SHELL:-z defs\"``。"

#: ../../cmake-prefix/src/cmake/Help/command/LINK_OPTIONS_LINKER.txt:24
msgid ""
"Specifying the ``SHELL:`` prefix anywhere other than at the beginning of "
"the ``LINKER:`` prefix is not supported."
msgstr "不支持在 ``LINKER:`` 前缀以外的任何地方指定 ``SHELL:`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_END_STATIC.rst:2
msgid "LINK_SEARCH_END_STATIC"
msgstr "LINK_SEARCH_END_STATIC"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_END_STATIC.rst:4
msgid "End a link line such that static system libraries are used."
msgstr "结束链接行，以便使用静态系统库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_END_STATIC.rst:6
msgid ""
"Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to "
"determine whether to use static or shared libraries for ``-lXXX`` options."
" CMake uses these options to set the link type for libraries whose full "
"paths are not known or (in some cases) are in implicit link directories "
"for the platform.  By default CMake adds an option at the end of the "
"library list (if necessary) to set the linker search type back to its "
"starting type.  This property switches the final linker search type to "
"``-Bstatic`` regardless of how it started."
msgstr ""
"一些链接器支持诸如``-Bstatic`` 和``-Bdynamic`` 之类的开关，以确定是将静态库还是共享库用于``-lXXX`` 选项。 "
"CMake 使用这些选项为其完整路径未知或（在某些情况下）位于平台的隐式链接目录中的库设置链接类型。默认情况下，CMake "
"在库列表的末尾添加一个选项（如有必要）以将链接器搜索类型设置回其起始类型。此属性将最终链接器搜索类型切换为“-Bstatic”，而不管它是如何启动的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_END_STATIC.rst:15
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_LINK_SEARCH_END_STATIC` if it is set when a target is "
"created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 :variable:`CMAKE_LINK_SEARCH_END_STATIC` 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_END_STATIC.rst:19
msgid "See also :prop_tgt:`LINK_SEARCH_START_STATIC`."
msgstr "另见 :prop_tgt:`LINK_SEARCH_START_STATIC`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:2
msgid "LINK_SEARCH_START_STATIC"
msgstr "LINK_SEARCH_START_STATIC"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:4
msgid "Assume the linker looks for static libraries by default."
msgstr "假设链接器默认查找静态库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:6
msgid ""
"Some linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to "
"determine whether to use static or shared libraries for ``-lXXX`` options."
" CMake uses these options to set the link type for libraries whose full "
"paths are not known or (in some cases) are in implicit link directories "
"for the platform.  By default the linker search type is assumed to be "
"``-Bdynamic`` at the beginning of the library list.  This property "
"switches the assumption to ``-Bstatic``.  It is intended for use when "
"linking an executable statically (e.g. with the GNU ``-static`` option)."
msgstr ""
"一些链接器支持诸如``-Bstatic`` 和``-Bdynamic`` 之类的开关，以确定是将静态库还是共享库用于``-lXXX`` 选项。 "
"CMake "
"使用这些选项为其完整路径未知或（在某些情况下）位于平台的隐式链接目录中的库设置链接类型。默认情况下，链接器搜索类型假定为库列表开头的“-Bdynamic”。此属性将假设切换为“-Bstatic”。它旨在用于静态链接可执行文件（例如使用"
" GNU ``-static`` 选项）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:18
msgid "This property is initialized by the value of the variable"
msgstr "该属性由变量的值初始化"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:17
msgid ""
":variable:`CMAKE_LINK_SEARCH_START_STATIC` if it is set when a target is "
"created."
msgstr ":variable:`CMAKE_LINK_SEARCH_START_STATIC` 如果它是在创建目标时设置的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_SEARCH_START_STATIC.rst:20
msgid "See also :prop_tgt:`LINK_SEARCH_END_STATIC`."
msgstr "另见 :prop_tgt:`LINK_SEARCH_END_STATIC`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_WHAT_YOU_USE.rst:2
msgid "LINK_WHAT_YOU_USE"
msgstr "LINK_WHAT_YOU_USE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_WHAT_YOU_USE.rst:6
msgid ""
"This is a boolean option that, when set to ``TRUE``, will automatically "
"run contents of variable :variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK` on the "
"target after it is linked. In addition, the linker flag specified by "
"variable :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG`  will be passed "
"to the target with the link command so that all libraries specified on the"
" command line will be linked into the target. This will result in the link"
" producing a list of libraries that provide no symbols used by this target"
" but are being linked to it."
msgstr ""
"这是一个布尔选项，当设置为 TRUE 时，将在链接后自动运行目标上变量 CMAKE_LINK_WHAT_YOU_USE_CHECK "
"的内容。此外，由变量 :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` "
"指定的链接器标志将通过链接命令传递给目标，以便命令行上指定的所有库都将链接到目标。这将导致链接生成一个库列表，这些库不提供此目标使用的符号但正在链接到它。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_WHAT_YOU_USE.rst:17
msgid ""
"For now, it is only supported for ``ELF`` platforms and is only applicable"
" to executable and shared or module library targets. This property will be"
" ignored for any other targets and configurations."
msgstr "目前，它仅支持 ``ELF`` 平台，并且仅适用于可执行和共享或模块库目标。对于任何其他目标和配置，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LINK_WHAT_YOU_USE.rst:21
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_LINK_WHAT_YOU_USE` variable if it is set when a target is"
" created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_LINK_WHAT_YOU_USE 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION.rst:2
msgid "LOCATION"
msgstr "地点"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION.rst:4
msgid "Read-only location of a target on disk."
msgstr "目标在磁盘上的只读位置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION.rst:6
msgid ""
"For an imported target, this read-only property returns the value of the "
"``LOCATION_<CONFIG>`` property for an unspecified configuration "
"``<CONFIG>`` provided by the target."
msgstr ""
"对于导入的目标，此只读属性返回目标提供的未指定配置 ``<CONFIG>`` 的 ``LOCATION_<CONFIG>`` 属性的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION.rst:10
msgid ""
"For a non-imported target, this property is provided for compatibility "
"with CMake 2.4 and below.  It was meant to get the location of an "
"executable target's output file for use in :command:`add_custom_command`."
"  The path may contain a build-system-specific portion that is replaced at"
" build time with the configuration getting built (such as "
"``$(ConfigurationName)`` in VS).  In CMake 2.6 and above "
":command:`add_custom_command` automatically recognizes a target name in "
"its ``COMMAND`` and ``DEPENDS`` options and computes the target location."
"  In CMake 2.8.4 and above :command:`add_custom_command` recognizes "
":manual:`generator expressions <cmake-generator-expressions(7)>` to refer "
"to target locations anywhere in the command. Therefore this property is "
"not needed for creating custom commands."
msgstr ""
"对于非导入目标，提供此属性是为了与 CMake 2.4 及更低版本兼容。它旨在获取可执行目标输出文件的位置，以用于 "
":command:`add_custom_command`。该路径可能包含特定于构建系统的部分，该部分在构建时被构建的配置替换（例如 VS "
"中的“$(ConfigurationName)”）。在 CMake 2.6 及更高版本中:command:`add_custom_command` "
"自动识别其 ``COMMAND`` 和 ``DEPENDS`` 选项中的目标名称并计算目标位置。在 CMake 2.8.4 "
"及更高版本中:command:`add_custom_command` 识别 :manual:`generator expressions "
"<cmake-generator-expressions(7)>` 以引用命令中任意位置的目标位置。因此，创建自定义命令不需要此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION.rst:23
msgid ""
"Do not set properties that affect the location of a target after reading "
"this property.  These include properties whose names match "
"``(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?``, "
"``(IMPLIB_)?(PREFIX|SUFFIX)``, or \"LINKER_LANGUAGE\".  Failure to follow "
"this rule is not diagnosed and leaves the location of the target "
"undefined."
msgstr ""
"读取此属性后，请勿设置影响目标位置的属性。这些包括名称匹配“(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?”、“(IMPLIB_)?(PREFIX|SUFFIX)”或“LINKER_LANGUAGE”的属性。不遵守此规则不会被诊断出来，并且目标的位置未定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION_CONFIG.rst:2
msgid "LOCATION_<CONFIG>"
msgstr "位置_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION_CONFIG.rst:4
msgid "Read-only property providing a target location on disk."
msgstr "提供磁盘上目标位置的只读属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION_CONFIG.rst:6
msgid ""
"A read-only property that indicates where a target's main file is located "
"on disk for the configuration ``<CONFIG>``.  The property is defined only "
"for library and executable targets.  An imported target may provide a set "
"of configurations different from that of the importing project.  By "
"default CMake looks for an exact-match but otherwise uses an arbitrary "
"available configuration.  Use the :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>`"
" property to map imported configurations explicitly."
msgstr ""
"一个只读属性，指示目标的主文件在配置“<CONFIG>”的磁盘上的位置。该属性仅为库和可执行目标定义。导入的目标可能会提供一组与导入项目不同的配置。默认情况下，CMake"
" 寻找精确匹配，否则使用任意可用配置。使用 :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` "
"属性显式映射导入的配置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/LOCATION_CONFIG.rst:15
msgid ""
"Do not set properties that affect the location of a target after reading "
"this property.  These include properties whose names match "
"``(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?``, "
"``(IMPLIB_)?(PREFIX|SUFFIX)``, or  :prop_tgt:`LINKER_LANGUAGE`. Failure to"
" follow this rule is not diagnosed and leaves the location of the target "
"undefined."
msgstr ""
"读取此属性后，请勿设置影响目标位置的属性。这些包括名称匹配``(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?``、``(IMPLIB_)?(PREFIX|SUFFIX)``"
" 或 :prop_tgt:` 的属性LINKER_LANGUAGE`。不遵守此规则不会被诊断出来，并且目标的位置未定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_COMPATIBILITY_VERSION.rst:2
msgid "MACHO_COMPATIBILITY_VERSION"
msgstr "MACHO_COMPATIBILITY_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_COMPATIBILITY_VERSION.rst:6
msgid ""
"What compatibility version number is this target for Mach-O binaries."
msgstr "Mach-O 二进制文件的这个目标是什么兼容版本号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_COMPATIBILITY_VERSION.rst:8
msgid ""
"For shared libraries on Mach-O systems (e.g. macOS, iOS) the "
"``MACHO_COMPATIBILITY_VERSION`` property corresponds to the *compatibility"
" version* and :prop_tgt:`MACHO_CURRENT_VERSION` corresponds to the "
"*current version*.  These are both embedded in the shared library binary "
"and can be checked with the ``otool -L <binary>`` command."
msgstr ""
"对于 Mach-O 系统（例如 macOS、iOS）上的共享库，``MACHO_COMPATIBILITY_VERSION`` "
"属性对应于*兼容版本*，而 :prop_tgt:`MACHO_CURRENT_VERSION` "
"对应于*当前版本*。它们都嵌入在共享库二进制文件中，可以使用“otool -L <binary>”命令进行检查。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_COMPATIBILITY_VERSION.rst:14
msgid ""
"It should be noted that the :prop_tgt:`MACHO_CURRENT_VERSION` and "
"``MACHO_COMPATIBILITY_VERSION`` properties do not affect the file names or"
" version-related symlinks that CMake generates for the library. The "
":prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties still "
"control the file and symlink names.  The ``install_name`` is also still "
"controlled by :prop_tgt:`SOVERSION`."
msgstr ""
"应该注意的是:prop_tgt:`MACHO_CURRENT_VERSION` 和``MACHO_COMPATIBILITY_VERSION`` "
"属性不会影响 CMake 为库生成的文件名或版本相关的符号链接。 :prop_tgt:`VERSION` 和 "
":prop_tgt:`SOVERSION` 目标属性仍然控制文件和符号链接名称。 ``install_name`` 也仍然由 "
":prop_tgt:`SOVERSION` 控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_COMPATIBILITY_VERSION.rst:21
msgid ""
"When :prop_tgt:`MACHO_CURRENT_VERSION` and ``MACHO_COMPATIBILITY_VERSION``"
" are not given, :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` are used for"
" the version details to be embedded in the binaries respectively. The "
":prop_tgt:`MACHO_CURRENT_VERSION` and ``MACHO_COMPATIBILITY_VERSION`` "
"properties only need to be given if the project needs to decouple the file"
" and symlink naming from the version details embedded in the binaries "
"(e.g. to match libtool conventions)."
msgstr ""
"当 :prop_tgt:`MACHO_CURRENT_VERSION` 和 ``MACHO_COMPATIBILITY_VERSION`` "
"未给出时， :prop_tgt:`VERSION` 和 :prop_tgt:`SOVERSION` 分别用于要嵌入到二进制文件中的版本详细信息。 "
":prop_tgt:`MACHO_CURRENT_VERSION` 和 ``MACHO_COMPATIBILITY_VERSION`` "
"属性仅在项目需要将文件和符号链接命名与二进制文件中嵌入的版本详细信息分离时才需要给出（例如匹配 libtool 约定）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_CURRENT_VERSION.rst:2
msgid "MACHO_CURRENT_VERSION"
msgstr "MACHO_CURRENT_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_CURRENT_VERSION.rst:6
msgid "What current version number is this target for Mach-O binaries."
msgstr "当前版本号是 Mach-O 二进制文件的目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_CURRENT_VERSION.rst:8
msgid ""
"For shared libraries on Mach-O systems (e.g. macOS, iOS) the "
":prop_tgt:`MACHO_COMPATIBILITY_VERSION` property corresponds to the "
"*compatibility version* and ``MACHO_CURRENT_VERSION`` corresponds to the "
"*current version*.  These are both embedded in the shared library binary "
"and can be checked with the ``otool -L <binary>`` command."
msgstr ""
"对于 Mach-O 系统（例如 macOS、iOS）上的共享库， :prop_tgt:`MACHO_COMPATIBILITY_VERSION` "
"属性对应于*兼容版本*，``MACHO_CURRENT_VERSION`` 对应于*当前版本*。它们都嵌入在共享库二进制文件中，可以使用“otool"
" -L <binary>”命令进行检查。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_CURRENT_VERSION.rst:14
msgid ""
"It should be noted that the ``MACHO_CURRENT_VERSION`` and "
":prop_tgt:`MACHO_COMPATIBILITY_VERSION` properties do not affect the file "
"names or version-related symlinks that CMake generates for the library. "
"The :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties still "
"control the file and symlink names.  The ``install_name`` is also still "
"controlled by :prop_tgt:`SOVERSION`."
msgstr ""
"应该注意的是，``MACHO_CURRENT_VERSION`` 和 :prop_tgt:`MACHO_COMPATIBILITY_VERSION`"
" 属性不会影响 CMake 为库生成的文件名或版本相关的符号链接。 :prop_tgt:`VERSION` 和 "
":prop_tgt:`SOVERSION` 目标属性仍然控制文件和符号链接名称。 ``install_name`` 也仍然由 "
":prop_tgt:`SOVERSION` 控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACHO_CURRENT_VERSION.rst:21
msgid ""
"When ``MACHO_CURRENT_VERSION`` and :prop_tgt:`MACHO_COMPATIBILITY_VERSION`"
" are not given, :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` are used for"
" the version details to be embedded in the binaries respectively. The "
"``MACHO_CURRENT_VERSION`` and :prop_tgt:`MACHO_COMPATIBILITY_VERSION` "
"properties only need to be given if the project needs to decouple the file"
" and symlink naming from the version details embedded in the binaries "
"(e.g. to match libtool conventions)."
msgstr ""
"当未给出 ``MACHO_CURRENT_VERSION`` 和 :prop_tgt:`MACHO_COMPATIBILITY_VERSION` "
"时， :prop_tgt:`VERSION` 和 :prop_tgt:`SOVERSION` "
"分别用于要嵌入到二进制文件中的版本详细信息。仅当项目需要将文件和符号链接命名与二进制文件中嵌入的版本详细信息分离时，才需要提供 "
"MACHO_CURRENT_VERSION 和 :prop_tgt:`MACHO_COMPATIBILITY_VERSION 属性（例如，匹配 "
"libtool 约定）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE.rst:2
msgid "MACOSX_BUNDLE"
msgstr "MACOSX_BUNDLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE.rst:4
msgid "Build an executable as an Application Bundle on macOS or iOS."
msgstr "在 macOS 或 iOS 上将可执行文件构建为应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE.rst:6
msgid ""
"When this property is set to ``TRUE`` the executable when built on macOS "
"or iOS will be created as an application bundle.  This makes it a GUI "
"executable that can be launched from the Finder.  See the "
":prop_tgt:`MACOSX_BUNDLE_INFO_PLIST` target property for information about"
" creation of the ``Info.plist`` file for the application bundle. This "
"property is initialized by the value of the variable "
":variable:`CMAKE_MACOSX_BUNDLE` if it is set when a target is created."
msgstr ""
"当此属性设置为“TRUE”时，在 macOS 或 iOS 上构建的可执行文件将创建为应用程序包。这使它成为可以从 Finder 启动的 GUI "
"可执行文件。有关为应用程序包创建 ``Info.plist`` 文件的信息，请参阅 "
":prop_tgt:`MACOSX_BUNDLE_INFO_PLIST` 目标属性。如果在创建目标时设置了此属性，则该属性由变量 "
"CMAKE_MACOSX_BUNDLE 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:2
msgid "MACOSX_BUNDLE_INFO_PLIST"
msgstr "MACOSX_BUNDLE_INFO_PLIST"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:4
msgid ""
"Specify a custom ``Info.plist`` template for a macOS and iOS Application "
"Bundle."
msgstr "为 macOS 和 iOS 应用程序包指定自定义 ``Info.plist`` 模板。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:6
msgid ""
"An executable target with :prop_tgt:`MACOSX_BUNDLE` enabled will be built "
"as an application bundle on macOS.  By default its ``Info.plist`` file is "
"created by configuring a template called ``MacOSXBundleInfo.plist.in`` "
"located in the :variable:`CMAKE_MODULE_PATH`.  This property specifies an "
"alternative template file name which may be a full path."
msgstr ""
"启用了 :prop_tgt:`MACOSX_BUNDLE` 的可执行目标将在 macOS 上构建为应用程序包。默认情况下，其 Info.plist "
"文件是通过配置位于 CMAKE_MODULE_PATH 中的名为 MacOSXBundleInfo.plist.in "
"的模板创建的。此属性指定一个替代模板文件名，它可以是一个完整路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:12
msgid ""
"The following target properties may be set to specify content to be "
"configured into the file:"
msgstr "可以设置以下目标属性来指定要配置到文件中的内容："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:15
msgid "``MACOSX_BUNDLE_BUNDLE_NAME``"
msgstr "``MACOSX_BUNDLE_BUNDLE_NAME``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:16
msgid "Sets ``CFBundleName``."
msgstr "设置“CFBundleName”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:17
msgid "``MACOSX_BUNDLE_BUNDLE_VERSION``"
msgstr "``MACOSX_BUNDLE_BUNDLE_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:16
msgid "Sets ``CFBundleVersion``."
msgstr "设置“CFBundleVersion”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:19
msgid "``MACOSX_BUNDLE_COPYRIGHT``"
msgstr "``MACOSX_BUNDLE_COPYRIGHT``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:20
msgid "Sets ``NSHumanReadableCopyright``."
msgstr "设置 ``NSHumanReadableCopyright``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:21
msgid "``MACOSX_BUNDLE_GUI_IDENTIFIER``"
msgstr "``MACOSX_BUNDLE_GUI_IDENTIFIER``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:22
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:20
msgid "Sets ``CFBundleIdentifier``."
msgstr "设置“CFBundleIdentifier”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:23
msgid "``MACOSX_BUNDLE_ICON_FILE``"
msgstr "``MACOSX_BUNDLE_ICON_FILE``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:24
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:18
msgid "Sets ``CFBundleIconFile``."
msgstr "设置“CFBundleIconFile”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:25
msgid "``MACOSX_BUNDLE_INFO_STRING``"
msgstr "``MACOSX_BUNDLE_INFO_STRING``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:26
msgid "Sets ``CFBundleGetInfoString``."
msgstr "设置“CFBundleGetInfoString”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:27
msgid "``MACOSX_BUNDLE_LONG_VERSION_STRING``"
msgstr "``MACOSX_BUNDLE_LONG_VERSION_STRING``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:28
msgid "Sets ``CFBundleLongVersionString``."
msgstr "设置“CFBundleLongVersionString”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:30
msgid "``MACOSX_BUNDLE_SHORT_VERSION_STRING``"
msgstr "``MACOSX_BUNDLE_SHORT_VERSION_STRING``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:30
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:22
msgid "Sets ``CFBundleShortVersionString``."
msgstr "设置“CFBundleShortVersionString”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.rst:32
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:24
msgid ""
"CMake variables of the same name may be set to affect all targets in a "
"directory that do not have each specific property set.  If a custom "
"``Info.plist`` is specified by this property it may of course hard-code "
"all the settings instead of using the target properties."
msgstr ""
"可以设置同名的 CMake 变量来影响目录中没有每个特定属性集的所有目标。如果此属性指定了自定义 "
"Info.plist，它当然可以对所有设置进行硬编码，而不是使用目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:2
msgid "MACOSX_FRAMEWORK_INFO_PLIST"
msgstr "MACOSX_FRAMEWORK_INFO_PLIST"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:4
msgid ""
"Specify a custom ``Info.plist`` template for a macOS and iOS Framework."
msgstr "为 macOS 和 iOS 框架指定一个自定义的 ``Info.plist`` 模板。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:6
msgid ""
"A library target with :prop_tgt:`FRAMEWORK` enabled will be built as a "
"framework on macOS.  By default its ``Info.plist`` file is created by "
"configuring a template called ``MacOSXFrameworkInfo.plist.in`` located in "
"the :variable:`CMAKE_MODULE_PATH`.  This property specifies an alternative"
" template file name which may be a full path."
msgstr ""
"启用了 :prop_tgt:`FRAMEWORK` 的库目标将作为 macOS 上的框架构建。默认情况下，其 Info.plist "
"文件是通过配置位于 CMAKE_MODULE_PATH 中的名为 MacOSXFrameworkInfo.plist.in "
"的模板创建的。此属性指定一个替代模板文件名，它可以是一个完整路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:15
msgid "``MACOSX_FRAMEWORK_BUNDLE_VERSION``"
msgstr "``MACOSX_FRAMEWORK_BUNDLE_VERSION``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:17
msgid "``MACOSX_FRAMEWORK_ICON_FILE``"
msgstr "``MACOSX_FRAMEWORK_ICON_FILE``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:19
msgid "``MACOSX_FRAMEWORK_IDENTIFIER``"
msgstr "``MACOSX_FRAMEWORK_IDENTIFIER``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_FRAMEWORK_INFO_PLIST.rst:22
msgid "``MACOSX_FRAMEWORK_SHORT_VERSION_STRING``"
msgstr "``MACOSX_FRAMEWORK_SHORT_VERSION_STRING``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:2
msgid "MACOSX_RPATH"
msgstr "MACOSX_RPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:4
msgid ""
"Whether this target on macOS or iOS is located at runtime using rpaths."
msgstr "macOS 或 iOS 上的此目标是否在运行时使用 rpaths 定位。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:6
msgid ""
"When this property is set to ``TRUE``, the directory portion of the "
"``install_name`` field of this shared library will be ``@rpath`` unless "
"overridden by :prop_tgt:`INSTALL_NAME_DIR`.  This indicates the shared "
"library is to be found at runtime using runtime paths (rpaths)."
msgstr ""
"当此属性设置为“TRUE”时，此共享库的“install_name”字段的目录部分将为“@rpath”，除非被 INSTALL_NAME_DIR "
"覆盖。这表示要在运行时使用运行时路径 (rpaths) 找到共享库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:12
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_MACOSX_RPATH` if it is set when a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_MACOSX_RPATH 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:16
msgid ""
"Runtime paths will also be embedded in binaries using this target and can "
"be controlled by the :prop_tgt:`INSTALL_RPATH` target property on the "
"target linking to this target."
msgstr ""
"运行时路径也将嵌入到使用此目标的二进制文件中，并且可以通过链接到此目标的目标上的 :prop_tgt:`INSTALL_RPATH` "
"目标属性进行控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MACOSX_RPATH.rst:20
msgid ""
"Policy :policy:`CMP0042` was introduced to change the default value of "
"``MACOSX_RPATH`` to ``TRUE``.  This is because use of ``@rpath`` is a more"
" flexible and powerful alternative to ``@executable_path`` and "
"``@loader_path``."
msgstr ""
"策略:policy:`CMP0042` 被引入以将 ``MACOSX_RPATH`` 的默认值更改为 "
"``TRUE``。这是因为使用“@rpath”是“@executable_path”和“@loader_path”的更灵活和更强大的替代方法。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MANUALLY_ADDED_DEPENDENCIES.rst:2
msgid "MANUALLY_ADDED_DEPENDENCIES"
msgstr "MANUALLY_ADDED_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MANUALLY_ADDED_DEPENDENCIES.rst:6
msgid "Get manually added dependencies to other top-level targets."
msgstr "获取手动添加到其他顶级目标的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MANUALLY_ADDED_DEPENDENCIES.rst:8
msgid ""
"This read-only property can be used to query all dependencies that were "
"added for this target with the :command:`add_dependencies` command."
msgstr "此只读属性可用于查询使用 :command:`add_dependencies` 命令为此目标添加的所有依赖项。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:2
msgid "MAP_IMPORTED_CONFIG_<CONFIG>"
msgstr "MAP_IMPORTED_CONFIG_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:4
msgid ""
"Map from project configuration to :ref:`imported target <IMPORTED "
"targets>`'s configuration."
msgstr "从项目配置映射到 :ref:`imported target <IMPORTED targets>` 的配置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:7
msgid ""
"Set this to the list of configurations of an imported target that may be "
"used for the current project's ``<CONFIG>`` configuration.  Targets "
"imported from another project may not provide the same set of "
"configuration names available in the current project.  Setting this "
"property tells CMake what imported configurations are suitable for use "
"when building the ``<CONFIG>`` configuration.  The first configuration in "
"the list found to be provided by the imported target (i.e. via "
":prop_tgt:`IMPORTED_LOCATION_<CONFIG>` for the mapped-to ``<CONFIG>``) is "
"selected.  As a special case, an empty list element refers to the "
"configuration-less imported target location (i.e. "
":prop_tgt:`IMPORTED_LOCATION`)."
msgstr ""
"将其设置为可用于当前项目的“<CONFIG>”配置的导入目标的配置列表。从另一个项目导入的目标可能不会提供当前项目中可用的同一组配置名称。设置此属性会告诉"
" CMake 在构建 ``<CONFIG>`` "
"配置时适合使用哪些导入的配置。列表中的第一个配置被发现由导入的目标提供（即通过:prop_tgt:`IMPORTED_LOCATION_<CONFIG>`"
" "
"映射到``<CONFIG>``）被选中。作为一种特殊情况，空列表元素指的是无配置的导入目标位置（即:prop_tgt:`IMPORTED_LOCATION`）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:19
msgid ""
"If this property is set and no matching configurations are available, then"
" the imported target is considered to be not found.  This property is "
"ignored for non-imported targets."
msgstr "如果设置了该属性并且没有可用的匹配配置，则认为导入的目标未找到。对于非导入目标，此属性将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:23
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` variable if it is set when "
"a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_MAP_IMPORTED_CONFIG_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:30
msgid "For example creating imported C++ library ``foo``:"
msgstr "例如创建导入的 C++ 库 ``foo``："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:36
msgid "Use ``foo_debug`` path for ``Debug`` build type:"
msgstr "使用 ``foo_debug`` 路径作为 ``Debug`` 构建类型："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:49
msgid "Use ``foo_release`` path for ``Release`` build type:"
msgstr "使用 ``foo_release`` 路径作为 ``Release`` 构建类型："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MAP_IMPORTED_CONFIG_CONFIG.rst:62
msgid ""
"Use ``Release`` version of library for ``MinSizeRel`` and "
"``RelWithDebInfo`` build types:"
msgstr "为 `MinSizeRel`` 和 ``RelWithDebInfo`` 构建类型使用库的 ``Release`` 版本："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:2
msgid "MSVC_DEBUG_INFORMATION_FORMAT"
msgstr "MSVC_DEBUG_INFORMATION_FORMAT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:6
msgid "Select debug information format when targeting the MSVC ABI."
msgstr "以 MSVC ABI 为目标时选择调试信息格式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:8
msgid "The allowed values are:"
msgstr "允许的值为："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:2
msgid "``Embedded``"
msgstr "``嵌入式``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:2
msgid ""
"Compile with ``-Z7`` or equivalent flag(s) to produce object files with "
"full symbolic debugging information."
msgstr "使用“-Z7”或等效标志编译以生成具有完整符号调试信息的目标文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:5
msgid "``ProgramDatabase``"
msgstr "``程序数据库``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:5
msgid ""
"Compile with ``-Zi`` or equivalent flag(s) to produce a program database "
"that contains all the symbolic debugging information."
msgstr "使用“-Zi”或等效标志编译以生成包含所有符号调试信息的程序数据库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:9
msgid "``EditAndContinue``"
msgstr "``编辑并继续``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:8
msgid ""
"Compile with ``-ZI`` or equivalent flag(s) to produce a program database "
"that supports the Edit and Continue feature."
msgstr "使用“-ZI”或等效标志进行编译以生成支持“编辑并继续”功能的程序数据库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:14
msgid ""
"The value is ignored on compilers not targeting the MSVC ABI, but an "
"unsupported value will be rejected as an error when using a compiler "
"targeting the MSVC ABI."
msgstr "在不以 MSVC ABI 为目标的编译器上会忽略该值，但在使用以 MSVC ABI 为目标的编译器时，不受支持的值将作为错误被拒绝。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT-VALUES.txt:15
msgid ""
"The value may also be the empty string (``\"\"``), in which case no debug "
"information format flag will be added explicitly by CMake."
msgstr "该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 将不会显式添加调试信息格式标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:12
msgid ""
"Use :manual:`generator expressions <cmake-generator-expressions(7)>` to "
"support per-configuration specification.  For example, the code:"
msgstr ""
"使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"来支持每个配置规范。例如，代码："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:21
msgid ""
"selects for the target ``foo`` the program database debug information "
"format for the Debug configuration."
msgstr "为目标“foo”选择调试配置的程序数据库调试信息格式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:24
msgid ""
"If this property is not set, CMake selects a debug information format "
"using the default value "
"``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``, if supported by the"
" compiler, and otherwise ``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>``."
msgstr ""
"如果未设置此属性，CMake 将使用默认值``$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>``"
" 选择调试信息格式（如果编译器支持），否则为 ``$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>`` 。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_DEBUG_INFORMATION_FORMAT.rst:31
msgid ""
"This property has effect only when policy :policy:`CMP0141` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the MSVC ABI."
msgstr ""
"只有在第一个使用针对 MSVC ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0141 "
"设置为 NEW 时，此属性才有效."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:2
msgid "MSVC_RUNTIME_LIBRARY"
msgstr "MSVC_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the MSVC runtime library for use by compilers targeting the MSVC "
"ABI."
msgstr "选择供以 MSVC ABI 为目标的编译器使用的 MSVC 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:2
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:9
msgid "``MultiThreaded``"
msgstr "``多线程``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-MT”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:5
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:14
msgid "``MultiThreadedDLL``"
msgstr "``多线程DLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Compile with ``-MD`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library."
msgstr "使用“-MD”或等效标志进行编译以使用多线程动态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:8
msgid "``MultiThreadedDebug``"
msgstr "``多线程调试``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:8
msgid ""
"Compile with ``-MTd`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-MTd”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:12
msgid "``MultiThreadedDebugDLL``"
msgstr "``MultiThreadedDebugDLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:11
msgid ""
"Compile with ``-MDd`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library."
msgstr "使用“-MDd”或等效标志进行编译以使用多线程动态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY-VALUES.txt:18
msgid ""
"The value may also be the empty string (``\"\"``) in which case no runtime"
" library selection flag will be added explicitly by CMake.  Note that with"
" :ref:`Visual Studio Generators` the native build system may choose to add"
" its own default runtime library selection flag."
msgstr ""
"该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 不会显式添加运行时库选择标志。请注意，对于 :ref:`Visual "
"Studio Generators`，本机构建系统可以选择添加其自己的默认运行时库选择标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:21
msgid ""
"selects for the target ``foo`` a multi-threaded statically-linked runtime "
"library with or without debug information depending on the configuration."
msgstr "根据配置，为目标“foo”选择一个多线程静态链接运行时库，有或没有调试信息。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:24
msgid ""
"The property is initialized from the value of the "
":variable:`CMAKE_MSVC_RUNTIME_LIBRARY` variable, if it is set. If the "
"property is not set, then CMake uses the default value "
"``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` to select a MSVC runtime "
"library."
msgstr ""
"该属性从 CMAKE_MSVC_RUNTIME_LIBRARY 变量的值初始化（如果已设置）。如果未设置该属性，则 CMake 使用默认值 "
"``MultiThreaded$<$<CONFIG:Debug>:Debug>DLL`` 来选择 MSVC 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/MSVC_RUNTIME_LIBRARY.rst:31
msgid ""
"This property has effect only when policy :policy:`CMP0091` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the MSVC ABI."
msgstr ""
"只有在第一个使用针对 MSVC ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0091 "
"设置为 NEW 时，此属性才有效."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NAME.rst:2
msgid "NAME"
msgstr "姓名"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NAME.rst:4
msgid "Logical name for the target."
msgstr "目标的逻辑名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NAME.rst:6
msgid "Read-only logical name for the target as used by CMake."
msgstr "CMake 使用的目标的只读逻辑名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SONAME.rst:2
msgid "NO_SONAME"
msgstr "NO_SONAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SONAME.rst:4
msgid "Whether to set ``soname`` when linking a shared library."
msgstr "链接共享库时是否设置``soname``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SONAME.rst:6
msgid ""
"Enable this boolean property if a generated ``SHARED`` library should not "
"have ``soname`` set.  Default is to set ``soname`` on all shared libraries"
" as long as the platform supports it. Generally, use this property only "
"for leaf private libraries or plugins.  If you use it on normal shared "
"libraries which other targets link against, on some platforms a linker "
"will insert a full path to the library (as specified at link time) into "
"the dynamic section of the dependent binary.  Therefore, once installed, "
"dynamic loader may eventually fail to locate the library for the binary."
msgstr ""
"如果生成的 ``SHARED`` 库不应设置 ``soname``，则启用此布尔属性。默认是在所有共享库上设置 "
"``soname``，只要平台支持。通常，仅将此属性用于叶私有库或插件。如果您在其他目标链接的普通共享库上使用它，在某些平台上，链接器会将库的完整路径（在链接时指定）插入相关二进制文件的动态部分。因此，一旦安装，动态加载程序最终可能无法找到二进制文件的库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:2
msgid "NO_SYSTEM_FROM_IMPORTED"
msgstr "NO_SYSTEM_FROM_IMPORTED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:4
msgid ""
"Do not treat include directories from the interfaces of consumed "
":ref:`imported targets` as system directories."
msgstr "不要将 include 目录从消耗的界面:ref:`imported targets` 视为系统目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:7
msgid ""
"The contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target "
"property are treated as system includes when the consumed target's "
":prop_tgt:`SYSTEM` property is set to true.  By default, "
":prop_tgt:`SYSTEM` is true for imported targets and false for other target"
" types.  If the ``NO_SYSTEM_FROM_IMPORTED`` property is set to true on a "
"*consuming* target, compilation of sources in that consuming target will "
"not treat the contents of the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of"
" consumed imported targets as system includes, even if that imported "
"target's :prop_tgt:`SYSTEM` property is false."
msgstr ""
"当消费目标的 SYSTEM 属性设置为 true 时，INTERFACE_INCLUDE_DIRECTORIES "
"目标属性的内容被视为系统包含。默认情况下， :prop_tgt:`SYSTEM` 对导入的目标为真，对其他目标类型为假。如果 "
"``NO_SYSTEM_FROM_IMPORTED`` 属性在 *consuming* 目标上设置为 true，则该消费目标中的源代码编译不会将 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` 的内容视为系统包含，即使导入目标的 "
":prop_tgt:`SYSTEM` 属性为 false。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:17
msgid ""
"Directories listed in the :prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`"
" property of consumed targets are not affected by "
"``NO_SYSTEM_FROM_IMPORTED``. Those directories will always be treated as "
"system include directories by consumers."
msgstr ""
"使用目标的 INTERFACE_SYSTEM_INCLUDE_DIRECTORIES 属性中列出的目录不受 "
"NO_SYSTEM_FROM_IMPORTED 的影响。这些目录将始终被消费者视为系统包含目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:22
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_NO_SYSTEM_FROM_IMPORTED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_NO_SYSTEM_FROM_IMPORTED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/NO_SYSTEM_FROM_IMPORTED.rst:26
msgid ""
"See the :prop_tgt:`EXPORT_NO_SYSTEM` target property to set this behavior "
"on the target providing the include directories rather than the target "
"consuming them."
msgstr "请参阅 :prop_tgt:`EXPORT_NO_SYSTEM` 目标属性以在提供包含目录的目标而不是使用它们的目标上设置此行为。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:2
msgid "OBJCXX_EXTENSIONS"
msgstr "OBJCXX_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This "
"property is ``ON`` by default. The basic ObjC++ standard level is "
"controlled by the :prop_tgt:`OBJCXX_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”而不是“-std=c++11”。默认情况下，此属性为"
" ``ON``。基本的 ObjC++ 标准级别由 :prop_tgt:`OBJCXX_STANDARD` 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:17
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`CXX_EXTENSIONS`, the value of :prop_tgt:`CXX_EXTENSIONS` is set"
" for ``OBJCXX_EXTENSIONS``."
msgstr ""
"如果未设置该属性，并且项目已设置 CXX_EXTENSIONS，则 CXX_EXTENSIONS 的值设置为 OBJCXX_EXTENSIONS。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_EXTENSIONS.rst:20
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJCXX_EXTENSIONS` variable if set when a target is "
"created and otherwise by the value of "
":variable:`CMAKE_OBJCXX_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_OBJCXX_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_OBJCXX_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT> "
"的值初始化（请参阅:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:2
msgid "OBJCXX_STANDARD"
msgstr "OBJCXX_STANDARD"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:6
msgid ""
"The ObjC++ standard whose features are requested to build this target."
msgstr "要求构建此目标的 ObjC++ 标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:8
msgid ""
"This property specifies the ObjC++ standard whose features are requested "
"to build this target.  For some compilers, this results in adding a flag "
"such as ``-std=gnu++11`` to the compile line."
msgstr ""
"此属性指定构建此目标时请求其功能的 ObjC++ 标准。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu++11”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:15
msgid "Objective C++98"
msgstr "目标 C++98"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:18
msgid "Objective C++11"
msgstr "目标 C++11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:21
msgid "Objective C++14"
msgstr "目标 C++14"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:24
msgid "Objective C++17"
msgstr "目标 C++17"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:27
msgid "Objective C++20"
msgstr "目标 C++20"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:32
msgid "Objective C++23"
msgstr "目标 C++23"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:37
msgid ""
"Objective C++26. CMake 3.25 and later *recognize* ``26`` as a valid value,"
" no version has support for any compiler."
msgstr "目标 C++26。 CMake 3.25 及更高版本 *识别* ``26`` 为有效值，没有版本支持任何编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:48
msgid ""
"with a compiler which does not support ``-std=gnu++11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu++98`` flag if supported.  This \"decay\" behavior may be "
"controlled with the :prop_tgt:`OBJCXX_STANDARD_REQUIRED` target property. "
"Additionally, the :prop_tgt:`OBJCXX_EXTENSIONS` target property may be "
"used to control whether compiler-specific extensions are enabled on a per-"
"target basis."
msgstr ""
"使用不支持“-std=gnu++11”或等效标志的编译器不会导致错误或警告，但如果支持，则会添加“-std=gnu++98”标志.这种“衰减”行为可以通过"
" :prop_tgt:`OBJCXX_STANDARD_REQUIRED` "
"目标属性进行控制。此外， :prop_tgt:`OBJCXX_EXTENSIONS` 目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:55
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`CXX_STANDARD`, the value of :prop_tgt:`CXX_STANDARD` is set for"
" ``OBJCXX_STANDARD``."
msgstr "如果未设置该属性，并且项目已设置 CXX_STANDARD，则 CXX_STANDARD 的值设置为 OBJCXX_STANDARD。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD.rst:61
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJCXX_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_OBJCXX_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:2
msgid "OBJCXX_STANDARD_REQUIRED"
msgstr "OBJCXX_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`OBJCXX_STANDARD` is a "
"requirement."
msgstr "描述 :prop_tgt:`OBJCXX_STANDARD` 的值是否为必需的布尔值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`OBJCXX_STANDARD` target property is treated as a requirement.  "
"If this property is ``OFF`` or unset, the :prop_tgt:`OBJCXX_STANDARD` "
"target property is treated as optional and may \"decay\" to a previous "
"standard if the requested is not available."
msgstr ""
"如果此属性设置为 ``ON``，则 :prop_tgt:`OBJCXX_STANDARD` 目标属性的值将被视为一项要求。如果此属性为 "
"``OFF`` 或未设置，则 :prop_tgt:`OBJCXX_STANDARD` "
"目标属性被视为可选，如果请求不可用，则可能会“退化”到以前的标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:14
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`CXX_STANDARD_REQUIRED`, the value of "
":prop_tgt:`CXX_STANDARD_REQUIRED` is set for ``OBJCXX_STANDARD_REQUIRED``."
msgstr ""
"如果该属性未设置，并且项目已设置 CXX_STANDARD_REQUIRED，则 CXX_STANDARD_REQUIRED 的值设置为 "
"OBJCXX_STANDARD_REQUIRED。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJCXX_STANDARD_REQUIRED.rst:20
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJCXX_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_OBJCXX_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:2
msgid "OBJC_EXTENSIONS"
msgstr "OBJC_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:8
msgid ""
"This property specifies whether compiler specific extensions should be "
"used.  For some compilers, this results in adding a flag such as "
"``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This property"
" is ``ON`` by default. The basic OBJC standard level is controlled by the "
":prop_tgt:`OBJC_STANDARD` target property."
msgstr ""
"此属性指定是否应使用编译器特定的扩展。对于某些编译器，这会导致在编译行中添加一个标志，例如“-std=gnu11”而不是“-std=c11”。默认情况下，此属性为"
" ``ON``。基本的 OBJC 标准级别由 :prop_tgt:`OBJC_STANDARD` 目标属性控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:14
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`C_EXTENSIONS`, the value of :prop_tgt:`C_EXTENSIONS` is set for"
" ``OBJC_EXTENSIONS``."
msgstr "如果未设置该属性，并且项目已设置 C_EXTENSIONS，则 C_EXTENSIONS 的值设置为 OBJC_EXTENSIONS。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_EXTENSIONS.rst:20
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJC_EXTENSIONS` variable if set when a target is created"
" and otherwise by the value of :variable:`CMAKE_OBJC_EXTENSIONS_DEFAULT "
"<CMAKE_<LANG>_EXTENSIONS_DEFAULT>` (see :policy:`CMP0128`)."
msgstr ""
"如果在创建目标时设置此属性，则由 CMAKE_OBJC_EXTENSIONS 变量的值初始化，否则由 "
"CMAKE_OBJC_EXTENSIONS_DEFAULT <CMAKE_<LANG>_EXTENSIONS_DEFAULT>` "
"的值初始化（请参阅:policy:`CMP0128` )."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:2
msgid "OBJC_STANDARD"
msgstr "OBJC_标准"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:6
msgid "The OBJC standard whose features are requested to build this target."
msgstr "构建此目标需要其功能的 OBJC 标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:8
msgid ""
"This property specifies the OBJC standard whose features are requested to "
"build this target.  For some compilers, this results in adding a flag such"
" as ``-std=gnu11`` to the compile line."
msgstr "此属性指定构建此目标时请求其功能的 OBJC 标准。对于某些编译器，这会导致在编译行中添加诸如“-std=gnu11”之类的标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:15
msgid "Objective C89/C90"
msgstr "目标 C89/C90"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:18
msgid "Objective C99"
msgstr "目标C99"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:21
msgid "Objective C11"
msgstr "目标C11"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:31
msgid ""
"with a compiler which does not support ``-std=gnu11`` or an equivalent "
"flag will not result in an error or warning, but will instead add the "
"``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This \"decay\" "
"behavior may be controlled with the :prop_tgt:`OBJC_STANDARD_REQUIRED` "
"target property. Additionally, the :prop_tgt:`OBJC_EXTENSIONS` target "
"property may be used to control whether compiler-specific extensions are "
"enabled on a per-target basis."
msgstr ""
"使用不支持“-std=gnu11”或等效标志的编译器不会导致错误或警告，但会添加“-std=gnu99”或“-std=gnu90”如果支持则标记。这种“衰减”行为可以通过"
" :prop_tgt:`OBJC_STANDARD_REQUIRED` "
"目标属性进行控制。此外， :prop_tgt:`OBJC_EXTENSIONS` 目标属性可用于控制是否在每个目标的基础上启用特定于编译器的扩展。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:38
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`C_STANDARD`, the value of :prop_tgt:`C_STANDARD` is set for "
"``OBJC_STANDARD``."
msgstr "如果未设置该属性，并且项目已设置 C_STANDARD，则 C_STANDARD 的值设置为 OBJC_STANDARD。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD.rst:44
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJC_STANDARD` variable if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_OBJC_STANDARD 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:2
msgid "OBJC_STANDARD_REQUIRED"
msgstr "OBJC_STANDARD_REQUIRED"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:6
msgid ""
"Boolean describing whether the value of :prop_tgt:`OBJC_STANDARD` is a "
"requirement."
msgstr "布尔值，描述 :prop_tgt:`OBJC_STANDARD` 的值是否是必需的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:8
msgid ""
"If this property is set to ``ON``, then the value of the "
":prop_tgt:`OBJC_STANDARD` target property is treated as a requirement.  If"
" this property is ``OFF`` or unset, the :prop_tgt:`OBJC_STANDARD` target "
"property is treated as optional and may \"decay\" to a previous standard "
"if the requested is not available."
msgstr ""
"如果此属性设置为 ``ON``，则 :prop_tgt:`OBJC_STANDARD` 目标属性的值将被视为一项要求。如果此属性为 ``OFF`` "
"或未设置，则 :prop_tgt:`OBJC_STANDARD` 目标属性被视为可选，如果请求不可用，则可能会“退化”到以前的标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:14
msgid ""
"If the property is not set, and the project has set the "
":prop_tgt:`C_STANDARD_REQUIRED`, the value of "
":prop_tgt:`C_STANDARD_REQUIRED` is set for ``OBJC_STANDARD_REQUIRED``."
msgstr ""
"如果未设置该属性，并且项目已设置 C_STANDARD_REQUIRED，则 C_STANDARD_REQUIRED 的值设置为 "
"OBJC_STANDARD_REQUIRED。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OBJC_STANDARD_REQUIRED.rst:20
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OBJC_STANDARD_REQUIRED` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_OBJC_STANDARD_REQUIRED 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:2
msgid "OPTIMIZE_DEPENDENCIES"
msgstr "OPTIMIZE_DEPENDENCIES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:6
msgid "Activates dependency optimization of static and object libraries."
msgstr "激活静态库和对象库的依赖性优化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:8
msgid ""
"When this property is set to true, some dependencies for a static or "
"object library may be removed at generation time if they are not necessary"
" to build the library, since static and object libraries don't actually "
"link against anything."
msgstr ""
"当此属性设置为 true 时，静态库或对象库的某些依赖项可能会在生成时删除，如果它们不是构建库所必需的，因为静态库和对象库实际上并不链接任何内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:13
msgid ""
"If a static or object library has dependency optimization enabled, it "
"first discards all dependencies. Then, it looks through all of the direct "
"and indirect dependencies that it initially had, and adds them back if "
"they meet any of the following criteria:"
msgstr ""
"如果静态库或对象库启用了依赖优化，它首先会丢弃所有依赖。然后，它查看它最初拥有的所有直接和间接依赖项，如果它们满足以下任何条件，则将它们添加回去："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:18
msgid ""
"The dependency was added to the library by :command:`add_dependencies`."
msgstr "通过 :command:`add_dependencies` 将依赖项添加到库中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:19
msgid ""
"The dependency was added to the library through a source file in the "
"library generated by a custom command that uses the dependency."
msgstr "通过使用依赖项的自定义命令生成的库中的源文件，将依赖项添加到库中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:21
msgid ""
"The dependency has any ``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` "
"custom commands associated with it."
msgstr "该依赖项具有与其关联的任何“PRE_BUILD”、“PRE_LINK”或“POST_BUILD”自定义命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:23
msgid ""
"The dependency contains any source files that were generated by a custom "
"command."
msgstr "依赖项包含由自定义命令生成的任何源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:25
msgid ""
"The dependency contains any languages which produce side effects that are "
"relevant to the library. Currently, all languages except C, C++, "
"Objective-C, Objective-C++, assembly, and CUDA are assumed to produce side"
" effects. However, side effects from one language are assumed not to be "
"relevant to another (for example, a Fortran library is assumed to not have"
" any side effects that are relevant for a Swift library.)"
msgstr ""
"依赖项包含产生与库相关的副作用的任何语言。目前，除 C、C++、Objective-C、Objective-C++、汇编和 CUDA "
"之外的所有语言都被认为会产生副作用。但是，假设一种语言的副作用与另一种语言无关（例如，假设 Fortran 库没有任何与 Swift "
"库相关的副作用。）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:32
msgid ""
"As an example, assume you have a static Fortran library which depends on a"
" static C library, which in turn depends on a static Fortran library. The "
"top-level Fortran library has optimization enabled, but the middle C "
"library does not. If you build the top Fortran library, the bottom Fortran"
" library will also build, but not the middle C library, since the C "
"library does not have any side effects that are relevant for the Fortran "
"library. However, if you build the middle C library, the bottom Fortran "
"library will also build, even though it does not have any side effects "
"that are relevant to the C library, since the C library does not have "
"optimization enabled."
msgstr ""
"例如，假设您有一个静态 Fortran 库，它依赖于静态 C 库，而静态 C 库又依赖于静态 Fortran 库。顶级 Fortran "
"库启用了优化，但中间 C 库没有。如果您构建顶层 Fortran 库，则也会构建底层 Fortran 库，但不会构建中间的 C 库，因为 C "
"库没有任何与 Fortran 库相关的副作用。但是，如果您构建中间的 C 库，底部的 Fortran 库也会构建，即使它没有任何与 C "
"库相关的副作用，因为 C 库没有启用优化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OPTIMIZE_DEPENDENCIES.rst:42
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_OPTIMIZE_DEPENDENCIES` variable when the target is "
"created."
msgstr "创建目标时，此属性由 CMAKE_OPTIMIZE_DEPENDENCIES 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES.rst:2
msgid "OSX_ARCHITECTURES"
msgstr "OSX_架构"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES.rst:4
msgid "Target specific architectures for macOS."
msgstr "针对 macOS 的特定架构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES.rst:6
msgid ""
"The ``OSX_ARCHITECTURES`` property sets the target binary architecture for"
" targets on macOS (``-arch``).  This property is initialized by the value "
"of the variable :variable:`CMAKE_OSX_ARCHITECTURES` if it is set when a "
"target is created.  Use :prop_tgt:`OSX_ARCHITECTURES_<CONFIG>` to set the "
"binary architectures on a per-configuration basis, where ``<CONFIG>`` is "
"an upper-case name (e.g. ``OSX_ARCHITECTURES_DEBUG``)."
msgstr ""
"``OSX_ARCHITECTURES`` 属性为 macOS "
"上的目标设置目标二进制架构（``-arch``）。如果在创建目标时设置了此属性，则该属性由变量 CMAKE_OSX_ARCHITECTURES "
"的值初始化。使用 :prop_tgt:`OSX_ARCHITECTURES_<CONFIG>` 在每个配置的基础上设置二进制架构，其中 "
"``<CONFIG>`` 是大写名称（例如 ``OSX_ARCHITECTURES_DEBUG``）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES_CONFIG.rst:2
msgid "OSX_ARCHITECTURES_<CONFIG>"
msgstr "OSX_ARCHITECTURES_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES_CONFIG.rst:4
msgid "Per-configuration macOS and iOS binary architectures for a target."
msgstr "目标的每配置 macOS 和 iOS 二进制架构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OSX_ARCHITECTURES_CONFIG.rst:6
msgid ""
"This property is the configuration-specific version of "
":prop_tgt:`OSX_ARCHITECTURES`."
msgstr "此属性是 :prop_tgt:`OSX_ARCHITECTURES` 的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:2
msgid "OUTPUT_NAME"
msgstr "输出名称"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:4
msgid "Output name for target files."
msgstr "目标文件的输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:6
msgid ""
"This sets the base name for output files created for an executable or "
"library target.  If not set, the logical target name is used by default "
"during generation. The value is not set by default during configuration."
msgstr "这会设置为可执行文件或库目标创建的输出文件的基本名称。如果未设置，则在生成期间默认使用逻辑目标名称。配置期间默认不设置该值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:11
msgid ""
"Contents of ``OUTPUT_NAME`` and the variants listed below may use "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``OUTPUT_NAME`` 的内容和下面列出的变体可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:14
msgid "See also the variants:"
msgstr "另见变体："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:16
msgid ":prop_tgt:`OUTPUT_NAME_<CONFIG>`"
msgstr ":prop_tgt:`OUTPUT_NAME_<CONFIG>`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:17
msgid ":prop_tgt:`ARCHIVE_OUTPUT_NAME_<CONFIG>`"
msgstr ":prop_tgt:`ARCHIVE_OUTPUT_NAME_<配置>`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:18
msgid ":prop_tgt:`ARCHIVE_OUTPUT_NAME`"
msgstr ":prop_tgt:`ARCHIVE_OUTPUT_NAME`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:19
msgid ":prop_tgt:`LIBRARY_OUTPUT_NAME_<CONFIG>`"
msgstr ":prop_tgt:`LIBRARY_OUTPUT_NAME_<配置>`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:20
msgid ":prop_tgt:`LIBRARY_OUTPUT_NAME`"
msgstr ":prop_tgt:`LIBRARY_OUTPUT_NAME`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:21
msgid ":prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`"
msgstr ":prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME.rst:22
msgid ":prop_tgt:`RUNTIME_OUTPUT_NAME`"
msgstr ":prop_tgt:`RUNTIME_OUTPUT_NAME`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME_CONFIG.rst:2
msgid "OUTPUT_NAME_<CONFIG>"
msgstr "OUTPUT_NAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME_CONFIG.rst:4
msgid "Per-configuration target file base name."
msgstr "每个配置目标文件基本名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/OUTPUT_NAME_CONFIG.rst:6
msgid ""
"This is the configuration-specific version of the :prop_tgt:`OUTPUT_NAME` "
"target property."
msgstr "这是 :prop_tgt:`OUTPUT_NAME` 目标属性的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_INSTANTIATE_TEMPLATES.rst:2
msgid "PCH_INSTANTIATE_TEMPLATES"
msgstr "PCH_INSTANTIATE_TEMPLATES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_INSTANTIATE_TEMPLATES.rst:6
msgid ""
"When this property is set to true, the precompiled header compiler options"
" will contain a flag to instantiate templates during the generation of the"
" PCH if supported. This can significantly improve compile times. Supported"
" in Clang since version 11."
msgstr ""
"当此属性设置为 true 时，预编译头编译器选项将包含一个标志，以在生成 PCH 期间实例化模板（如果支持）。这可以显着缩短编译时间。自版本 11 "
"起在 Clang 中受支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_INSTANTIATE_TEMPLATES.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` variable if it is set when a "
"target is created.  If that variable is not set, the property defaults to "
"``ON``."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由 CMAKE_PCH_INSTANTIATE_TEMPLATES "
"变量的值初始化。如果未设置该变量，则该属性默认为“ON”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_WARN_INVALID.rst:2
msgid "PCH_WARN_INVALID"
msgstr "PCH_WARN_INVALID"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_WARN_INVALID.rst:6
msgid ""
"When this property is set to true, the precompile header compiler options "
"will contain a compiler flag which should warn about invalid precompiled "
"headers e.g. ``-Winvalid-pch`` for GNU compiler."
msgstr ""
"当此属性设置为 true 时，预编译头编译器选项将包含一个编译器标志，该标志应警告无效的预编译头，例如``-Winvalid-pch`` 用于 "
"GNU 编译器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PCH_WARN_INVALID.rst:10
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_PCH_WARN_INVALID` variable if it is set when a target is "
"created.  If that variable is not set, the property defaults to ``ON``."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由 CMAKE_PCH_WARN_INVALID 变量的值初始化。如果未设置该变量，则该属性默认为“ON”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME.rst:2
msgid "PDB_NAME"
msgstr "PDB_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME.rst:4
msgid ""
"Output name for the MS debug symbol ``.pdb`` file generated by the linker "
"for an executable or shared library target."
msgstr "链接器为可执行文件或共享库目标生成的 MS 调试符号“.pdb”文件的输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME.rst:7
msgid ""
"This property specifies the base name for the debug symbols file. If not "
"set, the :prop_tgt:`OUTPUT_NAME` target property value or logical target "
"name is used by default."
msgstr "此属性指定调试符号文件的基本名称。如果未设置，则默认使用 :prop_tgt:`OUTPUT_NAME` 目标属性值或逻辑目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NOTE.txt:2
msgid ""
"This property does not apply to STATIC library targets because no linker "
"is invoked to produce them so they have no linker-generated ``.pdb`` file "
"containing debug symbols."
msgstr "此属性不适用于 STATIC 库目标，因为没有调用链接器来生成它们，因此它们没有链接器生成的包含调试符号的“.pdb”文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NOTE.txt:6
msgid ""
"The linker-generated program database files are specified by the ``/pdb`` "
"linker flag and are not the same as compiler-generated program database "
"files specified by the ``/Fd`` compiler flag. Use the |COMPILE_PDB_XXX| "
"property to specify the latter."
msgstr ""
"链接器生成的程序数据库文件由“/pdb”链接器标志指定，与“/Fd”编译器标志指定的编译器生成的程序数据库文件不同。使用 "
"|COMPILE_PDB_XXX|属性来指定后者。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME_CONFIG.rst:2
msgid "PDB_NAME_<CONFIG>"
msgstr "PDB_NAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME_CONFIG.rst:4
msgid ""
"Per-configuration output name for the MS debug symbol ``.pdb`` file "
"generated by the linker for an executable or shared library target."
msgstr "链接器为可执行文件或共享库目标生成的 MS 调试符号“.pdb”文件的每个配置输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_NAME_CONFIG.rst:7
msgid "This is the configuration-specific version of :prop_tgt:`PDB_NAME`."
msgstr "这是 :prop_tgt:`PDB_NAME` 的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY.rst:2
msgid "PDB_OUTPUT_DIRECTORY"
msgstr "PDB_OUTPUT_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY.rst:4
msgid ""
"Output directory for the MS debug symbols ``.pdb`` file generated by the "
"linker for an executable or shared library target."
msgstr "链接器为可执行文件或共享库目标生成的 MS 调试符号“.pdb”文件的输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY.rst:7
msgid ""
"This property specifies the directory into which the MS debug symbols will"
" be placed by the linker. The property value may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`. Multi-configuration "
"generators append a per-configuration subdirectory to the specified "
"directory unless a generator expression is used."
msgstr ""
"此属性指定链接器将放置 MS 调试符号的目录。属性值可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。多配置生成器将每个配置子目录附加到指定目录，除非使用生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY.rst:14
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_PDB_OUTPUT_DIRECTORY` variable if it is set when a target"
" is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_PDB_OUTPUT_DIRECTORY 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "PDB_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "PDB_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.rst:4
msgid ""
"Per-configuration output directory for the MS debug symbol ``.pdb`` file "
"generated by the linker for an executable or shared library target."
msgstr "链接器为可执行文件或共享库目标生成的 MS 调试符号“.pdb”文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.rst:7
msgid ""
"This is a per-configuration version of :prop_tgt:`PDB_OUTPUT_DIRECTORY`, "
"but multi-configuration generators (:ref:`Visual Studio Generators`, "
":generator:`Xcode`) do NOT append a per-configuration subdirectory to the "
"specified directory.  This property is initialized by the value of the "
":variable:`CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>` variable if it is set when"
" a target is created."
msgstr ""
"这是 :prop_tgt:`PDB_OUTPUT_DIRECTORY` 的按配置版本，但多配置生成器（ :ref:`Visual Studio "
"Generators`、 :generator:`Xcode`）不会将按配置的子目录附加到指定目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PDB_OUTPUT_DIRECTORY_CONFIG.rst:15
msgid ""
"Contents of ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` may use :manual:`generator "
"expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``PDB_OUTPUT_DIRECTORY_<CONFIG>`` 的内容可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POSITION_INDEPENDENT_CODE.rst:2
msgid "POSITION_INDEPENDENT_CODE"
msgstr "POSITION_INDEPENDENT_CODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POSITION_INDEPENDENT_CODE.rst:4
msgid "Whether to create a position-independent target"
msgstr "是否创建与位置无关的目标"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POSITION_INDEPENDENT_CODE.rst:6
msgid ""
"The ``POSITION_INDEPENDENT_CODE`` property determines whether position "
"independent executables or shared libraries will be created.  This "
"property is ``True`` by default for ``SHARED`` and ``MODULE`` library "
"targets and ``False`` otherwise.  This property is initialized by the "
"value of the :variable:`CMAKE_POSITION_INDEPENDENT_CODE` variable  if it "
"is set when a target is created."
msgstr ""
"``POSITION_INDEPENDENT_CODE`` "
"属性决定是否创建与位置无关的可执行文件或共享库。对于“SHARED”和“MODULE”库目标，此属性默认为“True”，否则为“False”。如果在创建目标时设置了此属性，则该属性由"
" CMAKE_POSITION_INDEPENDENT_CODE 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POSITION_INDEPENDENT_CODE.rst:15
msgid ""
"For executable targets, the link step is controlled by the "
":policy:`CMP0083` policy and the :module:`CheckPIESupported` module."
msgstr "对于可执行目标，链接步骤由 CMP0083 策略和 CheckPIESupported 模块控制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POST_INSTALL_SCRIPT.rst:2
msgid "POST_INSTALL_SCRIPT"
msgstr "POST_INSTALL_SCRIPT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POST_INSTALL_SCRIPT.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRE_INSTALL_SCRIPT.rst:4
msgid "Deprecated install support."
msgstr "弃用安装支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/POST_INSTALL_SCRIPT.rst:6
msgid ""
"The :prop_tgt:`PRE_INSTALL_SCRIPT` and ``POST_INSTALL_SCRIPT`` properties "
"are the old way to specify CMake scripts to run before and after "
"installing a target.  They are used only when the old ``INSTALL_TARGETS`` "
"command is used to install the target.  Use the :command:`install` command"
" instead."
msgstr ""
":prop_tgt:`PRE_INSTALL_SCRIPT` 和 ``POST_INSTALL_SCRIPT`` 属性是指定 CMake "
"脚本在安装目标之前和之后运行的旧方法。它们仅在使用旧的 ``INSTALL_TARGETS`` 命令安装目标时使用。请改用 "
":command:`install` 命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS.rst:2
msgid "PRECOMPILE_HEADERS"
msgstr "预编译头"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS.rst:6
msgid "List of header files to precompile."
msgstr "要预编译的头文件列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS.rst:8
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of header files to precompile specified so far for its target. Use"
" the :command:`target_precompile_headers` command to append more header "
"files."
msgstr ""
"此属性包含一个 :ref:`分号分隔的列表 <CMake Language Lists>` 到目前为止为其目标指定的要预编译的头文件。使用 "
":command:`target_precompile_headers` 命令附加更多头文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS_REUSE_FROM.rst:2
msgid "PRECOMPILE_HEADERS_REUSE_FROM"
msgstr "PRECOMPILE_HEADERS_REUSE_FROM"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS_REUSE_FROM.rst:6
msgid "Target from which to reuse the precompiled headers build artifact."
msgstr "从中重用预编译头构建工件的目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRECOMPILE_HEADERS_REUSE_FROM.rst:8
msgid ""
"See the second signature of :command:`target_precompile_headers` command "
"for more detailed information."
msgstr "有关更多详细信息，请参阅 :command:`target_precompile_headers` 命令的第二个签名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PREFIX.rst:2
msgid "PREFIX"
msgstr "字首"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PREFIX.rst:4
msgid "What comes before the library name."
msgstr "库名称之前的内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PREFIX.rst:6
msgid ""
"A target property that can be set to override the prefix (such as ``lib``)"
" on a library name."
msgstr "可以设置为覆盖库名称上的前缀（例如 ``lib``）的目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRE_INSTALL_SCRIPT.rst:2
msgid "PRE_INSTALL_SCRIPT"
msgstr "PRE_INSTALL_SCRIPT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRE_INSTALL_SCRIPT.rst:6
msgid ""
"The ``PRE_INSTALL_SCRIPT`` and :prop_tgt:`POST_INSTALL_SCRIPT` properties "
"are the old way to specify CMake scripts to run before and after "
"installing a target.  They are used only when the old ``INSTALL_TARGETS`` "
"command is used to install the target.  Use the :command:`install` command"
" instead."
msgstr ""
"``PRE_INSTALL_SCRIPT`` 和 :prop_tgt:`POST_INSTALL_SCRIPT` 属性是指定 CMake "
"脚本在安装目标之前和之后运行的旧方法。它们仅在使用旧的 ``INSTALL_TARGETS`` 命令安装目标时使用。请改用 "
":command:`install` 命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRIVATE_HEADER.rst:2
msgid "PRIVATE_HEADER"
msgstr "私人标题"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRIVATE_HEADER.rst:4
msgid ""
"Specify private header files in a :prop_tgt:`FRAMEWORK` shared library "
"target."
msgstr "在 :prop_tgt:`FRAMEWORK` 共享库目标中指定私有头文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PRIVATE_HEADER.rst:6
msgid ""
"Shared library targets marked with the :prop_tgt:`FRAMEWORK` property "
"generate frameworks on macOS, iOS and normal shared libraries on other "
"platforms. This property may be set to a list of header files to be placed"
" in the PrivateHeaders directory inside the framework folder.  On non-"
"Apple platforms these headers may be installed using the "
"``PRIVATE_HEADER`` option to the :command:`install(TARGETS)` command."
msgstr ""
"标有 :prop_tgt:`FRAMEWORK` 属性的共享库目标在 macOS、iOS "
"上生成框架，在其他平台上生成普通共享库。此属性可以设置为要放置在框架文件夹内的 PrivateHeaders 目录中的头文件列表。在非 Apple "
"平台上，可以使用 :command:`install(TARGETS)` 命令的 ``PRIVATE_HEADER`` 选项安装这些标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PROJECT_LABEL.rst:2
msgid "PROJECT_LABEL"
msgstr "项目标签"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PROJECT_LABEL.rst:4
msgid "Change the name of a target in an IDE."
msgstr "更改 IDE 中目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PROJECT_LABEL.rst:6
msgid ""
"Can be used to change the name of the target in an IDE like Visual Studio."
msgstr "可用于在 Visual Studio 等 IDE 中更改目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PUBLIC_HEADER.rst:2
msgid "PUBLIC_HEADER"
msgstr "PUBLIC_HEADER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PUBLIC_HEADER.rst:4
msgid ""
"Specify public header files in a :prop_tgt:`FRAMEWORK` shared library "
"target."
msgstr "在 :prop_tgt:`FRAMEWORK` 共享库目标中指定公共头文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/PUBLIC_HEADER.rst:6
msgid ""
"Shared library targets marked with the :prop_tgt:`FRAMEWORK` property "
"generate frameworks on macOS, iOS and normal shared libraries on other "
"platforms. This property may be set to a list of header files to be placed"
" in the ``Headers`` directory inside the framework folder.  On non-Apple "
"platforms these headers may be installed using the ``PUBLIC_HEADER`` "
"option to the :command:`install(TARGETS)` command."
msgstr ""
"标有 :prop_tgt:`FRAMEWORK` 属性的共享库目标在 macOS、iOS "
"上生成框架，在其他平台上生成普通共享库。此属性可以设置为要放置在框架文件夹内的“Headers”目录中的头文件列表。在非 Apple "
"平台上，可以使用 :command:`install(TARGETS)` 命令的 ``PUBLIC_HEADER`` 选项安装这些标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:2
msgid "RESOURCE"
msgstr "资源"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:4
msgid ""
"Specify resource files in a :prop_tgt:`FRAMEWORK` or :prop_tgt:`BUNDLE`."
msgstr "在 :prop_tgt:`FRAMEWORK` 或 :prop_tgt:`BUNDLE` 中指定资源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:6
msgid ""
"Target marked with the :prop_tgt:`FRAMEWORK` or :prop_tgt:`BUNDLE` "
"property generate framework or application bundle (both macOS and iOS is "
"supported) or normal shared libraries on other platforms. This property "
"may be set to a list of files to be placed in the corresponding directory "
"(eg. ``Resources`` directory for macOS) inside the bundle. On non-Apple "
"platforms these files may be installed using the ``RESOURCE`` option to "
"the :command:`install(TARGETS)` command."
msgstr ""
"标有 :prop_tgt:`FRAMEWORK` 或 :prop_tgt:`BUNDLE` 属性的目标生成框架或应用程序包（支持 macOS 和 "
"iOS）或其他平台上的普通共享库。此属性可以设置为要放置在包内相应目录（例如 macOS 的“Resources”目录）中的文件列表。在非 "
"Apple 平台上，可以使用 :command:`install(TARGETS)` 命令的 ``RESOURCE`` 选项安装这些文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:14
msgid "Following example of Application Bundle:"
msgstr "以下应用程序包示例："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:34
msgid "will produce flat structure for iOS systems::"
msgstr "将为 iOS 系统生成平面结构 ::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:42
msgid "For macOS systems it will produce following directory structure::"
msgstr "对于 macOS 系统，它将生成以下目录结构 ::"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RESOURCE.rst:53
msgid "For Linux, such CMake script produce following files::"
msgstr "对于 Linux，此类 CMake 脚本会生成以下文件："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_COMPILE.rst:2
msgid "RULE_LAUNCH_COMPILE"
msgstr "RULE_LAUNCH_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_COMPILE.rst:4
msgid "Specify a launcher for compile rules."
msgstr "为编译规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_COMPILE.rst:7
msgid ""
"This property is intended for internal use by :manual:`ctest(1)`.  "
"Projects and developers should use the "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` target properties or the associated "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variables instead."
msgstr ""
"此属性供 :manual:`ctest(1)` "
"内部使用。项目和开发人员应该使用 :prop_tgt:`<LANG>_COMPILER_LAUNCHER` "
"目标属性或相关的 :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_COMPILE.rst:12
msgid ""
"See the :prop_gbl:`global property <RULE_LAUNCH_COMPILE>` of the same name"
" for details.  This overrides the global and directory property for a "
"target."
msgstr ""
"有关详细信息，请参阅同名的 :prop_gbl:`global property "
"<RULE_LAUNCH_COMPILE>`。这会覆盖目标的全局和目录属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_CUSTOM.rst:2
msgid "RULE_LAUNCH_CUSTOM"
msgstr "RULE_LAUNCH_CUSTOM"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_CUSTOM.rst:4
msgid "Specify a launcher for custom rules."
msgstr "为自定义规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_CUSTOM.rst:6
msgid ""
"See the global property of the same name for details.  This overrides the "
"global and directory property for a target."
msgstr "有关详细信息，请参阅同名的全局属性。这会覆盖目标的全局和目录属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_LINK.rst:2
msgid "RULE_LAUNCH_LINK"
msgstr "RULE_LAUNCH_LINK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_LINK.rst:4
msgid "Specify a launcher for link rules."
msgstr "为链接规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_LINK.rst:7
msgid ""
"This property is intended for internal use by :manual:`ctest(1)`.  "
"Projects and developers should use the :prop_tgt:`<LANG>_LINKER_LAUNCHER` "
"target properties or the associated "
":variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variables instead."
msgstr ""
"此属性供 :manual:`ctest(1)` 内部使用。项目和开发人员应该使用 :prop_tgt:`<LANG>_LINKER_LAUNCHER`"
" 目标属性或关联的 :variable:`CMAKE_<LANG>_LINKER_LAUNCHER` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RULE_LAUNCH_LINK.rst:12
msgid ""
"See the :prop_gbl:`global property <RULE_LAUNCH_LINK>` of the same name "
"for details.  This overrides the global and directory property for a "
"target."
msgstr ""
"有关详细信息，请参阅同名的 :prop_gbl:`global property "
"<RULE_LAUNCH_LINK>`。这会覆盖目标的全局和目录属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY.rst:2
msgid "RUNTIME_OUTPUT_DIRECTORY"
msgstr "运行时输出目录"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY.rst:9
msgid ""
"See also the :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` target "
"property."
msgstr "另见 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:2
msgid "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>"
msgstr "RUNTIME_OUTPUT_DIRECTORY_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:4
msgid ""
"Per-configuration output directory for :ref:`RUNTIME <Runtime Output "
"Artifacts>` target files."
msgstr ":ref:`RUNTIME <Runtime Output Artifacts>` 目标文件的每个配置输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:7
msgid ""
"This is a per-configuration version of the "
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target property, but multi-"
"configuration generators (:ref:`Visual Studio Generators`, "
":generator:`Xcode`) do NOT append a per-configuration subdirectory to the "
"specified directory.  This property is initialized by the value of the "
":variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>` variable if it is set "
"when a target is created."
msgstr ""
"这是 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` 目标属性的每个配置版本，但多配置生成器（ :ref:`Visual "
"Studio "
"Generators`、 :generator:`Xcode`）不会将每个配置子目录附加到指定的目录。如果在创建目标时设置了此属性，则该属性由 "
"CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG> 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_DIRECTORY_CONFIG.rst:16
msgid ""
"Contents of ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` may use "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
"``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` 的内容可以使用 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_NAME.rst:2
msgid "RUNTIME_OUTPUT_NAME"
msgstr "RUNTIME_OUTPUT_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_NAME.rst:8
msgid ""
"See also the :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>` target property."
msgstr "另请参阅 :prop_tgt:`RUNTIME_OUTPUT_NAME_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.rst:2
msgid "RUNTIME_OUTPUT_NAME_<CONFIG>"
msgstr "RUNTIME_OUTPUT_NAME_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.rst:4
msgid ""
"Per-configuration output name for :ref:`RUNTIME <Runtime Output "
"Artifacts>` target files."
msgstr ":ref:`RUNTIME <Runtime Output Artifacts>` 目标文件的每个配置输出名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/RUNTIME_OUTPUT_NAME_CONFIG.rst:7
msgid ""
"This is the configuration-specific version of the "
":prop_tgt:`RUNTIME_OUTPUT_NAME` target property."
msgstr "这是 :prop_tgt:`RUNTIME_OUTPUT_NAME` 目标属性的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SKIP_BUILD_RPATH.rst:2
msgid "SKIP_BUILD_RPATH"
msgstr "SKIP_BUILD_RPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SKIP_BUILD_RPATH.rst:4
msgid "Should rpaths be used for the build tree."
msgstr "应该将 rpaths 用于构建树。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SKIP_BUILD_RPATH.rst:6
msgid ""
"``SKIP_BUILD_RPATH`` is a boolean specifying whether to skip automatic "
"generation of an rpath allowing the target to run from the build tree, see"
" also the :prop_tgt:`BUILD_RPATH` target property. This property is "
"initialized by the value of the variable "
":variable:`CMAKE_SKIP_BUILD_RPATH` if it is set when a target is created."
msgstr ""
"``SKIP_BUILD_RPATH`` 是一个布尔值，指定是否跳过自动生成 rpath "
"以允许目标从构建树运行，另请参阅:prop_tgt:`BUILD_RPATH` 目标属性。如果在创建目标时设置了此属性，则该属性由变量 "
"CMAKE_SKIP_BUILD_RPATH 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:2
msgid "SOURCES"
msgstr "来源"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:4
msgid ""
"This specifies the list of paths to source files for the target. The "
"following commands all set or add to the ``SOURCES`` target property and "
"are the usual way to manipulate it:"
msgstr "这指定了目标源文件的路径列表。以下命令都设置或添加到 ``SOURCES`` 目标属性，并且是操作它的常用方法："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:8
msgid ":command:`add_executable`"
msgstr ":command:`add_executable`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:9
msgid ":command:`add_library`"
msgstr ":command:`add_library`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:10
msgid ":command:`add_custom_target`"
msgstr ":command:`add_custom_target`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:11
msgid ":command:`target_sources`"
msgstr ":command:`target_sources`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:13
msgid ""
"Contents of ``SOURCES`` may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. If a path starts with a generator expression, "
"it is expected to evaluate to an absolute path. Not doing so is considered"
" undefined behavior."
msgstr ""
"``SOURCES`` 的内容可以使用 :manual:`generator expressions <cmake-generator-"
"expressions(7)>`。如果路径以生成器表达式开头，则应计算为绝对路径。不这样做被认为是未定义的行为。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:18
msgid ""
"Paths that are for files generated by the build will be treated as "
"relative to the build directory of the target, if the path is not already "
"specified as an absolute path.  Note that whether a file is seen as "
"generated may be affected by policy :policy:`CMP0118`."
msgstr ""
"如果路径尚未指定为绝对路径，则构建生成的文件的路径将被视为相对于目标的构建目录。请注意，一个文件是否被视为已生成可能会受到策略 "
":policy:`CMP0118` 的影响。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:23
msgid ""
"If a path does not start with a generator expression, is not an absolute "
"path and is not a generated file, it will be treated as relative to the "
"location selected by the first of the following that matches:"
msgstr "如果路径不以生成器表达式开头，不是绝对路径，也不是生成的文件，它将被视为相对于由以下第一个匹配的位置选择的位置："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:27
msgid ""
"If a file by the specified path exists relative to the target's source "
"directory, use that file."
msgstr "如果指定路径的文件相对于目标的源目录存在，则使用该文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:29
msgid ""
"If policy :policy:`CMP0115` is not set to ``NEW``, try appending each "
"known source file extension to the path and check if that exists relative "
"to the target's source directory."
msgstr ""
"如果策略:policy:`CMP0115` 未设置为 ``NEW``，请尝试将每个已知的源文件扩展名附加到路径并检查是否存在相对于目标源目录的文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:32
msgid ""
"Repeat the above two steps, this time relative to the target's binary "
"directory instead."
msgstr "重复以上两个步骤，这次是相对于目标的二进制目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCES.rst:35
msgid ""
"Note that the above decisions are made at generation time, not build time."
msgstr "请注意，上述决定是在生成时做出的，而不是构建时。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCE_DIR.rst:2
msgid "SOURCE_DIR"
msgstr "源目录"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOURCE_DIR.rst:6
msgid ""
"This read-only property reports the value of the "
":variable:`CMAKE_CURRENT_SOURCE_DIR` variable in the directory in which "
"the target was defined."
msgstr "此只读属性报告定义目标的目录中的 CMAKE_CURRENT_SOURCE_DIR 变量的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:2
msgid "SOVERSION"
msgstr "主权"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:4
msgid "What version number is this target."
msgstr "这个目标是什么版本号。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:6
msgid ""
"For shared libraries :prop_tgt:`VERSION` and ``SOVERSION`` can be used to "
"specify the build version and API version respectively.  When building or "
"installing appropriate symlinks are created if the platform supports "
"symlinks and the linker supports so-names.  If only one of both is "
"specified the missing is assumed to have the same version number. "
"``SOVERSION`` is ignored if :prop_tgt:`NO_SONAME` property is set."
msgstr ""
"对于共享库 :prop_tgt:`VERSION` 和 ``SOVERSION`` 可分别用于指定构建版本和 API "
"版本。当构建或安装适当的符号链接时，如果平台支持符号链接并且链接器支持 so-"
"names。如果仅指定两者之一，则假定缺少的具有相同的版本号。如果设置了 :prop_tgt:`NO_SONAME` "
"属性，``SOVERSION`` 将被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:16
msgid "Windows Versions"
msgstr "Windows 版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:16
msgid ""
"For shared libraries and executables on Windows the :prop_tgt:`VERSION` "
"attribute is parsed to extract a ``<major>.<minor>`` version number. These"
" numbers are used as the image version of the binary."
msgstr ""
"对于 Windows 上的共享库和可执行文件，解析 :prop_tgt:`VERSION` 属性以提取 ``<major>.<minor>`` "
"版本号。这些数字用作二进制文件的映像版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:23
msgid "Mach-O Versions"
msgstr "Mach-O 版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:23
msgid ""
"For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), "
"the ``SOVERSION`` property corresponds to the *compatibility version* and "
":prop_tgt:`VERSION` corresponds to the *current version* (unless Mach-O "
"specific overrides are provided, as discussed below). See the "
":prop_tgt:`FRAMEWORK` target property for an example."
msgstr ""
"对于 Mach-O 系统（例如 macOS、iOS）上的共享库和可执行文件，``SOVERSION`` 属性对应于*兼容版本*，而 "
":prop_tgt:`VERSION` 对应于*当前版本*（除非 Mach-O提供了特定的覆盖，如下所述）。有关示例，请参见 "
":prop_tgt:`FRAMEWORK` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:29
msgid ""
"For shared libraries, the :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and "
":prop_tgt:`MACHO_CURRENT_VERSION` properties can be used to override the "
"*compatibility version* and *current version* respectively. Note that "
"``SOVERSION`` will still be used to form the ``install_name`` and both "
"``SOVERSION`` and :prop_tgt:`VERSION` may also affect the file and symlink"
" names."
msgstr ""
"对于共享库， :prop_tgt:`MACHO_COMPATIBILITY_VERSION` "
"和 :prop_tgt:`MACHO_CURRENT_VERSION` "
"属性可用于分别覆盖*兼容版本*和*当前版本*。请注意，``SOVERSION`` 仍将用于形成 ``install_name`` 并且 "
"``SOVERSION`` 和 :prop_tgt:`VERSION` 也可能影响文件和符号链接名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SOVERSION.rst:36
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:38
msgid ""
"Versions of Mach-O binaries may be checked with the ``otool -L <binary>`` "
"command."
msgstr "可以使用“otool -L <binary>”命令检查 Mach-O 二进制文件的版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS.rst:2
msgid "STATIC_LIBRARY_FLAGS"
msgstr "STATIC_LIBRARY_FLAGS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS.rst:4
msgid ""
"Archiver (or MSVC librarian) flags for a static library target. Targets "
"that are shared libraries, modules, or executables need to use the "
":prop_tgt:`LINK_OPTIONS` or :prop_tgt:`LINK_FLAGS` target properties."
msgstr ""
"静态库目标的归档器（或 MSVC 库管理器）标志。作为共享库、模块或可执行文件的目标需要使用 LINK_OPTIONS 或 LINK_FLAGS "
"目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS.rst:8
msgid ""
"The ``STATIC_LIBRARY_FLAGS`` property, managed as a string, can be used to"
" add extra flags to the link step of a static library target. "
":prop_tgt:`STATIC_LIBRARY_FLAGS_<CONFIG>` will add to the configuration "
"``<CONFIG>``, for example, ``DEBUG``, ``RELEASE``, ``MINSIZEREL``, "
"``RELWITHDEBINFO``, ..."
msgstr ""
"作为字符串管理的 ``STATIC_LIBRARY_FLAGS`` 属性可用于向静态库目标的链接步骤添加额外的标志。 "
":prop_tgt:`STATIC_LIBRARY_FLAGS_<CONFIG>` 将添加到配置 "
"``<CONFIG>``，例如，``DEBUG``、``RELEASE``、``MINSIZEREL``、``RELWITHDEBINFO``、. "
".."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.rst:11
msgid ""
"This property has been superseded by :prop_tgt:`STATIC_LIBRARY_OPTIONS` "
"property."
msgstr "此属性已被 :prop_tgt:`STATIC_LIBRARY_OPTIONS` 属性取代。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.rst:2
msgid "STATIC_LIBRARY_FLAGS_<CONFIG>"
msgstr "STATIC_LIBRARY_FLAGS_<配置>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.rst:4
msgid ""
"Per-configuration archiver (or MSVC librarian) flags for a static library "
"target."
msgstr "静态库目标的每个配置归档器（或 MSVC 库管理器）标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_FLAGS_CONFIG.rst:7
msgid ""
"This is the configuration-specific version of "
":prop_tgt:`STATIC_LIBRARY_FLAGS`."
msgstr "这是 :prop_tgt:`STATIC_LIBRARY_FLAGS` 的特定配置版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_OPTIONS.rst:2
msgid "STATIC_LIBRARY_OPTIONS"
msgstr "STATIC_LIBRARY_OPTIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_OPTIONS.rst:6
msgid ""
"Archiver (or MSVC librarian) flags for a static library target. Targets "
"that are shared libraries, modules, or executables need to use the "
":prop_tgt:`LINK_OPTIONS` target property."
msgstr "静态库目标的归档器（或 MSVC 库管理器）标志。作为共享库、模块或可执行文件的目标需要使用 LINK_OPTIONS 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_OPTIONS.rst:10
msgid ""
"This property holds a :ref:`semicolon-separated list <CMake Language "
"Lists>` of options specified so far for its target.  Use "
":command:`set_target_properties` or :command:`set_property` commands to "
"set its content."
msgstr ""
"此属性包含到目前为止为其目标指定的选项的 :ref:`分号分隔列表 <CMake Language Lists>`。使用 "
":command:`set_target_properties` 或 :command:`set_property` 命令设置其内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_OPTIONS.rst:14
msgid ""
"Contents of ``STATIC_LIBRARY_OPTIONS`` may use \"generator expressions\" "
"with the syntax ``$<...>``.  See the :manual:`cmake-generator-"
"expressions(7)` manual for available expressions.  See the :manual:`cmake-"
"buildsystem(7)` manual for more on defining buildsystem properties."
msgstr ""
"``STATIC_LIBRARY_OPTIONS`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/STATIC_LIBRARY_OPTIONS.rst:21
msgid ""
"This property must be used in preference to "
":prop_tgt:`STATIC_LIBRARY_FLAGS` property."
msgstr "此属性必须优先于 :prop_tgt:`STATIC_LIBRARY_FLAGS` 属性使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SUFFIX.rst:2
msgid "SUFFIX"
msgstr "后缀"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SUFFIX.rst:4
msgid "What comes after the target name."
msgstr "目标名称之后的内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SUFFIX.rst:6
msgid ""
"A target property that can be set to override the suffix (such as ``.so`` "
"or ``.exe``) on the name of a library, module or executable."
msgstr "一个目标属性，可以设置为覆盖库、模块或可执行文件名称上的后缀（例如“.so”或“.exe”）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SYSTEM.rst:2
msgid "SYSTEM"
msgstr "系统"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SYSTEM.rst:6
msgid ""
"Specifies that a target is a system target.  This has the following "
"effects:"
msgstr "指定目标是系统目标。这具有以下效果："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SYSTEM.rst:9
msgid ""
"Entries of :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` are treated as system"
" include directories when compiling consumers. Entries of "
":prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` are not affected, and "
"will always be treated as system include directories."
msgstr ""
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` 的条目在编译消费者时被视为系统包含目录。 "
":prop_tgt:`INTERFACE_SYSTEM_INCLUDE_DIRECTORIES` 的条目不受影响，并且将始终被视为系统包含目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SYSTEM.rst:14
msgid ""
"For imported targets, this property defaults to true, which means that "
"their :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` are treated as system "
"directories by default.  If their ``SYSTEM`` property is false, then their"
" :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` will not be treated as system."
"  Use the :prop_tgt:`EXPORT_NO_SYSTEM` property to change how a target's "
"``SYSTEM`` property is set when it is installed."
msgstr ""
"对于导入的目标，此属性默认为 true，这意味着它们的 INTERFACE_INCLUDE_DIRECTORIES 默认被视为系统目录。如果它们的 "
"``SYSTEM`` 属性为 false，那么它们的 :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` "
"将不会被视为系统。使用 :prop_tgt:`EXPORT_NO_SYSTEM` 属性更改目标的 ``SYSTEM`` 属性在安装时的设置方式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/SYSTEM.rst:21
msgid ""
"For non-imported targets, this target property is initialized from the "
":prop_dir:`SYSTEM` directory property when the target is created."
msgstr "对于非导入的目标，此目标属性是在创建目标时从 :prop_dir:`SYSTEM` 目录属性初始化的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_DEPENDENCIES_FILE.rst:2
msgid "Swift_DEPENDENCIES_FILE"
msgstr "Swift_DEPENDENCIES_FILE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_DEPENDENCIES_FILE.rst:6
msgid ""
"This property sets the path for the Swift dependency file (swiftdep) for "
"the target.  If one is not specified, it will default to "
"``<TARGET>.swiftdeps``."
msgstr ""
"此属性设置目标的 Swift 依赖文件 (swiftdep) 的路径。如果未指定，它将默认为 ``<TARGET>.swiftdeps``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_LANGUAGE_VERSION.rst:2
msgid "Swift_LANGUAGE_VERSION"
msgstr "Swift_LANGUAGE_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_LANGUAGE_VERSION.rst:6
msgid ""
"This property sets the language version for the Swift sources in the "
"target.  If one is not specified, it will default to "
"``<CMAKE_Swift_LANGUAGE_VERSION>`` if specified, otherwise it is the "
"latest version supported by the compiler."
msgstr ""
"此属性设置目标中 Swift "
"源的语言版本。如果未指定，则默认为``<CMAKE_Swift_LANGUAGE_VERSION>``，否则为编译器支持的最新版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_MODULE_DIRECTORY.rst:2
msgid "Swift_MODULE_DIRECTORY"
msgstr "Swift_MODULE_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_MODULE_DIRECTORY.rst:6
msgid "Specify output directory for Swift modules provided by the target."
msgstr "为目标提供的 Swift 模块指定输出目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_MODULE_DIRECTORY.rst:8
msgid ""
"If the target contains Swift source files, this specifies the directory in"
" which the modules will be placed.  When this property is not set, the "
"modules will be placed in the build directory corresponding to the "
"target's source directory. If the variable "
":variable:`CMAKE_Swift_MODULE_DIRECTORY` is set when a target is created "
"its value is used to initialize this property."
msgstr ""
"如果目标包含 Swift 源文件，这将指定放置模块的目录。当此属性未设置时，模块将放置在目标源目录对应的构建目录中。如果在创建目标时设置了变量 "
":variable:`CMAKE_Swift_MODULE_DIRECTORY`，则其值用于初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_MODULE_NAME.rst:2
msgid "Swift_MODULE_NAME"
msgstr "Swift_MODULE_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/Swift_MODULE_NAME.rst:6
msgid ""
"This property specifies the name of the Swift module.  It is defaulted to "
"the name of the target."
msgstr "此属性指定 Swift 模块的名称。它默认为目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/TYPE.rst:2
msgid "TYPE"
msgstr "类型"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/TYPE.rst:4
msgid "The type of the target."
msgstr "目标的类型。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/TYPE.rst:6
msgid ""
"This read-only property can be used to test the type of the given target."
"  It will be one of ``STATIC_LIBRARY``, ``MODULE_LIBRARY``, "
"``SHARED_LIBRARY``, ``OBJECT_LIBRARY``, ``INTERFACE_LIBRARY``, "
"``EXECUTABLE`` or one of the internal target types."
msgstr ""
"此只读属性可用于测试给定目标的类型。它将是“STATIC_LIBRARY”、“MODULE_LIBRARY”、“SHARED_LIBRARY”、“OBJECT_LIBRARY”、“INTERFACE_LIBRARY”、“EXECUTABLE”或内部目标类型之一。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:2
msgid "UNITY_BUILD"
msgstr "统一构建"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:6
msgid ""
"When this property is set to true, the target source files will be "
"combined into batches for faster compilation.  This is done by creating a "
"(set of) unity sources which ``#include`` the original sources, then "
"compiling these unity sources instead of the originals.  This is known as "
"a *Unity* or *Jumbo* build."
msgstr ""
"当此属性设置为 true "
"时，目标源文件将合并为批次以加快编译速度。这是通过创建一个（一组）统一源来完成的，其中``#include``原始源，然后编译这些统一源而不是原始源。这被称为"
" *Unity* 或 *Jumbo* 构建。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:12
msgid ""
"CMake provides different algorithms for selecting which sources are "
"grouped together into a *bucket*. Algorithm selection is decided by the "
":prop_tgt:`UNITY_BUILD_MODE` target property, which has the following "
"acceptable values:"
msgstr ""
"CMake 提供了不同的算法来选择将哪些源组合到一个*桶*中。算法选择由 :prop_tgt:`UNITY_BUILD_MODE` "
"目标属性决定，它具有以下可接受的值："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:17
msgid ""
"``BATCH`` When in this mode CMake determines which files are grouped "
"together. The :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property controls the "
"upper limit on how many sources can be combined per unity source file."
msgstr ""
"``BATCH`` 在此模式下，CMake 确定将哪些文件组合在一起。 :prop_tgt:`UNITY_BUILD_BATCH_SIZE` "
"属性控制每个统一源文件可以组合多少源的上限。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:22
msgid ""
"``GROUP`` When in this mode each target explicitly specifies how to group "
"source files. Each source file that has the same :prop_sf:`UNITY_GROUP` "
"value will be grouped together. Any sources that don't have this property "
"will be compiled individually. The :prop_tgt:`UNITY_BUILD_BATCH_SIZE` "
"property is ignored when using this mode."
msgstr ""
"``GROUP`` 在这种模式下，每个目标明确指定如何对源文件进行分组。每个具有相同 :prop_sf:`UNITY_GROUP` "
"值的源文件将被组合在一起。任何不具有此属性的源都将单独编译。使用此模式时将忽略 :prop_tgt:`UNITY_BUILD_BATCH_SIZE`"
" 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:30
msgid ""
"If no explicit :prop_tgt:`UNITY_BUILD_MODE` has been specified, CMake will"
" default to ``BATCH``."
msgstr "如果没有明确指定 :prop_tgt:`UNITY_BUILD_MODE`，CMake 将默认为 ``BATCH``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:33
msgid ""
"Unity builds are not currently supported for all languages.  CMake version"
" |release| supports combining ``C`` and ``CXX`` source files.  For targets"
" that mix source files from more than one language, CMake will separate "
"the languages such that each generated unity source file only contains "
"sources for a single language."
msgstr ""
"目前并非所有语言都支持 Unity 构建。 CMake 版本 |发布|支持合并``C`` 和``CXX`` "
"源文件。对于混合来自多种语言的源文件的目标，CMake 将分离语言，以便每个生成的统一源文件仅包含一种语言的源代码。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:39
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_UNITY_BUILD` variable when a target is created."
msgstr "创建目标时，此属性由 :variable:`CMAKE_UNITY_BUILD` 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:44
msgid ""
"Projects should not directly set the ``UNITY_BUILD`` property or its "
"associated :variable:`CMAKE_UNITY_BUILD` variable to true.  Depending on "
"the capabilities of the build machine and compiler used, it might or might"
" not be appropriate to enable unity builds.  Therefore, this feature "
"should be under developer control, which would normally be through the "
"developer choosing whether or not to set the :variable:`CMAKE_UNITY_BUILD`"
" variable on the :manual:`cmake(1)` command line or some other equivalent "
"method.  However, it IS recommended to set the ``UNITY_BUILD`` target "
"property to false if it is known that enabling unity builds for the target"
" can lead to problems."
msgstr ""
"项目不应直接将 ``UNITY_BUILD`` 属性或其关联的 :variable:`CMAKE_UNITY_BUILD` 变量设置为 "
"true。根据所使用的构建机器和编译器的功能，启用统一构建可能适合也可能不适合。因此，此功能应由开发人员控制，通常由开发人员选择是否在 "
"cmake(1) 命令行或其他等效方法上设置 CMAKE_UNITY_BUILD 变量。但是，如果已知为目标启用统一构建会导致问题，建议将 "
"``UNITY_BUILD`` 目标属性设置为 false。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:56
msgid "ODR (One definition rule) errors"
msgstr "ODR（单一定义规则）错误"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:58
msgid ""
"When multiple source files are included into one source file, as is done "
"for unity builds, it can potentially lead to ODR errors.  CMake provides a"
" number of measures to help address such problems:"
msgstr "当多个源文件包含到一个源文件中时（如统一构建所做的那样），可能会导致 ODR 错误。 CMake 提供了许多措施来帮助解决此类问题："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:62
msgid ""
"Any source file that has a non-empty :prop_sf:`COMPILE_OPTIONS`, "
":prop_sf:`COMPILE_DEFINITIONS`, :prop_sf:`COMPILE_FLAGS`, or "
":prop_sf:`INCLUDE_DIRECTORIES` source property will not be combined into a"
" unity source."
msgstr ""
"任何具有非空 COMPILE_OPTIONS、COMPILE_DEFINITIONS、COMPILE_FLAGS 或 "
"INCLUDE_DIRECTORIES 源属性的源文件都不会合并到统一源中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:67
msgid ""
"Projects can prevent an individual source file from being combined into a "
"unity source by setting its :prop_sf:`SKIP_UNITY_BUILD_INCLUSION` source "
"property to true.  This can be a more effective way to prevent problems "
"with specific files than disabling unity builds for an entire target."
msgstr ""
"项目可以通过将其 :prop_sf:`SKIP_UNITY_BUILD_INCLUSION` 源属性设置为 true "
"来防止将单个源文件合并到一个统一源中。与禁用整个目标的统一构建相比，这是防止特定文件出现问题的更有效方法。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:73
msgid ""
"Projects can set :prop_tgt:`UNITY_BUILD_UNIQUE_ID` to cause a valid "
"C-identifier to be generated which is unique per file in a unity build.  "
"This can be used to avoid problems with anonymous namespaces in unity "
"builds."
msgstr ""
"项目可以设置 :prop_tgt:`UNITY_BUILD_UNIQUE_ID` 以生成有效的 C "
"标识符，该标识符在统一构建中的每个文件都是唯一的。这可用于避免统一构建中匿名命名空间的问题。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:78
msgid ""
"The :prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE` and "
":prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE` target properties can be used "
"to inject code into the unity source files before and after every "
"``#include`` statement."
msgstr ""
":prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE` 和 "
":prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE` 目标属性可用于在每个 ``#include`` "
"语句前后将代码注入统一源文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD.rst:83
msgid ""
"The order of source files added to the target via commands like "
":command:`add_library`, :command:`add_executable` or "
":command:`target_sources` will be preserved in the generated unity source "
"files.  This can be used to manually enforce a specific grouping based on "
"the :prop_tgt:`UNITY_BUILD_BATCH_SIZE` target property."
msgstr ""
"通过 :command:`add_library`、 :command:`add_executable` 或 "
":command:`target_sources` 等命令添加到目标的源文件的顺序将保留在生成的统一源文件中。这可用于基于 "
":prop_tgt:`UNITY_BUILD_BATCH_SIZE` 目标属性手动实施特定分组。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_BATCH_SIZE.rst:2
msgid "UNITY_BUILD_BATCH_SIZE"
msgstr "UNITY_BUILD_BATCH_SIZE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_BATCH_SIZE.rst:6
msgid ""
"Specifies the maximum number of source files that can be combined into any"
" one unity source file when unity builds are enabled by the "
":prop_tgt:`UNITY_BUILD` target property.  The original source files will "
"be distributed across as many unity source files as necessary to honor "
"this limit."
msgstr ""
"当 UNITY_BUILD "
"目标属性启用统一构建时，指定可以合并到任何一个统一源文件中的源文件的最大数量。原始源文件将根据需要分布在尽可能多的统一源文件中以遵守此限制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_BATCH_SIZE.rst:11
msgid ""
"The initial value for this property is taken from the "
":variable:`CMAKE_UNITY_BUILD_BATCH_SIZE` variable when the target is "
"created. If that variable has not been set, the initial value will be 8."
msgstr "创建目标时，此属性的初始值取自 CMAKE_UNITY_BUILD_BATCH_SIZE 变量。如果尚未设置该变量，则初始值为 8。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_BATCH_SIZE.rst:15
msgid ""
"The batch size needs to be selected carefully.  If set too high, the size "
"of the combined source files could result in the compiler using excessive "
"memory or hitting other similar limits.  In extreme cases, this can even "
"result in build failure.  On the other hand, if the batch size is too low,"
" there will be little gain in build performance."
msgstr ""
"需要仔细选择批量大小。如果设置得太高，组合源文件的大小可能会导致编译器使用过多的内存或达到其他类似的限制。在极端情况下，这甚至会导致构建失败。另一方面，如果批量大小太小，构建性能的提升将很小。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_BATCH_SIZE.rst:21
msgid ""
"Although strongly discouraged, the batch size may be set to a value of 0 "
"to combine all the sources for the target into a single unity file, "
"regardless of how many sources are involved.  This runs the risk of "
"creating an excessively large unity source file and negatively impacting "
"the build performance, so a value of 0 is not generally recommended."
msgstr ""
"尽管强烈建议不要将批量大小设置为 0 "
"值，以便将目标的所有源合并到一个统一文件中，而不管涉及多少源。这存在创建过大的统一源文件并对构建性能产生负面影响的风险，因此通常不建议使用 0 值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_AFTER_INCLUDE.rst:2
msgid "UNITY_BUILD_CODE_AFTER_INCLUDE"
msgstr "UNITY_BUILD_CODE_AFTER_INCLUDE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_AFTER_INCLUDE.rst:6
msgid ""
"Code snippet which is included verbatim by the :prop_tgt:`UNITY_BUILD` "
"feature just after every ``#include`` statement in the generated unity "
"source files.  For example:"
msgstr "UNITY_BUILD 功能在生成的统一源文件中的每个 #include 语句之后逐字包含的代码片段。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_AFTER_INCLUDE.rst:21
msgid "See also :prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE`."
msgstr "另见 :prop_tgt:`UNITY_BUILD_CODE_BEFORE_INCLUDE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_BEFORE_INCLUDE.rst:2
msgid "UNITY_BUILD_CODE_BEFORE_INCLUDE"
msgstr "UNITY_BUILD_CODE_BEFORE_INCLUDE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_BEFORE_INCLUDE.rst:6
msgid ""
"Code snippet which is included verbatim by the :prop_tgt:`UNITY_BUILD` "
"feature just before every ``#include`` statement in the generated unity "
"source files.  For example:"
msgstr ""
"由 :prop_tgt:`UNITY_BUILD` 功能逐字包含的代码片段，就在生成的统一源文件中的每个 `#include`` 语句之前。例如："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_CODE_BEFORE_INCLUDE.rst:21
msgid "See also :prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE`."
msgstr "另见 :prop_tgt:`UNITY_BUILD_CODE_AFTER_INCLUDE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:2
msgid "UNITY_BUILD_MODE"
msgstr "UNITY_BUILD_MODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:6
msgid ""
"CMake provides different algorithms for selecting which sources are "
"grouped together into a *bucket*. Selection is decided by this property, "
"which has the following acceptable values:"
msgstr "CMake 提供了不同的算法来选择将哪些源组合到一个*桶*中。选择由该属性决定，它具有以下可接受的值："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:28
msgid "``BATCH``"
msgstr "``批量``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:11
msgid ""
"When in this mode CMake determines which files are grouped together. The "
":prop_tgt:`UNITY_BUILD_BATCH_SIZE` property controls the upper limit on "
"how many sources can be combined per unity source file."
msgstr ""
"在这种模式下，CMake 确定将哪些文件组合在一起。 :prop_tgt:`UNITY_BUILD_BATCH_SIZE` "
"属性控制每个统一源文件可以组合多少源的上限。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:38
msgid "Example usage:"
msgstr "用法示例："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:57
msgid "``GROUP``"
msgstr "``组``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:31
msgid ""
"When in this mode each target explicitly specifies how to group source "
"files. Each source file that has the same :prop_sf:`UNITY_GROUP` value "
"will be grouped together. Any sources that don't have this property will "
"be compiled individually. The :prop_tgt:`UNITY_BUILD_BATCH_SIZE` property "
"is ignored when using this mode."
msgstr ""
"在这种模式下，每个目标明确指定如何对源文件进行分组。每个具有相同 :prop_sf:`UNITY_GROUP` "
"值的源文件将被组合在一起。任何不具有此属性的源都将单独编译。使用此模式时将忽略 :prop_tgt:`UNITY_BUILD_BATCH_SIZE`"
" 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_MODE.rst:59
msgid ""
"If no explicit ``UNITY_BUILD_MODE`` has been specified, CMake will default"
" to ``BATCH``."
msgstr "如果没有明确指定 ``UNITY_BUILD_MODE``，CMake 将默认为 ``BATCH``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:2
msgid "UNITY_BUILD_UNIQUE_ID"
msgstr "UNITY_BUILD_UNIQUE_ID"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:6
msgid ""
"The name of a valid C-identifier which is set to a unique per-file value "
"during unity builds."
msgstr "在统一构建期间设置为每个文件唯一值的有效 C 标识符的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:9
msgid ""
"When this property is populated and when :prop_tgt:`UNITY_BUILD` is true, "
"the property value is used to define a compiler definition of the "
"specified name. The value of the defined symbol is unspecified, but it is "
"unique per file path."
msgstr ""
"当此属性被填充且 :prop_tgt:`UNITY_BUILD` "
"为真时，该属性值用于定义指定名称的编译器定义。已定义符号的值未指定，但每个文件路径都是唯一的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:14
msgid "Given:"
msgstr "鉴于："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:23
msgid "the ``MY_UNITY_ID`` symbol is defined to a unique per-file value."
msgstr "``MY_UNITY_ID`` 符号被定义为每个文件的唯一值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:25
msgid ""
"One known use case for this identifier is to disambiguate the variables in"
" an anonymous namespace in a limited scope. Anonymous namespaces present a"
" problem for unity builds because they are used to ensure that certain "
"variables and declarations are scoped to a translation unit which is "
"approximated by a single source file.  When source files are combined in a"
" unity build file, those variables in different files are combined in a "
"single translation unit and the names clash.  This property can be used to"
" avoid that with code like the following:"
msgstr ""
"此标识符的一个已知用例是在有限范围内消除匿名名称空间中变量的歧义。匿名命名空间为统一构建带来了问题，因为它们用于确保某些变量和声明的范围限定为由单个源文件近似的翻译单元。当源文件组合在一个统一构建文件中时，不同文件中的那些变量组合在一个翻译单元中并且名称冲突。此属性可用于通过如下代码避免这种情况："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/UNITY_BUILD_UNIQUE_ID.rst:53
msgid ""
"The pseudonymous namespace is used within a truly anonymous namespace. On "
"many platforms, this maintains the invariant that the symbols within do "
"not get external linkage when performing a unity build."
msgstr "假名命名空间在真正匿名的命名空间中使用。在许多平台上，这保持不变，即在执行统一构建时，其中的符号不​​会获得外部链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:2
msgid "VERIFY_INTERFACE_HEADER_SETS"
msgstr "VERIFY_INTERFACE_HEADER_SETS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:6
msgid ""
"Used to verify that all headers in a target's ``PUBLIC`` and ``INTERFACE``"
" header sets can be included on their own."
msgstr "用于验证目标的 ``PUBLIC`` 和 ``INTERFACE`` 标头集中的所有标头是否可以单独包含。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:9
msgid ""
"When this property is set to true, and the target is an object library, "
"static library, shared library, interface library, or executable with "
"exports enabled, and the target has one or more ``PUBLIC`` or "
"``INTERFACE`` header sets, an object library target named "
"``<target_name>_verify_interface_header_sets`` is created. This "
"verification target has one source file per header in the ``PUBLIC`` and "
"``INTERFACE`` header sets. Each source file only includes its associated "
"header file. The verification target links against the original target to "
"get all of its usage requirements. The verification target has its "
":prop_tgt:`EXCLUDE_FROM_ALL` and :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` "
"properties set to true, and its :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC`, "
":prop_tgt:`AUTOUIC`, and :prop_tgt:`UNITY_BUILD` properties set to false."
msgstr ""
"当此属性设置为 true "
"时，目标是对象库、静态库、共享库、接口库或启用导出的可执行文件，并且目标具有一个或多个“PUBLIC”或“INTERFACE”标头集，一个名为“<target_name>_verify_interface_header_sets”的对象库目标被创建。此验证目标在"
" ``PUBLIC`` 和 ``INTERFACE`` "
"标头集中的每个标头都有一个源文件。每个源文件仅包含其关联的头文件。验证目标链接到原始目标以获得其所有使用要求。验证目标的 "
":prop_tgt:`EXCLUDE_FROM_ALL` 和 :prop_tgt:`DISABLE_PRECOMPILE_HEADERS` "
"属性设置为 true，并且其 :prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTORCC`、 :prop_tgt:`AUTOUIC`"
" 和 :prop_tgt： `UNITY_BUILD` 属性设置为 false。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:21
msgid ""
"If the header's :prop_sf:`LANGUAGE` property is set, the value of that "
"property is used to determine the language with which to compile the "
"header file. Otherwise, if the target has any C++ sources, the header is "
"compiled as C++. Otherwise, if the target has any C sources, the header is"
" compiled as C. Otherwise, if C++ is enabled globally, the header is "
"compiled as C++. Otherwise, if C is enabled globally, the header is "
"compiled as C. Otherwise, the header file is not compiled."
msgstr ""
"如果设置了标头的 :prop_sf:`LANGUAGE` 属性，则该属性的值用于确定编译头文件所使用的语言。否则，如果目标有任何 C++ "
"源，则标头将编译为 C++。否则，如果目标有任何 C 源，则头文件将编译为 C。否则，如果全局启用 C++，则头文件将编译为 "
"C++。否则，如果全局启用 C，则将头文件编译为 C。否则，不编译头文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:29
msgid ""
"If any verification targets are created, a top-level target called "
"``all_verify_interface_header_sets`` is created which depends on all "
"verification targets."
msgstr ""
"如果创建了任何验证目标，则会创建一个名为“all_verify_interface_header_sets”的顶级目标，它依赖于所有验证目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:33
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_VERIFY_INTERFACE_HEADER_SETS` variable if it is set when "
"a target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_VERIFY_INTERFACE_HEADER_SETS 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERIFY_INTERFACE_HEADER_SETS.rst:37
msgid ""
"If the project wishes to control which header sets are verified by this "
"property, it can set :prop_tgt:`INTERFACE_HEADER_SETS_TO_VERIFY`."
msgstr "如果项目希望控制此属性验证哪些标头集，则可以设置 INTERFACE_HEADER_SETS_TO_VERIFY。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:2
msgid "VERSION"
msgstr "版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:6
msgid ""
"For shared libraries ``VERSION`` and :prop_tgt:`SOVERSION` can be used to "
"specify the build version and API version respectively.  When building or "
"installing appropriate symlinks are created if the platform supports "
"symlinks and the linker supports so-names.  If only one of both is "
"specified the missing is assumed to have the same version number.  For "
"executables ``VERSION`` can be used to specify the build version.  When "
"building or installing appropriate symlinks are created if the platform "
"supports symlinks."
msgstr ""
"对于共享库，``VERSION`` 和 :prop_tgt:`SOVERSION` 可用于分别指定构建版本和 API "
"版本。当构建或安装适当的符号链接时，如果平台支持符号链接并且链接器支持 so-"
"names。如果仅指定两者之一，则假定缺少的具有相同的版本号。对于可执行文件，``VERSION`` "
"可用于指定构建版本。如果平台支持符号链接，则在构建或安装时会创建适当的符号链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:18
msgid ""
"For shared libraries and executables on Windows the ``VERSION`` attribute "
"is parsed to extract a ``<major>.<minor>`` version number. These numbers "
"are used as the image version of the binary."
msgstr ""
"对于 Windows 上的共享库和可执行文件，解析 ``VERSION`` 属性以提取 ``<major>.<minor>`` "
"版本号。这些数字用作二进制文件的映像版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:25
msgid ""
"For shared libraries and executables on Mach-O systems (e.g. macOS, iOS), "
"the :prop_tgt:`SOVERSION` property corresponds to the *compatibility "
"version* and ``VERSION`` corresponds to the *current version* (unless "
"Mach-O specific overrides are provided, as discussed below). See the "
":prop_tgt:`FRAMEWORK` target property for an example."
msgstr ""
"对于 Mach-O 系统（例如 macOS、iOS）上的共享库和可执行文件， :prop_tgt:`SOVERSION` "
"属性对应于*兼容版本*，``VERSION`` 对应于*当前版本*（除非 Mach-O提供了特定的覆盖，如下所述）。有关示例，请参见 "
":prop_tgt:`FRAMEWORK` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VERSION.rst:31
msgid ""
"For shared libraries, the :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and "
":prop_tgt:`MACHO_CURRENT_VERSION` properties can be used to override the "
"*compatibility version* and *current version* respectively. Note that "
":prop_tgt:`SOVERSION` will still be used to form the ``install_name`` and "
"both :prop_tgt:`SOVERSION` and ``VERSION`` may also affect the file and "
"symlink names."
msgstr ""
"对于共享库， :prop_tgt:`MACHO_COMPATIBILITY_VERSION` "
"和 :prop_tgt:`MACHO_CURRENT_VERSION` "
"属性可用于分别覆盖*兼容版本*和*当前版本*。请注意:prop_tgt:`SOVERSION` 仍将用于形成 ``install_name`` 并且"
" :prop_tgt:`SOVERSION` 和 ``VERSION`` 也可能影响文件和符号链接名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VISIBILITY_INLINES_HIDDEN.rst:2
msgid "VISIBILITY_INLINES_HIDDEN"
msgstr "VISIBILITY_INLINES_HIDDEN"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VISIBILITY_INLINES_HIDDEN.rst:4
msgid "Whether to add a compile flag to hide symbols of inline functions"
msgstr "是否添加编译标志以隐藏内联函数的符号"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VISIBILITY_INLINES_HIDDEN.rst:6
msgid ""
"The ``VISIBILITY_INLINES_HIDDEN`` property determines whether a flag for "
"hiding symbols for inline functions, such as ``-fvisibility-inlines-"
"hidden``, should be used when invoking the compiler.  This property "
"affects compilation in sources of all types of targets (subject to policy "
":policy:`CMP0063`)."
msgstr ""
"``VISIBILITY_INLINES_HIDDEN`` "
"属性确定在调用编译器时是否应使用用于隐藏内联函数符号的标志，例如``-fvisibility-inlines-"
"hidden``。此属性会影响所有类型目标源的编译（受策略 :policy:`CMP0063` 的约束）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VISIBILITY_INLINES_HIDDEN.rst:11
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_VISIBILITY_INLINES_HIDDEN` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_VISIBILITY_INLINES_HIDDEN 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_CONFIGURATION_TYPE.rst:2
msgid "VS_CONFIGURATION_TYPE"
msgstr "VS_CONFIGURATION_TYPE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_CONFIGURATION_TYPE.rst:6
msgid "Visual Studio project configuration type."
msgstr "Visual Studio 项目配置类型。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_CONFIGURATION_TYPE.rst:8
msgid ""
"Sets the ``ConfigurationType`` attribute for a generated Visual Studio "
"project. The property value may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. If this property is set, it overrides the "
"default setting that is based on the target type (e.g. ``StaticLibrary``, "
"``Application``, ...)."
msgstr ""
"为生成的 Visual Studio 项目设置“ConfigurationType”属性。属性值可以使用 :manual:`generator "
"expressions <cmake-generator-"
"expressions(7)>`。如果设置了此属性，它将覆盖基于目标类型的默认设置（例如``StaticLibrary``，``Application``，...）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_CONFIGURATION_TYPE.rst:14
msgid "Supported on :ref:`Visual Studio Generators` for VS 2010 and higher."
msgstr "在 VS 2010 及更高版本的 Visual Studio Generators 上受支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND.rst:2
msgid "VS_DEBUGGER_COMMAND"
msgstr "VS_DEBUGGER_COMMAND"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND.rst:6
msgid ""
"Sets the local debugger command for Visual Studio C++ targets. The "
"property value may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`. This is defined in ``<LocalDebuggerCommand>`` in the "
"Visual Studio project file."
msgstr ""
"为 Visual Studio C++ 目标设置本地调试器命令。属性值可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。这是在 Visual Studio "
"项目文件的“<LocalDebuggerCommand>”中定义的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND_ARGUMENTS.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_ENVIRONMENT.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_WORKING_DIRECTORY.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_STARTUP_OBJECT.rst:15
msgid ""
"This property only works for Visual Studio 11 2012 and above; it is "
"ignored on other generators."
msgstr "此属性仅适用于 Visual Studio 11 2012 及以上版本；它在其他生成器上被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND_ARGUMENTS.rst:2
msgid "VS_DEBUGGER_COMMAND_ARGUMENTS"
msgstr "VS_DEBUGGER_COMMAND_ARGUMENTS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_COMMAND_ARGUMENTS.rst:6
msgid ""
"Sets the local debugger command line arguments for Visual Studio C++ "
"targets. The property value may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. This is defined in "
"``<LocalDebuggerCommandArguments>`` in the Visual Studio project file."
msgstr ""
"为 Visual Studio C++ 目标设置本地调试器命令行参数。属性值可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。这是在 Visual Studio "
"项目文件的“<LocalDebuggerCommandArguments>”中定义的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_ENVIRONMENT.rst:2
msgid "VS_DEBUGGER_ENVIRONMENT"
msgstr "VS_DEBUGGER_ENVIRONMENT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_ENVIRONMENT.rst:6
msgid ""
"Sets the local debugger environment for Visual Studio C++ targets. The "
"property value may use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`. This is defined in ``<LocalDebuggerEnvironment>`` in the"
" Visual Studio project file."
msgstr ""
"为 Visual Studio C++ 目标设置本地调试器环境。属性值可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。这是在 Visual Studio "
"项目文件的“<LocalDebuggerEnvironment>”中定义的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_WORKING_DIRECTORY.rst:2
msgid "VS_DEBUGGER_WORKING_DIRECTORY"
msgstr "VS_DEBUGGER_WORKING_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DEBUGGER_WORKING_DIRECTORY.rst:6
msgid ""
"Sets the local debugger working directory for Visual Studio C++ targets. "
"The property value may use :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. This is defined in "
"``<LocalDebuggerWorkingDirectory>`` in the Visual Studio project file."
msgstr ""
"为 Visual Studio C++ 目标设置本地调试器工作目录。属性值可以使用 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。这是在 Visual Studio "
"项目文件的“<LocalDebuggerWorkingDirectory>”中定义的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.rst:2
msgid "VS_DESKTOP_EXTENSIONS_VERSION"
msgstr "VS_DESKTOP_EXTENSIONS_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.rst:6
msgid "Visual Studio Windows 10 Desktop Extensions Version"
msgstr "Visual Studio Windows 10 桌面扩展版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DESKTOP_EXTENSIONS_VERSION.rst:8
msgid ""
"Specifies the version of the Desktop Extensions that should be included in"
" the target. For example ``10.0.10240.0``. If the value is not specified, "
"the Desktop Extensions will not be included. To use the same version of "
"the extensions as the Windows 10 SDK that is being used, you can use the "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable."
msgstr ""
"指定应包含在目标中的桌面扩展的版本。例如``10.0.10240.0``。如果未指定该值，则不包括桌面扩展。要使用与正在使用的 Windows 10"
" SDK 相同版本的扩展，您可以使用 :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` "
"变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_DOCUMENTATION_FILE.rst:2
msgid "VS_DOTNET_DOCUMENTATION_FILE"
msgstr "VS_DOTNET_DOCUMENTATION_FILE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_DOCUMENTATION_FILE.rst:6
msgid "Visual Studio managed project .NET documentation output"
msgstr "Visual Studio 托管项目 .NET 文档输出"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_DOCUMENTATION_FILE.rst:8
msgid "Sets the target XML documentation file output."
msgstr "设置目标 XML 文档文件输出。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname.rst:2
msgid "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>"
msgstr "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname.rst:6
msgid ""
"Defines an XML property ``<tagname>`` for a .NET reference ``<refname>``."
msgstr "为 .NET 引用“<refname>”定义一个 XML 属性“<tagname>”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname.rst:9
msgid ""
"Reference properties can be set for .NET references which are defined by "
"the target properties :prop_tgt:`VS_DOTNET_REFERENCES`, "
":prop_tgt:`VS_DOTNET_REFERENCE_<refname>` and also for project references "
"to other C# targets which are established by "
":command:`target_link_libraries()`."
msgstr "可以为由目标属性定义的 .NET 引用设置引用属性()`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCEPROP_refname_TAG_tagname.rst:15
msgid ""
"This property is only applicable to C# targets and Visual Studio "
"generators 2010 and later."
msgstr "此属性仅适用于 C# 目标和 Visual Studio 生成器 2010 及更高版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES.rst:2
msgid "VS_DOTNET_REFERENCES"
msgstr "VS_DOTNET_REFERENCES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES.rst:4
msgid "Visual Studio managed project .NET references"
msgstr "Visual Studio 管理的项目 .NET 参考"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES.rst:6
msgid ""
"Adds one or more semicolon-delimited .NET references to a generated Visual"
" Studio project.  For example, \"System;System.Windows.Forms\"."
msgstr ""
"向生成的 Visual Studio 项目添加一个或多个以分号分隔的 .NET "
"引用。例如，“System;System.Windows.Forms”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES_COPY_LOCAL.rst:2
msgid "VS_DOTNET_REFERENCES_COPY_LOCAL"
msgstr "VS_DOTNET_REFERENCES_COPY_LOCAL"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES_COPY_LOCAL.rst:6
msgid ""
"Sets the **Copy Local** property for all .NET hint references in the "
"target"
msgstr "为目标中的所有 .NET 提示引用设置 **Copy Local** 属性"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCES_COPY_LOCAL.rst:8
msgid ""
"Boolean property to enable/disable copying of .NET hint references to "
"output directory. The default is ``ON``."
msgstr "用于启用/禁用将 .NET 提示引用复制到输出目录的布尔属性。默认是``ON``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCE_refname.rst:2
msgid "VS_DOTNET_REFERENCE_<refname>"
msgstr "VS_DOTNET_REFERENCE_<refname>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCE_refname.rst:6
msgid ""
"Visual Studio managed project .NET reference with name ``<refname>`` and "
"hint path."
msgstr "Visual Studio 管理的项目 .NET 引用名称为“<refname>”和提示路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCE_refname.rst:9
msgid ""
"Adds one .NET reference to generated Visual Studio project. The reference "
"will have the name ``<refname>`` and will point to the assembly given as "
"value of the property."
msgstr ""
"向生成的 Visual Studio 项目添加一个 .NET 引用。该引用将具有名称“<refname>”，并将指向作为属性值给出的程序集。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_REFERENCE_refname.rst:13
msgid ""
"See also :prop_tgt:`VS_DOTNET_REFERENCES` and "
":prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL`"
msgstr ""
"另见 :prop_tgt:`VS_DOTNET_REFERENCES` 和 "
":prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_STARTUP_OBJECT.rst:2
msgid "VS_DOTNET_STARTUP_OBJECT"
msgstr "VS_DOTNET_STARTUP_OBJECT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_STARTUP_OBJECT.rst:6
msgid ""
"Sets the startup object property in Visual Studio .NET targets. The "
"property value defines a full qualified class name (including package "
"name), for example: ``MyCompany.Package.MyStarterClass``."
msgstr ""
"在 Visual Studio .NET "
"目标中设置启动对象属性。属性值定义了一个完整的限定类名（包括包名），例如：``MyCompany.Package.MyStarterClass``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_STARTUP_OBJECT.rst:10
msgid ""
"If the property is unset, Visual Studio uses the first matching ``static "
"void Main(string[])`` function signature by default. When more than one "
"``Main()`` method is available in the current project, the property "
"becomes mandatory for building the project."
msgstr ""
"如果未设置该属性，Visual Studio 默认使用第一个匹配的 ``static void Main(string[])`` "
"函数签名。当当前项目中有多个 ``Main()`` 方法可用时，该属性对于构建项目来说是必需的。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.rst:2
msgid "VS_DOTNET_TARGET_FRAMEWORK_VERSION"
msgstr "VS_DOTNET_TARGET_FRAMEWORK_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.rst:6
msgid ""
"Used to specify the .NET target framework version for C++/CLI. For "
"example, \"v4.5\"."
msgstr "用于指定 C++/CLI 的 .NET 目标框架版本。例如，“v4.5”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DOTNET_TARGET_FRAMEWORK_VERSION.rst:9
msgid ""
"This property is deprecated and should not be used anymore. Use "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK` or "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` instead."
msgstr ""
"此属性已弃用，不应再使用。使用 :prop_tgt:`DOTNET_TARGET_FRAMEWORK` 或 "
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` 代替。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DPI_AWARE.rst:2
msgid "VS_DPI_AWARE"
msgstr "VS_DPI_AWARE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DPI_AWARE.rst:6
msgid ""
"Set the Manifest Tool -> Input and Output -> DPI Awareness in the Visual "
"Studio target project properties."
msgstr "在 Visual Studio 目标项目属性中设置清单工具 -> 输入和输出 -> DPI 感知。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_DPI_AWARE.rst:9
msgid "Valid values are ``PerMonitor``, ``ON``, or ``OFF``."
msgstr "有效值为“PerMonitor”、“ON”或“OFF”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_KEYWORD.rst:2
msgid "VS_GLOBAL_KEYWORD"
msgstr "VS_GLOBAL_KEYWORD"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_KEYWORD.rst:4
msgid "Visual Studio project keyword for VS 10 (2010) and newer."
msgstr "VS 10 (2010) 及更新版本的 Visual Studio 项目关键字。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_KEYWORD.rst:6
msgid ""
"Sets the \"keyword\" attribute for a generated Visual Studio project. "
"Defaults to \"Win32Proj\".  You may wish to override this value with "
"\"ManagedCProj\", for example, in a Visual Studio managed C++ unit test "
"project."
msgstr ""
"为生成的 Visual Studio "
"项目设置“关键字”属性。默认为“Win32Proj”。您可能希望使用“ManagedCProj”覆盖此值，例如，在 Visual Studio "
"管理的 C++ 单元测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_KEYWORD.rst:11
msgid ""
"Use the :prop_tgt:`VS_KEYWORD` target property to set the keyword for "
"Visual Studio 9 (2008) and older."
msgstr "使用 :prop_tgt:`VS_KEYWORD` 目标属性为 Visual Studio 9 (2008) 及更早版本设置关键字。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_PROJECT_TYPES.rst:2
msgid "VS_GLOBAL_PROJECT_TYPES"
msgstr "VS_GLOBAL_PROJECT_TYPES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_PROJECT_TYPES.rst:4
msgid "Visual Studio project type(s)."
msgstr "Visual Studio 项目类型。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_PROJECT_TYPES.rst:6
msgid ""
"Can be set to one or more UUIDs recognized by Visual Studio to indicate "
"the type of project.  This value is copied verbatim into the generated "
"project file.  Example for a managed C++ unit testing project:"
msgstr ""
"可以设置为一个或多个 Visual Studio 识别的 UUID，以指示项目类型。该值被逐字复制到生成的项目文件中。托管 C++ "
"单元测试项目示例："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_PROJECT_TYPES.rst:15
msgid "UUIDs are semicolon-delimited."
msgstr "UUID 以分号分隔。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_ROOTNAMESPACE.rst:2
msgid "VS_GLOBAL_ROOTNAMESPACE"
msgstr "VS_GLOBAL_ROOTNAMESPACE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_ROOTNAMESPACE.rst:4
msgid "Visual Studio project root namespace."
msgstr "Visual Studio 项目根命名空间。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_ROOTNAMESPACE.rst:6
msgid ""
"Sets the \"RootNamespace\" attribute for a generated Visual Studio "
"project.  The attribute will be generated only if this is set."
msgstr "为生成的 Visual Studio 项目设置“RootNamespace”属性。仅当设置此属性时才会生成该属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_variable.rst:2
msgid "VS_GLOBAL_<variable>"
msgstr "VS_GLOBAL_<变量>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_variable.rst:4
msgid "Visual Studio project-specific global variable."
msgstr "Visual Studio 项目特定的全局变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_GLOBAL_variable.rst:6
msgid ""
"Tell the Visual Studio generator to set the global variable '<variable>' "
"to a given value in the generated Visual Studio project. Ignored on other "
"generators.  Qt integration works better if VS_GLOBAL_QtVersion is set to "
"the version FindQt4.cmake found.  For example, \"4.7.3\""
msgstr ""
"告诉 Visual Studio 生成器将全局变量“<variable>”设置为生成的 Visual Studio "
"项目中的给定值。在其他生成器上被忽略。如果将 VS_GLOBAL_QtVersion 设置为 FindQt4.cmake 找到的版本，Qt "
"集成效果会更好。例如，“4.7.3”"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_EXTENSIONS_VERSION.rst:2
msgid "VS_IOT_EXTENSIONS_VERSION"
msgstr "VS_IOT_EXTENSIONS_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_EXTENSIONS_VERSION.rst:6
msgid "Visual Studio Windows 10 IoT Extensions Version"
msgstr "Visual Studio Windows 10 物联网扩展版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_EXTENSIONS_VERSION.rst:8
msgid ""
"Specifies the version of the IoT Extensions that should be included in the"
" target. For example ``10.0.10240.0``. If the value is not specified, the "
"IoT Extensions will not be included. To use the same version of the "
"extensions as the Windows 10 SDK that is being used, you can use the "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable."
msgstr ""
"指定应包含在目标中的 IoT 扩展的版本。例如``10.0.10240.0``。如果未指定该值，则不会包含 IoT 扩展。要使用与正在使用的 "
"Windows 10 SDK 相同版本的扩展，您可以使用 "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_STARTUP_TASK.rst:2
msgid "VS_IOT_STARTUP_TASK"
msgstr "VS_IOT_STARTUP_TASK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_STARTUP_TASK.rst:6
msgid "Visual Studio Windows 10 IoT Continuous Background Task"
msgstr "Visual Studio Windows 10 物联网连续后台任务"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_IOT_STARTUP_TASK.rst:8
msgid ""
"Specifies that the target should be compiled as a Continuous Background "
"Task library."
msgstr "指定应将目标编译为连续后台任务库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_JUST_MY_CODE_DEBUGGING.rst:2
msgid "VS_JUST_MY_CODE_DEBUGGING"
msgstr "VS_JUST_MY_CODE_DEBUGGING"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_JUST_MY_CODE_DEBUGGING.rst:6
msgid "Enable Just My Code with Visual Studio debugger."
msgstr "使用 Visual Studio 调试器启用“仅我的代码”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_JUST_MY_CODE_DEBUGGING.rst:8
msgid ""
"Supported on :ref:`Visual Studio Generators` for VS 2010 and higher, "
":ref:`Makefile Generators` and the :generator:`Ninja` generators."
msgstr "在 VS 2010 及更高版本的 Visual Studio 生成器、Makefile 生成器和 Ninja 生成器上受支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_JUST_MY_CODE_DEBUGGING.rst:11
msgid ""
"This property is initialized by the "
":variable:`CMAKE_VS_JUST_MY_CODE_DEBUGGING` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_VS_JUST_MY_CODE_DEBUGGING 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_KEYWORD.rst:2
msgid "VS_KEYWORD"
msgstr "VS_KEYWORD"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_KEYWORD.rst:4
msgid "Visual Studio project keyword for VS 9 (2008) and older."
msgstr "VS 9 (2008) 及更早版本的 Visual Studio 项目关键字。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_KEYWORD.rst:6
msgid ""
"Can be set to change the visual studio keyword, for example Qt integration"
" works better if this is set to Qt4VSv1.0."
msgstr "可以设置为更改 visual studio 关键字，例如，如果将其设置为 Qt4VSv1.0，Qt 集成效果会更好。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_KEYWORD.rst:9
msgid ""
"Use the :prop_tgt:`VS_GLOBAL_KEYWORD` target property to set the keyword "
"for Visual Studio 11 (2012) and newer."
msgstr ""
"使用 :prop_tgt:`VS_GLOBAL_KEYWORD` 目标属性为 Visual Studio 11 (2012) 及更高版本设置关键字。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.rst:2
msgid "VS_MOBILE_EXTENSIONS_VERSION"
msgstr "VS_MOBILE_EXTENSIONS_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.rst:6
msgid "Visual Studio Windows 10 Mobile Extensions Version"
msgstr "Visual Studio Windows 10 移动扩展版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_MOBILE_EXTENSIONS_VERSION.rst:8
msgid ""
"Specifies the version of the Mobile Extensions that should be included in "
"the target. For example ``10.0.10240.0``. If the value is not specified, "
"the Mobile Extensions will not be included. To use the same version of the"
" extensions as the Windows 10 SDK that is being used, you can use the "
":variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` variable."
msgstr ""
"指定应包含在目标中的移动扩展的版本。例如``10.0.10240.0``。如果未指定该值，则不会包括移动扩展。要使用与正在使用的 Windows "
"10 SDK 相同版本的扩展，您可以使用 :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` "
"变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_COMPILE_BATCHING.rst:2
msgid "VS_NO_COMPILE_BATCHING"
msgstr "VS_NO_COMPILE_BATCHING"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_COMPILE_BATCHING.rst:6
msgid ""
"Turn off compile batching for the target. Usually MSBuild calls the "
"compiler with multiple c/cpp files and compiler starts subprocesses for "
"each file to make the build parallel. If you want compiler to be invoked "
"with one file at a time set ``VS_NO_COMPILE_BATCHING`` to ON. If this flag"
" is set MSBuild will call compiler with one c/cpp file at a time. Useful "
"when you want to use tool that replaces the compiler, for example some "
"build caching tool."
msgstr ""
"关闭目标的编译批处理。通常 MSBuild 使用多个 c/cpp "
"文件调用编译器，编译器为每个文件启动子进程以使构建并行进行。如果您希望一次使用一个文件调用编译器，请将 "
"``VS_NO_COMPILE_BATCHING`` 设置为 ON。如果设置此标志，MSBuild 将一次使用一个 c/cpp "
"文件调用编译器。当您想使用替代编译器的工具时很有用，例如一些构建缓存工具。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_COMPILE_BATCHING.rst:13
msgid ""
"This property is initialized by the "
":variable:`CMAKE_VS_NO_COMPILE_BATCHING` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置此属性，则由 CMAKE_VS_NO_COMPILE_BATCHING 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_COMPILE_BATCHING.rst:19
msgid "This shows setting the property for the target ``foo``."
msgstr "这显示了为目标“foo”设置属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:2
msgid "VS_NO_SOLUTION_DEPLOY"
msgstr "VS_NO_SOLUTION_DEPLOY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:6
msgid ""
"Specify that the target should not be marked for deployment to a Windows "
"CE or Windows Phone device in the generated Visual Studio solution."
msgstr ""
"在生成的 Visual Studio 解决方案中指定不应将目标标记为部署到 Windows CE 或 Windows Phone 设备。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:9
msgid ""
"Be default, all EXE and shared library (DLL) targets are marked to deploy "
"to the target device in the generated Visual Studio solution."
msgstr "默认情况下，所有 EXE 和共享库 (DLL) 目标都被标记为部署到生成的 Visual Studio 解决方案中的目标设备。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:12
msgid "Generator expressions are supported."
msgstr "支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:14
msgid ""
"There are reasons one might want to exclude a target / generated project "
"from deployment:"
msgstr "人们可能希望从部署中排除目标/生成项目的原因有："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:17
msgid ""
"The library or executable may not be necessary in the primary deploy/debug"
" scenario, and excluding from deployment saves time in the "
"develop/download/debug cycle."
msgstr "在主要部署/调试场景中可能不需要库或可执行文件，从部署中排除可以节省开发/下载/调试周期的时间。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:20
msgid ""
"There may be insufficient space on the target device to accommodate all of"
" the build products."
msgstr "目标设备上可能没有足够的空间来容纳所有构建产品。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:22
msgid ""
"Visual Studio 2013 requires a target device IP address be entered for each"
" target marked for deployment.  For large numbers of targets, this can be "
"tedious. NOTE: Visual Studio *will* deploy all project dependencies of a "
"project tagged for deployment to the IP address configured for that "
"project even if those dependencies are not tagged for deployment."
msgstr ""
"Visual Studio 2013 要求为每个标记为部署的目标输入一个目标设备 IP 地址。对于大量目标，这可能很乏味。注意：Visual "
"Studio *将* 将标记为部署的项目的所有项目依赖项部署到为该项目配置的 IP 地址，即使这些依赖项未标记为部署。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:33
msgid "This shows setting the variable for the target foo."
msgstr "这显示了为目标 foo 设置变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_NO_SOLUTION_DEPLOY.rst:43
msgid "This shows setting the variable for the Release configuration only."
msgstr "这显示仅为发布配置设置变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PACKAGE_REFERENCES.rst:2
msgid "VS_PACKAGE_REFERENCES"
msgstr "VS_PACKAGE_REFERENCES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PACKAGE_REFERENCES.rst:6
msgid "Visual Studio package references for nuget."
msgstr "nuget 的 Visual Studio 包参考。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PACKAGE_REFERENCES.rst:8
msgid ""
"Adds one or more semicolon-delimited package references to a generated "
"Visual Studio project. The version of the package will be underscore "
"delimited. For example, ``boost_1.7.0;nunit_3.12.*``."
msgstr ""
"向生成的 Visual Studio "
"项目添加一个或多个以分号分隔的包引用。包的版本将用下划线分隔。例如，``boost_1.7.0;nunit_3.12.*``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PLATFORM_TOOLSET.rst:2
msgid "VS_PLATFORM_TOOLSET"
msgstr "VS_PLATFORM_TOOLSET 工具集"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PLATFORM_TOOLSET.rst:6
msgid "Overrides the platform toolset used to build a target."
msgstr "覆盖用于构建目标的平台工具集。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PLATFORM_TOOLSET.rst:8
msgid ""
"Only supported when the compiler used by the given toolset is the same as "
"the compiler used to build the whole source tree."
msgstr "仅当给定工具集使用的编译器与用于构建整个源代码树的编译器相同时才支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PLATFORM_TOOLSET.rst:11
msgid ""
"This is especially useful to create driver projects with the toolsets "
"\"WindowsUserModeDriver10.0\" or \"WindowsKernelModeDriver10.0\"."
msgstr ""
"这对于使用工具集“WindowsUserModeDriver10.0”或“WindowsKernelModeDriver10.0”创建驱动程序项目特别有用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PROJECT_IMPORT.rst:2
msgid "VS_PROJECT_IMPORT"
msgstr "VS_PROJECT_IMPORT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PROJECT_IMPORT.rst:6
msgid "Visual Studio managed project imports"
msgstr "Visual Studio 管理的项目导入"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_PROJECT_IMPORT.rst:8
msgid ""
"Adds to a generated Visual Studio project one or more semicolon-delimited "
"paths to .props files needed when building projects from some NuGet "
"packages. For example, "
"``my_packages_path/MyPackage.1.0.0/build/MyPackage.props``."
msgstr ""
"向生成的 Visual Studio 项目添加一个或多个以分号分隔的路径，指向从某些 NuGet 包构建项目时所需的 .props "
"文件。例如，``my_packages_path/MyPackage.1.0.0/build/MyPackage.props``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_AUXPATH.rst:2
msgid "VS_SCC_AUXPATH"
msgstr "VS_SCC_AUXPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_AUXPATH.rst:4
msgid "Visual Studio Source Code Control Aux Path."
msgstr "Visual Studio 源代码控制辅助路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_AUXPATH.rst:6
msgid ""
"Can be set to change the visual studio source code control auxpath "
"property."
msgstr "可以设置更改visual studio 源代码控件的auxpath 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_LOCALPATH.rst:2
msgid "VS_SCC_LOCALPATH"
msgstr "VS_SCC_LOCALPATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_LOCALPATH.rst:4
msgid "Visual Studio Source Code Control Local Path."
msgstr "Visual Studio 源代码控制本地路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_LOCALPATH.rst:6
msgid ""
"Can be set to change the visual studio source code control local path "
"property."
msgstr "可以设置更改visual studio源代码控件的本地路径属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROJECTNAME.rst:2
msgid "VS_SCC_PROJECTNAME"
msgstr "VS_SCC_PROJECTNAME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROJECTNAME.rst:4
msgid "Visual Studio Source Code Control Project."
msgstr "Visual Studio 源代码控制项目。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROJECTNAME.rst:6
msgid ""
"Can be set to change the visual studio source code control project name "
"property."
msgstr "可以设置更改visual studio源代码控件项目名称属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROVIDER.rst:2
msgid "VS_SCC_PROVIDER"
msgstr "VS_SCC_PROVIDER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROVIDER.rst:4
msgid "Visual Studio Source Code Control Provider."
msgstr "Visual Studio 源代码控制提供程序。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SCC_PROVIDER.rst:6
msgid ""
"Can be set to change the visual studio source code control provider "
"property."
msgstr "可以设置更改 visual studio 源代码控件提供程序属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SDK_REFERENCES.rst:2
msgid "VS_SDK_REFERENCES"
msgstr "VS_SDK_REFERENCES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SDK_REFERENCES.rst:6
msgid ""
"Visual Studio project SDK references. Specify a :ref:`semicolon-separated "
"list <CMake Language Lists>` of SDK references to be added to a generated "
"Visual Studio project, e.g. ``Microsoft.AdMediatorWindows81, "
"Version=1.0``."
msgstr ""
"Visual Studio 项目 SDK 参考。指定要添加到生成的 Visual Studio 项目的 :ref:`分号分隔列表 <CMake "
"Language Lists>` SDK 引用，例如``Microsoft.AdMediatorWindows81，版本 = 1.0``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:2
msgid "VS_SOLUTION_DEPLOY"
msgstr "VS_SOLUTION_DEPLOY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:6
msgid ""
"Specify that the target should be marked for deployment when not targeting"
" Windows CE, Windows Phone or a Windows Store application."
msgstr "指定当不以 Windows CE、Windows Phone 或 Windows 应用商店应用程序为目标时，应将目标标记为部署。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:9
msgid ""
"If the target platform doesn't support deployment, this property won't "
"have any effect."
msgstr "如果目标平台不支持部署，这个属性不会有任何影响。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:21
msgid ""
":manual:`Generator expressions <cmake-generator-expressions(7)>` are "
"supported."
msgstr ":manual:`支持生成器表达式 <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:17
msgid "Always deploy target ``foo``:"
msgstr "始终部署目标“foo”："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOLUTION_DEPLOY.rst:24
msgid "Deploy target ``foo`` for all configurations except ``Release``:"
msgstr "为除“Release”之外的所有配置部署目标“foo”："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:2
msgid "VS_SOURCE_SETTINGS_<tool>"
msgstr "VS_SOURCE_SETTINGS_<工具>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:6
msgid "Set any item metadata on all non-built files that use <tool>."
msgstr "在所有使用 <tool> 的非构建文件上设置任何项目元数据。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:8
msgid ""
"Takes a list of ``Key=Value`` pairs. Tells the Visual Studio generator to "
"set ``Key`` to ``Value`` as item metadata on all non-built files that use "
"``<tool>``."
msgstr ""
"获取“Key=Value”对列表。告诉 Visual Studio 生成器将 ``Key`` 设置为 ``Value`` 作为所有使用 "
"``<tool>`` 的非构建文件的项目元数据。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_SOURCE_SETTINGS_tool.rst:18
msgid ""
"will set ``Key`` to ``Value`` and ``Key2`` to ``Value2`` for all non-built"
" files that use ``FXCompile``."
msgstr ""
"将为所有使用 FXCompile 的非构建文件将 ``Key`` 设置为 ``Value`` 并将 ``Key2`` 设置为 ``Value2``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_USER_PROPS.rst:2
msgid "VS_USER_PROPS"
msgstr "VS_USER_PROPS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_USER_PROPS.rst:6
msgid ""
"Sets the user props file to be included in the visual studio C++ project "
"file. The standard path is "
"``$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props``, which is in "
"most cases the same as "
"``%LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.Win32.user.props``"
" or "
"``%LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props``."
msgstr ""
"将用户道具文件设置为包含在 Visual Studio C++ 项目文件中。标准路径是 "
"``$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props``，在大多数情况下与 "
"``%LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4 相同。 "
"0\\\\Microsoft.Cpp.Win32.user.props`` "
"或``%LOCALAPPDATA%\\\\Microsoft\\\\MSBuild\\\\v4.0\\\\Microsoft.Cpp.x64.user.props``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_USER_PROPS.rst:13
msgid ""
"The ``*.user.props`` files can be used for Visual Studio wide "
"configuration which is independent from cmake."
msgstr "``*.user.props`` 文件可用于独立于 cmake 的 Visual Studio 范围配置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.rst:2
msgid "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION"
msgstr "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.rst:6
msgid "Visual Studio Windows Target Platform Minimum Version"
msgstr "Visual Studio Windows 目标平台最低版本"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION.rst:8
msgid ""
"For Windows 10. Specifies the minimum version of the OS that is being "
"targeted. For example ``10.0.10240.0``. If the value is not specified, the"
" value of :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION` will be "
"used on WindowsStore projects otherwise the target platform minimum "
"version will not be specified for the project."
msgstr ""
"对于 Windows "
"10。指定目标操作系统的最低版本。例如``10.0.10240.0``。如果未指定值，CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION"
" 的值将用于 WindowsStore 项目，否则不会为项目指定目标平台最低版本。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_COMPONENT.rst:2
msgid "VS_WINRT_COMPONENT"
msgstr "VS_WINRT_COMPONENT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_COMPONENT.rst:6
msgid ""
"Mark a target as a Windows Runtime component for the Visual Studio "
"generator. Compile the target with ``C++/CX`` language extensions for "
"Windows Runtime. For ``SHARED`` and ``MODULE`` libraries, this also "
"defines the ``_WINRT_DLL`` preprocessor macro."
msgstr ""
"将目标标记为 Visual Studio 生成器的 Windows 运行时组件。使用适用于 Windows "
"运行时的“C++/CX”语言扩展编译目标。对于 ``SHARED`` 和 ``MODULE`` 库，这也定义了 ``_WINRT_DLL`` "
"预处理器宏。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_COMPONENT.rst:12
msgid ""
"Currently this is implemented only by Visual Studio generators. Support "
"may be added to other generators in the future."
msgstr "目前这仅由 Visual Studio 生成器实现。将来可能会添加对其他生成器的支持。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_EXTENSIONS.rst:2
msgid "VS_WINRT_EXTENSIONS"
msgstr "VS_WINRT_EXTENSIONS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_EXTENSIONS.rst:4
msgid ""
"Deprecated.  Use :prop_tgt:`VS_WINRT_COMPONENT` instead. This property was"
" an experimental partial implementation of that one."
msgstr "已弃用。请改用 :prop_tgt:`VS_WINRT_COMPONENT`。此属性是该属性的实验性部分实现。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_REFERENCES.rst:2
msgid "VS_WINRT_REFERENCES"
msgstr "VS_WINRT_REFERENCES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_REFERENCES.rst:4
msgid "Visual Studio project Windows Runtime Metadata references"
msgstr "Visual Studio 项目 Windows 运行时元数据参考"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/VS_WINRT_REFERENCES.rst:6
msgid ""
"Adds one or more semicolon-delimited WinRT references to a generated "
"Visual Studio project.  For example, \"Windows;Windows.UI.Core\"."
msgstr ""
"向生成的 Visual Studio 项目添加一个或多个以分号分隔的 WinRT 引用。例如，“Windows；Windows.UI.Core”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:2
msgid "WATCOM_RUNTIME_LIBRARY"
msgstr "WATCOM_RUNTIME_LIBRARY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:6
msgid ""
"Select the Watcom runtime library for use by compilers targeting the "
"Watcom ABI."
msgstr "选择 Watcom 运行时库供以 Watcom ABI 为目标的编译器使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:2
msgid "``SingleThreaded``"
msgstr "``单线程``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:2
msgid ""
"Compile without additional flags to use a single-threaded statically-"
"linked runtime library."
msgstr "在没有附加标志的情况下编译以使用单线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:6
msgid "``SingleThreadedDLL``"
msgstr "``单线程DLL``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:5
msgid ""
"Compile with ``-br`` or equivalent flag(s) to use a single-threaded "
"dynamically-linked runtime library. This is not available for Linux "
"targets."
msgstr "使用“-br”或等效标志编译以使用单线程动态链接运行时库。这不适用于 Linux 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:9
msgid ""
"Compile with ``-bm`` or equivalent flag(s) to use a multi-threaded "
"statically-linked runtime library."
msgstr "使用“-bm”或等效标志进行编译以使用多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:12
msgid ""
"Compile with ``-bm -br`` or equivalent flag(s) to use a multi-threaded "
"dynamically-linked runtime library. This is not available for Linux "
"targets."
msgstr "使用“-bm -br”或等效标志进行编译以使用多线程动态链接运行时库。这不适用于 Linux 目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:16
msgid ""
"The value is ignored on non-Watcom compilers but an unsupported value will"
" be rejected as an error when using a compiler targeting the Watcom ABI."
msgstr "该值在非 Watcom 编译器上会被忽略，但在使用针对 Watcom ABI 的编译器时，不受支持的值将作为错误被拒绝。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY-VALUES.txt:19
msgid ""
"The value may also be the empty string (``\"\"``) in which case no runtime"
" library selection flag will be added explicitly by CMake."
msgstr "该值也可以是空字符串 (``\"\"``)，在这种情况下，CMake 不会显式添加运行时库选择标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:12
msgid ""
"Use :manual:`generator expressions <cmake-generator-expressions(7)>` to "
"support per-configuration specification."
msgstr ""
"使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"来支持每个配置规范。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:15
msgid "For example, the code:"
msgstr "例如，代码："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:23
msgid ""
"selects for the target ``foo`` a multi-threaded statically-linked runtime "
"library."
msgstr "为目标“foo”选择一个多线程静态链接运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:26
msgid ""
"If this property is not set then CMake uses the default value "
"``MultiThreadedDLL`` on Windows and ``SingleThreaded`` on other platforms "
"to select a Watcom runtime library."
msgstr ""
"如果未设置此属性，则 CMake 在 Windows "
"上使用默认值“MultiThreadedDLL”，在其他平台上使用“SingleThreaded”来选择 Watcom 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WATCOM_RUNTIME_LIBRARY.rst:32
msgid ""
"This property has effect only when policy :policy:`CMP0136` is set to "
"``NEW`` prior to the first :command:`project` or "
":command:`enable_language` command that enables a language using a "
"compiler targeting the Watcom ABI."
msgstr ""
"只有在第一个使用针对 Watcom ABI 的编译器启用语言的 project 或 enable_language 命令之前将策略 CMP0136 "
"设置为 NEW 时，此属性才有效."

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WIN32_EXECUTABLE.rst:2
msgid "WIN32_EXECUTABLE"
msgstr "WIN32_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WIN32_EXECUTABLE.rst:4
msgid "Build an executable with a WinMain entry point on windows."
msgstr "在 Windows 上构建具有 WinMain 入口点的可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WIN32_EXECUTABLE.rst:6
msgid ""
"When this property is set to true the executable when linked on Windows "
"will be created with a WinMain() entry point instead of just main().  This"
" makes it a GUI executable instead of a console application. See the "
":variable:`CMAKE_MFC_FLAG` variable documentation to configure use of the "
"Microsoft Foundation Classes (MFC) for WinMain executables.  This property"
" is initialized by the value of the :variable:`CMAKE_WIN32_EXECUTABLE` "
"variable if it is set when a target is created."
msgstr ""
"当此属性设置为 true 时，在 Windows 上链接时可执行文件将使用 WinMain() 入口点创建，而不仅仅是 main()。这使它成为一个"
" GUI 可执行文件而不是控制台应用程序。请参阅 :variable:`CMAKE_MFC_FLAG` 变量文档来为 WinMain 可执行文件配置"
" Microsoft 基础类 (MFC) 的使用。如果在创建目标时设置了此属性，则该属性由 CMAKE_WIN32_EXECUTABLE "
"变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WIN32_EXECUTABLE.rst:15
msgid ""
"This property supports :manual:`generator expressions <cmake-generator-"
"expressions(7)>`, except if the target is managed (contains C# code.)"
msgstr ""
"此属性支持 :manual:`generator expressions <cmake-generator-"
"expressions(7)>`，除非目标是托管的（包含 C# 代码。）"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst:2
msgid "WINDOWS_EXPORT_ALL_SYMBOLS"
msgstr "WINDOWS_EXPORT_ALL_SYMBOLS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst:6
msgid ""
"This property is implemented only for MS-compatible tools on Windows."
msgstr "此属性仅适用于 Windows 上的 MS 兼容工具。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst:8
msgid ""
"Enable this boolean property to automatically create a module definition "
"(``.def``) file with all global symbols found in the input ``.obj`` files "
"for a ``SHARED`` library (or executable with :prop_tgt:`ENABLE_EXPORTS`) "
"on Windows.  The module definition file will be passed to the linker "
"causing all symbols to be exported from the ``.dll``. For global *data* "
"symbols, ``__declspec(dllimport)`` must still be used when compiling "
"against the code in the ``.dll``.  All other function symbols will be "
"automatically exported and imported by callers.  This simplifies porting "
"projects to Windows by reducing the need for explicit ``dllexport`` "
"markup, even in ``C++`` classes."
msgstr ""
"启用此布尔属性以自动创建模块定义 (``.def``) 文件，其中包含在输入``.obj`` 文件中找到的所有全局符号，用于``SHARED`` "
"库（或带有 :prop_tgt:` 的可执行文件） ENABLE_EXPORTS`) 在 Windows "
"上。模块定义文件将传递给链接器，导致所有符号从 .dll 中导出。对于全局 *data* 符号，在针对 .dll 中的代码进行编译时，仍必须使用 "
"__declspec(dllimport) 。所有其他函数符号将由调用者自动导出和导入。这通过减少对显式 ``dllexport`` "
"标记的需要简化了将项目移植到 Windows，即使在 ``C++`` 类中也是如此。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst:19
msgid ""
"When this property is enabled, zero or more ``.def`` files may also be "
"specified as source files of the target.  The exports named by these files"
" will be merged with those detected from the object files to generate a "
"single module definition file to be passed to the linker.  This can be "
"used to export symbols from a ``.dll`` that are not in any of its object "
"files but are added by the linker from dependencies (e.g. ``msvcrt.lib``)."
msgstr ""
"启用此属性后，也可以将零个或多个 ``.def`` "
"文件指定为目标的源文件。由这些文件命名的导出将与从目标文件中检测到的导出合并，以生成要传递给链接器的单个模块定义文件。这可用于从 ``.dll`` "
"中导出符号，这些符号不在其任何目标文件中，但由链接器从依赖项中添加（例如 ``msvcrt.lib``）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.rst:26
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` variable if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:2
msgid "XCODE_ATTRIBUTE_<an-attribute>"
msgstr "XCODE_ATTRIBUTE_<属性>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:4
msgid "Set Xcode target attributes directly."
msgstr "直接设置 Xcode 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:6
msgid ""
"Tell the :generator:`Xcode` generator to set ``<an-attribute>`` to a given"
" value in the generated Xcode project.  Ignored on other generators."
msgstr ""
"告诉 :generator:`Xcode` 生成器在生成的 Xcode 项目中将 ``<an-attribute>`` "
"设置为给定值。在其他生成器上被忽略。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:9
msgid ""
"This offers low-level control over the generated Xcode project file. It is"
" meant as a last resort for specifying settings that CMake does not "
"otherwise have a way to control.  Although this can override a setting "
"CMake normally produces on its own, doing so bypasses CMake's model of the"
" project and can break things."
msgstr ""
"这提供了对生成的 Xcode 项目文件的低级控制。它是指定 CMake 无法控制的设置的最后手段。虽然这可以覆盖 CMake "
"通常自行生成的设置，但这样做会绕过 CMake 的项目模型并可能破坏某些东西。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:15
msgid ""
"See the :variable:`CMAKE_XCODE_ATTRIBUTE_<an-attribute>` variable to set "
"attributes on all targets in a directory tree."
msgstr ""
"请参阅 :variable:`CMAKE_XCODE_ATTRIBUTE_<an-attribute>` 变量以在目录树中的所有目标上设置属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_ATTRIBUTE_an-attribute.rst:18
msgid ""
"Contents of ``XCODE_ATTRIBUTE_<an-attribute>`` may use \"generator "
"expressions\" with the syntax ``$<...>``.  See the :manual:`cmake-"
"generator-expressions(7)` manual for available expressions.  See the "
":manual:`cmake-buildsystem(7)` manual for more on defining buildsystem "
"properties."
msgstr ""
"``XCODE_ATTRIBUTE_<an-attribute>`` 的内容可以使用语法为``$<...>`` 的“生成器表达式”。请参阅 "
":manual:`cmake-generator-expressions(7)` 手册了解可用的表达式。有关定义构建系统属性的更多信息，请参阅 "
":manual:`cmake-buildsystem(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY.rst:2
msgid "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY"
msgstr "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY.rst:6
msgid ""
"Tell the :generator:`Xcode` generator to perform code signing for all the "
"frameworks and libraries that are embedded using the "
":prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` property."
msgstr ""
"告诉 :generator:`Xcode` 生成器对使用 :prop_tgt:`XCODE_EMBED_FRAMEWORKS "
"<XCODE_EMBED_<type>>` 属性嵌入的所有框架和库执行代码签名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY.rst:12
msgid ""
"This property was generalized to other types of embedded items.  See "
":prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY` for the more general "
"form."
msgstr ""
"此属性已推广到其他类型的嵌入项。请参阅 :prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY` "
"以获得更通用的形式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY.rst:2
msgid "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY"
msgstr "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY.rst:6
msgid ""
"Tell the :generator:`Xcode` generator to remove headers from all the "
"frameworks that are embedded using the :prop_tgt:`XCODE_EMBED_FRAMEWORKS "
"<XCODE_EMBED_<type>>` property."
msgstr ""
"告诉 :generator:`Xcode` 生成器从使用 :prop_tgt:`XCODE_EMBED_FRAMEWORKS "
"<XCODE_EMBED_<type>>` 属性嵌入的所有框架中删除标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY.rst:12
msgid ""
"This property was generalized to other types of embedded items.  See "
":prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY` for the more general"
" form."
msgstr ""
"此属性已推广到其他类型的嵌入项。请参阅:prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY` "
"了解更通用的形式。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:2
msgid "XCODE_EMBED_<type>"
msgstr "XCODE_EMBED_<类型>"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:6
msgid ""
"Tell the :generator:`Xcode` generator to embed the specified list of items"
" into the target bundle.  ``<type>`` specifies the embed build phase to "
"use. See the Xcode documentation for the base location of each ``<type>``."
msgstr ""
"告诉 Xcode 生成器将指定的项目列表嵌入到目标包中。 ``<type>`` 指定要使用的嵌入构建阶段。有关每个 ``<type>`` "
"的基本位置，请参阅 Xcode 文档。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:10
msgid "The supported values for ``<type>`` are:"
msgstr "``<type>`` 支持的值是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:14
msgid "``FRAMEWORKS``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:13
msgid ""
"The specified items will be added to the ``Embed Frameworks`` build phase."
" The items can be CMake target names or paths to frameworks or libraries."
msgstr "指定的项目将被添加到“嵌入框架”构建阶段。这些项目可以是 CMake 目标名称或框架或库的路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:15
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:20
msgid "``APP_EXTENSIONS``"
msgstr "``APP_EXTENSIONS``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:19
msgid ""
"The specified items will be added to the ``Embed App Extensions`` build "
"phase, with ``Destination`` set to ``PlugIns and Foundation Extensions`` "
"They must be CMake target names."
msgstr ""
"指定的项目将被添加到``Embed App Extensions``构建阶段，``Destination``设置为``PlugIns and "
"Foundation Extensions``它们必须是CMake目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:32
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:18
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:26
msgid "``EXTENSIONKIT_EXTENSIONS``"
msgstr "``EXTENSIONKIT_EXTENSIONS``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:26
msgid ""
"The specified items will be added to the ``Embed App Extensions`` build "
"phase, with ``Destination`` set to ``ExtensionKit Extensions`` They must "
"be CMake target names, and should likely have the ``XCODE_PRODUCT_TYPE`` "
"target property set to ``com.apple.product-type.extensionkit-extension`` "
"as well as the  ``XCODE_EXPLICIT_FILE_TYPE`` to ``wrapper.extensionkit-"
"extension``"
msgstr ""
"指定的项目将被添加到“嵌入应用程序扩展”构建阶段，“目标”设置为“ExtensionKit 扩展”它们必须是 CMake "
"目标名称，并且可能具有“XCODE_PRODUCT_TYPE”目标属性设置为 com.apple.product-"
"type.extensionkit-extension 以及 XCODE_EXPLICIT_FILE_TYPE 为 "
"wrapper.extensionkit-extension"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:38
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:23
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:28
msgid "``PLUGINS``"
msgstr "``插件``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:37
msgid ""
"The specified items will be added to the ``Embed PlugIns`` build phase. "
"They must be CMake target names."
msgstr "指定的项目将被添加到“嵌入插件”构建阶段。它们必须是 CMake 目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type.rst:40
msgid ""
"See also :prop_tgt:`XCODE_EMBED_<type>_PATH`, "
":prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY` and "
":prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY`."
msgstr ""
"另见:prop_tgt:`XCODE_EMBED_<type>_PATH`、 :prop_tgt:`XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY`"
" 和 :prop_tgt:`XCODE_EMBED_<type>_CODE_SIGN_ON_COPY`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:2
msgid "XCODE_EMBED_<type>_CODE_SIGN_ON_COPY"
msgstr "XCODE_EMBED_<类型>_CODE_SIGN_ON_COPY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:6
msgid ""
"Boolean property used only by the :generator:`Xcode` generator.  It "
"specifies whether to perform code signing for the items that are embedded "
"using the :prop_tgt:`XCODE_EMBED_<type>` property."
msgstr "仅由 Xcode 生成器使用的布尔属性。它指定是否对使用 XCODE_EMBED_<type> 属性嵌入的项目执行代码签名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_CODE_SIGN_ON_COPY.rst:23
msgid ""
"If a ``XCODE_EMBED_<type>_CODE_SIGN_ON_COPY`` property is not defined on "
"the target, no code signing on copy will be performed for that ``<type>``."
msgstr ""
"如果未在目标上定义“XCODE_EMBED_<type>_CODE_SIGN_ON_COPY”属性，则不会为该“<type>”执行任何代码签名。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:2
msgid "XCODE_EMBED_<type>_PATH"
msgstr "XCODE_EMBED_<类型>_PATH"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_PATH.rst:6
msgid ""
"This property is used only by the :generator:`Xcode` generator.  When "
"defined, it specifies the relative path to use when embedding the items "
"specified by :prop_tgt:`XCODE_EMBED_<type>`.  The path is relative to the "
"base location of the ``Embed XXX`` build phase associated with ``<type>``."
"  See the Xcode documentation for the base location of each ``<type>``."
msgstr ""
"此属性仅由 Xcode 生成器使用。定义时，它指定嵌入由 XCODE_EMBED_<type> "
"指定的项目时使用的相对路径。该路径相对于与“<type>”相关联的“Embed XXX”构建阶段的基本位置。有关每个 ``<type>`` "
"的基本位置，请参阅 Xcode 文档。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:2
msgid "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY"
msgstr "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:6
msgid ""
"Boolean property used only by the :generator:`Xcode` generator.  It "
"specifies whether to remove headers from all the frameworks that are "
"embedded using the :prop_tgt:`XCODE_EMBED_<type>` property."
msgstr "仅由 Xcode 生成器使用的布尔属性。它指定是否从使用 XCODE_EMBED_<type> 属性嵌入的所有框架中删除标头。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:13
msgid ""
"If the ``XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY`` property is not "
"defined, headers will not be removed on copy by default."
msgstr ""
"如果未定义 ``XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY`` "
"属性，则默认情况下不会在复制时删除标题。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:19
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EMBED_type_REMOVE_HEADERS_ON_COPY.rst:25
msgid ""
"If the ``XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY`` property is "
"not defined, headers WILL be removed on copy by default."
msgstr ""
"如果未定义“XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY”属性，则默认情况下将在副本中删除标题。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EXPLICIT_FILE_TYPE.rst:2
msgid "XCODE_EXPLICIT_FILE_TYPE"
msgstr "XCODE_EXPLICIT_FILE_TYPE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EXPLICIT_FILE_TYPE.rst:6
msgid ""
"Set the Xcode ``explicitFileType`` attribute on its reference to a target."
"  CMake computes a default based on target type but can be told explicitly"
" with this property."
msgstr ""
"在其对目标的引用上设置 Xcode ``explicitFileType`` 属性。 CMake 根据目标类型计算默认值，但可以使用此属性明确告知。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_EXPLICIT_FILE_TYPE.rst:10
msgid "See also :prop_tgt:`XCODE_PRODUCT_TYPE`."
msgstr "另见:prop_tgt:`XCODE_PRODUCT_TYPE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:2
msgid "XCODE_GENERATE_SCHEME"
msgstr "XCODE_GENERATE_SCHEME"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:6
msgid ""
"If enabled, the :generator:`Xcode` generator will generate schema files.  "
"These are useful to invoke analyze, archive, build-for-testing and test "
"actions from the command line."
msgstr "如果启用，Xcode 生成器将生成模式文件。这些对于从命令行调用分析、存档、测试构建和测试操作很有用。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_GENERATE_SCHEME` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_GENERATE_SCHEME 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:14
msgid ""
"The following target properties overwrite the default of the corresponding"
" settings on the \"Diagnostic\" tab for each schema file. Each of those is"
" initialized by the respective ``CMAKE_`` variable at target creation "
"time."
msgstr "以下目标属性会覆盖每个模式文件的“诊断”选项卡上相应设置的默认值。其中每一个都在目标创建时由各自的 CMAKE_ 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:19
msgid ":prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER`"
msgstr ":prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:20
msgid ":prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN`"
msgstr ":prop_tgt:`XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:21
msgid ":prop_tgt:`XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER`"
msgstr ":prop_tgt:`XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:22
msgid ":prop_tgt:`XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`"
msgstr ":prop_tgt:`XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:23
msgid ":prop_tgt:`XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`"
msgstr ":prop_tgt:`XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:24
msgid ":prop_tgt:`XCODE_SCHEME_GUARD_MALLOC`"
msgstr ":prop_tgt:`XCODE_SCHEME_GUARD_MALLOC`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:25
msgid ":prop_tgt:`XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`"
msgstr ":prop_tgt:`XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:26
msgid ":prop_tgt:`XCODE_SCHEME_MALLOC_GUARD_EDGES`"
msgstr ":prop_tgt:`XCODE_SCHEME_MALLOC_GUARD_EDGES`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:27
msgid ":prop_tgt:`XCODE_SCHEME_MALLOC_SCRIBBLE`"
msgstr ":prop_tgt:`XCODE_SCHEME_MALLOC_SCRIBBLE`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:28
msgid ":prop_tgt:`XCODE_SCHEME_MALLOC_STACK`"
msgstr ":prop_tgt:`XCODE_SCHEME_MALLOC_STACK`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:29
msgid ":prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER`"
msgstr ":prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:30
msgid ":prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER_STOP`"
msgstr ":prop_tgt:`XCODE_SCHEME_THREAD_SANITIZER_STOP`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:31
msgid ":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER`"
msgstr ":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:32
msgid ":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP`"
msgstr ":prop_tgt:`XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:33
msgid ":prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION`"
msgstr ":prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:34
msgid ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION`"
msgstr ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:35
msgid ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION`"
msgstr ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:36
msgid ":prop_tgt:`XCODE_SCHEME_ZOMBIE_OBJECTS`"
msgstr ":prop_tgt:`XCODE_SCHEME_ZOMBIE_OBJECTS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:38
msgid ""
"The following target properties will be applied on the \"Info\", "
"\"Arguments\", and \"Options\" tab:"
msgstr "以下目标属性将应用于“信息”、“参数”和“选项”选项卡："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:41
msgid ":prop_tgt:`XCODE_SCHEME_ARGUMENTS`"
msgstr ":prop_tgt:`XCODE_SCHEME_ARGUMENTS`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:42
msgid ":prop_tgt:`XCODE_SCHEME_DEBUG_AS_ROOT`"
msgstr ":prop_tgt:`XCODE_SCHEME_DEBUG_AS_ROOT`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:43
msgid ":prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING`"
msgstr ":prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:44
msgid ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`"
msgstr ":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:45
msgid ":prop_tgt:`XCODE_SCHEME_ENVIRONMENT`"
msgstr ":prop_tgt:`XCODE_SCHEME_ENVIRONMENT`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:46
msgid ":prop_tgt:`XCODE_SCHEME_EXECUTABLE`"
msgstr ":prop_tgt:`XCODE_SCHEME_EXECUTABLE`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:47
msgid ":prop_tgt:`XCODE_SCHEME_LAUNCH_MODE`"
msgstr ":prop_tgt:`XCODE_SCHEME_LAUNCH_MODE`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_GENERATE_SCHEME.rst:48
msgid ":prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY`"
msgstr ":prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY`"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:2
msgid "XCODE_LINK_BUILD_PHASE_MODE"
msgstr "XCODE_LINK_BUILD_PHASE_MODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:6
msgid ""
"When using the :generator:`Xcode` generator, libraries to be linked will "
"be specified in the Xcode project file using either the \"Link Binary With"
" Libraries\" build phase or directly as linker flags.  The former allows "
"Xcode to manage build paths, which may be necessary when creating Xcode "
"archives because it may use different build paths to a regular build."
msgstr ""
"当使用 Xcode 生成器时，要链接的库将在 Xcode 项目文件中指定，使用“Link Binary With "
"Libraries”构建阶段或直接作为链接器标志。前者允许 Xcode 管理构建路径，这在创建 Xcode "
"存档时可能是必需的，因为它可能使用与常规构建不同的构建路径。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:12
msgid ""
"This property controls usage of \"Link Binary With Libraries\" build phase"
" for a target that is an app bundle, executable, shared library, shared "
"framework or a module library."
msgstr "此属性控制“将二进制文件与库链接”构建阶段用于应用程序包、可执行文件、共享库、共享框架或模块库的目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:9
msgid "Possible values are:"
msgstr "可能的值是："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:18
msgid ""
"``NONE`` The libraries will be linked by specifying the linker flags "
"directly."
msgstr "``NONE`` 库将通过直接指定链接器标志来链接。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:21
msgid ""
"``BUILT_ONLY`` The \"Link Binary With Libraries\" build phase will be used"
" to link to another target under the following conditions:"
msgstr "``BUILT_ONLY`` “Link Binary With Libraries”构建阶段将用于在以下条件下链接到另一个目标："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:25
msgid ""
"The target to be linked to is a regular non-imported, non-interface "
"library target."
msgstr "要链接到的目标是一个常规的非导入、非接口库目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:27
msgid ""
"The output directory of the target being built has not been changed from "
"its default (see :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`)."
msgstr ""
"正在构建的目标的输出目录未更改其默认值（请参阅 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` "
"和 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:31
msgid ""
"``KNOWN_LOCATION`` The \"Link Binary With Libraries\" build phase will be "
"used to link to another target under the same conditions as with "
"``BUILT_ONLY`` and also:"
msgstr ""
"``KNOWN_LOCATION`` “Link Binary With Libraries”构建阶段将用于在与 ``BUILT_ONLY`` "
"相同的条件下链接到另一个目标，并且："

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:35
msgid "Imported library targets except those of type ``UNKNOWN``."
msgstr "导入的库目标，类型为“UNKNOWN”的目标除外。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:36
msgid "Any non-target library specified directly with a path."
msgstr "直接用路径指定的任何非目标库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:38
msgid ""
"For all other cases, the libraries will be linked by specifying the linker"
" flags directly."
msgstr "对于所有其他情况，将通过直接指定链接器标志来链接库。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:42
msgid ""
"Libraries linked using \"Link Binary With Libraries\" are linked after the"
" ones linked through regular linker flags.  This order should be taken "
"into account when different static libraries contain symbols with the same"
" name, as the former ones will take precedence over the latter."
msgstr ""
"使用“Link Binary With "
"Libraries”链接的库在通过常规链接器标志链接的库之后链接。当不同的静态库包含具有相同名称的符号时，应考虑此顺序，因为前者优先于后者。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:48
msgid ""
"If two or more directories contain libraries with identical file names and"
" some libraries are linked from those directories, the library search path"
" lookup will end up linking libraries from the first directory.  This is a"
" known limitation of Xcode."
msgstr ""
"如果两个或多个目录包含具有相同文件名的库，并且某些库是从这些目录链接的，则库搜索路径查找将最终从第一个目录链接库。这是 Xcode 的已知限制。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_LINK_BUILD_PHASE_MODE.rst:53
msgid ""
"This property is initialized by the value of the "
":variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE` variable if it is set when a"
" target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由 CMAKE_XCODE_LINK_BUILD_PHASE_MODE 变量的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_PRODUCT_TYPE.rst:2
msgid "XCODE_PRODUCT_TYPE"
msgstr "XCODE_PRODUCT_TYPE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_PRODUCT_TYPE.rst:6
msgid ""
"Set the Xcode ``productType`` attribute on its reference to a target.  "
"CMake computes a default based on target type but can be told explicitly "
"with this property."
msgstr ""
"在其对目标的引用上设置 Xcode ``productType`` 属性。 CMake 根据目标类型计算默认值，但可以使用此属性明确告知。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_PRODUCT_TYPE.rst:10
msgid "See also :prop_tgt:`XCODE_EXPLICIT_FILE_TYPE`."
msgstr "另见:prop_tgt:`XCODE_EXPLICIT_FILE_TYPE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER.rst:2
msgid "XCODE_SCHEME_ADDRESS_SANITIZER"
msgstr "XCODE_SCHEME_ADDRESS_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER.rst:6
msgid ""
"Whether to enable ``Address Sanitizer`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 Address Sanitizer。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER` if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ARGUMENTS.rst:11
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_AS_ROOT.rst:8
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENVIRONMENT.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_EXECUTABLE.rst:10
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_GUARD_MALLOC.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:21
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_STACK.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:13
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS.rst:13
msgid ""
"Please refer to the :prop_tgt:`XCODE_GENERATE_SCHEME` target property "
"documentation to see all Xcode schema related properties."
msgstr "请参阅 :prop_tgt:`XCODE_GENERATE_SCHEME` 目标属性文档以查看所有与 Xcode 架构相关的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:2
msgid "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN"
msgstr "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:6
msgid ""
"Whether to enable ``Detect use of stack after return`` in the Diagnostics "
"section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“返回后检测堆栈的使用”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN` if it is"
" set when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 "
"CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ARGUMENTS.rst:2
msgid "XCODE_SCHEME_ARGUMENTS"
msgstr "XCODE_SCHEME_ARGUMENTS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ARGUMENTS.rst:6
msgid ""
"Specify command line arguments that should be added to the Arguments "
"section of the generated Xcode scheme."
msgstr "指定应添加到生成的 Xcode 方案的 Arguments 部分的命令行参数。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ARGUMENTS.rst:9
msgid "If set to a list of arguments those will be added to the scheme."
msgstr "如果设置为参数列表，则这些参数将被添加到方案中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_AS_ROOT.rst:2
msgid "XCODE_SCHEME_DEBUG_AS_ROOT"
msgstr "XCODE_SCHEME_DEBUG_AS_ROOT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_AS_ROOT.rst:6
msgid "Whether to debug the target as 'root'."
msgstr "是否以“root”身份调试目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:2
msgid "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING"
msgstr "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:6
msgid ""
"Whether to enable ``Allow debugging when using document Versions Browser``"
" in the Options section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的选项部分启用“使用文档版本浏览器时允许调试”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING` if it is set when"
" a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:2
msgid "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER"
msgstr "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:6
msgid ""
"Whether to disable the ``Main Thread Checker`` in the Diagnostics section "
"of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分禁用“主线程检查器”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER` if it is set "
"when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER "
"的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:2
msgid "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS"
msgstr "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:6
msgid ""
"Whether to enable ``Dynamic Library Loads`` in the Diagnostics section of "
"the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“动态库加载”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS` if it is set when a "
"target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:2
msgid "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE"
msgstr "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:6
msgid ""
"Whether to enable ``Dynamic Linker API usage`` in the Diagnostics section "
"of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“动态链接器 API 使用”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE` if it is set when "
"a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:2
msgid "XCODE_SCHEME_ENABLE_GPU_API_VALIDATION"
msgstr "XCODE_SCHEME_ENABLE_GPU_API_VALIDATION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:6
msgid ""
"Property value for ``Metal: API Validation`` in the Options section of the"
" generated Xcode scheme."
msgstr "生成的 Xcode 方案的选项部分中“金属：API 验证”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_API_VALIDATION.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` if it is set when"
" a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:2
msgid "XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE"
msgstr "XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:6
msgid ""
"Property value for ``GPU Frame Capture`` in the Options section of the "
"generated Xcode scheme. Example values are `Metal` and `Disabled`."
msgstr "生成的 Xcode 方案的选项部分中“GPU 帧捕获”的属性值。示例值为“Metal”和“Disabled”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` if it is set "
"when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "
"的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:2
msgid "XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION"
msgstr "XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:6
msgid ""
"Property value for ``Metal: Shader Validation`` in the Options section of "
"the generated Xcode scheme."
msgstr "生成的 Xcode 方案的选项部分中“金属：着色器验证”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` if it is set "
"when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION "
"的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENVIRONMENT.rst:2
msgid "XCODE_SCHEME_ENVIRONMENT"
msgstr "XCODE_SCHEME_ENVIRONMENT"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENVIRONMENT.rst:6
msgid ""
"Specify environment variables that should be added to the Arguments "
"section of the generated Xcode scheme."
msgstr "指定应添加到生成的 Xcode 方案的 Arguments 部分的环境变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ENVIRONMENT.rst:9
msgid ""
"If set to a list of environment variables and values of the form "
"``MYVAR=value`` those environment variables will be added to the scheme."
msgstr "如果设置为“MYVAR=value”形式的环境变量和值列表，这些环境变量将被添加到方案中。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_EXECUTABLE.rst:2
msgid "XCODE_SCHEME_EXECUTABLE"
msgstr "XCODE_SCHEME_EXECUTABLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_EXECUTABLE.rst:6
msgid ""
"Specify path to executable in the Info section of the generated Xcode "
"scheme. If not set the schema generator will select the current target if "
"it is actually executable."
msgstr "在生成的 Xcode 方案的信息部分中指定可执行文件的路径。如果未设置，模式生成器将选择当前目标（如果它实际上是可执行的）。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_GUARD_MALLOC.rst:2
msgid "XCODE_SCHEME_GUARD_MALLOC"
msgstr "XCODE_SCHEME_GUARD_MALLOC"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_GUARD_MALLOC.rst:6
msgid ""
"Whether to enable ``Guard Malloc`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用 ``Guard Malloc``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_GUARD_MALLOC.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_GUARD_MALLOC` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_GUARD_MALLOC 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:2
msgid "XCODE_SCHEME_LAUNCH_CONFIGURATION"
msgstr "XCODE_SCHEME_LAUNCH_CONFIGURATION"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:6
msgid "Set the build configuration to run the target."
msgstr "设置构建配置以运行目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_CONFIGURATION.rst:8
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION` if it is set when a "
"target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:2
msgid "XCODE_SCHEME_LAUNCH_MODE"
msgstr "XCODE_SCHEME_LAUNCH_MODE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:6
msgid ""
"Property value for ``Launch`` in the Info section of the generated Xcode "
"scheme."
msgstr "生成的 Xcode 方案的信息部分中“启动”的属性值。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:12
msgid "``AUTO``"
msgstr "``自动``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:12
msgid "Launch automatically. This is the default."
msgstr "自动启动。这是默认设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:15
msgid "``WAIT``"
msgstr "``等待``"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:15
msgid "Wait for the executable to be launched."
msgstr "等待可执行文件启动。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_LAUNCH_MODE.rst:17
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_LAUNCH_MODE` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_LAUNCH_MODE 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:2
msgid "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP"
msgstr "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:6
msgid ""
"Whether to enable the ``Main Thread Checker`` option ``Pause on issues`` "
"in the Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“主线程检查器”选项“问题暂停”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP` if it is set when "
"a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:2
msgid "XCODE_SCHEME_MALLOC_GUARD_EDGES"
msgstr "XCODE_SCHEME_MALLOC_GUARD_EDGES"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:6
msgid ""
"Whether to enable ``Malloc Guard Edges`` in the Diagnostics section of the"
" generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Guard Edges”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_GUARD_EDGES.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES` if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE.rst:2
msgid "XCODE_SCHEME_MALLOC_SCRIBBLE"
msgstr "XCODE_SCHEME_MALLOC_SCRIBBLE"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE.rst:6
msgid ""
"Whether to enable ``Malloc Scribble`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Scribble”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_SCRIBBLE.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE` if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_STACK.rst:2
msgid "XCODE_SCHEME_MALLOC_STACK"
msgstr "XCODE_SCHEME_MALLOC_STACK"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_STACK.rst:6
msgid ""
"Whether to enable ``Malloc Stack`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Malloc Stack”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_MALLOC_STACK.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_MALLOC_STACK` if it is set when a target is "
"created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_MALLOC_STACK 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER.rst:2
msgid "XCODE_SCHEME_THREAD_SANITIZER"
msgstr "XCODE_SCHEME_THREAD_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER.rst:6
msgid ""
"Whether to enable ``Thread Sanitizer`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 ``Thread Sanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_THREAD_SANITIZER` if it is set when a target"
" is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_THREAD_SANITIZER 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:2
msgid "XCODE_SCHEME_THREAD_SANITIZER_STOP"
msgstr "XCODE_SCHEME_THREAD_SANITIZER_STOP"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:6
msgid ""
"Whether to enable ``Thread Sanitizer - Pause on issues`` in the "
"Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“Thread Sanitizer - Pause on issues”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_THREAD_SANITIZER_STOP.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP` if it is set when a "
"target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:2
msgid "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER"
msgstr "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:6
msgid ""
"Whether to enable ``Undefined Behavior Sanitizer`` in the Diagnostics "
"section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的 Diagnostics 部分启用 ``Undefined Behavior Sanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER` if it is set "
"when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER "
"的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:2
msgid "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP"
msgstr "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:6
msgid ""
"Whether to enable ``Undefined Behavior Sanitizer`` option ``Pause on "
"issues`` in the Diagnostics section of the generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“未定义的行为消毒器”选项“出现问题时暂停”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP` if it is"
" set when a target is created."
msgstr ""
"如果在创建目标时设置了此属性，则该属性由变量 "
"CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY.rst:2
msgid "XCODE_SCHEME_WORKING_DIRECTORY"
msgstr "XCODE_SCHEME_WORKING_DIRECTORY"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY.rst:6
msgid ""
"Specify the ``Working Directory`` of the *Run* and *Profile* actions in "
"the generated Xcode scheme. In case the value contains generator "
"expressions those are evaluated."
msgstr "在生成的 Xcode 方案中指定 *Run* 和 *Profile* 操作的“工作目录”。如果该值包含生成器表达式，则会对其进行评估。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_WORKING_DIRECTORY.rst:10
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_WORKING_DIRECTORY` if it is set when a "
"target is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_WORKING_DIRECTORY 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS.rst:2
msgid "XCODE_SCHEME_ZOMBIE_OBJECTS"
msgstr "XCODE_SCHEME_ZOMBIE_OBJECTS"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS.rst:6
msgid ""
"Whether to enable ``Zombie Objects`` in the Diagnostics section of the "
"generated Xcode scheme."
msgstr "是否在生成的 Xcode 方案的诊断部分启用“僵尸对象”。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_SCHEME_ZOMBIE_OBJECTS.rst:9
msgid ""
"This property is initialized by the value of the variable "
":variable:`CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS` if it is set when a target "
"is created."
msgstr "如果在创建目标时设置了此属性，则该属性由变量 CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS 的值初始化。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_XCCONFIG.rst:2
msgid "XCODE_XCCONFIG"
msgstr "XCODE_XCCONFIG"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_XCCONFIG.rst:6
msgid ""
"If set, the :generator:`Xcode` generator will register the specified file "
"as a target-level XCConfig file. For global XCConfig files see the "
":variable:`CMAKE_XCODE_XCCONFIG` variable."
msgstr ""
"如果设置，Xcode 生成器会将指定文件注册为目标级 XCConfig 文件。对于全局 XCConfig "
"文件，请参阅 :variable:`CMAKE_XCODE_XCCONFIG` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_XCCONFIG.rst:10
msgid ""
"This feature is intended to ease migration from native Xcode projects to "
"CMake projects."
msgstr "此功能旨在简化从本机 Xcode 项目到 CMake 项目的迁移。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCODE_XCCONFIG.rst:13
msgid ""
"Contents of ``XCODE_XCCONFIG`` may use :manual:`generator expressions "
"<cmake-generator-expressions(7)>`."
msgstr ""
"``XCODE_XCCONFIG`` 的内容可以使用 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCTEST.rst:2
msgid "XCTEST"
msgstr "XC测试"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCTEST.rst:6
msgid "This target is a XCTest CFBundle on the Mac."
msgstr "这个目标是 Mac 上的 XCTest CFBundle。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCTEST.rst:8
msgid ""
"This property will usually get set via the :command:`xctest_add_bundle` "
"macro in :module:`FindXCTest` module."
msgstr "该属性通常通过 FindXCTest 模块中的 xctest_add_bundle 宏设置。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCTEST.rst:11
msgid ""
"If a module library target has this property set to true it will be built "
"as a CFBundle when built on the Mac.  It will have the directory structure"
" required for a CFBundle."
msgstr ""
"如果模块库目标将此属性设置为 true，则在 Mac 上构建时它将构建为 CFBundle。它将具有 CFBundle 所需的目录结构。"

#: ../../cmake-prefix/src/cmake/Help/prop_tgt/XCTEST.rst:15
msgid "This property depends on :prop_tgt:`BUNDLE` to be effective."
msgstr "此属性取决于 :prop_tgt:`BUNDLE` 是否有效。"
