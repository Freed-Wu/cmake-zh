# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.12.1\n"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:2
msgid "CMake 3.0 Release Notes"
msgstr "CMake 3.0 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:5
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:5
msgid "Contents"
msgstr "内容"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:8
msgid "Changes made since CMake 2.8.12 include the following."
msgstr "自 CMake 2.8.12 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:11
msgid "Documentation Changes"
msgstr "文档更改"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:13
msgid ""
"The CMake documentation has been converted to reStructuredText and now "
"transforms via Sphinx (`<https://www.sphinx-doc.org>`__) into man and html"
" pages.  This allows the documentation to be properly indexed and to "
"contain cross-references."
msgstr ""
"CMake 文档已转换为 reStructuredText，现在通过 Sphinx (`<https://www.sphinx-"
"doc.org>`__) 转换为手册和 html 页面。这允许文档被正确索引并包含交叉引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:18
msgid ""
"Conversion from the old internal documentation format was done by an "
"automatic process so some documents may still contain artifacts. They will"
" be updated incrementally over time."
msgstr "从旧的内部文档格式转换是通过自动过程完成的，因此某些文档可能仍然包含工件。它们将随着时间的推移逐步更新。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:22
msgid ""
"A basic reStructuredText processor has been implemented to support ``cmake"
" --help-command`` and similar command-line options."
msgstr "已实现基本的 reStructuredText 处理器以支持“cmake --help-command”和类似的命令行选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:25
msgid "New manuals were added:"
msgstr "添加了新手册："

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:27
msgid ":manual:`cmake-buildsystem(7)`"
msgstr ":manual:`cmake-buildsystem(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:28
msgid ""
":manual:`cmake-commands(7)`, replacing ``cmakecommands(1)`` and "
"``cmakecompat(1)``"
msgstr ""
":manual:`cmake-commands(7)`，替换``cmakecommands(1)``和``cmakecompat(1)``"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:30
msgid ":manual:`cmake-developer(7)`"
msgstr ":manual:`cmake-developer(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:31
msgid ":manual:`cmake-generator-expressions(7)`"
msgstr ":manual:`cmake-generator-expressions(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:32
msgid ":manual:`cmake-generators(7)`"
msgstr ":manual:`cmake-generators(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:33
msgid ":manual:`cmake-language(7)`"
msgstr ":manual:`cmake-language(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:34
msgid ":manual:`cmake-modules(7)`, replacing ``cmakemodules(1)``"
msgstr ":manual:`cmake-modules(7)`，替换``cmakemodules(1)``"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:35
msgid ":manual:`cmake-packages(7)`"
msgstr ":manual:`cmake-packages(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:36
msgid ":manual:`cmake-policies(7)`, replacing ``cmakepolicies(1)``"
msgstr ":manual:`cmake-policies(7)`，替换``cmakepolicies(1)``"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:37
msgid ":manual:`cmake-properties(7)`, replacing ``cmakeprops(1)``"
msgstr ":manual:`cmake-properties(7)`，替换``cmakeprops(1)``"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:38
msgid ":manual:`cmake-qt(7)`"
msgstr ":manual:`cmake-qt（7）`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:39
msgid ":manual:`cmake-toolchains(7)`"
msgstr ":manual:`cmake-toolchains(7)`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:40
msgid ":manual:`cmake-variables(7)`, replacing ``cmakevars(1)``"
msgstr ":manual:`cmake-variables(7)`，替换``cmakevars(1)``"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:42
msgid ""
"Release notes for CMake 3.0.0 and above will now be included with the html"
" documentation."
msgstr "CMake 3.0.0 及更高版本的发行说明现在将包含在 html 文档中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:46
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:16
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:11
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:11
msgid "New Features"
msgstr "新功能"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:49
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:44
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:14
msgid "Syntax"
msgstr "句法"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:51
msgid ""
"The CMake language has been extended with :ref:`Bracket Argument` and  "
":ref:`Bracket Comment` syntax inspired by Lua long brackets::"
msgstr ""
"CMake 语言已经扩展了 :ref:`Bracket Argument` 和 :ref:`Bracket Comment` 语法，灵感来自 Lua"
" 长括号 ::"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:57
msgid ""
"Content between equal-length open- and close-brackets is taken literally "
"with no variable replacements."
msgstr "等长的左括号和右括号之间的内容按字面意思获取，没有变量替换。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:61
msgid ""
"This syntax change could not be made in a fully compatible way.  No policy"
" is possible because syntax parsing occurs before any chance to set a "
"policy.  Existing code using an unquoted argument that starts with an open"
" bracket will be interpreted differently without any diagnostic.  "
"Fortunately the syntax is obscure enough that this problem is unlikely in "
"practice."
msgstr ""
"无法以完全兼容的方式进行此语法更改。没有任何策略是可能的，因为语法解析发生在任何设置策略的机会之前。使用以左括号开头的未引用参数的现有代码将在没有任何诊断的情况下被不同地解释。幸运的是语法足够晦涩以至于这个问题在实践中不太可能发生。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:69
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:19
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:28
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:19
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:21
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:19
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:27
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:31
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:26
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:22
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:71
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:28
msgid "Generators"
msgstr "生成器"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:71
msgid ""
"A new :generator:`CodeLite` extra generator is available for use with the "
"Makefile or Ninja generators."
msgstr "新的 :generator:`CodeLite` 额外生成器可用于 Makefile 或 Ninja 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:74
msgid ""
"A new :generator:`Kate` extra generator is available for use with the "
"Makefile or Ninja generators."
msgstr "新的 :generator:`Kate` extra 生成器可用于 Makefile 或 Ninja 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:77
msgid ""
"The :generator:`Ninja` generator learned to use ``ninja`` job pools when "
"specified by a new :prop_gbl:`JOB_POOLS` global property."
msgstr ""
":generator:`Ninja` 生成器学会了在由新的 :prop_gbl:`JOB_POOLS` 全局属性指定时使用 ``ninja`` "
"作业池。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:81
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:55
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:41
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:46
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:29
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:56
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:85
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:106
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:65
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:62
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:30
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:97
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:27
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:82
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:88
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:84
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:84
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:68
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:49
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:32
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:28
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:41
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:29
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:50
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:86
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:38
msgid "Commands"
msgstr "命令"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:83
msgid ""
"The :command:`add_library` command learned a new ``INTERFACE`` library "
"type.  Interface libraries have no build rules but may have properties "
"defining :manual:`usage requirements <cmake-buildsystem(7)>` and may be "
"installed, exported, and imported.  This is useful to create header-only "
"libraries that have concrete link dependencies on other libraries."
msgstr ""
":command:`add_library` 命令学习了一个新的 ``INTERFACE`` 库类型。接口库没有构建规则，但可能具有定义 "
":manual:`usage requirements <cmake-buildsystem(7)>` "
"的属性，并且可以安装、导出和导入。这对于创建对其他库具有具体链接依赖性的仅标头库很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:91
msgid ""
"The :command:`export()` command learned a new ``EXPORT`` mode that "
"retrieves the list of targets to export from an export set configured by "
"the :command:`install(TARGETS)` command ``EXPORT`` option.  This makes it "
"easy to export from the build tree the same targets that are exported from"
" the install tree."
msgstr ""
":command:`export()` 命令学习了一种新的 ``EXPORT`` 模式，该模式从 "
":command:`install(TARGETS)` 命令的 ``EXPORT`` "
"选项配置的导出集中检索要导出的目标列表.这使得从构建树中导出与从安装树中导出的目标相同的目标变得容易。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:97
msgid ""
"The :command:`export` command learned to work with multiple dependent "
"export sets, thus allowing multiple packages to be built and exported from"
" a single tree.  The feature requires CMake to wait until the generation "
"step to write the output file.  This means one should not "
":command:`include` the generated targets file later during project "
"configuration because it will not be available. Use :ref:`Alias Targets` "
"instead.  See policy :policy:`CMP0024`."
msgstr ""
":command:`export` 命令学会了使用多个依赖导出集，从而允许从单个树构建和导出多个包。该功能要求 CMake "
"等到生成步骤写入输出文件。这意味着稍后在项目配置期间不应该 :command:`include` 生成的目标文件，因为它不可用。请改用 "
":ref:`Alias Targets`。请参阅政策:policy:`CMP0024`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:105
msgid ""
"The :command:`install(FILES)` command learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>` in the "
"list of files."
msgstr ""
":command:`install(FILES)` 命令学会了在文件列表中支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:109
msgid ""
"The :command:`project` command learned to set some version variables to "
"values specified by the new ``VERSION`` option or to empty strings. See "
"policy :policy:`CMP0048`."
msgstr ""
":command:`project` 命令学会了将一些版本变量设置为新的 ``VERSION`` "
"选项指定的值或空字符串。请参阅政策:policy:`CMP0048`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:113
msgid ""
"The :command:`string` command learned a new ``CONCAT`` mode. It is "
"particularly useful in combination with the new :ref:`Bracket Argument` "
"syntax."
msgstr ""
":command:`string` 命令学习了一种新的 ``CONCAT`` 模式。它与新的 :ref:`Bracket Argument` "
"语法结合使用特别有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:117
msgid ""
"The :command:`unset` command learned a ``PARENT_SCOPE`` option matching "
"that of the :command:`set` command."
msgstr ""
":command:`unset` 命令学习了一个与 :command:`set` 命令相匹配的 ``PARENT_SCOPE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:120
msgid ""
"The :command:`include_external_msproject` command learned to handle "
"non-C++ projects like ``.vbproj`` or ``.csproj``."
msgstr ""
":command:`include_external_msproject` 命令学会了处理非 C++ 项目，如 ``.vbproj`` 或 "
"``.csproj``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:123
msgid ""
"The :command:`ctest_update` command learned to update work trees managed "
"by the Perforce (p4) version control tool."
msgstr ":command:`ctest_update` 命令学会了更新由 Perforce (p4) 版本控制工具管理的工作树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:126
msgid ""
"The :command:`message` command learned a ``DEPRECATION`` mode. Such "
"messages are not issued by default, but may be issued as a warning if "
":variable:`CMAKE_WARN_DEPRECATED` is enabled, or as an error if "
":variable:`CMAKE_ERROR_DEPRECATED` is enabled."
msgstr ""
":command:`message` 命令学会了一种 ``DEPRECATION`` 模式。默认情况下不会发出此类消息，但如果启用 "
":variable:`CMAKE_WARN_DEPRECATED` "
"可能会作为警告发出，或者如果启用 :variable:`CMAKE_ERROR_DEPRECATED` 可能会作为错误发出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:131
msgid ""
"The :command:`target_link_libraries` command now allows repeated use of "
"the ``LINK_PUBLIC`` and ``LINK_PRIVATE`` keywords."
msgstr ""
":command:`target_link_libraries` 命令现在允许重复使用 ``LINK_PUBLIC`` 和 "
"``LINK_PRIVATE`` 关键字。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:135
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:96
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:68
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:77
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:87
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:86
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:132
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:136
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:109
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:86
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:85
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:142
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:74
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:129
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:139
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:25
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:100
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:118
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:106
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:70
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:61
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:51
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:52
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:46
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:95
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:117
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:64
msgid "Variables"
msgstr "变量"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:137
msgid ""
"Variable :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` has been introduced to "
"tell CMake not to add the value of :variable:`CMAKE_INSTALL_PREFIX` to the"
" :variable:`CMAKE_SYSTEM_PREFIX_PATH` variable by default. This is useful "
"when building a project that installs some of its own dependencies to "
"avoid finding files it is about to replace."
msgstr ""
"引入了变量 :variable:`CMAKE_FIND_NO_INSTALL_PREFIX` 以告诉 CMake 不要默认将 "
":variable:`CMAKE_INSTALL_PREFIX` 的值添加到 "
":variable:`CMAKE_SYSTEM_PREFIX_PATH` "
"变量。这在构建一个项目时很有用，该项目安装了一些自己的依赖项以避免找到它即将替换的文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:145
msgid ""
"Variable :variable:`CMAKE_STAGING_PREFIX` was introduced for use when "
"cross-compiling to specify an installation prefix on the host system that "
"differs from a :variable:`CMAKE_INSTALL_PREFIX` value meant for the target"
" system."
msgstr ""
"变量 :variable:`CMAKE_STAGING_PREFIX` "
"被引入用于在交叉编译时指定主机系统上的安装前缀，该前缀不同于用于目标系统的 :variable:`CMAKE_INSTALL_PREFIX` 值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:150
msgid ""
"Variable :variable:`CMAKE_SYSROOT` was introduced to specify the toolchain"
" SDK installation prefix, typically for cross-compiling. This is used to "
"pass a ``--sysroot`` option to the compiler and as a prefix searched by "
"``find_*`` commands."
msgstr ""
"引入变量 :variable:`CMAKE_SYSROOT` 以指定工具链 SDK "
"安装前缀，通常用于交叉编译。这用于将“--sysroot”选项传递给编译器，并作为“find_*”命令搜索的前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:155
msgid ""
"Variable :variable:`CMAKE_<LANG>_COMPILER_TARGET` was introduced for use "
"when cross-compiling to specify the target platform in the :ref:`toolchain"
" file <Cross Compiling Toolchain>` specified by the "
":variable:`CMAKE_TOOLCHAIN_FILE` variable. This is used to pass an option "
"such as ``--target=<triple>`` to some cross-compiling compiler drivers."
msgstr ""
"引入了变量 :variable:`CMAKE_<LANG>_COMPILER_TARGET`，以便在交叉编译时使用，以在 "
":ref:`toolchain 文件 <Cross Compiling Toolchain>` 中指定目标平台，该文件由 "
":variable:`CMAKE_TOOLCHAIN_FILE` "
"变量指定。这用于将诸如“--target=<triple>”之类的选项传递给某些交叉编译的编译器驱动程序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:162
msgid ""
"Variable :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` has been "
"introduced to optionally initialize the "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property."
msgstr ""
"引入了变量 :variable:`CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>` 以选择性地初始化 "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:167
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:115
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:74
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:105
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:126
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:97
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:145
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:165
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:124
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:129
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:100
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:162
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:81
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:140
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:145
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:48
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:118
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:175
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:140
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:81
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:73
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:67
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:62
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:79
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:118
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:143
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:97
msgid "Properties"
msgstr "特性"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:169
msgid ""
"The :prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` directory property learned to "
"support :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` 目录属性学会了支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:173
msgid ""
"A new directory property :prop_dir:`CMAKE_CONFIGURE_DEPENDS` was "
"introduced to allow projects to specify additional files on which the "
"configuration process depends.  CMake will re-run at build time when one "
"of these files is modified. Previously this was only possible to achieve "
"by specifying such files as the input to a :command:`configure_file` "
"command."
msgstr ""
"引入了一个新的目录属性 :prop_dir:`CMAKE_CONFIGURE_DEPENDS` "
"以允许项目指定配置过程所依赖的其他文件。当其中一个文件被修改时，CMake 将在构建时重新运行。以前，这只能通过将此类文件指定为 "
":command:`configure_file` 命令的输入来实现。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:180
msgid ""
"A new :ref:`Qt AUTORCC` feature replaces the need to invoke "
"``qt4_add_resources()`` by allowing ``.qrc`` files to be listed as target "
"sources."
msgstr ""
"新的 :ref:`Qt AUTORCC` 功能通过允许将``.qrc`` 文件列为目标源来取代调用``qt4_add_resources()`` "
"的需要。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:184
msgid ""
"A new :ref:`Qt AUTOUIC` feature replaces the need to invoke "
"``qt4_wrap_ui()``."
msgstr "新的 :ref:`Qt AUTOUIC` 功能取代了调用 ``qt4_wrap_ui()`` 的需要。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:187
msgid ""
"Test properties learned to support :manual:`generator expressions <cmake-"
"generator-expressions(7)>`. This is useful to specify per-configuration "
"values for test properties like :prop_test:`REQUIRED_FILES` and "
":prop_test:`WORKING_DIRECTORY`."
msgstr ""
"测试属性学会支持 :manual:`生成器表达式 <cmake-generator-"
"expressions(7)>`。这对于为测试属性指定每个配置值很有用，例如 :prop_test:`REQUIRED_FILES` 和 "
":prop_test:`WORKING_DIRECTORY`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:193
msgid ""
"A new :prop_test:`SKIP_RETURN_CODE` test property was introduced to tell "
":manual:`ctest(1)` to treat a particular test return code as if the test "
"were not run.  This is useful for test drivers to report that certain test"
" requirements were not available."
msgstr ""
"引入了一个新的 :prop_test:`SKIP_RETURN_CODE` 测试属性来告诉 :manual:`ctest(1)` "
"将特定的测试返回码视为未运行测试。这对于测试驱动程序报告某些测试要求不可用很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:198
msgid ""
"New types of :ref:`Compatible Interface Properties` were introduced, "
"namely the :prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` and "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` for calculating numeric "
"maximum and minimum values respectively."
msgstr ""
"引入了新类型的 :ref:`Compatible Interface Properties`，即 "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MAX` 和 "
":prop_tgt:`COMPATIBLE_INTERFACE_NUMBER_MIN` 分别用于计算数字最大值和最小值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:204
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:182
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:98
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:128
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:162
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:139
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:164
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:189
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:154
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:158
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:144
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:179
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:91
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:170
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:161
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:58
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:146
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:197
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:160
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:99
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:95
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:108
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:68
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:104
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:156
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:221
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:144
msgid "Modules"
msgstr "模块"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:206
msgid ""
"The :module:`CheckTypeSize` module ``check_type_size`` macro and the "
":module:`CheckStructHasMember` module ``check_struct_has_member`` macro "
"learned a new ``LANGUAGE`` option to optionally check C++ types."
msgstr ""
":module:`CheckTypeSize` 模块 ``check_type_size`` 宏和 "
":module:`CheckStructHasMember` 模块 ``check_struct_has_member`` 宏学习了一个新的 "
"``LANGUAGE`` 选项来选择性地检查 C++ 类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:210
msgid ""
"The :module:`ExternalData` module learned to work with no URL templates if"
" a local store is available."
msgstr ":module:`ExternalData` 模块学会了在本地商店可用时不使用 URL 模板。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:213
msgid ""
"The :module:`ExternalProject` function ``ExternalProject_Add`` learned a "
"new ``GIT_SUBMODULES`` option to specify a subset of available submodules "
"to checkout."
msgstr ""
":module:`ExternalProject` 函数 ``ExternalProject_Add`` 学习了一个新的 "
"``GIT_SUBMODULES`` 选项来指定要检出的可用子模块的子集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:217
msgid ""
"A new :module:`FindBacktrace` module has been added to support "
":command:`find_package(Backtrace)` calls."
msgstr ""
"添加了一个新的 :module:`FindBacktrace` 模块以支持 :command:`find_package(Backtrace)` "
"调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:220
msgid ""
"A new :module:`FindLua` module has been added to support "
":command:`find_package(Lua)` calls."
msgstr "添加了一个新的 :module:`FindLua` 模块以支持 :command:`find_package(Lua)` 调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:223
msgid ""
"The :module:`FindBoost` module learned a new ``Boost_NAMESPACE`` option to"
" change the ``boost`` prefix on library names."
msgstr ""
":module:`FindBoost` 模块学习了一个新的 ``Boost_NAMESPACE`` 选项来更改库名称上的 ``boost`` 前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:226
msgid ""
"The :module:`FindBoost` module learned to control search for libraries "
"with the ``g`` tag (for MS debug runtime) with a new "
"``Boost_USE_DEBUG_RUNTIME`` option.  It is ``ON`` by default to preserve "
"existing behavior."
msgstr ""
":module:`FindBoost` 模块学会了使用新的 ``Boost_USE_DEBUG_RUNTIME`` 选项控制带有 `g` 标签（用于"
" MS 调试运行时）的库搜索。默认情况下它是 ``ON`` 以保留现有行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:231
msgid ""
"The :module:`FindJava` and :module:`FindJNI` modules learned to use a "
"``JAVA_HOME`` CMake variable or environment variable, and then try "
"``/usr/libexec/java_home`` on OS X."
msgstr ""
":module:`FindJava` 和 :module:`FindJNI` 模块学会了使用 ``JAVA_HOME`` CMake "
"变量或环境变量，然后在 OS X 上尝试 ``/usr/libexec/java_home``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:235
msgid ""
"The :module:`UseJava` module ``add_jar`` function learned a new "
"``MANIFEST`` option to pass the ``-m`` option to ``jar``."
msgstr ""
":module:`UseJava` 模块 ``add_jar`` 函数学习了一个新的 ``MANIFEST`` 选项来将 ``-m`` 选项传递给 "
"``jar``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:238
msgid ""
"A new :module:`CMakeFindDependencyMacro` module was introduced with a "
"``find_dependency`` macro to find transitive dependencies in a "
":manual:`package configuration file <cmake-packages(7)>`.  Such "
"dependencies are omitted by the listing of the :module:`FeatureSummary` "
"module."
msgstr ""
"一个新的 :module:`CMakeFindDependencyMacro` 模块引入了一个 ``find_dependency`` 宏，用于在 "
":manual:`package 配置文件 <cmake-packages(7)>` 中查找传递依赖项。 "
":module:`FeatureSummary` 模块的清单省略了此类依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:244
msgid ""
"The :module:`FindQt4` module learned to create :ref:`Imported Targets` for"
" Qt executables.  This helps disambiguate when using multiple :manual:`Qt "
"versions <cmake-qt(7)>` in the same buildsystem."
msgstr ""
":module:`FindQt4` 模块学会了为 Qt 可执行文件创建 :ref:`Imported "
"Targets`。这有助于在同一构建系统中使用多个 Qt 版本 <cmake-qt(7)> 时消除歧义。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:248
msgid ""
"The :module:`FindRuby` module learned to search for Ruby 2.0 and 2.1."
msgstr ":module:`FindRuby` 模块学会了搜索 Ruby 2.0 和 2.1。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:251
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:267
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:202
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:276
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:244
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:212
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:195
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:234
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:121
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:150
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:176
msgid "Generator Expressions"
msgstr "生成器表达式"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:253
msgid ""
"New ``$<PLATFORM_ID>`` and ``$<PLATFORM_ID:...>`` :manual:`generator "
"expressions <cmake-generator-expressions(7)>` have been added."
msgstr ""
"添加了新的 ``$<PLATFORM_ID>`` 和 ``$<PLATFORM_ID:...>`` :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:257
msgid ""
"The ``$<CONFIG>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` now has a variant which takes no argument.  This is "
"equivalent to the ``$<CONFIGURATION>`` expression."
msgstr ""
"``$<CONFIG>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` 现在有一个不带参数的变体。这相当于 ``$<CONFIGURATION>`` 表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:262
msgid ""
"New ``$<UPPER_CASE:...>`` and ``$<LOWER_CASE:...>`` :manual:`generator "
"expressions <cmake-generator-expressions(7)>` generator expressions have "
"been added."
msgstr ""
"添加了新的 ``$<UPPER_CASE:...>`` 和 ``$<LOWER_CASE:...>`` :manual:`generator "
"expressions <cmake-generator-expressions(7)>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:266
msgid ""
"A new ``$<MAKE_C_IDENTIFIER:...>`` :manual:`generator expression <cmake-"
"generator-expressions(7)>` has been added."
msgstr ""
"添加了一个新的``$<MAKE_C_IDENTIFIER:...>``:manual:`generator expression <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:271
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:306
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:220
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:217
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:248
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:257
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:255
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:263
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:184
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:203
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:220
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:155
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:235
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:273
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:344
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:246
msgid "Other"
msgstr "其他"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:273
msgid ""
"The :manual:`cmake(1)` ``-E`` option learned a new ``sleep`` command."
msgstr ":manual:`cmake(1)` `-E`` 选项学习了一个新的 ``sleep`` 命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:275
msgid ""
"The :manual:`ccmake(1)` dialog learned to honor the :prop_cache:`STRINGS` "
"cache entry property to cycle through the enumerated list of possible "
"values."
msgstr ""
":manual:`ccmake(1)` 对话框学会了尊重 :prop_cache:`STRINGS` 缓存条目属性以循环遍历可能值的枚举列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:279
msgid ""
"The :manual:`cmake-gui(1)` dialog learned to remember window settings "
"between sessions."
msgstr ":manual:`cmake-gui(1)` 对话框学会了记住会话之间的窗口设置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:282
msgid ""
"The :manual:`cmake-gui(1)` dialog learned to remember the type of a cache "
"entry for completion in the ``Add Entry`` dialog."
msgstr ":manual:`cmake-gui(1)` 对话框学会了记住缓存条目的类型，以便在 ``Add Entry`` 对话框中完成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:286
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:328
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:210
msgid "New Diagnostics"
msgstr "新诊断"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:288
msgid ""
"Directories named in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target "
"property of imported targets linked conditionally by a :manual:`generator "
"expression <cmake-generator-expressions(7)>` were not checked for "
"existence.  Now they are checked. See policy :policy:`CMP0027`."
msgstr ""
"不检查由生成器表达式 <cmake-generator-expressions(7)> 有条件链接的导入目标的 "
"INTERFACE_INCLUDE_DIRECTORIES 目标属性中命名的目录是否存在。现在他们被检查了。请参阅政策:policy:`CMP0027`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:294
msgid ""
"Build target names must now match a validity pattern and may no longer "
"conflict with CMake-defined targets.  See policy :policy:`CMP0037`."
msgstr "构建目标名称现在必须匹配有效性模式，并且可能不再与 CMake 定义的目标冲突。请参阅政策:policy:`CMP0037`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:297
msgid ""
"Build targets that specify themselves as a link dependency were silently "
"accepted but are now diagnosed.  See :policy:`CMP0038`."
msgstr "将自己指定为链接依赖项的构建目标被静默接受，但现在已被诊断。请参阅:policy:`CMP0038`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:300
msgid ""
"The :command:`target_link_libraries` command used to silently ignore calls"
" specifying as their first argument build targets created by "
":command:`add_custom_target` but now diagnoses this mistake. See policy "
":policy:`CMP0039`."
msgstr ""
":command:`target_link_libraries` 命令过去常常默默地忽略指定为第一个参数的构建目标的调用，这些构建目标由 "
":command:`add_custom_target` 创建，但现在诊断出这个错误。请参阅政策:policy:`CMP0039`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:305
msgid ""
"The :command:`add_custom_command` command used to silently ignore calls "
"specifying the ``TARGET`` option with a non-existent target but now "
"diagnoses this mistake.  See policy :policy:`CMP0040`."
msgstr ""
":command:`add_custom_command` 命令用于静默忽略指定带有不存在目标的 ``TARGET`` "
"选项的调用，但现在诊断出此错误。请参阅政策:policy:`CMP0040`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:309
msgid ""
"Relative paths in the :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target "
"property used to be silently accepted if they contained a "
":manual:`generator expression <cmake-generator-expressions(7)>` but are "
"now rejected.  See policy :policy:`CMP0041`."
msgstr ""
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` 目标属性中的相对路径如果包含 "
":manual:`generator expression <cmake-generator-expressions(7)>` "
"过去会被静默接受，但现在被拒绝了。请参阅政策:policy:`CMP0041`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:314
msgid ""
"The :command:`get_target_property` command learned to reject calls "
"specifying a non-existent target.  See policy :policy:`CMP0045`."
msgstr ""
":command:`get_target_property` 命令学会了拒绝指定不存在目标的调用。请参阅政策:policy:`CMP0045`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:317
msgid ""
"The :command:`add_dependencies` command learned to reject calls specifying"
" a dependency on a non-existent target. See policy :policy:`CMP0046`."
msgstr ""
":command:`add_dependencies` 命令学会了拒绝指定对不存在目标的依赖项的调用。请参阅政策:policy:`CMP0046`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:321
msgid ""
"Link dependency analysis learned to assume names containing ``::`` refer "
"to :ref:`Alias Targets` or :ref:`Imported Targets`.  It will now produce "
"an error if such a linked target is missing.  Previously in this case "
"CMake generated a link line that failed at build time. See policy "
":policy:`CMP0028`."
msgstr ""
"链接依赖分析学会假设名称包含 `::`` 是指:ref:`Alias Targets` 或 :ref:`Imported "
"Targets`。如果缺少这样的链接目标，它现在会产生错误。以前在这种情况下，CMake "
"生成了一个在构建时失败的链接行。请参阅政策:policy:`CMP0028`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:327
msgid ""
"When the :command:`project` or :command:`enable_language` commands "
"initialize support for a language, it is now an error if the full path to "
"the compiler cannot be found and stored in the corresponding "
":variable:`CMAKE_<LANG>_COMPILER` variable.  This produces nicer error "
"messages up front and stops processing when no working compiler is known "
"to be available."
msgstr ""
"当 :command:`project` 或 :command:`enable_language` "
"命令初始化对一种语言的支持时，如果找不到编译器的完整路径并将其存储在相应的 :variable:`CMAKE_<LANG> "
"中，现在会出错_COMPILER` 变量。这会预先生成更好的错误消息，并在已知没有工作编译器可用时停止处理。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:334
msgid ""
"Target sources specified with the :command:`add_library` or "
":command:`add_executable` command learned to reject items which require an"
" undocumented extra layer of variable expansion. See policy "
":policy:`CMP0049`."
msgstr ""
"使用 :command:`add_library` 或 :command:`add_executable` "
"命令指定的目标源学会拒绝需要未记录的额外变量扩展层的项目。请参阅政策:policy:`CMP0049`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:339
msgid ""
"Use of :command:`add_custom_command` undocumented ``SOURCE`` signatures "
"now results in an error.  See policy :policy:`CMP0050`."
msgstr ""
"使用 :command:`add_custom_command` 未记录的 ``SOURCE`` "
"签名现在会导致错误。请参阅政策:policy:`CMP0050`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:343
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:334
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:230
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:232
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:262
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:199
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:322
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:303
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:223
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:267
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:272
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:270
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:217
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:269
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:235
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:121
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:233
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:313
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:214
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:135
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:218
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:237
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:162
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:242
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:292
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:353
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:268
msgid "Deprecated and Removed Features"
msgstr "弃用和删除的功能"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:345
msgid ""
"Compatibility options supporting code written for CMake versions prior to "
"2.4 have been removed."
msgstr "支持为 2.4 之前的 CMake 版本编写的代码的兼容性选项已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:348
msgid ""
"Several long-outdated commands that should no longer be called have been "
"disallowed in new code by policies:"
msgstr "政策禁止在新代码中使用一些不应再调用的过时命令："

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:351
msgid "Policy :policy:`CMP0029` disallows :command:`subdir_depends`"
msgstr "政策:policy:`CMP0029` 不允许 :command:`subdir_depends`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:352
msgid "Policy :policy:`CMP0030` disallows :command:`use_mangled_mesa`"
msgstr "策略:policy:`CMP0030` 不允许 :command:`use_mangled_mesa`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:353
msgid "Policy :policy:`CMP0031` disallows :command:`load_command`"
msgstr "策略:policy:`CMP0031` 不允许 :command:`load_command`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:354
msgid "Policy :policy:`CMP0032` disallows :command:`output_required_files`"
msgstr "策略:policy:`CMP0032` 不允许 :command:`output_required_files`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:355
msgid ""
"Policy :policy:`CMP0033` disallows :command:`export_library_dependencies`"
msgstr "政策:policy:`CMP0033` 不允许 :command:`export_library_dependencies`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:356
msgid "Policy :policy:`CMP0034` disallows :command:`utility_source`"
msgstr "策略:policy:`CMP0034` 不允许 :command:`utility_source`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:357
msgid "Policy :policy:`CMP0035` disallows :command:`variable_requires`"
msgstr "政策:policy:`CMP0035` 不允许 :command:`variable_requires`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:358
msgid "Policy :policy:`CMP0036` disallows :command:`build_name`"
msgstr "策略:policy:`CMP0036` 不允许 :command:`build_name`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:360
msgid ""
"The :manual:`cmake(1)` ``-i`` wizard mode has been removed. Instead use an"
" interactive dialog such as :manual:`ccmake(1)` or use the ``-D`` option "
"to set cache values from the command line."
msgstr ""
":manual:`cmake(1)` ``-i`` 向导模式已被删除。而是使用交互式对话框，例如 :manual:`ccmake(1)` 或使用 "
"``-D`` 选项从命令行设置缓存值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:364
msgid ""
"The builtin documentation formatters that supported command-line options "
"such as ``--help-man`` and ``--help-html`` have been removed in favor of "
"the above-mentioned new documentation system.  These and other command-"
"line options that used to generate man- and html- formatted pages no "
"longer work.  The :manual:`cmake(1)` ``--help-custom-modules`` option now "
"produces a warning at runtime and generates a minimal document that "
"reports the limitation."
msgstr ""
"支持命令行选项（如“--help-man”和“--help-html”）的内置文档格式化程序已被删除，以支持上述新文档系统。这些和其他用于生成 "
"man 和 html 格式页面的命令行选项不再有效。 :manual:`cmake(1)` ``--help-custom-modules`` "
"选项现在会在运行时产生警告并生成报告限制的最小文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:372
msgid ""
"The :prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` directory properties and the "
":prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` target properties have been "
"deprecated.  Instead set the corresponding :prop_dir:`COMPILE_DEFINITIONS`"
" directory property or :prop_tgt:`COMPILE_DEFINITIONS` target property and"
" use :manual:`generator expressions <cmake-generator-expressions(7)>` like"
" ``$<CONFIG:...>`` to specify per-configuration definitions. See policy "
":policy:`CMP0043`."
msgstr ""
":prop_dir:`COMPILE_DEFINITIONS_<CONFIG>` 目录属性和 "
":prop_tgt:`COMPILE_DEFINITIONS_<CONFIG>` 目标属性已被弃用。而是设置相应的 "
":prop_dir:`COMPILE_DEFINITIONS` 目录属性或 :prop_tgt:`COMPILE_DEFINITIONS` "
"目标属性并使用 :manual:`generator expressions <cmake-generator-expressions(7)>` "
"like ``$<CONFIG:... >`` 指定每个配置定义。请参阅政策:policy:`CMP0043`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:380
msgid ""
"The :prop_tgt:`LOCATION` target property should no longer be read from "
"non-IMPORTED targets.  It does not make sense in multi-configuration "
"generators since the build configuration is not known while configuring "
"the project.  It has been superseded by the ``$<TARGET_FILE>`` generator "
"expression.  See policy :policy:`CMP0026`."
msgstr ""
":prop_tgt:`LOCATION` 目标属性不应再从非导入目标中读取。它在多配置生成器中没有意义，因为在配置项目时构建配置是未知的。它已被 "
"``$<TARGET_FILE>`` 生成器表达式取代。请参阅政策:policy:`CMP0026`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:386
msgid ""
"The :prop_tgt:`COMPILE_FLAGS` target property is now documented as "
"deprecated, though no warning is issued.  Use the "
":prop_tgt:`COMPILE_OPTIONS` target property or the "
":command:`target_compile_options` command instead."
msgstr ""
":prop_tgt:`COMPILE_FLAGS` 目标属性现在被记录为已弃用，但没有发出警告。请改用 "
":prop_tgt:`COMPILE_OPTIONS` 目标属性或 :command:`target_compile_options` 命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:391
msgid ""
"The :module:`GenerateExportHeader` module ``add_compiler_export_flags`` "
"function is now deprecated.  It has been superseded by the "
":prop_tgt:`<LANG>_VISIBILITY_PRESET` and "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties."
msgstr ""
":module:`GenerateExportHeader` 模块``add_compiler_export_flags`` 函数现已弃用。它已被 "
":prop_tgt:`<LANG>_VISIBILITY_PRESET` 和 "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` 目标属性所取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:397
#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:400
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:242
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:243
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:270
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:208
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:349
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:329
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:242
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:288
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:285
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:301
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:244
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:295
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:251
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:127
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:253
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:330
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:225
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:147
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:266
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:246
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:176
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:267
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:310
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:363
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:290
msgid "Other Changes"
msgstr "其他变化"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:399
msgid ""
"The version scheme was changed to use only two components for the feature "
"level instead of three.  The third component will now be used for bug-fix "
"releases or the date of development versions. See the "
":variable:`CMAKE_VERSION` variable documentation for details."
msgstr ""
"版本方案更改为仅使用两个组件而不是三个组件用于功能级别。第三个组件现在将用于错误修复版本或开发版本的日期。有关详细信息，请参阅 "
":variable:`CMAKE_VERSION` 变量文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:404
msgid ""
"The default install locations of CMake itself on Windows and OS X no "
"longer contain the CMake version number.  This allows for easy replacement"
" without re-generating local build trees manually."
msgstr ""
"Windows 和 OS X 上 CMake 本身的默认安装位置不再包含 CMake 版本号。这允许轻松替换，而无需手动重新生成本地构建树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:409
msgid ""
"Generators for Visual Studio 10 (2010) and later were renamed to include "
"the product year like generators for older VS versions:"
msgstr "Visual Studio 10 (2010) 及更高版本的生成器重命名为包括产品年份，就像旧 VS 版本的生成器一样："

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:412
msgid "``Visual Studio 10`` -> :generator:`Visual Studio 10 2010`"
msgstr "``Visual Studio 10`` -> :generator:`Visual Studio 10 2010`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:413
msgid "``Visual Studio 11`` -> :generator:`Visual Studio 11 2012`"
msgstr "``Visual Studio 11`` -> :generator:`Visual Studio 11 2012`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:414
msgid "``Visual Studio 12`` -> :generator:`Visual Studio 12 2013`"
msgstr "``Visual Studio 12`` -> :generator:`Visual Studio 12 2013`"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:416
msgid ""
"This clarifies which generator goes with each Visual Studio version.  The "
"old names are recognized for compatibility."
msgstr "这阐明了哪个生成器适用于每个 Visual Studio 版本。旧名称的兼容性得到认可。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:419
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER_ID` value for Apple-provided Clang is"
" now ``AppleClang``.  It must be distinct from upstream Clang because the "
"version numbers differ. See policy :policy:`CMP0025`."
msgstr ""
"Apple 提供的 Clang 的 :variable:`CMAKE_<LANG>_COMPILER_ID` 值现在是 "
"``AppleClang``。它必须与上游 Clang 不同，因为版本号不同。请参阅政策:policy:`CMP0025`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:424
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER_ID` value for ``qcc`` on QNX is now "
"``QCC``.  It must be distinct from ``GNU`` because the command-line "
"options differ.  See policy :policy:`CMP0047`."
msgstr ""
"QNX 上 ``qcc`` 的 :variable:`CMAKE_<LANG>_COMPILER_ID` 值现在是 "
"``QCC``。它必须与``GNU`` 不同，因为命令行选项不同。请参阅政策:policy:`CMP0047`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:428
msgid ""
"On 64-bit OS X the :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` value is now "
"correctly detected as ``x86_64`` instead of ``i386``."
msgstr ""
"在 64 位 OS X 上 :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` 值现在被正确检测为 ``x86_64`` 而不是 "
"``i386``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:431
msgid ""
"On OS X, CMake learned to enable behavior specified by the "
":prop_tgt:`MACOSX_RPATH` target property by default.  This activates use "
"of ``@rpath`` for runtime shared library searches. See policy "
":policy:`CMP0042`."
msgstr ""
"在 OS X 上，CMake 学会了默认启用 :prop_tgt:`MACOSX_RPATH` "
"目标属性指定的行为。这会激活使用“@rpath”进行运行时共享库​​搜索。请参阅政策:policy:`CMP0042`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:436
msgid ""
"The :command:`build_command` command now returns a :manual:`cmake(1)` "
"``--build`` command line instead of a direct invocation of the native "
"build tool.  When using ``Visual Studio`` generators, CMake and CTest no "
"longer require :variable:`CMAKE_MAKE_PROGRAM` to be located up front. "
"Selection of the proper msbuild or devenv tool is now performed as late as"
" possible when the solution (``.sln``) file is available so it can depend "
"on project content."
msgstr ""
":command:`build_command` 命令现在返回一个 :manual:`cmake(1)` ``--build`` "
"命令行，而不是直接调用本机构建工具。使用 ``Visual Studio`` 生成器时，CMake 和 CTest "
"不再需要 :variable:`CMAKE_MAKE_PROGRAM` 位于最前面。当解决方案 (``.sln``) 文件可用时，现在会尽可能晚地选择合适的 "
"msbuild 或 devenv 工具，因此它可以取决于项目内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:444
msgid ""
"The :manual:`cmake(1)` ``--build`` command now shares its own stdout and "
"stderr pipes with the native build tool by default. The ``--use-stderr`` "
"option that once activated this is now ignored."
msgstr ""
":manual:`cmake(1)` ``--build`` 命令现在默认与本机构建工具共享自己的 stdout 和 stderr 管道。 "
"``--use-stderr`` 选项曾经被激活，现在被忽略了。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:448
msgid ""
"The ``$<C_COMPILER_ID:...>`` and ``$<CXX_COMPILER_ID:...>`` "
":manual:`generator expressions <cmake-generator-expressions(7)>` used to "
"perform case-insensitive comparison but have now been corrected to perform"
" case-sensitive comparison. See policy :policy:`CMP0044`."
msgstr ""
"``$<C_COMPILER_ID:...>`` 和``$<CXX_COMPILER_ID:...>`` :manual:`generator "
"expressions <cmake-generator-expressions(7)>` "
"用于执行不区分大小写的比较但现在已更正为执行区分大小写的比较。请参阅政策:policy:`CMP0044`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:454
msgid ""
"The builtin ``edit_cache`` target will no longer select "
":manual:`ccmake(1)` by default when no interactive terminal will be "
"available (e.g. with :generator:`Ninja` or an IDE generator). Instead "
":manual:`cmake-gui(1)` will be preferred if available."
msgstr ""
"当没有交互式终端可用时（例如:generator:`Ninja` 或 IDE 生成器），内置的 edit_cache 目标将不再默认选择 "
"ccmake(1)。相反，如果可用，将首选 :manual:`cmake-gui(1)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:459
msgid ""
"The :module:`ExternalProject` download step learned to re-attempt download"
" in certain cases to be more robust to temporary network failure."
msgstr ":module:`ExternalProject` 下载步骤学会了在某些情况下重新尝试下载，以更稳健地应对临时网络故障。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:463
msgid ""
"The :module:`FeatureSummary` no longer lists transitive dependencies since"
" they were not directly requested by the current project."
msgstr ":module:`FeatureSummary` 不再列出传递依赖项，因为它们不是由当前项目直接请求的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:467
msgid ""
"The ``cmake-mode.el`` major Emacs editing mode has been cleaned up and "
"enhanced in several ways."
msgstr "``cmake-mode.el`` 主要的 Emacs 编辑模式已在多个方面得到清理和增强。"

#: ../../cmake-prefix/src/cmake/Help/release/3.0.rst:470
msgid ""
"Include directories specified in the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of :ref:`Imported Targets` are "
"treated as ``SYSTEM`` includes by default when handled as :ref:`usage "
"requirements <Include Directories and Usage Requirements>`."
msgstr ""
"在 :ref:`Imported Targets` 的 INTERFACE_INCLUDE_DIRECTORIES` 中指定的包含目录被视为 "
"``SYSTEM`` 默认情况下，当处理为 :ref:`usage requirements <Include Directories and "
"Usage Requirements>` 时。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:2
msgid "CMake 3.1 Release Notes"
msgstr "CMake 3.1 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:8
msgid "Changes made since CMake 3.0 include the following."
msgstr "自 CMake 3.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:13
msgid "A new :manual:`cmake-compile-features(7)` manual was added."
msgstr "添加了新的 :manual:`cmake-compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:21
msgid "The :generator:`Visual Studio 14 2015` generator was added."
msgstr "添加了 :generator:`Visual Studio 14 2015` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:24
msgid "Windows Phone and Windows Store"
msgstr "Windows Phone 和 Windows 应用商店"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:26
msgid ""
"Generators for Visual Studio 11 (2012) and above learned to generate "
"projects for Windows Phone and Windows Store.  One may set the "
":variable:`CMAKE_SYSTEM_NAME` variable to ``WindowsPhone`` or "
"``WindowsStore`` on the :manual:`cmake(1)` command-line or in a "
":variable:`CMAKE_TOOLCHAIN_FILE` to activate these platforms. Also set "
":variable:`CMAKE_SYSTEM_VERSION` to ``8.0`` or ``8.1`` to specify the "
"version of Windows to be targeted."
msgstr ""
"Visual Studio 11 (2012) 及更高版本的生成器学会了为 Windows Phone 和 Windows Store "
"生成项目。可以在 cmake(1) 命令行或 CMAKE_TOOLCHAIN_FILE 中将 "
":variable:`CMAKE_SYSTEM_NAME 变量设置为 ``WindowsPhone`` 或 ``WindowsStore`` "
"来激活这些平台.同时将 :variable:`CMAKE_SYSTEM_VERSION` 设置为 ``8.0`` 或 ``8.1`` 以指定目标 "
"Windows 版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:35
msgid "NVIDIA Nsight Tegra"
msgstr "NVIDIA Nsight Tegra"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:37
msgid ""
"Generators for Visual Studio 10 (2010) and above learned to generate "
"projects for NVIDIA Nsight Tegra Visual Studio Edition.  One may set the "
":variable:`CMAKE_SYSTEM_NAME` variable to ``Android`` on the "
":manual:`cmake(1)` command-line or in a :variable:`CMAKE_TOOLCHAIN_FILE` "
"to activate this platform."
msgstr ""
"Visual Studio 10 (2010) 及更高版本的生成器学会了为 NVIDIA Nsight Tegra Visual Studio "
"Edition 生成项目。可以在 cmake(1) 命令行或 CMAKE_TOOLCHAIN_FILE 中将 CMAKE_SYSTEM_NAME "
"变量设置为 Android 以激活该平台。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:46
msgid ""
"The :manual:`cmake-language(7)` syntax for :ref:`Variable References` and "
":ref:`Escape Sequences` was simplified in order to allow a much faster "
"implementation.  See policy :policy:`CMP0053`."
msgstr ""
":ref:`Variable References` 和 :ref:`Escape Sequences` 的 :manual:`cmake-"
"language(7)` 语法得到了简化，以便实现更快的实现。请参阅政策:policy:`CMP0053`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:50
msgid ""
"The :command:`if` command no longer automatically dereferences variables "
"named in quoted or bracket arguments.  See policy :policy:`CMP0054`."
msgstr ":command:`if` 命令不再自动取消引用在引号或括号参数中命名的变量。请参阅政策:policy:`CMP0054`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:57
msgid ""
"The :command:`add_custom_command` command learned to interpret "
":manual:`cmake-generator-expressions(7)` in arguments to ``DEPENDS``."
msgstr ""
":command:`add_custom_command` 命令学会了在 ``DEPENDS`` 的参数中解释 :manual:`cmake-"
"generator-expressions(7)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:60
msgid ""
"The :command:`export(PACKAGE)` command learned to check the "
":variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` variable to skip exporting "
"the package."
msgstr ""
":command:`export(PACKAGE)` 命令学会了检查 "
":variable:`CMAKE_EXPORT_NO_PACKAGE_REGISTRY` 变量以跳过导出包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:64
msgid ""
"The :command:`file(STRINGS)` command gained a new ``ENCODING`` option to "
"enable extraction of ``UTF-8`` strings."
msgstr ""
":command:`file(STRINGS)` 命令获得了一个新的 ``ENCODING`` 选项，可以提取 ``UTF-8`` 字符串。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:67
msgid ""
"The :command:`find_package` command learned to check the "
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` and "
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` variables to "
"skip searching the package registries."
msgstr ""
":command:`find_package` 命令学会了检查 "
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` 和 "
":variable:`CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY` 变量以跳过搜索包注册表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:72
msgid ""
"The :command:`get_property` command learned a new ``INSTALL`` scope for "
"properties."
msgstr ":command:`get_property` 命令学习了一个新的 ``INSTALL`` 属性范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:75
msgid ""
"The :command:`install` command learned a ``MESSAGE_NEVER`` option to avoid"
" output during installation."
msgstr ":command:`install` 命令学习了一个 ``MESSAGE_NEVER`` 选项来避免安装期间的输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:78
msgid ""
"The :command:`set_property` command learned a new ``INSTALL`` scope for "
"properties."
msgstr ":command:`set_property` 命令学习了一个新的 ``INSTALL`` 属性范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:81
msgid ""
"The :command:`string` command learned a new ``GENEX_STRIP`` subcommand "
"which removes :manual:`generator expression <cmake-generator-"
"expressions(7)>`."
msgstr ""
":command:`string` 命令学习了一个新的 ``GENEX_STRIP`` 子命令，它删除了 :manual:`generator "
"expression <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:85
msgid ""
"The :command:`string` command learned a new ``UUID`` subcommand to "
"generate a universally unique identifier."
msgstr ":command:`string` 命令学习了一个新的 ``UUID`` 子命令来生成一个通用的唯一标识符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:88
msgid ""
"New :command:`target_compile_features` command allows populating the "
":prop_tgt:`COMPILE_FEATURES` target property, just like any other build "
"variable."
msgstr ""
"新的 :command:`target_compile_features` 命令允许填充 :prop_tgt:`COMPILE_FEATURES` "
"目标属性，就像任何其他构建变量一样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:92
msgid ""
"The :command:`target_sources` command was added to add to the "
":prop_tgt:`SOURCES` target property."
msgstr "添加了 :command:`target_sources` 命令以添加到 :prop_tgt:`SOURCES` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:98
msgid ""
"The Visual Studio generators for versions 8 (2005) and above learned to "
"read the target platform name from a new "
":variable:`CMAKE_GENERATOR_PLATFORM` variable when it is not specified as "
"part of the generator name.  The platform name may be specified on the "
":manual:`cmake(1)` command line with the ``-A`` option, e.g. ``-G \"Visual"
" Studio 12 2013\" -A x64``."
msgstr ""
"版本 8 (2005) 及更高版本的 Visual Studio 生成器学会了从新的 CMAKE_GENERATOR_PLATFORM "
"变量中读取目标平台名称（当它未指定为生成器名称的一部分时）。平台名称可以在 :manual:`cmake(1)` 命令行中使用 ``-A`` "
"选项指定，例如``-G“Visual Studio 12 2013”​​-A x64``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:105
msgid ""
"The :variable:`CMAKE_GENERATOR_TOOLSET` variable may now be initialized in"
" a toolchain file specified by the :variable:`CMAKE_TOOLCHAIN_FILE` "
"variable.  This is useful when cross-compiling with the Xcode or Visual "
"Studio generators."
msgstr ""
"CMAKE_GENERATOR_TOOLSET 变量现在可以在由 CMAKE_TOOLCHAIN_FILE 变量指定的工具链文件中初始化。这在使用 "
"Xcode 或 Visual Studio 生成器进行交叉编译时很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:111
msgid ""
"The :variable:`CMAKE_INSTALL_MESSAGE` variable was introduced to "
"optionally reduce output installation."
msgstr "引入了 :variable:`CMAKE_INSTALL_MESSAGE` 变量以选择性地减少输出安装。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:117
msgid ""
"New :prop_tgt:`CXX_STANDARD` and :prop_tgt:`CXX_EXTENSIONS` target "
"properties may specify values which CMake uses to compute required compile"
" options such as ``-std=c++11`` or ``-std=gnu++11``. The "
":variable:`CMAKE_CXX_STANDARD` and :variable:`CMAKE_CXX_EXTENSIONS` "
"variables may be set to initialize the target properties."
msgstr ""
"新的 :prop_tgt:`CXX_STANDARD` 和 :prop_tgt:`CXX_EXTENSIONS` 目标属性可以指定 CMake "
"用于计算所需编译选项的值，例如 ``-std=c++11`` 或 ``-std=gnu++11 ``。可以设置 "
":variable:`CMAKE_CXX_STANDARD` 和 :variable:`CMAKE_CXX_EXTENSIONS` "
"变量来初始化目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:123
msgid ""
"New :prop_tgt:`C_STANDARD` and :prop_tgt:`C_EXTENSIONS` target properties "
"may specify values which CMake uses to compute required compile options "
"such as ``-std=c11`` or ``-std=gnu11``. The :variable:`CMAKE_C_STANDARD` "
"and :variable:`CMAKE_C_EXTENSIONS` variables may be set to initialize the "
"target properties."
msgstr ""
"新的 :prop_tgt:`C_STANDARD` 和 :prop_tgt:`C_EXTENSIONS` 目标属性可以指定 CMake "
"用来计算所需编译选项的值，例如 ``-std=c11`` 或 ``-std=gnu11``。可以设置 "
":variable:`CMAKE_C_STANDARD` 和 :variable:`CMAKE_C_EXTENSIONS` 变量来初始化目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:129
msgid ""
"New :prop_tgt:`COMPILE_FEATURES` target property may contain a list of "
"features required to compile a target.  CMake uses this information to "
"ensure that the compiler in use is capable of building the target, and to "
"add any necessary compile flags to support language features."
msgstr ""
"新的 :prop_tgt:`COMPILE_FEATURES` 目标属性可能包含编译目标所需的功能列表。 CMake "
"使用此信息来确保正在使用的编译器能够构建目标，并添加任何必要的编译标志以支持语言功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:135
msgid ""
"New :prop_tgt:`COMPILE_PDB_NAME` and "
":prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` target properties were introduced"
" to specify the MSVC compiler program database file location (``cl /Fd``)."
"  This complements the existing :prop_tgt:`PDB_NAME` and "
":prop_tgt:`PDB_OUTPUT_DIRECTORY` target properties that specify the linker"
" program database file location (``link /pdb``)."
msgstr ""
"引入了新的 :prop_tgt:`COMPILE_PDB_NAME` 和 "
":prop_tgt:`COMPILE_PDB_OUTPUT_DIRECTORY` 目标属性以指定 MSVC 编译器程序数据库文件位置 (``cl "
"/Fd``)。这补充了现有的 :prop_tgt:`PDB_NAME` 和 :prop_tgt:`PDB_OUTPUT_DIRECTORY` "
"指定链接器程序数据库文件位置 (``link /pdb``) 的目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:143
msgid ""
"The :prop_tgt:`INTERFACE_LINK_LIBRARIES` target property now supports a "
"``$<LINK_ONLY:...>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>`."
msgstr ""
":prop_tgt:`INTERFACE_LINK_LIBRARIES` 目标属性现在支持 ``$<LINK_ONLY:...>`` "
":manual:`generator expression <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:147
msgid ""
"A new :prop_tgt:`INTERFACE_SOURCES` target property was introduced. This "
"is consumed by dependent targets, which compile and link the listed "
"sources."
msgstr "引入了一个新的 :prop_tgt:`INTERFACE_SOURCES` 目标属性。这由编译和链接列出的源的依赖目标使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:150
msgid ""
"The :prop_tgt:`SOURCES` target property now contains :manual:`generator "
"expression <cmake-generator-expressions(7)>` such as ``TARGET_OBJECTS`` "
"when read at configure time, if policy :policy:`CMP0051` is ``NEW``."
msgstr ""
":prop_tgt:`SOURCES` 目标属性现在包含 :manual:`generator expression <cmake-"
"generator-expressions(7)>` 例如 ``TARGET_OBJECTS`` 在配置时读取时，如果策略 "
":policy:`CMP0051` 是``新``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:155
msgid ""
"The :prop_tgt:`SOURCES` target property now generally supports "
":manual:`generator expression <cmake-generator-expressions(7)>`.  The "
"generator expressions may be used in the :command:`add_library` and "
":command:`add_executable` commands."
msgstr ""
":prop_tgt:`SOURCES` 目标属性现在普遍支持 :manual:`generator expression <cmake-"
"generator-expressions(7)>`。生成器表达式可以在 :command:`add_library` 和 "
":command:`add_executable` 命令中使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:160
msgid ""
"It is now possible to write and append to the :prop_tgt:`SOURCES` target "
"property.  The :variable:`CMAKE_DEBUG_TARGET_PROPERTIES` variable may be "
"used to trace the origin of sources."
msgstr ""
"现在可以写入并附加到 :prop_tgt:`SOURCES` 目标属性。 "
":variable:`CMAKE_DEBUG_TARGET_PROPERTIES` 变量可用于跟踪源的来源。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:164
msgid ""
"A :prop_sf:`VS_DEPLOYMENT_CONTENT` source file property was added to tell "
"the Visual Studio generators to mark content for deployment in Windows "
"Phone and Windows Store projects."
msgstr ""
"添加了 :prop_sf:`VS_DEPLOYMENT_CONTENT` 源文件属性，以告知 Visual Studio 生成器标记要在 "
"Windows Phone 和 Windows 应用商店项目中部署的内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:168
msgid ""
"A :prop_sf:`VS_DEPLOYMENT_LOCATION` source file property was added to tell"
" the Visual Studio generators the relative location of content marked for "
"deployment in Windows Phone and Windows Store projects."
msgstr ""
"添加了 :prop_sf:`VS_DEPLOYMENT_LOCATION` 源文件属性，以告知 Visual Studio 生成器标记为部署在 "
"Windows Phone 和 Windows Store 项目中的内容的相对位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:172
msgid ""
"The :prop_tgt:`VS_WINRT_COMPONENT` target property was created to tell "
"Visual Studio generators to compile a shared library as a Windows Runtime "
"(WinRT) component."
msgstr ""
":prop_tgt:`VS_WINRT_COMPONENT` 目标属性的创建是为了告诉 Visual Studio 生成器将共享库编译为 "
"Windows 运行时 (WinRT) 组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:176
msgid ""
"The :generator:`Xcode` generator learned to check source file properties  "
":prop_sf:`XCODE_EXPLICIT_FILE_TYPE` and "
":prop_sf:`XCODE_LAST_KNOWN_FILE_TYPE` for a custom Xcode file reference "
"type."
msgstr ""
"Xcode 生成器学习检查源文件属性 XCODE_EXPLICIT_FILE_TYPE 和 XCODE_LAST_KNOWN_FILE_TYPE "
"自定义 Xcode 文件引用类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:184
msgid ""
"The :module:`BundleUtilities` module learned to resolve and replace "
"``@rpath`` placeholders on OS X to correctly bundle applications using "
"them."
msgstr ""
":module:`BundleUtilities` 模块学会了在 OS X 上解析和替换 ``@rpath`` "
"占位符，以正确地捆绑使用它们的应用程序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:188
msgid ""
"The :module:`CMakePackageConfigHelpers` module "
":command:`configure_package_config_file` command learned a new "
"``INSTALL_PREFIX`` option to generate package configuration files meant "
"for a prefix other than :variable:`CMAKE_INSTALL_PREFIX`."
msgstr ""
":module:`CMakePackageConfigHelpers` "
"模块 :command:`configure_package_config_file` 命令学习了一个新的 ``INSTALL_PREFIX`` "
"选项来生成包配置文件，该文件用于 :variable:`CMAKE_INSTALL_PREFIX` 以外的前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:193
msgid ""
"The :module:`CheckFortranSourceCompiles` module was added to provide a "
"``CHECK_Fortran_SOURCE_COMPILES`` macro."
msgstr ""
"添加了 :module:`CheckFortranSourceCompiles` "
"模块以提供``CHECK_Fortran_SOURCE_COMPILES`` 宏。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:196
msgid ""
"The :module:`ExternalData` module learned to tolerate a ``DATA{}`` "
"reference to a missing source file with a warning instead of rejecting it "
"with an error.  This helps developers write new ``DATA{}`` references to "
"test reference outputs that have not yet been created."
msgstr ""
":module:`ExternalData` 模块学会了容忍对丢失源文件的 ``DATA{}`` "
"引用并发出警告，而不是通过错误拒绝它。这有助于开发人员编写新的 ``DATA{}`` 引用来测试尚未创建的引用输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:202
msgid ""
"The :module:`ExternalProject` module learned to support lzma-compressed "
"source tarballs with ``.7z``, ``.tar.xz``, and ``.txz`` extensions."
msgstr ""
":module:`ExternalProject` 模块学会了支持带有 `.7z``、``.tar.xz`` 和 ``.txz`` 扩展名的 "
"lzma 压缩源 tarball。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:205
msgid ""
"The :module:`ExternalProject` module ``ExternalProject_Add`` command "
"learned a new ``BUILD_ALWAYS`` option to cause the external project build "
"step to run every time the host project is built."
msgstr ""
":module:`ExternalProject` 模块 ``ExternalProject_Add`` 命令学习了一个新的 "
"``BUILD_ALWAYS`` 选项，可以在每次构建宿主项目时运行外部项目构建步骤。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:209
msgid ""
"The :module:`ExternalProject` module ``ExternalProject_Add`` command "
"learned a new ``EXCLUDE_FROM_ALL`` option to cause the external project "
"target to have the :prop_tgt:`EXCLUDE_FROM_ALL` target property set."
msgstr ""
"ExternalProject 模块 ExternalProject_Add 命令学习了一个新的 EXCLUDE_FROM_ALL "
"选项，使外部项目目标具有 EXCLUDE_FROM_ALL 目标属性集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:214
msgid ""
"The :module:`ExternalProject` module ``ExternalProject_Add_Step`` command "
"learned a new ``EXCLUDE_FROM_MAIN`` option to cause the step to not be a "
"direct dependency of the main external project target."
msgstr ""
":module:`ExternalProject` 模块 ``ExternalProject_Add_Step`` 命令学习了一个新的 "
"``EXCLUDE_FROM_MAIN`` 选项，使该步骤不直接依赖于主要的外部项目目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:218
msgid ""
"The :module:`ExternalProject` module ``ExternalProject_Add`` command "
"learned a new ``DOWNLOAD_NO_PROGRESS`` option to disable progress output "
"while downloading the source tarball."
msgstr ""
":module:`ExternalProject` 模块 ``ExternalProject_Add`` 命令学习了一个新的 "
"``DOWNLOAD_NO_PROGRESS`` 选项，用于在下载源 tarball 时禁用进度输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:222
msgid ""
"The :module:`FeatureSummary` module ``feature_summary`` API learned to "
"accept multiple values for the ``WHAT`` option and combine them "
"appropriately."
msgstr ""
":module:`FeatureSummary` 模块 ``feature_summary`` API 学会了接受 ``WHAT`` "
"选项的多个值并适当地组合它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:226
msgid ""
"The :module:`FindCUDA` module learned to support ``fatbin`` and ``cubin`` "
"modules."
msgstr ":module:`FindCUDA` 模块学会了支持 ``fatbin`` 和 ``cubin`` 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:229
msgid ""
"The :module:`FindGTest` module ``gtest_add_tests`` macro learned a new "
"``AUTO`` option to automatically read the :prop_tgt:`SOURCES` target "
"property of the test executable and scan the source files for tests to be "
"added."
msgstr ""
":module:`FindGTest` 模块 ``gtest_add_tests`` 宏学习了一个新的 ``AUTO`` 选项来自动读取 "
":prop_tgt:`SOURCES` 测试可执行文件的目标属性并扫描源文件以添加测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:234
msgid "The :module:`FindGLEW` module now provides imported targets."
msgstr ":module:`FindGLEW` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:236
msgid "The :module:`FindGLUT` module now provides imported targets."
msgstr ":module:`FindGLUT` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:238
msgid ""
"The :module:`FindHg` module gained a new ``Hg_WC_INFO`` macro to help run "
"``hg`` to extract information about a Mercurial work copy."
msgstr ""
":module:`FindHg` 模块获得了一个新的 ``Hg_WC_INFO`` 宏来帮助运行 ``hg`` 来提取关于 Mercurial "
"工作副本的信息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:241
msgid "The :module:`FindOpenCL` module was introduced."
msgstr ":module:`FindOpenCL` 模块被引入。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:243
msgid "The :module:`FindOpenMP` module learned to support Fortran."
msgstr ":module:`FindOpenMP` 模块学会了支持 Fortran。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:245
msgid ""
"The :module:`FindPkgConfig` module learned to use the ``PKG_CONFIG`` "
"environment variable value as the ``pkg-config`` executable, if set."
msgstr ""
":module:`FindPkgConfig` 模块学会了使用 ``PKG_CONFIG`` 环境变量值作为 ``pkg-config`` "
"可执行文件（如果已设置）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:248
msgid "The :module:`FindXercesC` module was introduced."
msgstr ":module:`FindXercesC` 模块被引入。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:250
msgid "The :module:`FindZLIB` module now provides imported targets."
msgstr ":module:`FindZLIB` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:252
msgid ""
"The :module:`GenerateExportHeader` module ``generate_export_header`` "
"function learned to allow use with :ref:`Object Libraries`."
msgstr ""
":module:`GenerateExportHeader` 模块 ``generate_export_header`` 函数学会了允许与 "
":ref:`Object Libraries` 一起使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:255
msgid ""
"The :module:`InstallRequiredSystemLibraries` module gained a new "
"``CMAKE_INSTALL_OPENMP_LIBRARIES`` option to install MSVC OpenMP runtime "
"libraries."
msgstr ""
":module:`InstallRequiredSystemLibraries` 模块获得了一个新的 "
"``CMAKE_INSTALL_OPENMP_LIBRARIES`` 选项来安装 MSVC OpenMP 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:259
msgid ""
"The :module:`UseSWIG` module learned to detect the module name from ``.i``"
" source files if possible to avoid the need to set the "
"``SWIG_MODULE_NAME`` source file property explicitly."
msgstr ""
":module:`UseSWIG` 模块学习了如何从 `.i`` 源文件中检测模块名称，以避免需要显式设置 ``SWIG_MODULE_NAME``"
" 源文件属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:263
msgid ""
"The :module:`WriteCompilerDetectionHeader` module was added to allow "
"creation of a portable header file for compiler optional feature "
"detection."
msgstr ""
"添加了 :module:`WriteCompilerDetectionHeader` 模块以允许创建用于编译器可选功能检测的可移植头文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:269
msgid ""
"New ``COMPILE_FEATURES`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` allows setting build properties based on available "
"compiler features."
msgstr ""
"新的 ``COMPILE_FEATURES`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` 允许根据可用的编译器功能设置构建属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:274
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:176
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:190
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:222
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:176
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:307
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:284
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:191
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:199
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:221
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:240
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:146
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:218
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:200
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:89
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:170
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:293
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:127
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:160
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:183
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:155
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:207
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:269
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:191
msgid "CTest"
msgstr "C测试"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:276
msgid ""
"The :command:`ctest_coverage` command learned to read variable "
"``CTEST_COVERAGE_EXTRA_FLAGS`` to set ``CoverageExtraFlags``."
msgstr ""
":command:`ctest_coverage` 命令学会了读取变量 ``CTEST_COVERAGE_EXTRA_FLAGS`` 来设置 "
"``CoverageExtraFlags``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:279
msgid ""
"The :command:`ctest_coverage` command learned to support Intel coverage "
"files with the ``codecov`` tool."
msgstr ":command:`ctest_coverage` 命令学会了使用 ``codecov`` 工具支持 Intel 覆盖率文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:282
msgid ""
"The :command:`ctest_memcheck` command learned to support sanitizer modes, "
"including ``AddressSanitizer``, ``MemorySanitizer``, ``ThreadSanitizer``, "
"and ``UndefinedBehaviorSanitizer``. Options may be set using the new "
":variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS` variable."
msgstr ""
":command:`ctest_memcheck` 命令学会了支持清理器模式，包括 "
"``AddressSanitizer``、``MemorySanitizer``、``ThreadSanitizer`` 和 "
"``UndefinedBehaviorSanitizer``。可以使用新的 CTEST_MEMORYCHECK_SANITIZER_OPTIONS "
"变量设置选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:289
#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:185
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:199
#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:234
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:182
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:296
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:206
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:220
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:239
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:250
#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:157
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:224
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:217
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:106
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:176
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:302
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:197
#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:170
#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:198
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:121
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:166
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:222
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:285
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:207
msgid "CPack"
msgstr "包装"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:291
msgid ""
":manual:`cpack(1)` gained an ``IFW`` generator to package using Qt "
"Framework Installer tools.  See the :cpack_gen:`CPack IFW Generator`."
msgstr ""
":manual:`cpack(1)` 获得了一个 ``IFW`` 生成器，可以使用 Qt Framework Installer "
"工具进行打包。请参阅 :cpack_gen:`CPack IFW 生成器` 。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:294
msgid ""
":manual:`cpack(1)` gained ``7Z`` and ``TXZ`` generators supporting lzma-"
"compressed archives."
msgstr ":manual:`cpack(1)` 获得了支持 lzma 压缩档案的 ``7Z`` 和 ``TXZ`` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:297
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned a new "
":variable:`CPACK_DEBIAN_COMPRESSION_TYPE` variable to set the tarball "
"compression type."
msgstr ""
":cpack_gen:`CPack DEB Generator` "
"学习了一个新的 :variable:`CPACK_DEBIAN_COMPRESSION_TYPE` 变量来设置 tarball 压缩类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:301
msgid ""
"The :cpack_gen:`CPack WIX Generator` learned to support a "
":prop_inst:`CPACK_WIX_ACL` installed file property to specify an Access "
"Control List."
msgstr ""
":cpack_gen:`CPack WIX Generator` 学会了支持 :prop_inst:`CPACK_WIX_ACL` "
"安装文件属性来指定访问控制列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:308
msgid "The :manual:`cmake(1)` ``-E`` option learned a new ``env`` command."
msgstr ":manual:`cmake(1)` `-E`` 选项学习了一个新的 ``env`` 命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:310
msgid ""
"The :manual:`cmake(1)` ``-E tar`` command learned to support lzma-"
"compressed files."
msgstr ":manual:`cmake(1)` `-E tar`` 命令学会了支持 lzma 压缩文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:313
msgid ""
":ref:`Object Libraries` may now have extra sources that do not compile to "
"object files so long as they would not affect linking of a normal library "
"(e.g. ``.dat`` is okay but not ``.def``)."
msgstr ""
":ref:`Object Libraries` 现在可能有额外的源代码，只要它们不影响普通库的链接就不会编译成目标文件（例如 ``.dat`` "
"可以，但 ``.def`` 不行） ."

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:317
msgid ""
"Visual Studio generators for VS 8 and later learned to support the "
"``ASM_MASM`` language."
msgstr "VS 8 的 Visual Studio 生成器和后来学习支持“ASM_MASM”语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:320
msgid ""
"The Visual Studio generators learned to treat ``.hlsl`` source files as "
"High Level Shading Language sources (using ``FXCompile`` in ``.vcxproj`` "
"files).  Source file properties :prop_sf:`VS_SHADER_TYPE`, "
":prop_sf:`VS_SHADER_MODEL`, and :prop_sf:`VS_SHADER_ENTRYPOINT` were added"
" added to specify the shader type, model, and entry point name."
msgstr ""
"Visual Studio "
"生成器学会了将“.hlsl”源文件视为高级着色语言源（在“.vcxproj”文件中使用“FXCompile”）。添加了源文件属性:prop_sf:`VS_SHADER_TYPE`、 :prop_sf:`VS_SHADER_MODEL`"
" 和 :prop_sf:`VS_SHADER_ENTRYPOINT` 以指定着色器类型、模型和入口点名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:330
msgid ""
"Policy :policy:`CMP0052` introduced to control directories in the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` of exported targets."
msgstr ""
"引入策略:policy:`CMP0052` 以控制导出目标的:prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` "
"中的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:336
msgid ""
"In CMake 3.0 the :command:`target_link_libraries` command accidentally "
"began allowing unquoted arguments to use :manual:`generator expressions "
"<cmake-generator-expressions(7)>` containing a (``;`` separated) list "
"within them.  For example::"
msgstr ""
"在 CMake 3.0 中， :command:`target_link_libraries` 命令意外开始允许不带引号的参数使用 "
":manual:`generator expressions <cmake-generator-expressions(7)>` "
"其中包含一个（``;`` 分隔）列表。例如：："

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:344
msgid "This is equivalent to writing::"
msgstr "这相当于写 ::"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:348
msgid ""
"and was never intended to work.  It did not work in CMake 2.8.12. Such "
"generator expressions should be in quoted arguments::"
msgstr "并且从未打算工作。它在 CMake 2.8.12 中不起作用。这样的生成器表达式应该在引用参数中 ::"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:354
msgid "CMake 3.1 again requires the quotes for this to work correctly."
msgstr "CMake 3.1 再次需要引号才能正常工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:356
msgid ""
"Prior to CMake 3.1 the Makefile generators did not escape ``#`` correctly "
"inside make variable assignments used in generated makefiles, causing them"
" to be treated as comments.  This made code like::"
msgstr ""
"在 CMake 3.1 之前，Makefile 生成器没有在生成的 makefile 中使用的 make "
"变量赋值中正确转义“#”，导致它们被视为注释。这使得代码如下："

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:363
msgid ""
"not work in Makefile generators, but work in other generators. Now it is "
"escaped correctly, making the behavior consistent across generators.  "
"However, some projects may have tried to workaround the original bug with "
"code like::"
msgstr ""
"在 Makefile "
"生成器中不起作用，但在其他生成器中起作用。现在它被正确转义，使得生成器之间的行为一致。但是，某些项目可能已尝试使用以下代码来解决原始错误："

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:370
msgid ""
"This added the needed escape for Makefile generators but also caused other"
" generators to pass ``-Wno-\\#pragma-messages`` to the shell, which would "
"work only in POSIX shells. Unfortunately the escaping fix could not be "
"made in a compatible way so this platform- and generator-specific "
"workaround no longer works.  Project code may test the "
":variable:`CMAKE_VERSION` variable value to make the workaround version-"
"specific too."
msgstr ""
"这为 Makefile 生成器添加了所需的转义，但也导致其他生成器将 ``-Wno-\\#pragma-messages`` 传递给 "
"shell，这只能在 POSIX shell "
"中工作。不幸的是，无法以兼容的方式进行转义修复，因此这种特定于平台和生成器的解决方法不再有效。项目代码可能会测试 "
":variable:`CMAKE_VERSION` 变量值以使解决方法也特定于版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:378
msgid ""
"Callbacks established by the :command:`variable_watch` command will no "
"longer receive the ``ALLOWED_UNKNOWN_READ_ACCESS`` access type when the "
"undocumented ``CMAKE_ALLOW_UNKNOWN_VARIABLE_READ_ACCESS`` variable is set."
"  Uninitialized variable accesses will always be reported as "
"``UNKNOWN_READ_ACCESS``."
msgstr ""
"当设置未记录的 ``CMAKE_ALLOW_UNKNOWN_VARIABLE_READ_ACCESS`` 变量时，由 "
":command:`variable_watch` 命令建立的回调将不再接收 ``ALLOWED_UNKNOWN_READ_ACCESS`` "
"访问类型。未初始化的变量访问将始终报告为 ``UNKNOWN_READ_ACCESS``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:384
msgid ""
"The :module:`CMakeDetermineVSServicePack` module now warns that it is "
"deprecated and should not longer be used.  Use the "
":variable:`CMAKE_<LANG>_COMPILER_VERSION` variable instead."
msgstr ""
":module:`CMakeDetermineVSServicePack` 模块现在警告它已被弃用，不应再使用。请改用 "
":variable:`CMAKE_<LANG>_COMPILER_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:388
msgid ""
"The :module:`FindITK` module has been removed altogether. It was a thin-"
"wrapper around ``find_package(ITK ... NO_MODULE)``. This produces much "
"clearer error messages when ITK is not found."
msgstr ""
":module:`FindITK` 模块已被完全删除。它是围绕 ``find_package(ITK ... NO_MODULE)`` "
"的薄包装。当找不到 ITK 时，这会产生更清晰的错误消息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:392
msgid ""
"The :module:`FindVTK` module has been removed altogether. It was a thin-"
"wrapper around ``find_package(VTK ... NO_MODULE)``. This produces much "
"clearer error messages when VTK is not found."
msgstr ""
":module:`FindVTK` 模块已被完全删除。它是围绕 ``find_package(VTK ... NO_MODULE)`` "
"的薄包装。当找不到 VTK 时，这会产生更清晰的错误消息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:396
msgid ""
"The module also provided compatibility support for finding VTK 4.0. This "
"capability has been dropped."
msgstr "该模块还为查找 VTK 4.0 提供了兼容性支持。此功能已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:402
msgid ""
"The :manual:`cmake-gui(1)` learned to capture output from child processes "
"started by the :command:`execute_process` command and display it in the "
"output window."
msgstr ""
":manual:`cmake-gui(1)` 学会了捕获由 :command:`execute_process` "
"命令启动的子进程的输出，并将其显示在输出窗口中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:406
msgid ""
"The :manual:`cmake-language(7)` internal implementation of generator "
"expression and list expansion parsers have been optimized and shows non-"
"trivial speedup on large projects."
msgstr ""
":manual:`cmake-language(7)` 生成器表达式和列表扩展解析器的内部实现已经过优化，并在大型项目上显示出非平凡的加速。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:410
msgid ""
"The Makefile generators learned to use response files with GNU tools on "
"Windows to pass library directories and names to the linker."
msgstr "Makefile 生成器学会了在 Windows 上使用带有 GNU 工具的响应文件来将库目录和名称传递给链接器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:413
msgid ""
"When generating linker command-lines, CMake now avoids repeating items "
"corresponding to SHARED library targets."
msgstr "生成链接器命令行时，CMake 现在避免重复与 SHARED 库目标相对应的项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:416
msgid ""
"Support for the Open Watcom compiler has been overhauled. The "
":variable:`CMAKE_<LANG>_COMPILER_ID` is now ``OpenWatcom``, and the "
":variable:`CMAKE_<LANG>_COMPILER_VERSION` now uses the Open Watcom "
"external version numbering.  The external version numbers are lower than "
"the internal version number by 11."
msgstr ""
"全面检查了对 Open Watcom 编译器的支持。 :variable:`CMAKE_<LANG>_COMPILER_ID` 现在是 "
"``OpenWatcom``，而 :variable:`CMAKE_<LANG>_COMPILER_VERSION` 现在使用 Open "
"Watcom 外部版本编号。外部版本号比内部版本号低 11。"

#: ../../cmake-prefix/src/cmake/Help/release/3.1.rst:423
msgid ""
"The ``cmake-mode.el`` major Emacs editing mode no longer treats ``_`` as "
"part of words, making it more consistent with other major modes."
msgstr "``cmake-mode.el`` 主要 Emacs 编辑模式不再将 ``_`` 视为单词的一部分，使其与其他主要模式更加一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:2
msgid "CMake 3.10 Release Notes"
msgstr "CMake 3.10 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:8
msgid "Changes made since CMake 3.9 include the following."
msgstr "自 CMake 3.9 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:64
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:29
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:57
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:60
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:72
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:75
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:103
#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:148
#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:66
msgid "Platforms"
msgstr "平台"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:16
msgid ""
"The `flang`_ Fortran compiler is now supported, with compiler id "
"``Flang``."
msgstr "现在支持 `flang`_ Fortran 编译器，编译器 ID 为 ``Flang``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:18
msgid "A new minimal platform file for ``Midipix`` was added."
msgstr "为“Midipix”添加了一个新的最小平台文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:20
msgid ""
"Support for the MSVC ARM64 architecture was added. Visual Studio 2017 "
"Update 4 and above offer an ARM64 toolchain."
msgstr ""
"添加了对 MSVC ARM64 架构的支持。 Visual Studio 2017 Update 4 及更高版本提供了 ARM64 工具链。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:23
msgid "Support for the IAR ARM Compiler was improved."
msgstr "改进了对 IAR ARM 编译器的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:30
msgid ""
"The :ref:`Makefile Generators` and the :generator:`Ninja` generator "
"learned to add compiler launcher tools like ccache along with the compiler"
" for the ``CUDA`` language (``C`` and ``CXX`` were supported previously)."
"  See the :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable and "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` 生成器学会了添加编译器启动器工具，如 ccache "
"以及用于 ``CUDA`` 语言（``C`` 和 ``CXX`` 的编译器）以前支持）。有关详细信息，请参阅 "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量和 "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:36
msgid ""
"The :generator:`CodeBlocks` extra generator learned to optionally exclude "
"files from outside the project root directory from the generated project. "
"See the :variable:`CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES` variable."
msgstr ""
":generator:`CodeBlocks` extra "
"生成器学会了有选择地从生成的项目中排除项目根目录之外的文件。请参阅 :variable:`CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES`"
" 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:43
msgid ""
"The :command:`cmake_host_system_information` command learned more keys to "
"get information about the processor capabilities and the host OS version."
msgstr ""
":command:`cmake_host_system_information` 命令学习了更多密钥以获取有关处理器功能和主机操作系统版本的信息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:47
msgid ""
"The :command:`configure_file` command learned to support indented ``#  "
"cmakedefine`` and ``#  cmakedefine01``. Spaces and/or tabs between the "
"``#`` character and the ``cmakedefine``/``cmakedefine01`` words are now "
"understood and preserved in the output."
msgstr ""
":command:`configure_file` 命令学会了支持缩进的``# cmakedefine`` 和``# "
"cmakedefine01``。 ``#`` 字符和 ``cmakedefine``/``cmakedefine01`` "
"之间的空格和/或制表符现在可以理解并保留在输出中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:52
msgid ""
"The :command:`execute_process` command gained a ``RESULTS_VARIABLE`` "
"option to collect a list of results from all children in a pipeline of "
"processes when multiple ``COMMAND`` arguments are given."
msgstr ""
":command:`execute_process` 命令获得了一个 ``RESULTS_VARIABLE`` 选项，用于在给出多个 "
"``COMMAND`` 参数时收集进程管道中所有子进程的结果列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:56
msgid ""
"The :command:`include_guard` command was introduced to allow guarding "
"CMake scripts from being included more than once. The command supports "
"``DIRECTORY`` and ``GLOBAL`` options to adjust the corresponding include "
"guard scope. If no options given, include guard is similar to basic "
"variable-based check."
msgstr ""
":command:`include_guard` 命令的引入是为了防止 CMake 脚本被多次包含。该命令支持 ``DIRECTORY`` 和 "
"``GLOBAL`` 选项来调整相应的包含保护范围。如果没有给出选项，则包含 guard 类似于基本的基于变量的检查。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:62
msgid "The :command:`string` command learned a new ``PREPEND`` subcommand."
msgstr ":command:`string` 命令学习了一个新的 ``PREPEND`` 子命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:64
msgid ""
"The :command:`string(TIMESTAMP)` command now supports ``%A`` for full "
"weekday name and ``%B`` for full month name."
msgstr ":command:`string(TIMESTAMP)` 命令现在支持完整工作日名称的 `%A`` 和完整月份名称的 %B``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:70
msgid ""
"A :variable:`CMAKE_DIRECTORY_LABELS` variable was added to specify labels "
"for all tests in a directory."
msgstr "添加了 :variable:`CMAKE_DIRECTORY_LABELS` 变量以指定目录中所有测试的标签。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:76
msgid ""
"A :prop_tgt:`<LANG>_CPPCHECK` target property and supporting "
":variable:`CMAKE_<LANG>_CPPCHECK` variable were introduced to tell the "
":ref:`Makefile Generators` and the :generator:`Ninja` generator to run "
"``cppcheck`` with the compiler for ``C`` and ``CXX`` languages."
msgstr ""
":prop_tgt:`<LANG>_CPPCHECK` 目标属性和支持 :variable:`CMAKE_<LANG>_CPPCHECK` "
"变量被引入来告诉 :ref:`Makefile Generators` 和 :generator:`Ninja` 生成器运行 `` "
"cppcheck`` 与``C`` 和``CXX`` 语言的编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:81
msgid ""
"A :prop_dir:`LABELS` directory property was added to specify labels for "
"all targets and tests in a directory."
msgstr "添加了 :prop_dir:`LABELS` 目录属性以指定目录中所有目标和测试的标签。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:84
msgid ""
"A :prop_dir:`TEST_INCLUDE_FILES` directory property was added to list any "
"number of files to be included when running tests with :manual:`ctest(1)`."
"  This generalizes the :prop_dir:`TEST_INCLUDE_FILE` property."
msgstr ""
"添加了 :prop_dir:`TEST_INCLUDE_FILES` 目录属性，以列出在使用 :manual:`ctest(1)` "
"运行测试时要包含的任意数量的文件。这概括了 :prop_dir:`TEST_INCLUDE_FILE` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:89
msgid ""
"The :prop_tgt:`VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>` target "
"property was added to support custom XML tags for reference assemblies in "
"C# targets."
msgstr ""
"添加了 :prop_tgt:`VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>` 目标属性以支持 C# "
"目标中引用程序集的自定义 XML 标记。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:93
msgid ""
"Source file properties :prop_sf:`VS_SHADER_OUTPUT_HEADER_FILE` and "
":prop_sf:`VS_SHADER_VARIABLE_NAME` have been added to specify more details"
" of ``.hlsl`` sources with :ref:`Visual Studio Generators`."
msgstr ""
"添加了源文件属性 :prop_sf:`VS_SHADER_OUTPUT_HEADER_FILE` 和 "
":prop_sf:`VS_SHADER_VARIABLE_NAME` 以使用 :ref:`Visual Studio Generators 指定 "
"``.hlsl`` 源的更多细节。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:100
msgid ""
"The :module:`FindCurses` module gained a ``CURSES_NEED_WIDE`` option to "
"request the wide-character variant."
msgstr ":module:`FindCurses` 模块获得了一个 ``CURSES_NEED_WIDE`` 选项来请求宽字符变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:103
msgid "The :module:`FindEXPAT` module now provides imported targets."
msgstr ":module:`FindEXPAT` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:105
msgid "The :module:`FindFreetype` module now provides imported targets."
msgstr ":module:`FindFreetype` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:107
msgid ":module:`FindMPI` gained a number of new features, including:"
msgstr ":module:`FindMPI` 获得了许多新功能，包括："

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:109
msgid "Language-specific components have been added to the module."
msgstr "特定于语言的组件已添加到模块中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:110
msgid "Many more MPI environments are now supported."
msgstr "现在支持更多的 MPI 环境。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:111
msgid "The environmental support for Fortran has been improved."
msgstr "改进了对 Fortran 的环境支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:112
msgid ""
"A user now has fine-grained control over the MPI selection process, "
"including passing custom parameters to the MPI compiler."
msgstr "用户现在可以细粒度地控制 MPI 选择过程，包括将自定义参数传递给 MPI 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:114
msgid "The version of the implemented MPI standard is now being exposed."
msgstr "已实施的 MPI 标准的版本现已公开。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:115
msgid ""
"MPI-2 C++ bindings can now be detected and also suppressed if so desired."
msgstr "现在可以检测 MPI-2 C++ 绑定，如果需要也可以抑制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:116
msgid "The available Fortran bindings are now being detected and verified."
msgstr "现在正在检测和验证可用的 Fortran 绑定。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:117
msgid ""
"Various MPI-3 information can be requested, including the library version "
"and Fortran capabilities of the individual bindings."
msgstr "可以请求各种 MPI-3 信息，包括各个绑定的库版本和 Fortran 功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:119
msgid "Statically linked MPI implementations are supported."
msgstr "支持静态链接的 MPI 实现。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:121
msgid ""
"A :module:`FindOpenACC` module was added to detect compiler support for "
"OpenACC.  Currently only supports PGI, GNU and Cray compilers."
msgstr ""
"添加了一个 :module:`FindOpenACC` 模块来检测编译器对 OpenACC 的支持。目前仅支持 PGI、GNU 和 Cray "
"编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:124
msgid "The :module:`FindOpenGL` module gained support for GLVND on Linux."
msgstr ":module:`FindOpenGL` 模块在 Linux 上获得了对 GLVND 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:126
msgid ""
"The :module:`FindOpenMP` module gained support for language-specific "
"components."
msgstr "FindOpenMP 模块获得了对特定语言组件的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:129
msgid ""
"A :module:`FindPatch` module was added to find the ``patch`` command-line "
"executable."
msgstr "添加了 :module:`FindPatch` 模块以查找 ``patch`` 命令行可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:132
msgid ""
"The :module:`FindProtobuf` module :command:`protobuf_generate_cpp` command"
" gained a ``DESCRIPTORS`` option to generate descriptor files."
msgstr ""
":module:`FindProtobuf` 模块 :command:`protobuf_generate_cpp` 命令获得了一个 "
"``DESCRIPTORS`` 选项来生成描述符文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:135
msgid ""
"The :module:`GoogleTest` module gained a new command "
":command:`gtest_discover_tests` implementing dynamic (build-time) test "
"discovery.  Unlike the source parsing approach, dynamic discovery executes"
" the test (in 'list available tests' mode) at build time to discover "
"tests. This is robust against unusual ways of labeling tests, provides "
"much better support for advanced features such as parameterized tests, and"
" does not require re-running CMake to discover added or removed tests "
"within a test executable.  Note that a breaking change was made in CMake "
"3.10.3 to address an ambiguity of the ``TIMEOUT`` keyword (see "
":ref:`Release Notes 3.10.3`)."
msgstr ""
":module:`GoogleTest` 模块获得了一个新命令 :command:`gtest_discover_tests` "
"实现动态（构建时）测试发现。与源解析方法不同，动态发现在构建时执行测试（以“列出可用测试”模式）以发现测试。这对于不寻常的标记测试方式非常稳健，为参数化测试等高级功能提供了更好的支持，并且不需要重新运行"
" CMake 来发现测试可执行文件中添加或删除的测试。请注意，在 CMake 3.10.3 中进行了一项重大更改，以解决 ``TIMEOUT`` "
"关键字的歧义（请参阅:ref:`发行说明 3.10.3`）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:145
msgid ""
"The :module:`InstallRequiredSystemLibraries` module gained support for "
"installing Intel compiler runtimes."
msgstr ":module:`InstallRequiredSystemLibraries` 模块获得了对安装英特尔编译器运行时的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:149
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:180
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:285
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:179
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:193
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:213
msgid "Autogen"
msgstr "自动生成器"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:151
msgid ""
"When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC` with a multi "
"configuration generator (e.g. :generator:`Xcode`), included ``*.moc``,  "
"``moc_*.cpp`` and ``ui_*.h`` files are generated in "
"``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` instead of "
"``<AUTOGEN_BUILD_DIR>/include``."
msgstr ""
"将 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` "
"与多配置生成器（例如:generator:`Xcode`）一起使用时，包括 ``*.moc``、``moc_*.cpp`` 和 `` "
"ui_*.h`` 文件在``<AUTOGEN_BUILD_DIR>/include_<CONFIG>`` "
"而不是``<AUTOGEN_BUILD_DIR>/include`` 中生成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:157
msgid ""
"When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`, source files that "
"are :prop_sf:`GENERATED` will be processed as well. They were ignored by "
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` in earlier releases. See "
"policy :policy:`CMP0071`."
msgstr ""
"使用 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 时，也会处理 :prop_sf:`GENERATED` "
"的源文件。在早期版本中，它们被 :prop_tgt:`AUTOMOC` 和 :prop_tgt:`AUTOUIC` "
"忽略了。请参阅政策:policy:`CMP0071`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:163
msgid ""
"When using :prop_tgt:`AUTOMOC`, CMake searches for the strings "
"``Q_OBJECT``, ``Q_GADGET`` or ``Q_NAMESPACE`` in a source file to "
"determine if it needs to be ``moc`` processed.  The new "
":variable:`CMAKE_AUTOMOC_MACRO_NAMES` variable and "
":prop_tgt:`AUTOMOC_MACRO_NAMES` target property may be set to register "
"additional strings (macro names) to search for."
msgstr ""
"使用 :prop_tgt:`AUTOMOC` 时，CMake 在源文件中搜索字符串``Q_OBJECT``、``Q_GADGET`` "
"或``Q_NAMESPACE`` 以确定是否需要对其进行``moc`` 处理。新的 "
":variable:`CMAKE_AUTOMOC_MACRO_NAMES` 变量和 :prop_tgt:`AUTOMOC_MACRO_NAMES` "
"目标属性可以设置为注册要搜索的其他字符串（宏名称）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:169
msgid ""
"When using :prop_tgt:`AUTOMOC`, the new "
":variable:`CMAKE_AUTOMOC_COMPILER_PREDEFINES` variable and "
":prop_tgt:`AUTOMOC_COMPILER_PREDEFINES` target property specify whether to"
" enable or disable the generation of the compiler pre definitions file "
"``moc_predefs.h``."
msgstr ""
"使用 :prop_tgt:`AUTOMOC` 时，新的 :variable:`CMAKE_AUTOMOC_COMPILER_PREDEFINES` "
"变量和 :prop_tgt:`AUTOMOC_COMPILER_PREDEFINES` "
"目标属性指定是启用还是禁用编译器预定义文件``moc_predefs.h`` 的生成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:178
msgid ""
"A :variable:`CTEST_LABELS_FOR_SUBPROJECTS` CTest module variable and CTest"
" script variable were added to specify a list of labels that should be "
"treated as subprojects by CDash. To use this value in both the CTest "
"module and the ctest command line :ref:`Dashboard Client` mode (e.g. "
"``ctest -S``) set it in the ``CTestConfig.cmake`` config file."
msgstr ""
":variable:`CTEST_LABELS_FOR_SUBPROJECTS` CTest 模块变量和 CTest 脚本变量被添加以指定应被 "
"CDash 视为子项目的标签列表。要在 CTest 模块和 ctest 命令行 :ref:`Dashboard Client` 模式（例如 "
"``ctest -S``）中使用此值，请在 ``CTestConfig.cmake`` 配置文件中设置它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:187
msgid ""
"A :cpack_gen:`CPack FreeBSD Generator` was added for FreeBSD ``pkg(8)``."
msgstr "为 FreeBSD ``pkg(8)`` 添加了一个 :cpack_gen:`CPack FreeBSD Generator`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:189
msgid ""
"The :cpack_gen:`CPack DEB Generator` was enabled on Windows.  While not "
"fully featured (due to the lack of external UNIX tools) this will allow "
"building basic cross-platform Debian packages."
msgstr ""
":cpack_gen:`CPack DEB 生成器` 在 Windows 上启用。虽然功能不全（由于缺少外部 UNIX "
"工具），但这将允许构建基本的跨平台 Debian 软件包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:193
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to set package release "
"version in ``Version`` info property. See the "
":variable:`CPACK_DEBIAN_PACKAGE_RELEASE` variable."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了在 ``Version`` "
"信息属性中设置包发布版本。请参阅 :variable:`CPACK_DEBIAN_PACKAGE_RELEASE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:197
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned more strict package version "
"checking that complies with Debian rules."
msgstr ":cpack_gen:`CPack DEB Generator` 学会了更严格的符合 Debian 规则的包版本检查。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:200
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and"
" :command:`cpack_ifw_configure_component_group` commands gained a new "
"``REPLACES`` and ``CHECKABLE`` options."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` 和 "
":command:`cpack_ifw_configure_component_group` 命令获得了新的 ``REPLACES`` 和 "
"``CHECKABLE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:204
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained new "
":variable:`CPACK_IFW_PACKAGE_FILE_EXTENSION` variable to customize target "
"binary format."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_FILE_EXTENSION` 变量来自定义目标二进制格式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:208
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained new "
":variable:`CPACK_IFW_REPOSITORIES_DIRECTORIES` variable to specify "
"additional repositories dirs that will be used to resolve and repack "
"dependent components. This feature is only available when using QtIFW 3.1 "
"or later."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_REPOSITORIES_DIRECTORIES` "
"变量来指定将用于解析和重新打包依赖组件的其他存储库目录。此功能仅在使用 QtIFW 3.1 或更高版本时可用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:214
msgid ""
"The :cpack_gen:`CPack RPM Generator` and :cpack_gen:`CPack DEB Generator` "
"learned to set the package epoch version. See "
":variable:`CPACK_RPM_PACKAGE_EPOCH` and "
":variable:`CPACK_DEBIAN_PACKAGE_EPOCH` variables."
msgstr ""
":cpack_gen:`CPack RPM Generator` 和 :cpack_gen:`CPack DEB Generator` "
"学会了设置包纪元版本。请参阅 :variable:`CPACK_RPM_PACKAGE_EPOCH` "
"和 :variable:`CPACK_DEBIAN_PACKAGE_EPOCH` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:222
msgid ""
"The :manual:`cmake(1)` ``-E`` mode gained support for ``sha1sum``, "
"``sha224sum``, ``sha256sum``, ``sha384sum``, and ``sha512sum``."
msgstr ""
":manual:`cmake(1)` ``-E`` 模式获得了对 "
"``sha1sum``、``sha224sum``、``sha256sum``、``sha384sum`` 和 ``sha512sum`` 的支持."

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:225
msgid ""
"The graphviz output now distinguishes among the different dependency types"
" ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` and represents them in the "
"output graph as solid, dashed and dotted edges."
msgstr ""
"graphviz "
"输出现在区分不同的依赖类型“PUBLIC”、“PRIVATE”和“INTERFACE”，并在输出图中将它们表示为实线、虚线和点线边缘。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:232
msgid ""
"Support for building CMake itself with C++98 compilers was dropped. CMake "
"is now implemented using C++11."
msgstr "不再支持使用 C++98 编译器构建 CMake 本身。 CMake 现在使用 C++11 实现。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:235
msgid ""
"Support for building CMake on HP-UX has been dropped pending better "
"support for C++11 and a port of libuv.  See `CMake Issue 17137`_. Use "
"CMake 3.9 or lower instead for HP-UX support."
msgstr ""
"在 HP-UX 上构建 CMake 的支持已被删除，等待更好地支持 C++11 和 libuv 端口。请参阅`CMake 问题 17137`_。使用"
" CMake 3.9 或更低版本来支持 HP-UX。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:244
msgid ""
"On FreeBSD the C++ compiler named ``c++`` is now the preferred default."
msgstr "在 FreeBSD 上，名为“c++”的 C++ 编译器现在是首选的默认编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:246
msgid ""
"The :command:`file(GENERATE)` command now interprets relative paths given "
"to its ``OUTPUT`` and ``INPUT`` arguments with respect to the caller's "
"current binary and source directories, respectively. See policy "
":policy:`CMP0070`."
msgstr ""
":command:`file(GENERATE)` 命令现在解释相对于调用者的当前二进制文件和源目录分别赋予其 ``OUTPUT`` 和 "
"``INPUT`` 参数的相对路径。请参阅政策:policy:`CMP0070`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:251
msgid ""
"The :command:`get_filename_component` ``PROGRAM`` mode semantics have been"
" revised to not tolerate unquoted spaces in the path to the program while "
"also accepting arguments.  While technically incompatible with the old "
"behavior, it is expected that behavior under typical use cases with "
"properly-quoted command-lines has not changed."
msgstr ""
":command:`get_filename_component` ``PROGRAM`` "
"模式语义已被修改为不允许在程序路径中出现未加引号的空格，同时也接受参数。虽然在技术上与旧行为不兼容，但预计在具有正确引用的命令行的典型用例下的行为不会改变。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:259
#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:272
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:244
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:386
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:355
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:280
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:326
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:327
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:351
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:332
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:296
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:147
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:288
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:362
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:239
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:174
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:321
msgid "Updates"
msgstr "更新"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:261
msgid "Changes made since CMake 3.10.0 include the following."
msgstr "自 CMake 3.10.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:264
msgid "3.10.1"
msgstr "3.10.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:266
msgid ""
"The :manual:`cmake-server(7)` ``codemodel`` response ``crossReferences`` "
"field added by 3.10.0 has been dropped due to excessive memory usage. "
"Another approach will be needed to provide backtrace information."
msgstr ""
":manual:`cmake-server(7)` ``codemodel`` 响应 ``crossReferences`` 由 3.10.0 "
"添加的字段由于内存使用过多而被删除。将需要另一种方法来提供回溯信息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:273
msgid "3.10.3"
msgstr "3.10.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.10.rst:275
msgid ""
"CMake 3.10.1 added a ``TIMEOUT`` option to :command:`gtest_discover_tests`"
" from the :module:`GoogleTest` module.  That keyword clashed with the "
"``TIMEOUT`` test property, which is one of the common properties that "
"would be set with the command's ``PROPERTIES`` keyword, usually leading to"
" legal but unintended behavior.  The keyword was changed to "
"``DISCOVERY_TIMEOUT`` in CMake 3.10.3 to address this problem.  The "
"ambiguous behavior of the :command:`gtest_discover_tests` command's "
"``TIMEOUT`` keyword in 3.10.1 and 3.10.2 has not been preserved."
msgstr ""
"CMake 3.10.1 在 GoogleTest 模块中的 gtest_discover_tests 添加了一个 TIMEOUT 选项。该关键字与"
" ``TIMEOUT`` 测试属性冲突，后者是使用命令的 ``PROPERTIES`` 关键字设置的常见属性之一，通常会导致合法但意外的行为。在 "
"CMake 3.10.3 中将关键字更改为“DISCOVERY_TIMEOUT”以解决此问题。 "
":command:`gtest_discover_tests` 命令的 ``TIMEOUT`` 关键字在 3.10.1 和 3.10.2 "
"中的不明确行为尚未保留。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:2
msgid "CMake 3.11 Release Notes"
msgstr "CMake 3.11 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:8
msgid "Changes made since CMake 3.10 include the following."
msgstr "自 CMake 3.10 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:16
msgid ""
"TI C/C++ compilers are now supported by the :generator:`Ninja` generator."
msgstr "Ninja 生成器现在支持 TI C/C++ 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:21
msgid ""
"The :generator:`CodeBlocks` extra generator learned to check a "
":variable:`CMAKE_CODEBLOCKS_COMPILER_ID` variable for a custom compiler "
"identification value to place in the project file."
msgstr ""
":generator:`CodeBlocks` 额外的生成器学会了检查 "
":variable:`CMAKE_CODEBLOCKS_COMPILER_ID` 变量以获取自定义编译器标识值以放置在项目文件中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:25
msgid ""
"The :ref:`Makefile Generators` and the :generator:`Ninja` generator "
"learned to add compiler launcher tools along with the compiler for the "
"``Fortran`` language (``C``, ``CXX``, and ``CUDA`` were supported "
"previously). See the :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable "
"and :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` 生成器学会了添加编译器启动器工具以及用于 "
"``Fortran`` 语言（``C``、``CXX`` 和 `之前支持 CUDA）。有关详细信息，请参阅 "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量和 "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:31
msgid ""
":ref:`Visual Studio Generators` learned to support the "
"``COMPILE_LANGUAGE`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` in target-wide :prop_tgt:`COMPILE_DEFINITIONS`, "
":prop_tgt:`INCLUDE_DIRECTORIES`, :prop_tgt:`COMPILE_OPTIONS`, and "
":command:`file(GENERATE)`.  See generator expression documentation for "
"caveats."
msgstr ""
":ref:`Visual Studio Generators` 学会了在目标范围内支持``COMPILE_LANGUAGE`` "
":manual:`generator expression <cmake-generator-expressions(7)>` "
":prop_tgt:`COMPILE_DEFINITIONS`, :prop_tgt:`INCLUDE_DIRECTORIES "
"`、 :prop_tgt:`COMPILE_OPTIONS` 和 "
":command:`file(GENERATE)`。有关注意事项，请参阅生成器表达式文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:38
msgid ""
"The :generator:`Xcode` generator learned to support the "
"``COMPILE_LANGUAGE`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` in target-wide :prop_tgt:`COMPILE_DEFINITIONS` and "
":prop_tgt:`INCLUDE_DIRECTORIES`.  It previously supported only "
":prop_tgt:`COMPILE_OPTIONS` and :command:`file(GENERATE)`. See generator "
"expression documentation for caveats."
msgstr ""
":generator:`Xcode` 生成器学会了在目标范围内支持 ``COMPILE_LANGUAGE`` :manual:`generator "
"expression <cmake-generator-expressions(7)>` "
":prop_tgt:`COMPILE_DEFINITIONS` 和 :prop_tgt:`INCLUDE_DIRECTORIES `。它以前只支持 "
":prop_tgt:`COMPILE_OPTIONS` 和 "
":command:`file(GENERATE)`。有关注意事项，请参阅生成器表达式文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:48
msgid ""
":command:`add_library` and :command:`add_executable` commands can now be "
"called without any sources and will not complain as long as sources are "
"added later via the :command:`target_sources` command."
msgstr ""
":command:`add_library` 和 :command:`add_executable` "
"命令现在可以在没有任何源的情况下调用，并且只要稍后通过 :command:`target_sources` 命令添加源就不会报错。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:52
msgid ""
"The :command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands gained "
"``NETRC`` and ``NETRC_FILE`` options to specify use of a ``.netrc`` file."
msgstr ""
":command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令获得了 ``NETRC`` 和 "
"``NETRC_FILE`` 选项来指定使用 ``.netrc`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:56
msgid ""
"The :command:`target_compile_definitions` command learned to set the "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` property on :ref:`Imported "
"Targets`."
msgstr ""
":command:`target_compile_definitions` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_COMPILE_DEFINITIONS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:60
msgid ""
"The :command:`target_compile_features` command learned to set the "
":prop_tgt:`INTERFACE_COMPILE_FEATURES` property on :ref:`Imported "
"Targets`."
msgstr ""
":command:`target_compile_features` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_COMPILE_FEATURES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:63
msgid ""
"The :command:`target_compile_options` command learned to set the "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS` property on :ref:`Imported Targets`."
msgstr ""
":command:`target_compile_options` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:66
msgid ""
"The :command:`target_include_directories` command learned to set the "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` property on :ref:`Imported "
"Targets`."
msgstr ""
":command:`target_include_directories` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:70
msgid ""
"The :command:`target_sources` command learned to set the "
":prop_tgt:`INTERFACE_SOURCES` property on :ref:`Imported Targets`."
msgstr ""
":command:`target_sources` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_SOURCES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:73
msgid ""
"The :command:`target_link_libraries` command learned to set the "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` property on :ref:`Imported Targets`."
msgstr ""
":command:`target_link_libraries` 命令学会了在 :ref:`Imported Targets` 上设置 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:79
msgid ""
"A :variable:`CMAKE_GENERATOR_INSTANCE` variable was introduced to hold the"
" selected instance of the generator's corresponding native tools if "
"multiple are available.  This is used by the :generator:`Visual Studio 15 "
"2017` generator to hold the selected instance of Visual Studio "
"persistently."
msgstr ""
"引入了一个 :variable:`CMAKE_GENERATOR_INSTANCE` 变量来保存生成器相应本机工具的选定实例（如果有多个可用的话）。"
" :generator:`Visual Studio 15 2017` 生成器使用它来持久保存选定的 Visual Studio 实例。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:85
msgid ""
"A :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable was "
"added to enable setting of default permissions for directories created "
"implicitly during installation of files by :command:`install` and "
":command:`file(INSTALL)`, e.g. during ``make install``."
msgstr ""
"添加了 :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` "
"变量，以便为在安装文件期间通过 :command:`install` 和 :command:`file(INSTALL)` "
"隐式创建的目录设置默认权限，例如在``make install``期间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:90
msgid ""
"A :variable:`CMAKE_JOB_POOLS` variable was added specify a value to use "
"for the :prop_gbl:`JOB_POOLS` property. This enables control over build "
"parallelism with command line configuration parameters when using the "
"Ninja generator."
msgstr ""
"添加了 :variable:`CMAKE_JOB_POOLS` 变量指定用于 :prop_gbl:`JOB_POOLS` 属性的值。这使得在使用 "
"Ninja 生成器时可以通过命令行配置参数控制构建并行性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:95
msgid ""
"The :variable:`CMAKE_NETRC` and :variable:`CMAKE_NETRC_FILE` variables "
"were added to specify use of a ``.netrc`` file by the "
":command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands and the "
":module:`ExternalProject` module."
msgstr ""
":variable:`CMAKE_NETRC` 和 :variable:`CMAKE_NETRC_FILE` 变量被添加以指定 "
":command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 使用 ``.netrc`` 文件命令和 "
":module:`ExternalProject` 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:100
msgid ""
"A :variable:`CMAKE_CUDA_SEPARABLE_COMPILATION` variable was added to "
"initialize the :prop_tgt:`CUDA_SEPARABLE_COMPILATION` target property on "
"targets when they are created."
msgstr ""
"添加了 :variable:`CMAKE_CUDA_SEPARABLE_COMPILATION` 变量以在创建目标时初始化目标上的 "
":prop_tgt:`CUDA_SEPARABLE_COMPILATION` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:107
msgid ""
"The :prop_sf:`COMPILE_DEFINITIONS` source file property learned to support"
" :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_sf:`COMPILE_DEFINITIONS` 源文件属性学会了支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:110
msgid ""
"A :prop_sf:`COMPILE_OPTIONS` source file property was added to manage list"
" of options to pass to the compiler."
msgstr "添加了 :prop_sf:`COMPILE_OPTIONS` 源文件属性来管理要传递给编译器的选项列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:113
msgid ""
"An :prop_tgt:`IMPORTED_GLOBAL` target property was added to indicate "
"whether an :ref:`IMPORTED target <Imported Targets>` is globally visible. "
"It is automatically set to a true value for targets created with the "
"``GLOBAL`` option to :command:`add_library` or :command:`add_executable`. "
"Additionally, project code may now *promote* a local imported target to be"
" globally visible by setting this property to ``TRUE``."
msgstr ""
"添加了 :prop_tgt:`IMPORTED_GLOBAL` 目标属性以指示 :ref:`IMPORTED 目标 <Imported "
"Targets>` 是否全局可见。对于使用 ``GLOBAL`` 选项为 :command:`add_library` 或 "
":command:`add_executable` "
"创建的目标，它会自动设置为真值。此外，项目代码现在可以通过将此属性设置为“TRUE”来*提升*本地导入目标为全局可见。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:120
msgid ""
"An :prop_sf:`INCLUDE_DIRECTORIES` source file property was added to "
"specify list of preprocessor include file search directories."
msgstr "添加了 :prop_sf:`INCLUDE_DIRECTORIES` 源文件属性以指定预处理器包含文件搜索目录的列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:123
msgid ""
"Source file properties :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS` and "
":prop_sf:`VS_SHADER_ENABLE_DEBUG` have been added to specify more details "
"of ``.hlsl`` sources with :ref:`Visual Studio Generators`."
msgstr ""
"添加了源文件属性 :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS` 和 "
":prop_sf:`VS_SHADER_ENABLE_DEBUG` 以使用 :ref:`Visual Studio Generators 指定 "
"``.hlsl`` 源的更多细节。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:130
msgid ""
"The :module:`CheckIncludeFiles` module :command:`CHECK_INCLUDE_FILES` "
"command gained a ``LANGUAGE`` option to specify whether to check using the"
" ``C`` or ``CXX`` compiler."
msgstr ""
":module:`CheckIncludeFiles` 模块 :command:`CHECK_INCLUDE_FILES` 命令获得了一个 "
"``LANGUAGE`` 选项来指定是否使用 ``C`` 或 ``CXX`` 编译器进行检查。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:134
msgid ""
"The :module:`CMakePackageConfigHelpers` module "
":command:`write_basic_package_version_file` command learned a new "
"``SameMinorVersion`` mode for the ``COMPATIBILITY`` argument."
msgstr ""
":module:`CMakePackageConfigHelpers` "
"模块 :command:`write_basic_package_version_file` 命令为 ``COMPATIBILITY`` "
"参数学习了一种新的 ``SameMinorVersion`` 模式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:138
msgid ""
"The :module:`ExternalProject` module learned to substitute "
"``<DOWNLOAD_DIR>`` in comments, commands, working directory and "
"byproducts."
msgstr ""
":module:`ExternalProject` 模块学会了在注释、命令、工作目录和副产品中替换``<DOWNLOAD_DIR>``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:141
msgid ""
"The :module:`ExternalProject` module gained ``NETRC`` and ``NETRC_FILE`` "
"options to specify use of a ``.netrc`` file."
msgstr ""
":module:`ExternalProject` 模块获得了 ``NETRC`` 和 ``NETRC_FILE`` 选项来指定使用 "
"``.netrc`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:144
msgid ""
"A new :module:`FetchContent` module was added which supports populating "
"content at configure time using any of the download/update methods "
"supported by :command:`ExternalProject_Add`.  This allows the content to "
"be used immediately during the configure stage, such as with "
":command:`add_subdirectory`, etc.  Hierarchical project structures are "
"well supported, allowing parent projects to override the content details "
"of child projects and ensuring content is not populated multiple times "
"throughout the whole project tree."
msgstr ""
"添加了一个新的 :module:`FetchContent` 模块，它支持在配置时使用 :command:`ExternalProject_Add`"
" 支持的任何下载/更新方法填充内容。这允许在配置阶段立即使用内容，例如使用 :command:`add_subdirectory` "
"等。分层项目结构得到很好的支持，允许父项目覆盖子项目的内容细节并确保内容不会被填充多个遍及整个项目树的时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:153
msgid ""
"The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to support"
" `FLAME`_ ``blis`` and ``libflame``."
msgstr ""
":module:`FindBLAS` 和 :module:`FindLAPACK` 模块学会了支持 `FLAME`_ ``blis`` 和 "
"``libflame``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:156
msgid ""
"The :module:`FindDoxygen` module :command:`doxygen_add_docs` function now "
"supports a new ``DOXYGEN_VERBATIM_VARS`` list variable.  Any "
"``DOXYGEN_...`` variable contained in that list will bypass the automatic "
"quoting logic, leaving its contents untouched when transferring them to "
"the output ``Doxyfile``."
msgstr ""
"FindDoxygen 模块 doxygen_add_docs 函数现在支持新的 DOXYGEN_VERBATIM_VARS "
"列表变量。该列表中包含的任何 ``DOXYGEN_...`` 变量将绕过自动引用逻辑，在将它们传输到输出 ``Doxyfile`` "
"时保持其内容不变。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:162
msgid "A :module:`FindIconv` module was added to locate iconv support."
msgstr "添加了一个 :module:`FindIconv` 模块来定位 iconv 支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:164
msgid ""
"The :module:`GenerateExportHeader` module ``GENERATE_EXPORT_HEADER`` "
"command gained an ``INCLUDE_GUARD_NAME`` option to change the name of the "
"include guard symbol written to the generated export header. Additionally,"
" it now adds a comment after the closing ``#endif`` on the generated "
"export header's include guard."
msgstr ""
":module:`GenerateExportHeader` 模块 ``GENERATE_EXPORT_HEADER`` 命令获得了 "
"``INCLUDE_GUARD_NAME`` 选项来更改写入生成的导出标头的包含保护符号的名称。此外，它现在在生成的导出标头的 include "
"guard 上的结束 ``#endif`` 之后添加注释。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:170
msgid ""
"The :module:`UseJava` module ``add_jar`` command gained a "
"``GENERATE_NATIVE_HEADERS`` option to generate native header files using "
"``javac -h`` for ``javac`` 1.8 or above.  This supersedes "
"``create_javah``, which no longer works with JDK 1.10 and above due to "
"removal of the ``javah`` tool by `JEP 313`_."
msgstr ""
":module:`UseJava` 模块``add_jar`` 命令获得了``GENERATE_NATIVE_HEADERS`` "
"选项，可以使用``javac -h`` 为``javac`` 1.8 或更高版本生成本机头文件。这取代了 ``create_javah``，由于 "
"`JEP 313`_ 删除了 ``javah`` 工具，它不再适用于 JDK 1.10 及更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:182
msgid ""
"When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`, CMake now starts "
"multiple parallel ``moc`` or ``uic`` processes to reduce the build time. A"
" new :variable:`CMAKE_AUTOGEN_PARALLEL` variable and "
":prop_tgt:`AUTOGEN_PARALLEL` target property may be set to specify the "
"number of parallel ``moc`` or ``uic`` processes to start.  The default is "
"derived from the number of CPUs on the host."
msgstr ""
"使用 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 时，CMake 现在启动多个并行的 ``moc`` 或 "
"``uic`` 进程以减少构建时间。可以设置一个新的 CMAKE_AUTOGEN_PARALLEL 变量和 AUTOGEN_PARALLEL "
"目标属性来指定要启动的并行 ``moc`` 或 ``uic`` 进程的数量。默认值源自主机上的 CPU 数量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:192
msgid ""
"The :command:`ctest_start` command no longer sets "
":variable:`CTEST_RUN_CURRENT_SCRIPT` due to issues with scoping if it is "
"called from inside a function. Instead, it sets an internal variable in "
"CTest. However, setting :variable:`CTEST_RUN_CURRENT_SCRIPT` to 0 at the "
"global scope still prevents the script from being re-run at the end."
msgstr ""
":command:`ctest_start` 命令不再设置 "
":variable:`CTEST_RUN_CURRENT_SCRIPT`，因为如果从函数内部调用它，则会出现范围问题。相反，它在 CTest "
"中设置了一个内部变量。但是，在全局范围内将 CTEST_RUN_CURRENT_SCRIPT 设置为 0 仍然会阻止脚本在最后重新运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:201
msgid ""
":manual:`cpack(1)` gained ``--trace`` and ``--trace-expand`` options."
msgstr ":manual:`cpack(1)` 获得了 ``--trace`` 和 ``--trace-expand`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:203
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained new "
":variable:`CPACK_IFW_PACKAGE_REMOVE_TARGET_DIR` variable to control if the"
" target directory should not be deleted when uninstalling."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_REMOVE_TARGET_DIR` 变量来控制卸载时是否不应删除目标目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:207
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to enable enforcing of "
"execute privileges on programs and shared libraries. See "
":variable:`CPACK_RPM_INSTALL_WITH_EXEC` variable."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学会了启用对程序和共享库的执行权限。请参阅 :variable:`CPACK_RPM_INSTALL_WITH_EXEC` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:211
msgid ""
"A :variable:`CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` variable was "
"added which serves the same purpose during packaging (e.g. ``make "
"package``) as the :variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` "
"variable serves during installation (e.g. ``make install``)."
msgstr ""
"添加了一个 :variable:`CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` "
"变量，它在打包过程中起到相同的作用（例如 ``make package``），因为 "
":variable:`CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS` 变量在安装过程中起作用（例如 "
"``make install``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:219
msgid ""
":ref:`Alias Targets` may now alias :ref:`Imported Targets` that are "
"created with the ``GLOBAL`` option to :command:`add_library`."
msgstr ""
":ref:`Alias Targets` 现在可以将使用 ``GLOBAL`` 选项创建的 :ref:`Imported Targets 别名为 "
":command:`add_library`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:222
msgid ""
":ref:`Interface Libraries` may now have custom properties set on them if "
"they start with either an underscore (``_``) or a lowercase ASCII "
"character. The original intention was to only allow properties which made "
"sense for ``INTERFACE`` libraries, but it also blocked usage of custom "
"properties."
msgstr ""
":ref:`Interface Libraries` 现在可以设置自定义属性，如果它们以下划线 (``_``) 或小写 ASCII "
"字符开头。最初的意图是只允许对“接口”库有意义的属性，但它也阻止了自定义属性的使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:227
msgid ""
"The :manual:`cmake(1)` ``--open <dir>`` command-line option was added to "
"open generated IDE projects like Visual Studio solutions or Xcode "
"projects."
msgstr ""
"添加了 :manual:`cmake(1)` ``--open <dir>`` 命令行选项以打开生成的 IDE 项目，如 Visual Studio"
" 解决方案或 Xcode 项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:234
msgid ""
"An explicit deprecation diagnostic was added for policies ``CMP0037`` "
"through ``CMP0054`` (``CMP0036`` and below were already deprecated). The "
":manual:`cmake-policies(7)` manual explains that the OLD behaviors of all "
"policies are deprecated and that projects should port to the NEW "
"behaviors."
msgstr ""
"为策略“CMP0037”到“CMP0054”添加了明确的弃用诊断（“CMP0036”及以下已弃用）。 :manual:`cmake-"
"policies(7)` 手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:240
msgid "The ``KDevelop3`` generator has been removed."
msgstr "``KDevelop3`` 生成器已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:245
msgid ""
"Policy :policy:`CMP0037` no longer reserves target names associated with "
"optional features, such as ``test`` and ``package``, unless the "
"corresponding feature is enabled."
msgstr ""
"策略:policy:`CMP0037` 不再保留与可选功能相关的目标名称，例如 ``test`` 和 ``package``，除非启用了相应的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:249
msgid ""
"The :module:`FindOpenGL` module now prefers GLVND libraries if available. "
"See policy :policy:`CMP0072`."
msgstr ":module:`FindOpenGL` 模块现在更喜欢 GLVND 库（如果可用）。请参阅政策:policy:`CMP0072`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:252
msgid ""
"The minimum deployment target set in the "
":variable:`CMAKE_OSX_DEPLOYMENT_TARGET` variable used to be only applied "
"for macOS regardless of the selected SDK.  It is now properly set for the "
"target platform selected by :variable:`CMAKE_OSX_SYSROOT`. For example, if"
" the sysroot variable specifies an iOS SDK then the value in "
"``CMAKE_OSX_DEPLOYMENT_TARGET`` is interpreted as minimum iOS version."
msgstr ""
"CMAKE_OSX_DEPLOYMENT_TARGET 变量中设置的最小部署目标过去仅适用于 macOS，与所选 SDK 无关。它现在已针对 "
"CMAKE_OSX_SYSROOT 选择的目标平台进行了正确设置。例如，如果 sysroot 变量指定一个 iOS "
"SDK，则“CMAKE_OSX_DEPLOYMENT_TARGET”中的值将被解释为最低 iOS 版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:260
msgid ""
"The :generator:`Xcode` generator behavior of generating one project file "
"per :command:`project()` command may now be controlled with the "
":variable:`CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY` variable. This "
"could be useful to speed up the CMake generation step for large projects "
"and to work-around a bug in the ``ZERO_CHECK`` logic."
msgstr ""
"Xcode 生成器为每个 project() 命令生成一个项目文件的行为现在可以通过 "
"CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY 变量进行控制。这可能有助于加快大型项目的 CMake "
"生成步骤，并解决“ZERO_CHECK”逻辑中的错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:266
msgid ""
"Since the ``CMakeCache.txt`` format does not support newlines in values, "
"values containing newlines are now truncated before writing to the file. "
"In addition, a warning comment is written to the cache file, and a warning"
" message is displayed to the user on the console."
msgstr ""
"由于 CMakeCache.txt "
"格式不支持值中的换行符，包含换行符的值现在在写入文件之前被截断。此外，警告注释写入缓存文件，并在控制台上向用户显示警告消息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:274
msgid "Changes made since CMake 3.11.0 include the following."
msgstr "自 CMake 3.11.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:277
msgid "3.11.1"
msgstr "3.11.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:279
msgid ""
"The :module:`CheckIncludeFile` module ``check_include_file`` macro, "
":module:`CheckIncludeFileCXX` module ``check_include_file_cxx`` macro, and"
" :module:`CheckIncludeFiles` module ``check_include_files`` macro were "
"taught to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable in CMake 3.11.0."
"  This has been reverted due to changing behavior of checks for existing "
"projects.  It may be restored in the future with a policy for "
"compatibility."
msgstr ""
":module:`CheckIncludeFile` 模块 ``check_include_file`` "
"宏、 :module:`CheckIncludeFileCXX` 模块 ``check_include_file_cxx`` 宏和 "
":module:`CheckIncludeFiles` 模块 ``check_include_files`` 宏被教导要尊重 `` CMake "
"3.11.0 中的 CMAKE_REQUIRED_LIBRARIES`` "
"变量。由于更改现有项目的检查行为，这已被恢复。将来可能会通过兼容性策略恢复它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:288
msgid "3.11.2"
msgstr "3.11.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:290
msgid ""
"Calling :command:`add_library` to create an alias of an imported target "
"that is not globally visible now causes an error again as it did prior to "
"3.11.0.  This diagnostic was accidentally dropped from CMake 3.11.0 and "
"3.11.1 by the change to allow globally visible imported targets to be "
"aliased."
msgstr ""
"调用 :command:`add_library` 来创建全局不可见的导入目标的别名现在会像 3.11.0 "
"之前一样再次导致错误。由于允许对全局可见的导入目标进行别名更改，此诊断从 CMake 3.11.0 和 3.11.1 中意外删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:296
msgid ""
"The :module:`FindQt4` module ``qt4_wrap_cpp``, ``qt4_wrap_ui`` and "
"``qt4_add_resources`` macros now set :prop_sf:`SKIP_AUTOMOC` and "
":prop_sf:`SKIP_AUTOUIC` on their generated files.  These files never need "
"to be processed by moc or uic, and we must say so explicitly to account "
"for policy :policy:`CMP0071`."
msgstr ""
"FindQt4 模块 ``qt4_wrap_cpp``、``qt4_wrap_ui`` 和 ``qt4_add_resources`` "
"宏现在在它们生成的文件上设置 :prop_sf:`SKIP_AUTOMOC` 和 "
":prop_sf:`SKIP_AUTOUIC`。这些文件永远不需要由 moc 或 uic "
"处理，我们必须明确说明以说明策略 :policy:`CMP0071`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:303
msgid "3.11.3"
msgstr "3.11.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.11.rst:305
msgid ""
"CMake 3.11.0 introduced support for resolving symbolic links on Windows in"
" code paths that typically do so on UNIX.  This has been reverted due to "
"breakage on ``subst`` drives."
msgstr ""
"CMake 3.11.0 引入了对解析 Windows 上通常在 UNIX "
"上执行的代码路径中的符号链接的支持。由于“subst”驱动器损坏，这已被恢复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:2
msgid "CMake 3.12 Release Notes"
msgstr "CMake 3.12 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:8
msgid "Changes made since CMake 3.11 include the following."
msgstr "自 CMake 3.11 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:16
msgid ""
"The :ref:`Visual Studio Generators` for VS 2017 learned to support a "
"``version=14.##`` option in the :variable:`CMAKE_GENERATOR_TOOLSET` value "
"(e.g. via the :manual:`cmake(1)` ``-T`` option) to specify a toolset "
"version number."
msgstr ""
"VS 2017 的 :ref:`Visual Studio Generators` 学会了在 "
":variable:`CMAKE_GENERATOR_TOOLSET` 值中支持 ``version=14.##`` "
"选项（例如通过:manual:`cmake(1)` ` `-T`` 选项）指定工具集版本号。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:22
#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:42
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:70
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:63
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:50
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:47
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:20
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:82
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:50
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:44
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:35
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:42
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:20
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:28
msgid "Command-Line"
msgstr "命令行"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:24
msgid ""
"The :manual:`cmake(1)` :ref:`Build Tool Mode` (``cmake --build``) gained "
"``--parallel [<jobs>]`` and ``-j [<jobs>]`` options to specify a parallel "
"build level.  They map to corresponding options of the native build tool."
msgstr ""
":manual:`cmake(1)` :ref:`Build Tool Mode` (``cmake --build``) "
"获得了``--parallel [<jobs>]`` 和``-j [<jobs> ]`` 选项来指定并行构建级别。它们映射到本机构建工具的相应选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:31
msgid ""
"The :command:`add_compile_definitions` command was added to set "
"preprocessor definitions at directory level.  This supersedes "
":command:`add_definitions`."
msgstr ""
"添加了 :command:`add_compile_definitions` 命令以在目录级别设置预处理器定义。这取代了 "
":command:`add_definitions`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:34
msgid ""
"The :command:`cmake_minimum_required` and :command:`cmake_policy(VERSION)`"
" commands now accept a version range using the form ``<min>[...<max>]``. "
"The ``<min>`` version is required but policies are set based on the older "
"of the running CMake version and the version specified by ``<max>``.  This"
" allows projects to specify a range of versions for which they have been "
"updated and avoid explicit policy settings."
msgstr ""
":command:`cmake_minimum_required` 和 :command:`cmake_policy(VERSION)` "
"命令现在接受使用 ``<min>[...<max>]` 形式的版本范围。 ``<min>`` 版本是必需的，但策略是根据正在运行的 CMake "
"版本中较旧的版本和 ``<max>`` 指定的版本设置的。这允许项目指定他们已更新的版本范围，并避免明确的策略设置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:41
msgid ""
"The :command:`file(GLOB)` and :command:`file(GLOB_RECURSE)` commands "
"learned a new flag ``CONFIGURE_DEPENDS`` which enables expression of build"
" system dependency on globbed directory's contents."
msgstr ""
":command:`file(GLOB)` 和 :command:`file(GLOB_RECURSE)` 命令学习了一个新标志 "
"`CONFIGURE_DEPENDS``，它可以表达构建系统对全局目录内容的依赖性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:45
msgid ""
"The :command:`file(TOUCH)` and :command:`file(TOUCH_NOCREATE)` commands "
"were added to expose ``TOUCH`` functionality without having to use CMake's"
" command-line tool mode with :command:`execute_process`."
msgstr ""
"添加了 :command:`file(TOUCH)` 和 :command:`file(TOUCH_NOCREATE)` 命令以公开 "
"``TOUCH`` 功能，而无需使用 CMake 的命令行工具模式和 :command:`execute_process`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:49
msgid ""
"The :command:`find_package` command now searches prefixes specified by the"
" :variable:`<PackageName>_ROOT` CMake variable and the "
":envvar:`<PackageName>_ROOT` environment variable.  Package roots are "
"maintained as a stack so nested calls to all ``find_*`` commands inside "
"find modules also search the roots as prefixes. See policy "
":policy:`CMP0074`."
msgstr ""
":command:`find_package` 命令现在搜索由 :variable:`<PackageName>_ROOT` CMake 变量和 "
":envvar:`<PackageName>_ROOT` "
"环境变量指定的前缀。包根以堆栈形式维护，因此对查找模块内所有“find_*”命令的嵌套调用也将根作为前缀进行搜索。请参阅政策:policy:`CMP0074`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:56
msgid ""
"The :command:`install` command learned an optional ``NAMELINK_COMPONENT`` "
"parameter, which allows you to change the component for a shared library's"
" namelink. If none is specified, the value of ``COMPONENT`` is used by "
"default."
msgstr ""
":command:`install` 命令学习了一个可选的 ``NAMELINK_COMPONENT`` "
"参数，它允许您更改共享库名称链接的组件。如果未指定，则默认使用 ``COMPONENT`` 的值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:61
msgid ""
"The :command:`list` command learned a ``JOIN`` sub-command to concatenate "
"list's elements separated by a glue string."
msgstr ":command:`list` 命令学会了一个 ``JOIN`` 子命令来连接由胶水字符串分隔的列表元素。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:64
msgid ""
"The :command:`list` command learned a ``SUBLIST`` sub-command to get a "
"sublist of the list."
msgstr ":command:`list` 命令学习了一个 ``SUBLIST`` 子命令来获取列表的子列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:67
msgid ""
"The :command:`list` command learned a ``TRANSFORM`` sub-command to apply "
"various string transformation to list's elements."
msgstr ":command:`list` 命令学习了一个 ``TRANSFORM`` 子命令，用于将各种字符串转换应用于列表的元素。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:70
msgid ""
"The :command:`project` command learned an optional ``HOMEPAGE_URL`` "
"parameter which has the effect of setting variables like "
":variable:`PROJECT_HOMEPAGE_URL`, :variable:`<PROJECT-NAME>_HOMEPAGE_URL` "
"and :variable:`CMAKE_PROJECT_HOMEPAGE_URL`."
msgstr ""
":command:`project` 命令学习了一个可选的 ``HOMEPAGE_URL`` 参数，它具有设置变量的效果，例如 "
":variable:`PROJECT_HOMEPAGE_URL`、 :variable:`<PROJECT-NAME>_HOMEPAGE_URL` 和"
" :variable:`CMAKE_PROJECT_HOMEPAGE_URL` ."

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:75
msgid ""
"The :command:`string` command learned a ``JOIN`` sub-command to "
"concatenate input strings separated by a glue string."
msgstr ":command:`string` 命令学习了一个 ``JOIN`` 子命令来连接由胶水字符串分隔的输入字符串。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:78
msgid ""
":command:`target_compile_options` and :command:`add_compile_options` "
"commands gained a ``SHELL:`` prefix to specify a group of related options "
"using shell-like quoting."
msgstr ""
":command:`target_compile_options` 和 :command:`add_compile_options` 命令获得了一个"
" ``SHELL:`` 前缀，以使用类 shell 引用指定一组相关选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:82
msgid ""
"The :command:`target_link_libraries` command now supports :ref:`Object "
"Libraries`.  Linking to an object library uses its object files in direct "
"dependents and also propagates usage requirements."
msgstr ""
":command:`target_link_libraries` 命令现在支持 :ref:`Object "
"Libraries`。链接到对象库在直接依赖中使用其对象文件并传播使用要求。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:89
msgid ""
"The :variable:`CMAKE_FOLDER` variable was added to initialize the "
":prop_tgt:`FOLDER` property on all targets."
msgstr "添加了 :variable:`CMAKE_FOLDER` 变量以初始化所有目标上的 :prop_tgt:`FOLDER` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:92
msgid ""
"The :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` variable was defined"
" to initialize all :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target "
"properties."
msgstr ""
":variable:`CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION` "
"变量被定义为初始化所有 :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:96
msgid "``CMAKE_PROJECT_VERSION*`` variables have been introduced:"
msgstr "引入了 ``CMAKE_PROJECT_VERSION*`` 变量："

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:98
msgid ":variable:`CMAKE_PROJECT_VERSION`"
msgstr ":variable:`CMAKE_PROJECT_VERSION`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:99
msgid ":variable:`CMAKE_PROJECT_VERSION_MAJOR`"
msgstr ":variable:`CMAKE_PROJECT_VERSION_MAJOR`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:100
msgid ":variable:`CMAKE_PROJECT_VERSION_MINOR`"
msgstr ":variable:`CMAKE_PROJECT_VERSION_MINOR`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:101
msgid ":variable:`CMAKE_PROJECT_VERSION_PATCH`"
msgstr ":variable:`CMAKE_PROJECT_VERSION_PATCH`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:102
msgid ":variable:`CMAKE_PROJECT_VERSION_TWEAK`"
msgstr ":variable:`CMAKE_PROJECT_VERSION_TWEAK`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:104
msgid ""
"The :variable:`CMAKE_SUPPRESS_REGENERATION` variable was extended to "
"support the :generator:`Ninja` and :ref:`Makefile Generators`. It is also "
"now documented."
msgstr ""
":variable:`CMAKE_SUPPRESS_REGENERATION` 变量被扩展以支持 :generator:`Ninja` "
"和 :ref:`Makefile Generators`。它现在也被记录在案。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:108
msgid ""
"``CMAKE_VS_SDK_*_DIRECTORIES`` variables were defined to tell :ref:`Visual"
" Studio Generators` for VS 2010 and above how to populate fields in "
"``.vcxproj`` files that specify SDK directories.  The variables are:"
msgstr ""
"``CMAKE_VS_SDK_*_DIRECTORIES`` 变量被定义为告诉 VS 2010 及更高版本的 Visual Studio "
"Generators 如何填充指定 SDK 目录的 .vcxproj 文件中的字段。变量是："

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:113
msgid ":variable:`CMAKE_VS_SDK_EXCLUDE_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_EXCLUDE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:114
msgid ":variable:`CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:115
msgid ":variable:`CMAKE_VS_SDK_INCLUDE_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_INCLUDE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:116
msgid ":variable:`CMAKE_VS_SDK_LIBRARY_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_LIBRARY_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:117
msgid ":variable:`CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:118
msgid ":variable:`CMAKE_VS_SDK_REFERENCE_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_REFERENCE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:119
msgid ":variable:`CMAKE_VS_SDK_SOURCE_DIRECTORIES`"
msgstr ":variable:`CMAKE_VS_SDK_SOURCE_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:121
msgid ""
"A :variable:`MSVC_TOOLSET_VERSION` variable was added to provide the MSVC "
"toolset version associated with the current MSVC compiler version in "
":variable:`MSVC_VERSION`."
msgstr ""
"添加了 :variable:`MSVC_TOOLSET_VERSION` 变量以提供与 :variable:`MSVC_VERSION` 中当前 "
"MSVC 编译器版本关联的 MSVC 工具集版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:128
msgid ""
"The :prop_tgt:`COMMON_LANGUAGE_RUNTIME` target property was introduced to "
"configure the use of managed C++ for :ref:`Visual Studio Generators` for "
"VS 2010 and above. A corresponding "
":prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME` target property was added to "
"support ``C++/CLI`` for imported targets."
msgstr ""
":prop_tgt:`COMMON_LANGUAGE_RUNTIME` 目标属性被引入来为 VS 2010 及更高版本的 :ref:`Visual "
"Studio Generators 配置托管 C++ 的使用。添加了相应的 "
":prop_tgt:`IMPORTED_COMMON_LANGUAGE_RUNTIME` 目标属性以支持导入目标的 ``C++/CLI``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:134
msgid ""
"The :prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` target property was "
"introduced as replacement for "
":prop_tgt:`VS_DOTNET_TARGET_FRAMEWORK_VERSION`, which is considered "
"deprecated now."
msgstr ""
":prop_tgt:`DOTNET_TARGET_FRAMEWORK_VERSION` 目标属性被引入作为 "
":prop_tgt:`VS_DOTNET_TARGET_FRAMEWORK_VERSION` 的替代品，现在被认为已弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:139
msgid ""
"An :prop_tgt:`EXPORT_PROPERTIES` target property was added to specify a "
"custom list of target properties to include in targets exported by the "
":command:`install(EXPORT)` and :command:`export` commands."
msgstr ""
"添加了 :prop_tgt:`EXPORT_PROPERTIES` 目标属性以指定目标属性的自定义列表，以包含在由 "
":command:`install(EXPORT)` 和 :command:`export` 命令导出的目标中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:143
msgid ""
"The :prop_tgt:`PDB_OUTPUT_DIRECTORY` property learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`PDB_OUTPUT_DIRECTORY` 属性学会了支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:146
msgid ""
"A :prop_dir:`TESTS` directory property was added to hold the list of tests"
" defined by the :command:`add_test` command."
msgstr "添加了 :prop_dir:`TESTS` 目录属性以保存由 :command:`add_test` 命令定义的测试列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:149
msgid ""
"A :prop_tgt:`VS_DEBUGGER_COMMAND` target property was created to set the "
"debugging command line with :ref:`Visual Studio Generators` for VS 2010 "
"and above."
msgstr ""
"创建了一个 :prop_tgt:`VS_DEBUGGER_COMMAND` 目标属性来为 VS 2010 及更高版本设置调试命令行与 "
":ref:`Visual Studio Generators`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:153
msgid ""
"HLSL source file properties :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS` and"
" :prop_sf:`VS_SHADER_ENABLE_DEBUG` gained support for generator "
"expressions."
msgstr ""
"HLSL 源文件属性 :prop_sf:`VS_SHADER_DISABLE_OPTIMIZATIONS` 和 "
":prop_sf:`VS_SHADER_ENABLE_DEBUG` 获得了对生成器表达式的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:157
msgid ""
"HLSL source file property :prop_sf:`VS_SHADER_OBJECT_FILE_NAME` has been "
"added to the :ref:`Visual Studio Generators` for VS 2010 and above. The "
"property specifies the file name of the compiled shader object."
msgstr ""
"HLSL 源文件属性 :prop_sf:`VS_SHADER_OBJECT_FILE_NAME` 已添加到 VS 2010 及更高版本的 "
":ref:`Visual Studio Generators`。该属性指定编译着色器对象的文件名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:164
msgid "The :module:`FindALSA` module now provides imported targets."
msgstr ":module:`FindALSA` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:166
msgid "The :module:`FindCURL` module now provides imported targets."
msgstr ":module:`FindCURL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:168
msgid "The :module:`FindJPEG` module now provides imported targets."
msgstr ":module:`FindJPEG` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:170
msgid "The :module:`FindLibXml2` module now provides imported targets."
msgstr ":module:`FindLibXml2` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:172
msgid ""
"The :module:`FindMatlab` module now supports the Matlab Runtime Compiler "
"(MCR) for compiling and linking matlab extensions."
msgstr "FindMatlab 模块现在支持用于编译和链接 matlab 扩展的 Matlab 运行时编译器 (MCR)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:175
msgid ""
"A :module:`FindODBC` module was added to find an Open Database "
"Connectivity (ODBC) library."
msgstr "添加了 :module:`FindODBC` 模块以查找开放式数据库连接 (ODBC) 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:178
msgid ""
"The :module:`FindPkgConfig` module has learned to export the found "
"libraries with full path for direct consumption with the "
":command:`target_link_libraries` command."
msgstr ""
":module:`FindPkgConfig` 模块已经学会使用 :command:`target_link_libraries` "
"命令导出具有完整路径的找到的库以供直接使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:182
msgid ""
"New :module:`FindPython3` and :module:`FindPython2` modules, as well as a "
"new :module:`FindPython` module, have been added to provide a new way to "
"locate python environments."
msgstr ""
"添加了新的 :module:`FindPython3` 和 :module:`FindPython2` 模块，以及一个新的 "
":module:`FindPython` 模块，以提供一种定位 python 环境的新方法。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:186
msgid ""
"The :module:`UseSWIG` module gained a whole refresh and is now more "
"consistent with standard CMake commands to generate libraries and is fully"
" configurable through properties."
msgstr ""
":module:`UseSWIG` 模块进行了全面更新，现在与用于生成库的标准 CMake 命令更加一致，并且可以通过属性进行完全配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:190
msgid ""
"The :module:`UseSWIG` module learned to manage multiple behaviors through "
"``UseSWIG_MODULE_VERSION`` variable to ensure legacy support as well as "
"more robust handling of ``SWIG`` advanced features (like ``%template``)."
msgstr ""
":module:`UseSWIG` 模块学会了通过``UseSWIG_MODULE_VERSION`` 变量管理多种行为，以确保遗留支持以及对 "
"``SWIG`` 高级功能（如 ``%template``）的更健壮的处理。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:194
msgid ""
"The :module:`UseSWIG` module learned to support CSHARP variant wrapper "
"files."
msgstr ":module:`UseSWIG` 模块学会了支持 CSHARP 变体包装文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:197
msgid ""
"The :module:`WriteCompilerDetectionHeader` module gained a "
"``BARE_FEATURES`` option to add a compatibility define for the exact "
"keyword of a new language feature."
msgstr ""
":module:`WriteCompilerDetectionHeader` 模块获得了一个 `BARE_FEATURES`` "
"选项，可以为新语言特性的确切关键字添加兼容性定义。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:204
msgid ""
"A new ``$<GENEX_EVAL:...>`` and ``$<TARGET_GENEX_EVAL:target,...>`` "
":manual:`generator expression <cmake-generator-expressions(7)>` has been "
"added to enable consumption of generator expressions whose evaluation "
"results itself in generator expressions."
msgstr ""
"新的``$<GENEX_EVAL:...>`` 和``$<TARGET_GENEX_EVAL:target,...>`` "
":manual:`generator expression <cmake-generator-expressions(7)>` "
"已被添加到启用生成器表达式的使用，其评估结果本身就是生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:209
msgid ""
"A new ``$<IN_LIST:...>`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` has been added."
msgstr ""
"添加了一个新的``$<IN_LIST:...>``:manual:`generator expression <cmake-generator-"
"expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:213
msgid ""
"A new ``$<TARGET_EXISTS:...>`` :manual:`generator expression <cmake-"
"generator-expressions(7)>` has been added."
msgstr ""
"添加了一个新的``$<TARGET_EXISTS:...>``:manual:`generator expression <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:217
msgid ""
"A new ``$<TARGET_NAME_IF_EXISTS:...>`` :manual:`generator expression "
"<cmake-generator-expressions(7)>` has been added."
msgstr ""
"添加了一个新的``$<TARGET_NAME_IF_EXISTS:...>``:manual:`generator expression "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:224
msgid ""
"The :command:`ctest_start` command has been reworked so that you can "
"simply call ``ctest_start(APPEND)`` and it will read all the needed "
"information from the TAG file. The argument parsing has also been relaxed "
"so that the order of the arguments is less significant."
msgstr ""
":command:`ctest_start` 命令已经过修改，您只需调用 ``ctest_start(APPEND)`` 即可从 TAG "
"文件中读取所有需要的信息。参数解析也已放宽，因此参数的顺序不那么重要。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:229
msgid ""
"A :prop_test:`PROCESSOR_AFFINITY` test property was added to request that "
"CTest run a test with CPU affinity for a set of processors disjoint from "
"other concurrently running tests with the property set."
msgstr ""
"添加了 :prop_test:`PROCESSOR_AFFINITY` 测试属性，以请求 CTest 对一组处理器运行具有 CPU "
"亲和力的测试，这些处理器与具有该属性集的其他同时运行的测试不相交。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:236
msgid ""
"The :module:`CPack` module now uses variables "
":variable:`CMAKE_PROJECT_VERSION_MAJOR`, "
":variable:`CMAKE_PROJECT_VERSION_MINOR` and "
":variable:`CMAKE_PROJECT_VERSION_PATCH` to initialize corresponding CPack "
"variables."
msgstr ""
":module:`CPack` "
"模块现在使用变量 :variable:`CMAKE_PROJECT_VERSION_MAJOR`、 :variable:`CMAKE_PROJECT_VERSION_MINOR`"
" 和 :variable:`CMAKE_PROJECT_VERSION_PATCH` 来初始化相应的 CPack 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:242
msgid ""
"A :cpack_gen:`CPack NuGet Generator` was was added with basic support for "
"`NuGet`_."
msgstr "添加了 :cpack_gen:`CPack NuGet Generator`，对 `NuGet`_ 提供基本支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:250
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of C++ 20.  No specific features are yet enumerated besides "
"the ``cxx_std_20`` meta-feature."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 C++ 20。除了 "
"``cxx_std_20`` 元功能之外，尚未列举任何具体功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:254
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of the availability of C features in MSVC since VS 2010."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在知道自 VS 2010 以来 "
"MSVC 中 C 功能的可用性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:257
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of C language standards supported by Texas Instruments C "
"compilers."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 Texas "
"Instruments C 编译器支持的 C 语言标准。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:264
msgid "The :generator:`Visual Studio 8 2005` generator has been removed."
msgstr ":generator:`Visual Studio 8 2005` 生成器已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:266
msgid ""
"CMake no longer produces ``<tgt>_LIB_DEPENDS`` cache entries for library "
"targets.  See policy :policy:`CMP0073`."
msgstr "CMake 不再为库目标生成 ``<tgt>_LIB_DEPENDS`` 缓存条目。请参阅政策:policy:`CMP0073`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:272
msgid ""
"Include flags for directories marked as ``SYSTEM`` are now moved after "
"non-system directories.  The ``-isystem`` flag does this automatically, so"
" moving them explicitly to the end makes the behavior consistent on "
"compilers that do not have any ``-isystem`` flag."
msgstr ""
"标记为“SYSTEM”的目录的包含标志现在移到非系统目录之后。 ``-isystem`` "
"标志会自动执行此操作，因此将它们显式移动到末尾会使行为在没有任何``-isystem`` 标志的编译器上保持一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:277
msgid ""
"Fortran dependency scanning now supports dependencies implied by `Fortran "
"Submodules`_."
msgstr "Fortran 依赖项扫描现在支持“Fortran 子模块”隐含的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:280
msgid ""
"The existence and functionality of the file "
"``${CMAKE_BINARY_DIR}/cmake_install.cmake`` has now been documented in the"
" :command:`install` documentation so that external packaging software can "
"take advantage of CPack-style component installs."
msgstr ""
"文件``${CMAKE_BINARY_DIR}/cmake_install.cmake`` "
"的存在和功能现在已记录在 :command:`install` 文档中，以便外部打包软件可以利用 CPack 样式的组件安装。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:285
msgid ""
"The :module:`CheckIncludeFile` module ``check_include_file`` macro learned"
" to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable. See policy "
":policy:`CMP0075`."
msgstr ""
":module:`CheckIncludeFile` 模块 ``check_include_file`` 宏学会了遵守 "
"``CMAKE_REQUIRED_LIBRARIES`` 变量。请参阅政策:policy:`CMP0075`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:289
msgid ""
"The :module:`CheckIncludeFileCXX` module ``check_include_file_cxx`` macro "
"learned to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable. See policy "
":policy:`CMP0075`."
msgstr ""
":module:`CheckIncludeFileCXX` 模块 ``check_include_file_cxx`` 宏学会了遵守 "
"``CMAKE_REQUIRED_LIBRARIES`` 变量。请参阅政策:policy:`CMP0075`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:293
msgid ""
"The :module:`CheckIncludeFiles` module ``check_include_files`` macro "
"learned to honor the ``CMAKE_REQUIRED_LIBRARIES`` variable. See policy "
":policy:`CMP0075`."
msgstr ""
":module:`CheckIncludeFiles` 模块 ``check_include_files`` 宏学会了遵守 "
"``CMAKE_REQUIRED_LIBRARIES`` 变量。请参阅政策:policy:`CMP0075`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:297
msgid ""
"The :manual:`cmake(1)` ``-E copy_directory`` tool now fails when the "
"source directory does not exist.  Previously it succeeded by creating an "
"empty destination directory."
msgstr ""
":manual:`cmake(1)` ``-E copy_directory`` 工具现在在源目录不存在时失败。以前它通过创建一个空的目标目录成功。"

#: ../../cmake-prefix/src/cmake/Help/release/3.12.rst:301
msgid ""
"The :module:`UseSWIG` module :command:`swig_add_library` command (and "
"legacy ``swig_add_module`` command) now set the prefix of Java modules to "
"``\"\"`` for MINGW, MSYS, and CYGWIN environments."
msgstr ""
":module:`UseSWIG` module :command:`swig_add_library` 命令（和遗留的 "
"``swig_add_module`` 命令）现在为 MINGW、MSYS 和 CYGWIN 环境将 Java 模块的前缀设置为 ``\"\"``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:2
msgid "CMake 3.13 Release Notes"
msgstr "CMake 3.13 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:8
msgid "Changes made since CMake 3.12 include the following."
msgstr "自 CMake 3.12 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:16
msgid ""
"The :ref:`Visual Studio Generators` for VS 2010 and above learned to "
"support the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property and "
"supporting :module:`CheckIPOSupported` module."
msgstr ""
"VS 2010 及更高版本的 :ref:`Visual Studio Generators` 学会了支持 "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 目标属性和支持 "
":module:`CheckIPOsupported` 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:20
msgid ""
"The :generator:`Xcode` generator learned to configure more Xcode Scheme "
"fields.  See the :variable:`CMAKE_XCODE_GENERATE_SCHEME` variable."
msgstr ""
":generator:`Xcode` 生成器学会了配置更多 Xcode Scheme "
"字段。请参阅 :variable:`CMAKE_XCODE_GENERATE_SCHEME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:23
#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:28
#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:20
msgid "The :generator:`Green Hills MULTI` generator has been updated:"
msgstr ":generator:`Green Hills MULTI` 生成器已更新："

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:25
msgid ""
"Added support for architecture selection through "
":variable:`CMAKE_GENERATOR_PLATFORM`: e.g. ``arm``, ``ppc``, and ``86``."
msgstr ""
"通过 CMAKE_GENERATOR_PLATFORM 添加了对体系结构选择的支持：例如``arm``、``ppc`` 和 ``86``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:29
msgid ""
"Added support for toolset selection through "
":variable:`CMAKE_GENERATOR_TOOLSET`, e.g. ``comp_201205``, "
"``comp_201510``, ``comp_201722_beta``."
msgstr ""
"通过 :variable:`CMAKE_GENERATOR_TOOLSET` "
"添加了对工具集选择的支持，例如``comp_201205``、``comp_201510``、``comp_201722_beta``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:33
msgid ""
"Added support for platform selection through ``GHS_TARGET_PLATFORM``, e.g."
" ``integrity``, ``linux``, ``standalone``, etc."
msgstr "通过``GHS_TARGET_PLATFORM`` 添加了对平台选择的支持，例如``完整性``，``linux``，``独立``等。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:36
msgid ""
"No longer checks that ``arm`` based compilers are installed but ensures "
"that the correct ``gbuild.exe`` exists."
msgstr "不再检查是否安装了基于“arm”的编译器，而是确保存在正确的“gbuild.exe”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:39
msgid "No longer hard-codes ARM files, BSP, toolset, or OS locations."
msgstr "不再对 ARM 文件、BSP、工具集或操作系统位置进行硬编码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:44
msgid ""
"The :manual:`cmake(1)` command gained the ``-S <source_dir>`` command line"
" option to specify the location of the source directory. This option can "
"be used independently of ``-B``."
msgstr ""
":manual:`cmake(1)` 命令获得了``-S <source_dir>`` 命令行选项来指定源目录的位置。此选项可以独立于“-B”使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:48
msgid ""
"The :manual:`cmake(1)` command gained the ``-B <build_dir>`` command line "
"option to specify the location of the build directory. This option can be "
"used independently of ``-S``."
msgstr ""
":manual:`cmake(1)` 命令获得了 ``-B <build_dir>`` "
"命令行选项来指定构建目录的位置。此选项可以独立于“-S”使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:52
msgid ""
"The :manual:`cmake(1)` ``-E create_symlink`` command can now be used on "
"Windows."
msgstr ":manual:`cmake(1)` ``-E create_symlink`` 命令现在可以在 Windows 上使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:58
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands learned to support generator expressions in ``WORKING_DIRECTORY``"
" options."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令学会了在 "
"``WORKING_DIRECTORY`` 选项中支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:61
msgid ""
"The :command:`add_link_options` command was created to add link options in"
" the current directory."
msgstr ":command:`add_link_options` 命令的创建是为了在当前目录中添加链接选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:64
msgid ""
"The :command:`install(TARGETS)` command learned to install targets created"
" outside the current directory."
msgstr ":command:`install(TARGETS)` 命令学会了安装在当前目录之外创建的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:67
msgid ""
"The :command:`link_directories` command gained options to control "
"insertion position."
msgstr ":command:`link_directories` 命令获得了控制插入位置的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:70
msgid ""
"The :command:`list(SORT)` command gained options to control the comparison"
" operation used to order the entries."
msgstr ":command:`list(SORT)` 命令获得了控制用于对条目排序的比较操作的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:73
msgid "The :command:`math` command gained options for hexadecimal."
msgstr ":command:`math` 命令获得了十六进制选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:75
msgid ""
"The :command:`target_link_directories` command was created to specify link"
" directories for targets and their dependents."
msgstr ":command:`target_link_directories` 命令的创建是为了指定目标及其依赖项的链接目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:78
msgid ""
"The :command:`target_link_options` command was created to specify link "
"options for targets and their dependents."
msgstr ":command:`target_link_options` 命令的创建是为了指定目标及其依赖项的链接选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:81
msgid ""
"The :command:`target_link_libraries` command may now be called to modify "
"targets created outside the current directory. See policy "
":policy:`CMP0079`."
msgstr ""
"现在可以调用 :command:`target_link_libraries` "
"命令来修改在当前目录之外创建的目标。请参阅政策:policy:`CMP0079`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:88
msgid ""
"A :variable:`CMAKE_AUTOGEN_VERBOSE` variable was added to optionally "
"increase the verbosity of :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC` and "
":prop_tgt:`AUTORCC` from within CMake project code."
msgstr ""
"添加了 :variable:`CMAKE_AUTOGEN_VERBOSE` 变量，以选择性地增加 CMake 项目代码中的 "
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` 的冗长程度。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:92
msgid ""
"A :variable:`CMAKE_VS_GLOBALS` variable was added to initialize "
":prop_tgt:`VS_GLOBAL_<variable>` target properties on targets as they are "
"created."
msgstr ""
"添加了 :variable:`CMAKE_VS_GLOBALS` 变量以在创建目标时初始化 "
":prop_tgt:`VS_GLOBAL_<variable>` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:99
msgid ""
"The :prop_tgt:`DEPLOYMENT_ADDITIONAL_FILES` target property was added to "
"tell the :generator:`Visual Studio 9 2008` generator to specify additional"
" files for deployment to WinCE devices for remote debugging."
msgstr ""
"添加了 :prop_tgt:`DEPLOYMENT_ADDITIONAL_FILES` 目标属性以告知 :generator:`Visual "
"Studio 9 2008` 生成器指定要部署到 WinCE 设备以进行远程调试的其他文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:104
msgid ""
"The :prop_tgt:`INTERFACE_LINK_DEPENDS` target property was created to "
"specify transitive link dependencies on files."
msgstr ":prop_tgt:`INTERFACE_LINK_DEPENDS` 目标属性的创建是为了指定文件的传递链接依赖性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:107
msgid ""
"The :prop_tgt:`LINK_DEPENDS` target property learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`LINK_DEPENDS` 目标属性学会了支持 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:110
msgid ""
":prop_tgt:`LINK_DIRECTORIES` and :prop_tgt:`INTERFACE_LINK_DIRECTORIES` "
"target properties were added to collect link directories for a target and "
"its dependents.  Use the :command:`target_link_directories` command to set"
" them."
msgstr ""
":prop_tgt:`LINK_DIRECTORIES` 和 :prop_tgt:`INTERFACE_LINK_DIRECTORIES` "
"目标属性已添加以收集目标及其依赖项的链接目录。使用 :command:`target_link_directories` 命令来设置它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:115
msgid ""
":prop_tgt:`LINK_OPTIONS` and :prop_tgt:`INTERFACE_LINK_OPTIONS` target "
"properties were added to collect link options for a target and its "
"dependents.  Use the :command:`target_link_options` command to set them."
msgstr ""
":prop_tgt:`LINK_OPTIONS` 和 :prop_tgt:`INTERFACE_LINK_OPTIONS` "
"目标属性已添加以收集目标及其依赖项的链接选项。使用 :command:`target_link_options` 命令来设置它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:119
msgid ""
"A :prop_dir:`LINK_OPTIONS` directory property was added to collect link "
"options for targets created under the current directory. Use the "
":command:`add_link_options` command to set it."
msgstr ""
"添加了 :prop_dir:`LINK_OPTIONS` 目录属性以收集在当前目录下创建的目标的链接选项。使用 "
":command:`add_link_options` 命令来设置它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:123
msgid ""
"A :prop_tgt:`STATIC_LIBRARY_OPTIONS` target property was created to "
"specify archiver options to use when creating static libraries."
msgstr "创建了 :prop_tgt:`STATIC_LIBRARY_OPTIONS` 目标属性以指定在创建静态库时要使用的存档器选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:126
msgid ""
"A :prop_tgt:`VS_DEBUGGER_COMMAND_ARGUMENTS` target property was created to"
" set the debugging command line arguments with :ref:`Visual Studio "
"Generators` for VS 2010 and above."
msgstr ""
"创建了 :prop_tgt:`VS_DEBUGGER_COMMAND_ARGUMENTS` 目标属性以使用 :ref:`Visual Studio "
"Generators` 为 VS 2010 及更高版本设置调试命令行参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:130
msgid ""
"A :prop_tgt:`VS_DEBUGGER_ENVIRONMENT` target property was created to set "
"the debugging environment with :ref:`Visual Studio Generators` for VS 2010"
" and above."
msgstr ""
":prop_tgt:`VS_DEBUGGER_ENVIRONMENT` 目标属性已创建，用于使用 VS 2010 及更高版本的 "
":ref:`Visual Studio Generators` 设置调试环境。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:134
msgid ""
"The :prop_tgt:`VS_DEBUGGER_COMMAND` and "
":prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` target properties now support "
"generator expressions."
msgstr ""
":prop_tgt:`VS_DEBUGGER_COMMAND` 和 "
":prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` 目标属性现在支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:141
msgid ""
"The :module:`FindBoost` module gained a ``Boost_ARCHITECTURE`` option to "
"specify a Boost architecture-specific library filename fragment."
msgstr ""
":module:`FindBoost` 模块获得了一个 ``Boost_ARCHITECTURE`` 选项来指定特定于 Boost "
"体系结构的库文件名片段。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:144
msgid ""
"The :module:`FindCURL` module learned to find debug and release variants "
"separately."
msgstr ":module:`FindCURL` 模块学会了分别查找调试和发布变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:147
msgid ""
"The :module:`FindMatlab` module gained new components ``ENGINE_LIBRARY`` "
"and ``DATAARRAY_LIBRARY`` to request finding the Matlab C++ Engine and "
"DataArray libraries respectively."
msgstr ""
"FindMatlab 模块获得了新组件 ENGINE_LIBRARY 和 DATAARRAY_LIBRARY 分别请求查找 Matlab C++ "
"引擎和 DataArray 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:151
msgid ""
"The :module:`FindMatlab` module now explicitly exports mexFunction in "
"Visual Studio."
msgstr "FindMatlab 模块现在在 Visual Studio 中显式导出 mexFunction。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:154
msgid ""
"The :module:`FindMatlab` module gained a new ``MCC_COMPILER`` component to"
" request finding the Matlab Compiler add-on."
msgstr ""
":module:`FindMatlab` 模块获得了一个新的 ``MCC_COMPILER`` 组件来请求查找 Matlab 编译器插件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:157
msgid ""
"The :module:`FindPkgConfig` module gained an option to create imported "
"targets in global scope."
msgstr ":module:`FindPkgConfig` 模块获得了在全局范围内创建导入目标的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:160
msgid ""
"The :module:`FindPkgConfig` module gained support for ``<`` and ``>`` "
"operators for version checks in addition to the already supported "
"operators ``>=``, ``<=``, and ``=``."
msgstr ""
"除了已经支持的操作符 ``>=``、``<=`` 和 `` 之外， :module:`FindPkgConfig` 模块还支持用于版本检查的 "
"``<`` 和 ``>`` 操作符=``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:164
msgid ""
"Modules :module:`FindPython3`, :module:`FindPython2` and "
":module:`FindPython` gain capability to control order of resource lookup "
"on macOS (Framework) and Windows (Registry)."
msgstr ""
"模块 :module:`FindPython3`、模块：`FindPython2` 和 :module:`FindPython` 获得控制 macOS（框架）和 "
"Windows（注册表）上资源查找顺序的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:168
msgid ""
"The :module:`FindSubversion` module ``Subversion_WC_INFO`` command gained "
"an ``IGNORE_SVN_FAILURE`` option to suppress failures, e.g. when the "
"source tree is not under Subversion control."
msgstr ""
":module:`FindSubversion` 模块 ``Subversion_WC_INFO`` 命令获得了 "
"``IGNORE_SVN_FAILURE`` 选项来抑制失败，例如当源代码树不受 Subversion 控制时。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:172
msgid ""
"The :module:`UseSWIG` module learned to manage target property "
":prop_tgt:`INCLUDE_DIRECTORIES` for ``SWIG`` compilation."
msgstr "UseSWIG 模块学会了管理目标属性 INCLUDE_DIRECTORIES 以进行 SWIG 编译。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:178
msgid ""
":manual:`ctest(1)` gained a ``--progress`` option to enable a live test "
"progress summary when output goes to a terminal."
msgstr ":manual:`ctest(1)` 获得了一个 ``--progress`` 选项，可以在输出到终端时启用实时测试进度摘要。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:184
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to split debug symbols into a"
" corresponding .ddeb package when ``CPACK_DEBIAN_DEBUGINFO_PACKAGE`` is "
"set."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了在设置 ``CPACK_DEBIAN_DEBUGINFO_PACKAGE``"
" 时将调试符号拆分为相应的 .ddeb 包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:188
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to honor the "
"``SOURCE_DATE_EPOCH`` environment variable when packaging files.  This is "
"useful for generating reproducible packages."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了在打包文件时遵守 ``SOURCE_DATE_EPOCH`` "
"环境变量。这对于生成可重现的包很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:192
msgid ""
"CPack gained a new :cpack_gen:`CPack External Generator` which is used to "
"export the CPack metadata in a format that other software can understand. "
"The intention of this generator is to allow external packaging software to"
" take advantage of CPack's features when it may not be possible to use "
"CPack for the entire packaging process."
msgstr ""
"CPack 获得了一个新的 CPack 外部生成器，用于以其他软件可以理解的格式导出 CPack "
"元数据。该生成器的目的是允许外部打包软件在可能无法在整个打包过程中使用 CPack 时利用 CPack 的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:201
msgid ""
"An explicit deprecation diagnostic was added for policies ``CMP0055`` "
"through ``CMP0063`` (``CMP0054`` and below were already deprecated). The "
":manual:`cmake-policies(7)` manual explains that the OLD behaviors of all "
"policies are deprecated and that projects should port to the NEW "
"behaviors."
msgstr ""
"为策略“CMP0055”到“CMP0063”添加了明确的弃用诊断（“CMP0054”及以下已弃用）。 :manual:`cmake-"
"policies(7)` 手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:210
msgid ""
"The precompiled binaries provided on ``cmake.org`` now include qthelp-"
"format documentation."
msgstr "``cmake.org`` 上提供的预编译二进制文件现在包括 qthelp-format 文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:213
msgid ""
"The :command:`option` command now honors an existing normal variable of "
"the same name and does nothing instead of possibly creating a cache entry "
"(or setting its type) and removing the normal variable. See policy "
":policy:`CMP0077`."
msgstr ""
":command:`option` "
"命令现在支持同名的现有普通变量并且不执行任何操作，而不是可能创建缓存条目（或设置其类型）并删除普通变量。请参阅政策:policy:`CMP0077`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:218
msgid ""
"The :ref:`Makefile Generators` learned to remove custom command and custom"
" target byproducts during ``make clean``."
msgstr ":ref:`Makefile Generators` 学会了在 ``make clean`` 期间删除自定义命令和自定义目标副产品。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:221
msgid ""
"The :command:`target_sources` command now interprets relative source file "
"paths as relative to the current source directory.  This simplifies "
"incrementally building up a target's sources from subdirectories.  The "
":policy:`CMP0076` policy was added to provide backward compatibility with "
"the old behavior where required."
msgstr ""
":command:`target_sources` "
"命令现在将相对源文件路径解释为相对于当前源目录。这简化了从子目录逐步构建目标源的过程。添加了 :policy:`CMP0076` "
"策略以在需要时提供与旧行为的向后兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:227
msgid ""
"The :module:`BundleUtilities` module may no longer be included at "
"configure time. This was always a bug anyway. See policy "
":policy:`CMP0080`."
msgstr ""
":module:`BundleUtilities` 模块可能不再包含在配置时。无论如何，这始终是一个错误。请参阅政策:policy:`CMP0080`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:230
msgid ""
"The :module:`UseSWIG` module has changed strategy for target naming. See "
"policy :policy:`CMP0078`."
msgstr ":module:`UseSWIG` 模块更改了目标命名策略。请参阅政策:policy:`CMP0078`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:233
msgid ""
"The :prop_tgt:`LINK_DIRECTORIES` target property now expects absolute "
"paths. See policy :policy:`CMP0081`."
msgstr ":prop_tgt:`LINK_DIRECTORIES` 目标属性现在需要绝对路径。请参阅政策:policy:`CMP0081`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:236
msgid ""
"The CPack generators have been moved into their own separate section in "
"the documentation, rather than having the documentation in their internal "
"implementation modules. These internal implementation modules are also no "
"longer available to scripts that may have been incorrectly including them,"
" because they should never have been available in the first place."
msgstr ""
"CPack "
"生成器已移至文档中它们自己单独的部分，而不是将文档放在其内部实现模块中。这些内部实现模块也不再对可能错误包含它们的脚本可用，因为它们本来就不应该可用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:246
msgid "Changes made since CMake 3.13.0 include the following."
msgstr "自 CMake 3.13.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:249
msgid "3.13.2"
msgstr "3.13.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:251
msgid ""
"CMake 3.13.0 included a change to pass compiler implicit include "
"directories to the ``moc`` tool for :prop_tgt:`AUTOMOC`.  This has been "
"reverted due to regressing existing builds and will need further "
"investigation before being re-introduced in a later release."
msgstr ""
"CMake 3.13.0 包含一项更改，将编译器隐式包含目录传递给 :prop_tgt:`AUTOMOC` 的``moc`` "
"工具。由于退化现有版本，这已被恢复，并且需要进一步调查才能在以后的版本中重新引入。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:257
msgid "3.13.3"
msgstr "3.13.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:259
msgid ""
"The :generator:`Visual Studio 15 2017` generator has been fixed to work "
"when VS 2019 is installed."
msgstr ":generator:`Visual Studio 15 2017` 生成器已修复，可以在安装 VS 2019 时正常工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:262
msgid ""
"CMake now checks that at least one of the source or binary directory is "
"specified when running CMake and issues an error if both are missing. This"
" has always been a documented requirement, but the implementation "
"previously accidentally accepted cases in which neither are specified so "
"long as some other argument is given, and silently used the current "
"working directory as the source and build tree."
msgstr ""
"CMake 现在会检查在运行 CMake "
"时是否至少指定了源目录或二进制目录之一，如果两者都缺失，则会发出错误消息。这一直是一个记录在案的要求，但是以前的实现意外地接受了只要给出一些其他参数就没有指定任何一个的情况，并且默默地使用当前工作目录作为源和构建树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:270
msgid "3.13.4"
msgstr "3.13.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:272
msgid ""
"The error added by 3.13.3 in cases that neither a source or binary "
"directory is specified has been downgraded to a warning.  While this was "
"never intended, documented, nor supported behavior, some projects relied "
"on it.  The error has been downgraded to a warning for the remainder of "
"the 3.13.x release series to allow a transition period, but it may become "
"a fatal error again in a later release.  Scripts relying on the old "
"behavior can be trivially fixed by specifying the path to the source tree "
"(even if just ``.``) explicitly and continue to work with all versions of "
"CMake."
msgstr ""
"3.13.3 "
"在未指定源目录或二进制目录的情况下添加的错误已降级为警告。虽然这从来都不是有意的、记录的或支持的行为，但一些项目依赖于它。该错误已降级为 "
"3.13.x "
"版本系列其余部分的警告，以允许过渡期，但在以后的版本中它可能再次成为致命错误。依赖于旧行为的脚本可以通过明确指定源代码树的路径（即使只是 "
"``.``）来轻松修复，并继续与所有版本的 CMake 一起工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:283
msgid "3.13.5"
msgstr "3.13.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.13.rst:285
msgid ""
"In CMake 3.13.0 through 3.13.4, calling :command:`target_link_libraries` "
"to add ``PRIVATE`` dependencies to a static library created in another "
"directory (under policy :policy:`CMP0079` ``NEW`` behavior) would "
"incorrectly propagate usage requirements of those dependencies to "
"dependents that link the static library.  This has been fixed."
msgstr ""
"在 CMake 3.13.0 到 3.13.4 中，调用 :command:`target_link_libraries` 将 "
"``PRIVATE`` 依赖项添加到在另一个目录中创建的静态库（根据策略 :policy:`CMP0079` ``NEW`` "
"行为）会错误地将这些依赖项的使用要求传播到链接静态库的依赖项。这已得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:2
msgid "CMake 3.14 Release Notes"
msgstr "CMake 3.14 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:8
msgid "Changes made since CMake 3.13 include the following."
msgstr "自 CMake 3.13 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:16
msgid ""
"The :generator:`Visual Studio 16 2019` generator was added.  This is "
"experimental and based on \"Visual Studio 2019 Preview 4\" because this "
"version of VS has not been released."
msgstr ""
"添加了 :generator:`Visual Studio 16 2019` 生成器。这是实验性的，基于“Visual Studio 2019 "
"Preview 4”，因为这个版本的 VS 还没有发布。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:20
msgid ""
"The VS 2019 generator differs from generators for earlier versions in that"
" it does not provide variants that specify the target platform in the "
"generator name.  Instead :variable:`CMAKE_GENERATOR_PLATFORM` must be "
"used, e.g. through the ``-A`` command-line option.  Furthermore, the "
"default target platform (architecture) is now based on the *host* "
"platform.  The VS host toolset selection is now based on the host "
"architecture as well."
msgstr ""
"VS 2019 "
"生成器不同于早期版本的生成器，因为它不提供在生成器名称中指定目标平台的变体。相反，必须使用 :variable:`CMAKE_GENERATOR_PLATFORM`，例如通过“-A”命令行选项。此外，默认目标平台（架构）现在基于"
" *host* 平台。 VS 主机工具集选择现在也基于主机体系结构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:30
msgid "Now supports :ref:`Object Libraries`."
msgstr "现在支持 :ref:`Object Libraries`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:32
msgid "Now warns on unsupported project types such as shared libraries."
msgstr "现在警告不支持的项目类型，例如共享库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:34
msgid ""
"Now generates a top-level ``<PROJECT-NAME>.top.gpj`` for each directory "
"calling the :command:`project` command.  The top-level project file "
"``default.gpj`` is no longer created."
msgstr ""
"现在为调用 :command:`project` 命令的每个目录生成一个顶级``<PROJECT-"
"NAME>.top.gpj``。不再创建顶级项目文件“default.gpj”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:38
msgid ""
"Now honors target renaming and destination output control properties such "
"as :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` and :prop_tgt:`OUTPUT_NAME`. This "
"also fixes support for installation rules generated by :command:`install`."
msgstr ""
"现在支持目标重命名和目标输出控制属性，例如:prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` 和 "
":prop_tgt:`OUTPUT_NAME`。这也修复了对 :command:`install` 生成的安装规则的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:43
msgid ""
"Now honors source file properties :prop_sf:`INCLUDE_DIRECTORIES`, "
":prop_sf:`COMPILE_DEFINITIONS`, and :prop_sf:`COMPILE_OPTIONS`."
msgstr ""
"现在支持源文件属性 :prop_sf:`INCLUDE_DIRECTORIES`、 :prop_sf:`COMPILE_DEFINITIONS` 和 "
":prop_sf:`COMPILE_OPTIONS`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:46
msgid ""
"Now supports Dynamic Download Integrity Applications which did not include"
" Integrate Files via :prop_tgt:`GHS_INTEGRITY_APP` and setting a target "
"link flag of ``-dynamic``."
msgstr "现在支持不通过 GHS_INTEGRITY_APP 集成文件并设置目标链接标志为“-dynamic”的动态下载完整性应用程序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:50
msgid ""
"The contents of project files now sorts sources groups and files by name. "
"Set the :prop_tgt:`GHS_NO_SOURCE_GROUP_FILE` target property to ``ON`` to "
"generate a single project file for the target instead of a project file "
"for each source group.  Set the :variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE`"
" variable to enable this for all targets."
msgstr ""
"项目文件的内容现在按名称对源组和文件进行排序。将 :prop_tgt:`GHS_NO_SOURCE_GROUP_FILE` 目标属性设置为 "
"``ON`` 为目标生成单个项目文件，而不是为每个源组生成一个项目文件。设置 "
":variable:`CMAKE_GHS_NO_SOURCE_GROUP_FILE` 变量以为所有目标启用此功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:57
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:73
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:76
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:77
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:75
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:36
msgid "File-Based API"
msgstr "基于文件的 API"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:59
msgid ""
"A file-based api for clients to get semantic buildsystem information has "
"been added.  See the :manual:`cmake-file-api(7)` manual. This is intended "
"to replace the :manual:`cmake-server(7)` mode for IDEs."
msgstr ""
"添加了一个基于文件的 api，供客户端获取语义构建系统信息。请参阅 :manual:`cmake-file-api(7)` 手册。这旨在取代 IDE "
"的 :manual:`cmake-server(7)` 模式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:66
msgid ""
"CMake now supports :ref:`Cross Compiling for iOS, tvOS, or watchOS` using "
"simple toolchain files."
msgstr "CMake 现在支持使用简单的工具链文件对 iOS、tvOS 或 watchOS 进行交叉编译。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:72
msgid ""
"The :manual:`cmake(1)` :ref:`Build Tool Mode <Build Tool Mode>` (``cmake "
"--build``) gained ``--verbose`` and ``-v`` options to specify verbose "
"build output. Some generators such as Xcode don't support this option "
"currently."
msgstr ""
":manual:`cmake(1)` :ref:`Build Tool Mode <Build Tool Mode>` (``cmake "
"--build``) 获得了 ``--verbose`` 和 ``-v`` 选项指定详细的构建输出。 Xcode 等一些生成器目前不支持此选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:77
msgid ""
"The :manual:`cmake(1)` ``-E compare_files`` command learned a new "
"``--ignore-eol`` option to specify that end-of-line differences (e.g. LF "
"vs CRLF) should be ignored when comparing files."
msgstr ""
":manual:`cmake(1)` ``-E compare_files`` 命令学习了一个新的 ``--ignore-eol`` "
"选项来指定行尾差异（例如 LF 与 CRLF）应该被忽略当比较文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:81
msgid ""
"The :manual:`cmake-gui(1)` dialog gained new ``-S`` and ``-B`` arguments "
"to explicitly specify source and build directories."
msgstr ":manual:`cmake-gui(1)` 对话框获得了新的 ``-S`` 和 ``-B`` 参数以显式指定源和构建目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:87
msgid ""
"The :command:`file` command learned a new sub-command, ``CREATE_LINK``, "
"which can be used to create hard or symbolic links."
msgstr ":command:`file` 命令学习了一个新的子命令，``CREATE_LINK``，可用于创建硬链接或符号链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:90
msgid ""
"The :command:`file` command learned a new sub-command, ``READ_SYMLINK``, "
"which can be used to determine the path that a symlink points to."
msgstr ":command:`file` 命令学习了一个新的子命令 ``READ_SYMLINK``，它可用于确定符号链接指向的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:93
msgid ""
"The :command:`file` command gained a ``SIZE`` mode to get the size of a "
"file on disk."
msgstr ":command:`file` 命令获得了 ``SIZE`` 模式来获取磁盘上文件的大小。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:96
msgid ""
"The :command:`find_package` command learned to optionally resolve symbolic"
" links in the paths to package configuration files. See the "
":variable:`CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS` variable."
msgstr ""
":command:`find_package` "
"命令学会了选择性地解析路径中的符号链接到包配置文件。请参阅 :variable:`CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:100
msgid ""
"The :command:`get_filename_component` command gained new ``LAST_EXT`` and "
"``NAME_WLE`` variants to work with the extension after the last ``.`` in "
"the name."
msgstr ""
":command:`get_filename_component` 命令获得了新的 ``LAST_EXT`` 和 ``NAME_WLE`` "
"变体，以处理名称中最后一个 ``.`` 之后的扩展名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:104
msgid ""
"The :command:`if` command gained support for checking if cache variables "
"are defined with the  ``DEFINED CACHE{VAR}`` syntax."
msgstr ":command:`if` 命令支持检查缓存变量是否使用 ``DEFINED CACHE{VAR}`` 语法定义。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:107
msgid ""
"The :command:`install(CODE)` and :command:`install(SCRIPT)` commands "
"learned to support generator expressions.  See policy :policy:`CMP0087`."
msgstr ""
":command:`install(CODE)` 和 :command:`install(SCRIPT)` "
"命令学会了支持生成器表达式。请参阅政策:policy:`CMP0087`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:110
msgid ""
"The :command:`install(TARGETS)` command learned how to install to an "
"appropriate default directory for a given target type, based on variables "
"from the :module:`GNUInstallDirs` module and built-in defaults, in lieu of"
" a ``DESTINATION`` argument."
msgstr ""
":command:`install(TARGETS)` 命令学习了如何根据 GNUInstallDirs "
"模块中的变量和内置默认值，为给定的目标类型安装到适当的默认目录，代替 `` DESTINATION`` 参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:115
msgid ""
"The :command:`install(FILES)` and :command:`install(DIRECTORY)` commands "
"learned a new set of parameters for installing files as a file type, "
"setting the destination based on the appropriate variables from "
":module:`GNUInstallDirs` and built-in defaults, in lieu of a "
"``DESTINATION`` argument."
msgstr ""
":command:`install(FILES)` 和 :command:`install(DIRECTORY)` "
"命令学习了一组新的参数，用于将文件安装为文件类型，并根据来自 :module:`GNUInstallDirs` "
"的适当变量设置目标和内置默认值，代替``DESTINATION``参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:121
msgid ""
"The :command:`list` operations ``REMOVE_ITEM``, ``REMOVE_DUPLICATES``, "
"``SORT``, ``REVERSE``, and ``FILTER`` all now accept a non-existent "
"variable as the list since these operations on empty lists is also the "
"empty list."
msgstr ""
":command:`list` 操作 "
"``REMOVE_ITEM``、``REMOVE_DUPLICATES``、``SORT``、``REVERSE`` 和 ``FILTER`` "
"现在都接受一个不存在的变量作为列表，因为这些对空列表的操作也是空列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:125
msgid ""
"The :command:`list` operation ``REMOVE_AT`` now indicates that the given "
"indices are invalid for a non-existent variable or empty list."
msgstr ":command:`list` 操作 ``REMOVE_AT`` 现在指示给定的索引对于不存在的变量或空列表无效。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:128
msgid ""
"The :command:`try_compile` and :command:`try_run` commands gained a new "
"``LINK_OPTIONS`` option."
msgstr ""
":command:`try_compile` 和 :command:`try_run` 命令获得了一个新的 ``LINK_OPTIONS`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:134
msgid ""
"A :variable:`CMAKE_BUILD_RPATH_USE_ORIGIN` variable and corresponding "
":prop_tgt:`BUILD_RPATH_USE_ORIGIN` target property were added to enable "
"use of relative runtime paths (RPATHs). This helps achieving relocatable "
"and reproducible builds that are invariant of the build directory."
msgstr ""
"添加了 :variable:`CMAKE_BUILD_RPATH_USE_ORIGIN` 变量和相应的 "
":prop_tgt:`BUILD_RPATH_USE_ORIGIN` 目标属性以启用相对运行时路径 "
"(RPATH)。这有助于实现构建目录不变的可重定位和可重现构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:140
msgid ""
"A :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable was added for "
":ref:`Visual Studio Generators` to report their default platform used when"
" :variable:`CMAKE_GENERATOR_PLATFORM` is not set explicitly."
msgstr ""
"为 Visual Studio Generators 添加了 CMAKE_VS_PLATFORM_NAME_DEFAULT 变量，以报告在未明确设置"
" CMAKE_GENERATOR_PLATFORM 时使用的默认平台。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:147
msgid ""
"A :prop_gbl:`CMAKE_ROLE` global property was added to allow scripts to "
"determine whether they're running in project mode, script mode, find-"
"package mode, CTest, or CPack."
msgstr ""
"添加了 :prop_gbl:`CMAKE_ROLE` 全局属性，以允许脚本确定它们是在项目模式、脚本模式、查找包模式、CTest 还是 CPack "
"下运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:151
msgid ""
"The :prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target property is now "
"supported on shared library, module library, and executable targets.  "
"Previously it was only honored on static libraries."
msgstr ""
":prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` "
"目标属性现在在共享库、模块库和可执行目标上受支持。以前它只在静态库上受到尊重。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:155
msgid ""
"The :prop_tgt:`EXCLUDE_FROM_ALL` target property was created to override "
"the setting of its directory. A target will now be built as part of "
"\"all\" if its :prop_tgt:`EXCLUDE_FROM_ALL` property is set to ``OFF``, "
"even if its containing directory is marked as "
":prop_dir:`EXCLUDE_FROM_ALL`."
msgstr ""
":prop_tgt:`EXCLUDE_FROM_ALL` 目标属性的创建是为了覆盖其目录的设置。如果一个目标的 "
":prop_tgt:`EXCLUDE_FROM_ALL` 属性设置为 ``OFF``，那么即使它的包含目录被标记为 "
":prop_dir:`EXCLUDE_FROM_ALL`，目标现在也将被构建为“全部”的一部分。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:160
msgid ""
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` target property gains the "
"support of :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
":prop_tgt:`INTERFACE_POSITION_INDEPENDENT_CODE` 目标属性获得 :manual:`generator "
"expressions <cmake-generator-expressions(7)>` 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:166
msgid ""
"The family of modules to check capabilities (like "
":module:`CheckCSourceCompiles`) gain capability to manage "
"``LINK_OPTIONS``."
msgstr "检查功能的模块系列（如:module:`CheckCSourceCompiles`）获得管理``LINK_OPTIONS``的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:169
msgid ""
"A :module:`CheckFortranSourceRuns` module was added to provide a "
":command:`check_fortran_source_runs` command to check if a Fortran source "
"snippet compiles and runs."
msgstr ""
"添加了 :module:`CheckFortranSourceRuns` 模块以提供 "
":command:`check_fortran_source_runs` 命令来检查 Fortran 源代码片段是否编译和运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:173
msgid ""
"The :module:`CMakePackageConfigHelpers` module's "
":command:`write_basic_package_version_file` command gained a new "
"``ARCH_INDEPENDENT`` option for supporting architecture-independent "
"packages."
msgstr ""
":module:`CMakePackageConfigHelpers` "
"模块的 :command:`write_basic_package_version_file` 命令获得了一个新的 "
"``ARCH_INDEPENDENT`` 选项，用于支持独立于体系结构的包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:178
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command gained ``LOG_DIR`` and ``LOG_MERGED_STDOUTERR`` options to control"
" logging."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令获得了 "
"``LOG_DIR`` 和 ``LOG_MERGED_STDOUTERR`` 选项来控制日志记录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:181
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command gained ``LOG_PATCH`` to optionally log the patch step."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令获得了 "
"``LOG_PATCH`` 以选择性地记录补丁步骤。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:184
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command learned to apply ``SOURCE_SUBDIR`` when ``BUILD_IN_SOURCE`` is "
"also used. The ``BUILD_COMMAND`` is run in the given ``SOURCE_SUBDIR`` of "
"the ``SOURCE_DIR``."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令学会了在还使用 "
"``BUILD_IN_SOURCE`` 时应用 ``SOURCE_SUBDIR``。 ``BUILD_COMMAND`` 在 "
"``SOURCE_DIR`` 的给定 ``SOURCE_SUBDIR`` 中运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:189
msgid ""
"The :module:`FetchContent` module gained a new "
":command:`FetchContent_MakeAvailable` command.  It accepts a list of "
"dependency names, which it then iterates over, populating and adding each "
"one to the main build using the canonical pattern.  This significantly "
"reduces the amount of boilerplate needed in a project."
msgstr ""
":module:`FetchContent` 模块获得了一个新的 :command:`FetchContent_MakeAvailable` "
"命令。它接受依赖项名称列表，然后对其进行迭代，使用规范模式将每个依赖项名称填充并添加到主构建中。这显着减少了项目中所需的样板文件数量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:195
msgid ""
"The :module:`FindBISON` module's ``BISON_TARGET`` command now runs "
"``bison`` with :variable:`CMAKE_CURRENT_BINARY_DIR` as the working "
"directory. See policy :policy:`CMP0088`."
msgstr ""
"FindBISON 模块的 BISON_TARGET 命令现在以 CMAKE_CURRENT_BINARY_DIR 作为工作目录运行 "
"bison。请参阅政策:policy:`CMP0088`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:199
msgid ""
"The :module:`FindCURL` module gained support for requesting protocols as "
"package components."
msgstr ":module:`FindCURL` 模块获得了对请求协议作为包组件的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:202
msgid "The :module:`FindFontconfig` module was added to find `fontconfig`_."
msgstr "添加了 :module:`FindFontconfig` 模块以查找 `fontconfig`_。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:204
msgid "The :module:`FindGDAL` module now provides imported targets."
msgstr ":module:`FindGDAL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:206
msgid "The :module:`FindGIF` module now provides imported targets."
msgstr ":module:`FindGIF` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:208
msgid ""
"The :module:`FindGit` module now provides an imported target for the Git "
"executable."
msgstr ":module:`FindGit` 模块现在为 Git 可执行文件提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:211
msgid ""
"The :module:`FindIce` module learned to find ``slice2confluence`` and "
"``slice2matlab``."
msgstr ":module:`FindIce` 模块学会了查找 ``slice2confluence`` 和 ``slice2matlab``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:214
msgid "The :module:`FindLibinput` module was added to find `libinput`_."
msgstr "添加了 :module:`FindLibinput` 模块以查找 `libinput`_。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:216
msgid "The :module:`FindLibLZMA` module now provides imported targets."
msgstr ":module:`FindLibLZMA` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:218
msgid ""
"The :module:`FindMatlab` module gained new options ``R2017b`` and "
"``R2018a`` to specify the MEX API version to use; these options mirror the"
" new options to the ``mex`` command in MATLAB R2018a. The option "
"``MX_LIBRARY`` is no longer needed."
msgstr ""
":module:`FindMatlab` 模块获得了新选项 ``R2017b`` 和 ``R2018a`` 来指定要使用的 MEX API "
"版本；这些选项反映了 MATLAB R2018a 中“mex”命令的新选项。不再需要选项 ``MX_LIBRARY``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:223
msgid "The :module:`FindPostgreSQL` module now provides imported targets."
msgstr ":module:`FindPostgreSQL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:225
msgid ""
"The :module:`FindPython`, :module:`FindPython2`, and :module:`FindPython3`"
" modules gained support for ``NumPy`` component."
msgstr "FindPython、FindPython2 和 FindPython3 模块获得了对 NumPy 组件的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:228
msgid ""
"The :module:`FindPython2`, :module:`FindPython3`, and :module:`FindPython`"
" modules now support running in script mode by skipping the creation of "
"imported targets and helper functions."
msgstr "FindPython2、FindPython3 和 FindPython 模块现在支持通过跳过导入目标和辅助函数的创建以脚本模式运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:232
msgid ""
"The :module:`FindSQLite3` module was added to find the SQLite v3.x "
"library."
msgstr "添加了 :module:`FindSQLite3` 模块以查找 SQLite v3.x 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:234
msgid ""
"The :module:`FindX11` had the following variables renamed in order to "
"match their library names rather than header names. The old variables are "
"provided for compatibility:"
msgstr ":module:`FindX11` 重命名了以下变量，以匹配它们的库名称而不是标头名称。提供旧变量是为了兼容性："

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:238
msgid ""
"``X11_Xxf86misc_INCLUDE_PATH`` instead of ``X11_xf86misc_INCLUDE_PATH``"
msgstr "``X11_Xxf86misc_INCLUDE_PATH`` 而不是 ``X11_xf86misc_INCLUDE_PATH``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:239
msgid "``X11_Xxf86misc_LIB`` instead of ``X11_xf86misc_LIB``"
msgstr "``X11_Xxf86misc_LIB`` 而不是 ``X11_xf86misc_LIB``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:240
msgid "``X11_Xxf86misc_FOUND`` instead of ``X11_xf86misc_FOUND``"
msgstr "``X11_Xxf86misc_FOUND`` 而不是 ``X11_xf86misc_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:241
msgid ""
"``X11_Xxf86vm_INCLUDE_PATH`` instead of ``X11_xf86vmode_INCLUDE_PATH``"
msgstr "``X11_Xxf86vm_INCLUDE_PATH`` 而不是 ``X11_xf86vmode_INCLUDE_PATH``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:242
msgid "``X11_Xxf86vm_LIB`` instead of ``X11_xf86vmode_LIB``"
msgstr "``X11_Xxf86vm_LIB`` 而不是 ``X11_xf86vmode_LIB``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:243
msgid "``X11_Xxf86vm_FOUND`` instead of ``X11_xf86vmode_FOUND``"
msgstr "``X11_Xxf86vm_FOUND`` 而不是 ``X11_xf86vmode_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:244
msgid "``X11_xkbfile_INCLUDE_PATH`` instead of ``X11_Xkbfile_INCLUDE_PATH``"
msgstr "``X11_xkbfile_INCLUDE_PATH`` 而不是 ``X11_Xkbfile_INCLUDE_PATH``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:245
msgid "``X11_xkbfile_LIB`` instead of ``X11_Xkbfile_LIB``"
msgstr "``X11_xkbfile_LIB`` 而不是 ``X11_Xkbfile_LIB``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:246
msgid "``X11_xkbfile_FOUND`` instead of ``X11_Xkbfile_FOUND``"
msgstr "``X11_xkbfile_FOUND`` 而不是 ``X11_Xkbfile_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:247
msgid "``X11_Xtst_INCLUDE_PATH`` instead of ``X11_XTest_INCLUDE_PATH``"
msgstr "``X11_Xtst_INCLUDE_PATH`` 而不是 ``X11_XTest_INCLUDE_PATH``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:248
msgid "``X11_Xtst_LIB`` instead of ``X11_XTest_LIB``"
msgstr "``X11_Xtst_LIB`` 而不是 ``X11_XTest_LIB``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:249
msgid "``X11_Xtst_FOUND`` instead of ``X11_XTest_FOUND``"
msgstr "``X11_Xtst_FOUND`` 而不是 ``X11_XTest_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:250
msgid ""
"``X11_Xss_INCLUDE_PATH`` instead of ``X11_Xscreensaver_INCLUDE_PATH``"
msgstr "``X11_Xss_INCLUDE_PATH`` 而不是 ``X11_Xscreensaver_INCLUDE_PATH``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:251
msgid "``X11_Xss_LIB`` instead of ``X11_Xscreensaver_LIB``"
msgstr "``X11_Xss_LIB`` 而不是 ``X11_Xscreensaver_LIB``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:252
msgid "``X11_Xss_FOUND`` instead of ``X11_Xscreensaver_FOUND``"
msgstr "``X11_Xss_FOUND`` 而不是 ``X11_Xscreensaver_FOUND``"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:254
msgid ""
"The following variables are deprecated completely since they were "
"essentially duplicates:"
msgstr "以下变量已完全弃用，因为它们本质上是重复的："

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:257
msgid "``X11_Xinput_INCLUDE_PATH`` (use ``X11_Xi_INCLUDE_PATH``)"
msgstr "``X11_Xinput_INCLUDE_PATH``（使用 ``X11_Xi_INCLUDE_PATH``）"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:258
msgid "``X11_Xinput_LIB`` (use ``X11_Xi_LIB``)"
msgstr "``X11_Xinput_LIB``（使用 ``X11_Xi_LIB``）"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:259
msgid "``X11_Xinput_FOUND`` (use ``X11_Xi_FOUND``)"
msgstr "``X11_Xinput_FOUND``（使用 ``X11_Xi_FOUND``）"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:261
msgid "The :module:`FindX11` now provides ``X11_Xext_INCLUDE_PATH``."
msgstr ":module:`FindX11` 现在提供 ``X11_Xext_INCLUDE_PATH``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:263
msgid "The :module:`FindX11` now provides imported targets."
msgstr ":module:`FindX11` 现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:265
msgid ""
"The :module:`UseSWIG` module learned to pass ``-module <module_name>`` to "
"the ``SWIG`` compiler if the file property ``SWIG_MODULE_NAME`` is "
"defined. See policy :policy:`CMP0086`."
msgstr ""
"如果定义了文件属性“SWIG_MODULE_NAME”，则 UseSWIG 模块学会了将“-module "
"<module_name>”传递给“SWIG”编译器。请参阅政策:policy:`CMP0086`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:269
msgid ""
"The :module:`UseSWIG` module gained an option to specify ``SWIG`` source "
"file extensions."
msgstr ":module:`UseSWIG` 模块获得了一个选项来指定 ``SWIG`` 源文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:278
msgid ""
"The ``$<Fortran_COMPILER_ID:...>`` and ``$<Fortran_COMPILER_VERSION:...>``"
" :manual:`generator expressions <cmake-generator-expressions(7)>` were "
"added."
msgstr ""
"添加了``$<Fortran_COMPILER_ID:...>`` 和``$<Fortran_COMPILER_VERSION:...>`` "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:281
msgid ""
"The ``$<IN_LIST:...>`` generator expression now correctly handles an empty"
" argument. See :policy:`CMP0085` for details."
msgstr "``$<IN_LIST:...>`` 生成器表达式现在可以正确处理空参数。有关详细信息，请参阅:policy:`CMP0085`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:287
msgid ""
"The :prop_tgt:`AUTOMOC_EXECUTABLE`, :prop_tgt:`AUTORCC_EXECUTABLE`, and "
":prop_tgt:`AUTOUIC_EXECUTABLE` target properties were added.  They all "
"take a path to an executable and force automoc/autorcc/autouic to use this"
" executable."
msgstr ""
"添加了 :prop_tgt:`AUTOMOC_EXECUTABLE`、 :prop_tgt:`AUTORCC_EXECUTABLE` 和 "
":prop_tgt:`AUTOUIC_EXECUTABLE` 目标属性。它们都采用指向可执行文件的路径并强制 "
"automoc/autorcc/autouic 使用该可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:292
msgid ""
"Setting these will also prevent the configure time testing for these "
"executables. This is mainly useful when you build these tools yourself."
msgstr "设置这些也会阻止对这些可执行文件的配置时间测试。当您自己构建这些工具时，这主要有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:295
msgid ""
"The new variables :variable:`CMAKE_GLOBAL_AUTOGEN_TARGET`, "
":variable:`CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`, "
":variable:`CMAKE_GLOBAL_AUTORCC_TARGET` and "
":variable:`CMAKE_GLOBAL_AUTORCC_TARGET_NAME` control the generation of "
"global ``autogen`` and ``autorcc`` targets."
msgstr ""
"新变量 :variable:`cmake_global_autogen_target`， :variable:`cmake_global_autogen_autogen_target_name`，:actible:cmake_global_autorcc_target'"
" `outorcc'目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:301
msgid ""
"A new :variable:`CMAKE_AUTOGEN_ORIGIN_DEPENDS` variable and "
":prop_tgt:`AUTOGEN_ORIGIN_DEPENDS` target property may be set to enable or"
" disable forwarding of the origin target dependencies to the corresponding"
" ``_autogen`` target."
msgstr ""
"一个新的 CMAKE_AUTOGEN_ORIGIN_DEPENDS 变量和 :prop_tgt:AUTOGEN_ORIGIN_DEPENDS "
"目标属性可以设置为启用或禁用将原始目标依赖项转发到相应的 _autogen 目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:309
msgid ""
":manual:`ctest(1)` gained a ``--show-only=json-v1`` option to show the "
"list of tests in a machine-readable JSON format. See the :ref:`Show as "
"JSON Object Model` section of the manual."
msgstr ""
":manual:`ctest(1)` 获得了一个 ``--show-only=json-v1`` 选项，以机器可读的 JSON "
"格式显示测试列表。请参阅手册的 :ref:`Show as JSON Object Model` 部分。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:313
msgid ""
"The :command:`ctest_submit` command learned a new ``Done`` part that can "
"be used to inform CDash that a build is complete and that no more parts "
"will be uploaded."
msgstr ""
":command:`ctest_submit` 命令学习了一个新的 ``Done`` 部分，可用于通知 CDash 构建已完成，不再上传更多部分。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:316
msgid ""
"CTest learned to accept the dashboard server submission URL from a single "
"variable.  See the ``SubmitURL`` setting in :manual:`ctest(1)`, the "
":variable:`CTEST_SUBMIT_URL` variable, and the ``SUBMIT_URL`` argument of "
"the :command:`ctest_submit` command."
msgstr ""
"CTest 学会了接受来自单个变量的仪表板服务器提交 URL。请参阅 ctest(1) 中的 SubmitURL "
"设置、CTEST_SUBMIT_URL 变量和 ctest_submit 命令的 SUBMIT_URL 参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:324
msgid ""
"An explicit deprecation diagnostic was added for policies ``CMP0064`` and "
"``CMP0065`` (``CMP0063`` and below were already deprecated). The "
":manual:`cmake-policies(7)` manual explains that the OLD behaviors of all "
"policies are deprecated and that projects should port to the NEW "
"behaviors."
msgstr ""
"为策略“CMP0064”和“CMP0065”添加了明确的弃用诊断（“CMP0063”及以下已弃用）。 :manual:`cmake-"
"policies(7)` 手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:330
msgid ""
"The :generator:`Xcode` generator deprecated support for Xcode versions "
"prior to Xcode 5.  Support for those will be dropped in a future version "
"of CMake."
msgstr ""
":generator:`Xcode` 生成器弃用了对 Xcode 5 之前的 Xcode 版本的支持。在未来的 CMake "
"版本中将不再支持这些版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:334
msgid ""
"The :module:`FindQt` module is no longer used by the "
":command:`find_package` command as a find module.  This allows the Qt "
"Project upstream to optionally provide its own ``QtConfig.cmake`` package "
"configuration file and have applications use it via ``find_package(Qt)`` "
"rather than ``find_package(Qt CONFIG)``.  See policy :policy:`CMP0084`."
msgstr ""
":module:`FindQt` 模块不再被 :command:`find_package` 命令用作查找模块。这允许上游的 Qt "
"项目有选择地提供自己的“QtConfig.cmake”包配置文件，并让应用程序通过“find_package(Qt)”而不是“find_package(Qt"
" CONFIG)”使用它。请参阅政策:policy:`CMP0084`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:340
msgid ""
"Support for running CMake on Windows XP and Windows Vista has been "
"dropped. The precompiled Windows binaries provided on ``cmake.org`` now "
"require Windows 7 or higher."
msgstr ""
"不再支持在 Windows XP 和 Windows Vista 上运行 CMake。 ``cmake.org`` 上提供的预编译 Windows "
"二进制文件现在需要 Windows 7 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:344
msgid ""
"CTest no longer supports submissions via ``ftp``, ``scp``, ``cp``, and "
"``xmlrpc``.  CDash is the only maintained testing dashboard for CTest, and"
" it only supports submissions over ``http`` and ``https``."
msgstr ""
"CTest 不再支持通过“ftp”、“scp”、“cp”和“xmlrpc”提交。 CDash 是 CTest 唯一维护的测试仪表板，它只支持通过 "
"``http`` 和 ``https`` 提交。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:351
msgid ""
"Object library linking has been fixed to propagate private link libraries "
"of object libraries to consuming targets."
msgstr "对象库链接已得到修复，可以将对象库的私有链接库传播到消费目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:354
msgid ""
"Install rules under :command:`add_subdirectory` now interleave with those "
"in the calling directory. See policy :policy:`CMP0082` for details."
msgstr ""
":command:`add_subdirectory` 下的安装规则现在与调用目录中的规则交错。有关详细信息，请参阅政策:policy:`CMP0082`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:357
msgid ""
"CMake now imposes a maximum recursion limit to prevent a stack overflow on"
" scripts that recurse infinitely. The limit can be adjusted at runtime "
"with :variable:`CMAKE_MAXIMUM_RECURSION_DEPTH`."
msgstr ""
"CMake 现在施加最大递归限制，以防止无限递归的脚本发生堆栈溢出。可以在运行时使用 CMAKE_MAXIMUM_RECURSION_DEPTH "
"调整限制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:361
msgid ""
"When using cppcheck via the :variable:`CMAKE_<LANG>_CPPCHECK` variable or "
":prop_tgt:`<LANG>_CPPCHECK` property, the build will now fail if "
"``cppcheck`` returns non-zero as configured by its command-line options."
msgstr ""
"当通过 :variable:`CMAKE_<LANG>_CPPCHECK` 变量或 :prop_tgt:`<LANG>_CPPCHECK` 属性使用"
" cppcheck 时，如果 ``cppcheck`` 按其命令行配置返回非零值，构建现在将失败选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:365
msgid ""
"Required link options to manage Position Independent Executable are now "
"added when :prop_tgt:`POSITION_INDEPENDENT_CODE` is set.  The project is "
"responsible for using the :module:`CheckPIESupported` module to check for "
"``PIE`` support to ensure that the :prop_tgt:`POSITION_INDEPENDENT_CODE` "
"target property will be honored at link time for executables.  This "
"behavior is controlled by policy :policy:`CMP0083`."
msgstr ""
"当设置 :prop_tgt:`POSITION_INDEPENDENT_CODE` 时，现在添加管理位置独立可执行文件所需的链接选项。该项目负责使用"
" CheckPIESupported 模块来检查 PIE 支持，以确保 POSITION_INDEPENDENT_CODE "
"目标属性在可执行文件的链接时得到遵守。此行为由策略 :policy:`CMP0083` 控制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:372
msgid ""
":ref:`Visual Studio Generators` for VS 2010 and above learned to support "
"the ``VS_DEBUGGER_*`` properties on targets created via "
":command:`add_custom_target`."
msgstr ""
"VS 2010 及更高版本的 Visual Studio Generators 学会了在通过 add_custom_target 创建的目标上支持 "
"VS_DEBUGGER_* 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:376
msgid ""
"The :module:`CPack` module no longer defaults to the ``paxr`` value in the"
" :variable:`CPACK_DEBIAN_ARCHIVE_TYPE` variable, because ``dpkg`` has "
"never supported the PAX tar format. The ``paxr`` value will be mapped to "
"``gnutar`` and a deprecation message emitted."
msgstr ""
":module:`CPack` 模块不再默认为 :variable:`CPACK_DEBIAN_ARCHIVE_TYPE` 变量中的 "
"``paxr`` 值，因为 ``dpkg`` 从不支持 PAX tar 格式。 ``paxr`` 值将映射到 ``gnutar`` 并发出弃用消息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:381
msgid ""
"CMake no longer issues a warning if a target listed in an "
":command:`install(TARGETS)` command has its :prop_tgt:`EXCLUDE_FROM_ALL` "
"property set to true."
msgstr ""
"如果 :command:`install(TARGETS)` 命令中列出的目标的 :prop_tgt:`EXCLUDE_FROM_ALL` "
"属性设置为 true，CMake 不再发出警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:388
msgid "Changes made since CMake 3.14.0 include the following."
msgstr "自 CMake 3.14.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:391
msgid "3.14.1"
msgstr "3.14.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:393
msgid ""
"The :module:`FindFontconfig` module added by 3.14.0 accidentally used "
"uppercase ``FONTCONFIG_*`` variable names that do not match our "
"conventions.  3.14.1 revises the module to use ``Fontconfig_*`` variable "
"names.  This is incompatible with 3.14.0 but since the module is new in "
"the 3.14 series usage should not yet be widespread."
msgstr ""
"3.14.0 添加的 :module:`FindFontconfig` 模块意外使用了不符合我们约定的大写 ``FONTCONFIG_*`` "
"变量名。 3.14.1 修改模块以使用 ``Fontconfig_*`` 变量名。这与 3.14.0 不兼容，但由于该模块是 3.14 "
"系列中的新模块，因此使用应该还不广泛。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:400
msgid "3.14.3"
msgstr "3.14.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:402
msgid ""
"The :variable:`CMAKE_VS_PLATFORM_NAME_DEFAULT` variable was added to help "
"toolchain files work with the :generator:`Visual Studio 16 2019` generator"
" where the default platform now depends on the host platform."
msgstr ""
"添加了 CMAKE_VS_PLATFORM_NAME_DEFAULT 变量以帮助工具链文件与 Visual Studio 16 2019 "
"生成器一起工作，其中默认平台现在取决于主机平台。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:407
msgid "3.14.4"
msgstr "3.14.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:409
msgid ""
"In CMake 3.14.0 through 3.14.3, calling :command:`target_link_libraries` "
"to add ``PRIVATE`` dependencies to a static library created in another "
"directory (under policy :policy:`CMP0079` ``NEW`` behavior) would "
"incorrectly propagate usage requirements of those dependencies to "
"dependents that link the static library.  This has been fixed. The bug "
"also existed in 3.13.0 through 3.13.4 and is fixed in 3.13.5."
msgstr ""
"在 CMake 3.14.0 到 3.14.3 中，调用 :command:`target_link_libraries` 将 "
"``PRIVATE`` 依赖项添加到在另一个目录中创建的静态库（根据策略 :policy:`CMP0079` ``NEW`` "
"行为）会错误地将这些依赖项的使用要求传播到链接静态库的依赖项。这已得到修复。该错误也存在于 3.13.0 到 3.13.4 中，并在 3.13.5 "
"中得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:417
msgid "3.14.5"
msgstr "3.14.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:419
msgid ""
"Entries of the ``CPATH`` environment variable are no longer excluded from "
"explicit use via :command:`include_directories` and "
":command:`target_include_directories` as they were in CMake 3.14.0 through"
" 3.14.4."
msgstr ""
"``CPATH`` 环境变量的条目不再像在 CMake 3.14.0 到 3.14.4 中那样通过 "
":command:`include_directories` 和 :command:`target_include_directories` "
"被显式使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:425
msgid "3.14.6"
msgstr "3.14.6"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:427
msgid ""
"In CMake 3.14.0 through 3.14.5, the :module:`FindBISON` module policy "
":policy:`CMP0088` ``NEW`` behavior accidentally interpreted a relative "
"path to the ``.y`` input as relative to the build tree directory instead "
"of the source tree directory.  This has been fixed."
msgstr ""
"在 CMake 3.14.0 到 3.14.5 中， :module:`FindBISON` 模块策略 :policy:`CMP0088` "
"``NEW`` 行为意外地将 ``.y`` 输入的相对路径解释为相对于构建树目录而不是源树目录。这已得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:433
msgid "3.14.7"
msgstr "3.14.7"

#: ../../cmake-prefix/src/cmake/Help/release/3.14.rst:435
msgid ""
"In CMake 3.14.0 through 3.14.6, the :prop_dir:`EXCLUDE_FROM_ALL` directory"
" property was regressed from pre-3.14 behavior and caused targets within "
"the directory to be excluded even from its own \"all\". This has been "
"fixed."
msgstr ""
"在 CMake 3.14.0 到 3.14.6 中， :prop_dir:`EXCLUDE_FROM_ALL` 目录属性从 3.14 "
"之前的行为中退化，导致目录中的目标甚至被排除在它自己的“全部”之外。这已得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:2
msgid "CMake 3.15 Release Notes"
msgstr "CMake 3.15 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:8
msgid "Changes made since CMake 3.14 include the following."
msgstr "自 CMake 3.14 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:16
msgid ""
"The :generator:`Xcode` generator now supports per-target schemes. See the "
":variable:`CMAKE_XCODE_GENERATE_SCHEME` variable and "
":prop_tgt:`XCODE_GENERATE_SCHEME` target property."
msgstr ""
":generator:`Xcode` 生成器现在支持每个目标方案。请参阅 "
":variable:`CMAKE_XCODE_GENERATE_SCHEME` 变量和 "
":prop_tgt:`XCODE_GENERATE_SCHEME` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:22
msgid ""
"It now supports the :command:`add_custom_command` and "
":command:`add_custom_target` commands."
msgstr ""
"它现在支持 :command:`add_custom_command` 和 :command:`add_custom_target` 命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:25
msgid "It is now available on Linux."
msgstr "它现在可以在 Linux 上使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:28
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:33
#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:41
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:25
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:38
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:28
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:14
msgid "Languages"
msgstr "语言"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:30
msgid ""
"Preliminary support for the ``Swift`` language was added to the "
":generator:`Ninja` generator:"
msgstr "对 ``Swift`` 语言的初步支持已添加到 :generator:`Ninja` 生成器中："

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:33
msgid "Use the :envvar:`SWIFTC` environment variable to specify a compiler."
msgstr "使用 :envvar:`SWIFTC` 环境变量指定编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:35
msgid ""
"The :prop_tgt:`Swift_DEPENDENCIES_FILE` target property and "
":prop_sf:`Swift_DEPENDENCIES_FILE` source file property were added to "
"customize dependency files."
msgstr ""
"添加了 :prop_tgt:`Swift_DEPENDENCIES_FILE` 目标属性和 "
":prop_sf:`Swift_DEPENDENCIES_FILE` 源文件属性以自定义依赖文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:39
msgid ""
"The :prop_tgt:`Swift_MODULE_NAME` target property was added to customize "
"the Swift module name."
msgstr "添加了 :prop_tgt:`Swift_MODULE_NAME` 目标属性以自定义 Swift 模块名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:42
msgid ""
"The :prop_sf:`Swift_DIAGNOSTICS_FILE` source property was added to "
"indicate where to write the serialized Swift diagnostics."
msgstr "添加了 :prop_sf:`Swift_DIAGNOSTICS_FILE` 源属性以指示在何处写入序列化的 Swift 诊断。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:45
msgid ""
"The Swift support is experimental, not considered stable, and may change "
"in future releases of CMake."
msgstr "Swift 支持是实验性的，不被认为是稳定的，并且可能会在未来的 CMake 版本中发生变化。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:49
#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:24
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:41
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:40
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:65
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:66
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:63
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:59
msgid "Compilers"
msgstr "编译器"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:51
msgid ""
"The ``Clang`` compiler variant on Windows that targets the MSVC ABI but "
"has a GNU-like command line is now supported."
msgstr "现在支持针对 MSVC ABI 但具有类似 GNU 命令行的 Windows 上的 ``Clang`` 编译器变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:54
msgid ""
"Support for the Clang-based ARM compiler was added with compiler id "
"``ARMClang``."
msgstr "添加了对基于 Clang 的 ARM 编译器的支持，编译器 ID 为“ARMClang”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:57
msgid ""
"Support was added for the IAR compiler architectures Renesas RX, RL78, "
"RH850 and Texas Instruments MSP430."
msgstr ""
"添加了对 IAR 编译器架构 Renesas RX、RL78、RH850 和 Texas Instruments MSP430 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:60
msgid ""
"Support was added for the IAR compilers built for Linux (IAR BuildLx)."
msgstr "添加了对为 Linux 构建的 IAR 编译器 (IAR BuildLx) 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:65
msgid ""
"The :envvar:`CMAKE_GENERATOR` environment variable was added to specify a "
"default generator to use when :manual:`cmake(1)` is run without a ``-G`` "
"option.  Additionally, environment variables "
":envvar:`CMAKE_GENERATOR_PLATFORM`, :envvar:`CMAKE_GENERATOR_TOOLSET`, and"
" :envvar:`CMAKE_GENERATOR_INSTANCE` were created to configure the "
"generator."
msgstr ""
"添加了 :envvar:`CMAKE_GENERATOR` 环境变量，以指定在运行 :manual:`cmake(1)` 时没有使用 ``-G`` "
"选项时使用的默认生成器。此外，还创建了环境变量 "
":envvar:`CMAKE_GENERATOR_PLATFORM`、 :envvar:`CMAKE_GENERATOR_TOOLSET` 和 "
":envvar:`CMAKE_GENERATOR_INSTANCE` 来配置生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:72
msgid ""
"The :manual:`cmake(1)` ``--build`` tool ``--target`` parameter gained "
"support for multiple targets, e.g. ``cmake --build . --target Library1 "
"Library2``. It now also has a short form ``-t`` alias, e.g. ``cmake "
"--build . -t Library1 Library2``."
msgstr ""
":manual:`cmake(1)` ``--build`` 工具 ``--target`` 参数获得了对多个目标的支持，例如``cmake "
"--build 。 --target Library1 Library2``。它现在也有一个简短的“-t”别名，例如``cmake --build "
"。 -t 图书馆 1 图书馆 2``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:77
msgid ""
"The :manual:`cmake(1)` command gained a new ``--install`` option. This may"
" be used after building a project to run installation without using the "
"generated build system or the native build tool."
msgstr ""
":manual:`cmake(1)` 命令获得了一个新的 ``--install`` "
"选项。这可以在构建项目后使用，以在不使用生成的构建系统或本机构建工具的情况下运行安装。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:81
msgid ""
"The :manual:`cmake(1)` command learned a new CLI option ``--loglevel``."
msgstr ":manual:`cmake(1)` 命令学习了一个新的 CLI 选项 ``--loglevel``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:83
msgid ""
"The :manual:`cmake(1)` ``-E remove_directory`` command-line tool learned "
"to support removing multiple directories."
msgstr ":manual:`cmake(1)` ``-E remove_directory`` 命令行工具学会了支持删除多个目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:86
msgid "The :manual:`cmake(1)` ``-E tar`` tool has been improved:"
msgstr ":manual:`cmake(1)` `-E tar`` 工具已得到改进："

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:88
msgid ""
"It now continues adding files to an archive even if some of the files are "
"not readable.  This behavior is more consistent with the classic ``tar`` "
"tool."
msgstr "它现在继续将文件添加到存档中，即使某些文件不可读。此行为与经典的“tar”工具更一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:92
msgid ""
"It now parses all flags, and if an invalid flag was provided, a warning is"
" issued."
msgstr "它现在解析所有标志，如果提供了无效标志，则会发出警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:95
msgid ""
"It now displays an error if no action flag was specified, along with a "
"list of possible actions: ``t`` (list), ``c`` (create) or ``x`` (extract)."
msgstr "如果未指定操作标志，它现在会显示错误，并显示可能的操作列表：``t``（列表）、``c``（创建）或 ``x``（提取）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:98
msgid ""
"It now supports extracting (``-x``) or listing (``-t``) only specific "
"files or directories."
msgstr "它现在支持仅提取（``-x``）或列出（``-t``）特定文件或目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:101
msgid ""
"It now supports Zstandard compression with a ``--zstd`` option. Zstandard "
"was designed to give a compression ratio comparable to that of the DEFLATE"
" (zip) algorithm, but faster, especially for decompression."
msgstr ""
"它现在支持带有 ``--zstd`` 选项的 Zstandard 压缩。 Zstandard 旨在提供与 DEFLATE (zip) "
"算法相当的压缩率，但速度更快，尤其是对于解压缩。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:108
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands gained a new ``JOB_POOL`` option that works with the "
":generator:`Ninja` generator to set the pool variable on the build "
"statement."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令获得了一个新的 "
"``JOB_POOL`` 选项，该选项与 :generator:`Ninja` 生成器一起使用以在构建语句中设置池变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:112
msgid ""
"The :command:`add_library` command ``ALIAS`` option learned to support "
"import libraries of the ``UNKNOWN`` type."
msgstr ":command:`add_library` 命令 ``ALIAS`` 选项学会了支持 ``UNKNOWN`` 类型的导入库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:115
msgid ""
"The :command:`cmake_parse_arguments` command gained an additional "
"``<prefix>_KEYWORDS_MISSING_VALUES`` output variable to report keyword "
"arguments that were given by the caller with no values."
msgstr ""
":command:`cmake_parse_arguments` "
"命令获得了一个额外的``<prefix>_KEYWORDS_MISSING_VALUES`` 输出变量来报告调用者提供的没有值的关键字参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:119
msgid ""
"The :command:`execute_process` command gained a ``COMMAND_ECHO`` option "
"and supporting :variable:`CMAKE_EXECUTE_PROCESS_COMMAND_ECHO` variable to "
"enable echoing of the command-line string before execution."
msgstr ""
":command:`execute_process` 命令获得了 ``COMMAND_ECHO`` 选项并支持 "
":variable:`CMAKE_EXECUTE_PROCESS_COMMAND_ECHO` 变量以在执行前启用命令行字符串的回显。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:123
msgid ""
"The :command:`file(INSTALL)` command learned a new argument, "
"``FOLLOW_SYMLINK_CHAIN``, which can be used to recursively resolve and "
"install symlinks."
msgstr ""
":command:`file(INSTALL)` "
"命令学习了一个新参数，``FOLLOW_SYMLINK_CHAIN``，可用于递归解析和安装符号链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:127
msgid ""
":command:`list` learned new sub-commands: ``PREPEND``, ``POP_FRONT`` and "
"``POP_BACK``."
msgstr ":command:`list` 学习了新的子命令：``PREPEND``、``POP_FRONT`` 和 ``POP_BACK``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:130
msgid ""
"The :command:`message` command learned new types: ``NOTICE``, ``VERBOSE``,"
" ``DEBUG`` and ``TRACE``."
msgstr ""
":command:`message` 命令学习了新类型：``NOTICE``、``VERBOSE``、``DEBUG`` 和 ``TRACE``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:133
msgid "The :command:`string` learned a new sub-command ``REPEAT``."
msgstr ":command:`string` 学习了一个新的子命令 ``REPEAT``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:138
msgid ""
"The :variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable and corresponding "
":prop_tgt:`CROSSCOMPILING_EMULATOR` target property learned to support "
"arguments to the emulator."
msgstr ""
":variable:`CMAKE_CROSSCOMPILING_EMULATOR` "
"变量和相应的 :prop_tgt:`CROSSCOMPILING_EMULATOR` 目标属性学会了支持模拟器的参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:142
msgid ""
"The :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable was added to "
"tell :command:`find_package` calls to look for a package configuration "
"file first even if a find module is available."
msgstr ""
"添加了 :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` 变量来告诉 "
":command:`find_package` 调用先查找包配置文件，即使查找模块可用也是如此。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:146
msgid ""
"The :variable:`CMAKE_FRAMEWORK` variable was added to initialize the "
":prop_tgt:`FRAMEWORK` property on all targets."
msgstr ""
"添加了 :variable:`CMAKE_FRAMEWORK` 变量以初始化所有目标上的 :prop_tgt:`FRAMEWORK` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:149
msgid ""
"The :variable:`CMAKE_VS_JUST_MY_CODE_DEBUGGING` variable and "
":prop_tgt:`VS_JUST_MY_CODE_DEBUGGING` target property were added to enable"
" the Just My Code feature of the Visual Studio Debugger when compiling "
"with MSVC cl 19.05 and higher."
msgstr ""
"添加了 :variable:`CMAKE_VS_JUST_MY_CODE_DEBUGGING` 变量和 "
":prop_tgt:`VS_JUST_MY_CODE_DEBUGGING` 目标属性，以便在使用 MSVC cl 19.05 "
"及更高版本进行编译时启用 Visual Studio 调试器的“仅我的代码”功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:154
msgid ""
"The :variable:`CMAKE_MSVC_RUNTIME_LIBRARY` variable and "
":prop_tgt:`MSVC_RUNTIME_LIBRARY` target property were introduced to select"
" the runtime library used by compilers targeting the MSVC ABI. See policy "
":policy:`CMP0091`."
msgstr ""
":variable:`CMAKE_MSVC_RUNTIME_LIBRARY` 变量和 "
":prop_tgt:`MSVC_RUNTIME_LIBRARY` 目标属性被引入以选择编译器使用的运行时库，目标是 MSVC "
"ABI。请参阅政策:policy:`CMP0091`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:159
msgid ""
"The :variable:`CMAKE_PROJECT_INCLUDE` and "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE` variables were added to allow "
"injection of custom code at the sites of :command:`project` calls without "
"knowing the project name a priori."
msgstr ""
"添加了 :variable:`CMAKE_PROJECT_INCLUDE` 和 "
":variable:`CMAKE_PROJECT_INCLUDE_BEFORE` 变量以允许在不知道项目名称的情况下在 "
":command:`project` 调用的站点注入自定义代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:167
msgid ""
"The :prop_tgt:`ADDITIONAL_CLEAN_FILES` target property and "
":prop_dir:`ADDITIONAL_CLEAN_FILES` directory property were added. They "
"allow to register additional files that should be removed during the clean"
" stage."
msgstr ""
"添加了 :prop_tgt:`ADDITIONAL_CLEAN_FILES` 目标属性和 "
":prop_dir:`ADDITIONAL_CLEAN_FILES` 目录属性。它们允许注册在清理阶段应删除的其他文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:172
msgid ""
"The :prop_tgt:`PUBLIC_HEADER` and :prop_tgt:`PRIVATE_HEADER` properties "
"may now be set on :ref:`Interface Libraries`. The headers specified by "
"those properties can be installed using the :command:`install(TARGETS)` "
"command by passing the ``PUBLIC_HEADER`` and ``PRIVATE_HEADER`` arguments "
"respectively."
msgstr ""
"现在可以在 :ref:`Interface Libraries` 上设置 :prop_tgt:`PUBLIC_HEADER` 和 "
":prop_tgt:`PRIVATE_HEADER` 属性。通过分别传递 ``PUBLIC_HEADER`` 和 "
"``PRIVATE_HEADER`` 参数，可以使用 :command:`install(TARGETS)` 命令安装由这些属性指定的标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:177
msgid ""
"The :prop_tgt:`VS_PACKAGE_REFERENCES` target property was added to tell "
":ref:`Visual Studio Generators` to add references to ``nuget`` packages."
msgstr ""
"添加了 :prop_tgt:`VS_PACKAGE_REFERENCES` 目标属性以告知 :ref:`Visual Studio "
"Generators` 添加对 ``nuget`` 包的引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:181
msgid ""
"The :prop_tgt:`VS_PROJECT_IMPORT` target property was added to allow "
"managed Visual Studio project files to import external ``.props`` files."
msgstr ""
"添加了 :prop_tgt:`VS_PROJECT_IMPORT` 目标属性以允许托管 Visual Studio 项目文件导入外部 "
"``.props`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:184
msgid ""
"The :prop_tgt:`VS_NO_SOLUTION_DEPLOY` target property was added to tell "
":ref:`Visual Studio Generators` whether to deploy an artifact to the WinCE"
" or Windows Phone target device."
msgstr ""
"添加了 :prop_tgt:`VS_NO_SOLUTION_DEPLOY` 目标属性以告知 :ref:`Visual Studio "
"Generators` 是否将工件部署到 WinCE 或 Windows Phone 目标设备。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:191
msgid ""
"The :module:`FindBoost` module was reworked to expose a more consistent "
"user experience between its \"Config\" and \"Module\" modes and with other"
" find modules in general."
msgstr ""
":module:`FindBoost` "
"模块经过重新设计，以在其“Config”和“Module”模式之间以及与其他一般查找模块之间提供更一致的用户体验。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:195
msgid ""
"A new imported target ``Boost::headers`` is now defined (same as "
"``Boost::boost``)."
msgstr "现在定义了一个新的导入目标“Boost::headers”（与“Boost::boost”相同）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:198
msgid ""
"New output variables ``Boost_VERSION_MACRO``, ``Boost_VERSION_MAJOR``, "
"``Boost_VERSION_MINOR``, ``Boost_VERSION_PATCH``, and "
"``Boost_VERSION_COUNT`` were added."
msgstr ""
"添加了新的输出变量“Boost_VERSION_MACRO”、“Boost_VERSION_MAJOR”、“Boost_VERSION_MINOR”、“Boost_VERSION_PATCH”和“Boost_VERSION_COUNT”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:203
msgid ""
"The ``QUIET`` argument passed to :command:`find_package` is no longer "
"ignored in config mode.  Note that the CMake package shipped with Boost "
"``1.70.0`` ignores the ``QUIET`` argument passed to "
":command:`find_package`.  This is fixed in the next Boost release."
msgstr ""
"传递给 :command:`find_package` 的 ``QUIET`` 参数在配置模式下不再被忽略。请注意，Boost 1.70.0 附带的"
" CMake 包会忽略传递给 find_package 的 QUIET 参数。这将在下一个 Boost 版本中修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:208
msgid "The input switch ``Boost_DETAILED_FAILURE_MSG`` was removed."
msgstr "输入开关“Boost_DETAILED_FAILURE_MSG”已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:210
msgid ""
"``Boost_VERSION`` now reports the version in ``x.y.z`` format in module "
"mode.  See policy :policy:`CMP0093`."
msgstr "``Boost_VERSION`` 现在在模块模式下以 ``x.y.z`` 格式报告版本。请参阅政策:policy:`CMP0093`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:213
msgid "The :module:`FindCups` module now provides imported targets."
msgstr ":module:`FindCups` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:215
msgid ""
"The :module:`FindEnvModules` module was added to use Lua- and TCL-based "
"environment modules in :ref:`CTest Scripts <CTest Script>`."
msgstr ""
"添加了 :module:`FindEnvModules` 模块以在 :ref:`CTest Scripts <CTest Script>` 中使用基于 "
"Lua 和 TCL 的环境模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:218
msgid ""
"The :module:`FindGLEW` module now provides an interface more consistent "
"with what upstream GLEW provides in its own CMake package files."
msgstr "FindGLEW 模块现在提供的接口与上游 GLEW 在其自己的 CMake 包文件中提供的接口更加一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:221
msgid ""
"The :module:`FindPkgConfig` now populates "
":prop_tgt:`INTERFACE_LINK_OPTIONS` property of imported targets with other"
" (non-library) linker flags."
msgstr ""
":module:`FindPkgConfig` 现在使用其他（非库）链接器标志填充导入目标的 "
":prop_tgt:`INTERFACE_LINK_OPTIONS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:224
msgid ""
"The :module:`FindPostgreSQL` module learned to find debug and release "
"variants separately."
msgstr ":module:`FindPostgreSQL` 模块学会了分别查找调试和发布变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:227
msgid ""
"Modules :module:`FindPython3`, :module:`FindPython2` and "
":module:`FindPython` gained additional lookup strategies and controls, and"
" a new default. See policy :policy:`CMP0094`."
msgstr ""
"模块 :module:`FindPython3`、 :module:`FindPython2` 和 :module:`FindPython` "
"获得了额外的查找策略和控制，以及一个新的默认值。请参阅政策:policy:`CMP0094`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:231
msgid ""
"Modules :module:`FindPython`, :module:`FindPython2` and "
":module:`FindPython3` gain a new target (respectively ``Python::Module``, "
"``Python2::Module`` and ``Python3::Module``) which can be used to develop "
"Python modules."
msgstr ""
"模块 :module:`FindPython`、 :module:`FindPython2` 和 :module:`FindPython3` "
"获得一个新目标（分别是 ``Python::Module``、``Python2::Module`` 和 ``Python3:: Module``)"
" 可用于开发 Python 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:235
msgid ""
"Modules :module:`FindPython3`, :module:`FindPython2` and "
":module:`FindPython` gain capability to control how virtual environments "
"are handled."
msgstr "模块 FindPython3、FindPython2 和 FindPython 获得控制虚拟环境处理方式的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:238
msgid ""
"The :module:`UseSWIG` module learned to manage alternate library names by "
"passing ``-interface <library_name>`` for ``python`` language or "
"``-dllimport <library_name>`` for ``CSharp`` language to the ``SWIG`` "
"compiler."
msgstr ""
"UseSWIG 模块学会了通过为 ``python`` 语言传递 ``-interface <library_name>`` 或为 "
"``CSharp`` 语言传递 ``-dllimport <library_name>`` 来管理备用库名称``SWIG`` 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:246
msgid ""
"The generator expressions :genex:`$<C_COMPILER_ID>`, "
":genex:`$<CXX_COMPILER_ID>`, :genex:`$<CUDA_COMPILER_ID>`, "
":genex:`$<Fortran_COMPILER_ID>`, :genex:`$<COMPILE_LANGUAGE>`, "
":genex:`$<COMPILE_LANG_AND_ID>`, and :genex:`$<PLATFORM_ID>` learned to "
"support matching one value from a comma-separated list."
msgstr ""
"生成器表达式 :genex:`$<C_COMPILER_ID>`, :genex:`$<CXX_COMPILER_ID>`, "
":genex:`$<CUDA_COMPILER_ID>`, :genex:`$<Fortran_COMPILER_ID>`, "
":genex:`$<COMPILE_LANGUAGE >`、 :genex:`$<COMPILE_LANG_AND_ID>` "
"和 :genex:`$<PLATFORM_ID>` 学会了支持匹配逗号分隔列表中的一个值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:252
msgid ""
"The :genex:`$<CUDA_COMPILER_ID:...>` and "
":genex:`$<CUDA_COMPILER_VERSION:...>` generator expressions were added."
msgstr ""
"添加了 :genex:`$<CUDA_COMPILER_ID:...>` 和 "
":genex:`$<CUDA_COMPILER_VERSION:...>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:255
msgid ""
"The :genex:`$<COMPILE_LANG_AND_ID:...>` generator expression was "
"introduced to allow specification of compile options for target files "
"based on the :variable:`CMAKE_<LANG>_COMPILER_ID` and :prop_sf:`LANGUAGE` "
"of each source file."
msgstr ""
"引入了 :genex:`$<COMPILE_LANG_AND_ID:...>` 生成器表达式，以允许根据每个源的 "
":variable:`CMAKE_<LANG>_COMPILER_ID` 和 :prop_sf:`LANGUAGE` 指定目标文件的编译选项文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:260
msgid ""
"A :genex:`$<FILTER:list,INCLUDE|EXCLUDE,regex>` generator expression has "
"been added."
msgstr "添加了 :genex:`$<FILTER:list,INCLUDE|EXCLUDE,regex>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:263
msgid ""
"A :genex:`$<REMOVE_DUPLICATES:list>` generator expression has been added."
msgstr "添加了 :genex:`$<REMOVE_DUPLICATES:list>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:265
msgid ""
"The :genex:`$<SHELL_PATH:...>` generator expression gained support for a "
"list of paths."
msgstr ":genex:`$<SHELL_PATH:...>` 生成器表达式获得了对路径列表的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:268
msgid ""
"New ``$<TARGET_FILE*>`` :manual:`generator expressions <cmake-generator-"
"expressions(7)>` were added to retrieve the prefix, base name, and suffix "
"of the file names of various artifacts:"
msgstr ""
"添加了新的 ``$<TARGET_FILE*>`` :manual:`generator expressions <cmake-generator-"
"expressions(7)>` 以检索各种工件文件名的前缀、基本名称和后缀："

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:272
msgid ":genex:`$<TARGET_FILE_PREFIX:...>`"
msgstr ":genex:`$<TARGET_FILE_PREFIX:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:273
msgid ":genex:`$<TARGET_FILE_BASE_NAME:...>`"
msgstr ":genex:`$<TARGET_FILE_BASE_NAME:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:274
msgid ":genex:`$<TARGET_FILE_SUFFIX:...>`"
msgstr ":genex:`$<TARGET_FILE_SUFFIX:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:275
msgid ":genex:`$<TARGET_LINKER_FILE_PREFIX:...>`"
msgstr ":genex:`$<TARGET_LINKER_FILE_PREFIX:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:276
msgid ":genex:`$<TARGET_LINKER_FILE_BASE_NAME:...>`"
msgstr ":genex:`$<TARGET_LINKER_FILE_BASE_NAME:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:277
msgid ":genex:`$<TARGET_LINKER_FILE_SUFFIX:...>`"
msgstr ":genex:`$<TARGET_LINKER_FILE_SUFFIX:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:278
msgid ":genex:`$<TARGET_PDB_FILE_BASE_NAME:...>`"
msgstr ":genex:`$<TARGET_PDB_FILE_BASE_NAME:...>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:280
msgid ""
"The :genex:`$<TARGET_OBJECTS:...>` generator expression is now supported "
"on ``SHARED``, ``STATIC``, ``MODULE`` libraries and executables."
msgstr ""
":genex:`$<TARGET_OBJECTS:...>` 生成器表达式现在支持 ``SHARED``、``STATIC``、``MODULE``"
" 库和可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:286
msgid ""
"The :command:`ctest_submit` command learned a new option: ``BUILD_ID``. "
"This can be used to store the ID assigned to this build by CDash to a "
"variable."
msgstr ""
":command:`ctest_submit` 命令学习了一个新选项：``BUILD_ID``。这可用于将 CDash 分配给此构建的 ID "
"存储到变量中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:290
msgid ""
"The :command:`ctest_update` command learned to honor a new variable: "
":variable:`CTEST_UPDATE_VERSION_OVERRIDE`. This can be used to specify the"
" current version of your source tree rather than using the update command "
"to discover the current version that is checked out."
msgstr ""
":command:`ctest_update` "
"命令学习了一个新变量： :variable:`CTEST_UPDATE_VERSION_OVERRIDE`。这可用于指定源代码树的当前版本，而不是使用更新命令来发现签出的当前版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:298
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained a new "
":variable:`CPACK_IFW_PACKAGE_STYLE_SHEET` variable to customize the "
"installer stylesheet."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了一个新的 :variable:`CPACK_IFW_PACKAGE_STYLE_SHEET` 变量来自定义安装程序样式表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:305
msgid ""
"The :manual:`cmake-server(7)` mode has been deprecated and will be removed"
" from a future version of CMake.  Please port clients to use the "
":manual:`cmake-file-api(7)` instead."
msgstr ""
":manual:`cmake-server(7)` 模式已被弃用，并将从未来版本的 CMake 中删除。请移植客户端以使用 "
":manual:`cmake-file-api(7)` 代替。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:309
msgid ""
"The :prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` directory property is now "
"deprecated.  Use the :prop_dir:`ADDITIONAL_CLEAN_FILES` directory property"
" instead."
msgstr ""
":prop_dir:`ADDITIONAL_MAKE_CLEAN_FILES` 目录属性现已弃用。请改用 "
":prop_dir:`ADDITIONAL_CLEAN_FILES` 目录属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:313
msgid ""
"The variable :variable:`CMAKE_AUTOMOC_RELAXED_MODE` is considered "
"deprecated.  Support still exists but will be removed in future versions."
msgstr "变量 :variable:`CMAKE_AUTOMOC_RELAXED_MODE` 被认为已弃用。支持仍然存在，但将在未来版本中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:316
msgid ""
"The :command:`export(PACKAGE)` command now does nothing unless enabled via"
" :variable:`CMAKE_EXPORT_PACKAGE_REGISTRY`. See policy :policy:`CMP0090`."
msgstr ""
":command:`export(PACKAGE)` 命令现在不执行任何操作，除非通过 "
":variable:`CMAKE_EXPORT_PACKAGE_REGISTRY` 启用。请参阅政策:policy:`CMP0090`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:320
msgid "The :generator:`Xcode` generator now requires at least Xcode 5."
msgstr ":generator:`Xcode` 生成器现在至少需要 Xcode 5。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:322
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0066`` "
"(``CMP0065`` and below were already deprecated). The :manual:`cmake-"
"policies(7)` manual explains that the OLD behaviors of all policies are "
"deprecated and that projects should port to the NEW behaviors."
msgstr ""
"为策略“CMP0066”添加了明确的弃用诊断（“CMP0065”及以下已弃用）。 :manual:`cmake-policies(7)` "
"手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:331
msgid ""
"If a feature specified by :command:`target_compile_features` is available "
"in the compiler's default standard level, CMake 3.14 and below incorrectly"
" added unnecessary ``-std=`` flags that could lower the standard level. "
"This bug has been fixed in CMake 3.15.  This behavior change may expose "
"bugs in existing projects that were relying on undocumented implementation"
" details.  Specifying compile features only ensures that the compiler runs"
" in a mode that has those features, not that any specific standard level "
"is used or explicit ``-std=`` flag passed."
msgstr ""
"如果 :command:`target_compile_features` 指定的功能在编译器的默认标准级别可用，CMake 3.14 "
"及以下版本会错误地添加不必要的 ``-std=`` 标志，这可能会降低标准级别。此错误已在 CMake 3.15 "
"中修复。此行为更改可能会暴露现有项目中的错误，这些错误依赖于未记录的实施细节。指定编译功能只能确保编译器在具有这些功能的模式下运行，而不是使用任何特定的标准级别或传递明确的“-std=”标志。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:340
msgid ""
"CMake learned how to compile C++14 with the IBM AIX XL compiler and the "
"SunPro compiler and to compile C++20 with the AppleClang compiler."
msgstr ""
"CMake 学习了如何使用 IBM AIX XL 编译器和 SunPro 编译器编译 C++14，以及如何使用 AppleClang 编译器编译 "
"C++20。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:343
msgid ""
"With MSVC-like compilers the value of :variable:`CMAKE_<LANG>_FLAGS` no "
"longer contains warning flags like ``/W3`` by default. See policy "
":policy:`CMP0092`."
msgstr ""
"对于类似 MSVC 的编译器，CMAKE_<LANG>_FLAGS 的值默认不再包含警告标志，如 "
"`/W3``。请参阅政策:policy:`CMP0092`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:347
msgid ""
"IBM Clang-based XL compilers that define ``__ibmxl__`` now use the "
"compiler id ``XLClang`` instead of ``XL``.  See policy :policy:`CMP0089`."
msgstr ""
"定义 ``__ibmxl__`` 的基于 IBM Clang 的 XL 编译器现在使用编译器 ID ``XLClang`` 而不是 "
"``XL``。请参阅政策:policy:`CMP0089`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:350
msgid ""
"The :command:`file(REMOVE)` and :command:`file(REMOVE_RECURSE)` commands "
"were changed to ignore empty arguments with a warning instead of treating "
"them as a relative path and removing the contents of the current "
"directory."
msgstr ""
":command:`file(REMOVE)` 和 :command:`file(REMOVE_RECURSE)` "
"命令已更改为忽略带有警告的空参数，而不是将它们视为相对路径并删除当前目录的内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:357
msgid "Changes made since CMake 3.15.0 include the following."
msgstr "自 CMake 3.15.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:360
msgid "3.15.1"
msgstr "3.15.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:362
msgid ""
"In CMake 3.15.0 support for the GNU-like ``Clang`` compiler targeting the "
"MSVC ABI implemented :variable:`CMAKE_CXX_STANDARD` values 98 and 11 using"
" the corresponding ``-std=`` flags.  However, these modes do not work with"
" the MSVC standard library.  Therefore CMake 3.15.1 passes C++14 standard "
"flags even for C++98 and C++11.  This is consistent with MSVC itself which"
" always runs in a mode aware of C++14."
msgstr ""
"在 CMake 3.15.0 中，支持针对 MSVC ABI 的类 GNU ``Clang`` "
"编译器实现 :variable:`CMAKE_CXX_STANDARD` 值 98 和 11 使用相应的 ``-std=`` 标志。但是，这些模式不适用于 "
"MSVC 标准库。因此，CMake 3.15.1 通过了 C++14 标准标志，即使对于 C++98 和 C++11。这与 MSVC "
"本身一致，MSVC 始终以 C++14 感知模式运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:369
msgid "Preliminary Swift support added in 3.15.0 has been updated."
msgstr "3.15.0 中添加的初步 Swift 支持已更新。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:372
msgid "3.15.2"
msgstr "3.15.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:374
msgid ""
"In CMake 3.15.0 and 3.15.1 the "
":variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` variable caused the "
":command:`find_package` command to fail on a missing package even without "
"the ``REQUIRED`` option.  This has been fixed."
msgstr ""
"在 CMake 3.15.0 和 3.15.1 中， :variable:`CMAKE_FIND_PACKAGE_PREFER_CONFIG` "
"变量导致 :command:`find_package` 命令在缺少包时失败，即使没有 ``REQUIRED`` 选项。这已得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:379
msgid "3.15.3"
msgstr "3.15.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:381
msgid ""
"``CrayPrgEnv`` compiler wrapper support has been updated for the 19.06 "
"release of the Cray Programming Environment for which the default linking "
"mode on XC Cray systems is now dynamic instead of static."
msgstr ""
"``CrayPrgEnv`` 编译器包装器支持已针对 Cray 编程环境的 19.06 版本更新，XC Cray "
"系统上的默认链接模式现在是动态的而不是静态的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:386
msgid "3.15.4"
msgstr "3.15.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.15.rst:388
msgid ""
"In CMake 3.15.0 through 3.15.3, the :prop_dir:`EXCLUDE_FROM_ALL` directory"
" property was regressed from pre-3.14 behavior and caused targets within "
"the directory to be excluded even from its own \"all\". This has been "
"fixed. The bug also existed in 3.14.0 through 3.14.6 and is fixed in "
"3.14.7."
msgstr ""
"在 CMake 3.15.0 到 3.15.3 中， :prop_dir:`EXCLUDE_FROM_ALL` 目录属性从 3.14 "
"之前的行为中退化，导致目录中的目标甚至被排除在它自己的“全部”之外。这已得到修复。该错误也存在于 3.14.0 到 3.14.6 中，并在 "
"3.14.7 中得到修复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:2
msgid "CMake 3.16 Release Notes"
msgstr "CMake 3.16 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:8
msgid "Changes made since CMake 3.15 include the following."
msgstr "自 CMake 3.15 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:16
msgid ""
"CMake learned to support the Objective C (``OBJC``) and Objective C++ "
"(``OBJCXX``) languages.  They may be enabled via the :command:`project` "
"and :command:`enable_language` commands.  When ``OBJC`` or ``OBJCXX`` is "
"enabled, source files with the ``.m`` or ``.mm``, respectively, will be "
"compiled as Objective C or C++.  Otherwise they will be treated as plain "
"C++ sources as they were before."
msgstr ""
"CMake 学会了支持 Objective C (``OBJC``) 和 Objective C++ (``OBJCXX``) 语言。它们可以通过 "
":command:`project` 和 :command:`enable_language` 命令启用。当启用 ``OBJC`` 或 "
"``OBJCXX`` 时，分别带有 ``.m`` 或 ``.mm`` 的源文件将被编译为 Objective C 或 "
"C++。否则，它们将像以前一样被视为纯 C++ 源代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:26
msgid "The ``Clang`` compiler is now supported on ``Solaris``."
msgstr "``Solaris`` 现在支持 ``Clang`` 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:31
msgid ""
"On AIX, executables using the :prop_tgt:`ENABLE_EXPORTS` target property "
"now produce a linker import file with a ``.imp`` extension in addition to "
"the executable file.  Plugins (created via :command:`add_library` with the"
" ``MODULE`` option) that use :command:`target_link_libraries` to link to "
"the executable for its symbols are now linked using the import file. The "
":command:`install(TARGETS)` command now installs the import file as an "
"``ARCHIVE`` artifact."
msgstr ""
"在 AIX 上，除了可执行文件之外，使用 :prop_tgt:`ENABLE_EXPORTS` 目标属性的可执行文件现在还生成一个带有 "
"``.imp`` 扩展名的链接器导入文件。使用 :command:`target_link_libraries` "
"链接到其符号的可执行文件的插件（通过 :command:`add_library` 和 ``MODULE`` 选项创建）现在使用导入文件进行链接。 "
":command:`install(TARGETS)` 命令现在将导入文件安装为 ``ARCHIVE`` 工件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:39
msgid ""
"On AIX, runtime linking is no longer enabled by default.  CMake provides "
"the linker enough information to resolve all symbols up front. One may "
"manually enable runtime linking for shared libraries and/or loadable "
"modules by adding ``-Wl,-G`` to their link flags (e.g. in the "
":variable:`CMAKE_SHARED_LINKER_FLAGS` or "
":variable:`CMAKE_MODULE_LINKER_FLAGS` variable). One may manually enable "
"runtime linking for executables by adding ``-Wl,-brtl`` to their link "
"flags (e.g. in the :variable:`CMAKE_EXE_LINKER_FLAGS` variable)."
msgstr ""
"在 AIX 上，默认情况下不再启用运行时链接。 CMake "
"为链接器提供了足够的信息来预先解析所有符号。可以通过将“-Wl,-G”添加到它们的链接标志（例如，在 "
"CMAKE_SHARED_LINKER_FLAGS 或 CMAKE_MODULE_LINKER_FLAGS "
"变量中）来手动启用共享库和/或可加载模块的运行时链接。可以通过将“-Wl,-brtl”添加到可执行文件的链接标志（例如，在 "
"CMAKE_EXE_LINKER_FLAGS 变量中）来手动启用可执行文件的运行时链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:52
msgid ""
":manual:`cmake(1)` ``-E`` now supports ``true`` and ``false`` commands, "
"which do nothing while returning exit codes of 0 and 1, respectively."
msgstr ""
":manual:`cmake(1)` ``-E`` 现在支持 ``true`` 和 ``false`` 命令，它们在分别返回退出代码 0 和 1 "
"时不执行任何操作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:55
msgid ""
":manual:`cmake(1)` gained a ``--trace-redirect=<file>`` command line "
"option that can be used to redirect ``--trace`` output to a file instead "
"of ``stderr``."
msgstr ""
":manual:`cmake(1)` 获得了 ``--trace-redirect=<file>`` 命令行选项，可用于将 ``--trace`` "
"输出重定向到文件而不是 ``stderr` `。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:59
msgid ""
"The :manual:`cmake(1)` ``--loglevel`` command line option has been renamed"
" to ``--log-level`` to make it consistent with the naming of other command"
" line options.  The ``--loglevel`` option is still supported to preserve "
"backward compatibility."
msgstr ""
":manual:`cmake(1)` ``--loglevel`` 命令行选项已重命名为 ``--log-level`` "
"以使其与其他命令行选项的命名保持一致。仍然支持“--loglevel”选项以保持向后兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:67
msgid ""
"The :command:`add_test` command learned the option "
"``COMMAND_EXPAND_LISTS`` which causes lists in the ``COMMAND`` argument to"
" be expanded, including lists created by generator expressions."
msgstr ""
":command:`add_test` 命令学习了选项 ``COMMAND_EXPAND_LISTS``，它导致 ``COMMAND`` "
"参数中的列表被扩展，包括由生成器表达式创建的列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:71
msgid ""
"The :command:`file` command learned a new sub-command, "
"``GET_RUNTIME_DEPENDENCIES``, which allows you to recursively get the list"
" of libraries linked by an executable or library. This sub-command is "
"intended as a replacement for :module:`GetPrerequisites`."
msgstr ""
":command:`file` "
"命令学习了一个新的子命令，``GET_RUNTIME_DEPENDENCIES``，它允许您递归地获取由可执行文件或库链接的库列表。此子命令旨在替代"
" :module:`GetPrerequisites`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:76
msgid ""
"The :command:`find_file`, :command:`find_library`, :command:`find_path`, "
":command:`find_package`, and :command:`find_program` commands have learned"
" to check the following variables to control the default behavior for "
"groups of search locations:"
msgstr ""
":command:`find_file`、 :command:`find_library`、 :command:`find_path`、 :command:`find_package`"
" 和 :command:`find_program` 命令已经学会检查以下变量以控制默认行为搜索位置组："

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:81
msgid ""
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` - Controls the default "
"behavior of searching the :variable:`<PackageName>_ROOT` variables."
msgstr ""
":variable:`CMAKE_FIND_USE_PACKAGE_ROOT_PATH` - 控制搜索 "
":variable:`<PackageName>_ROOT` 变量的默认行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:84
msgid ""
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` - Controls the default "
"behavior of searching the CMake-specific environment variables."
msgstr ""
":variable:`CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH` - 控制搜索 CMake "
"特定环境变量的默认行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:87
msgid ""
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` - Controls the default "
"behavior of searching the standard system environment variables."
msgstr ""
":variable:`CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH` - 控制搜索标准系统环境变量的默认行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:90
msgid ""
":variable:`CMAKE_FIND_USE_CMAKE_PATH` - Controls the default behavior of "
"searching the CMake-specific cache variables."
msgstr ":variable:`CMAKE_FIND_USE_CMAKE_PATH` - 控制搜索 CMake 特定缓存变量的默认行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:93
msgid ""
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` - Controls the default "
"behavior of searching the platform-specific CMake variables."
msgstr ""
":variable:`CMAKE_FIND_USE_CMAKE_SYSTEM_PATH` - 控制搜索特定于平台的 CMake 变量的默认行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:96
msgid ""
"The :command:`find_package` command has learned to check the "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable to control the "
"default behavior of searching the CMake user package registry and to check"
" the :variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` variable to "
"control the default behavior of searching the CMake system package "
"registry."
msgstr ""
":command:`find_package` 命令已学会检查 "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 变量以控制搜索 CMake 用户包注册表的默认行为，并检查 "
":variable:`CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY` 变量以控制搜索的默认行为CMake "
"系统包注册表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:102
msgid ""
"The :command:`message` command learned indentation control with the new "
":variable:`CMAKE_MESSAGE_INDENT` variable."
msgstr ""
":command:`message` 命令使用新的 :variable:`CMAKE_MESSAGE_INDENT` 变量学习了缩进控制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:105
msgid ""
"The :command:`target_precompile_headers` command was added to specify a "
"list of headers to precompile for faster compilation times."
msgstr "添加了 :command:`target_precompile_headers` 命令以指定要预编译的标头列表以缩短编译时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:111
msgid ""
"The :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` variable has been "
"introduced to optionally initialize the "
":prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` target property."
msgstr ""
"引入了 :variable:`CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS` 变量以选择性地初始化 "
":prop_tgt:`CUDA_RESOLVE_DEVICE_SYMBOLS` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:115
msgid ""
"The :variable:`CMAKE_ECLIPSE_RESOURCE_ENCODING` variable was added to "
"specify the resource encoding for the the :generator:`Eclipse CDT4` extra "
"generator."
msgstr ""
"添加了 :variable:`CMAKE_ECLIPSE_RESOURCE_ENCODING` 变量以指定 :generator:`Eclipse "
"CDT4` 额外生成器的资源编码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:119
msgid ""
"The :variable:`CMAKE_UNITY_BUILD` variable was added to initialize the "
":prop_tgt:`UNITY_BUILD` target property to tell generators to batch "
"include source files for faster compilation times."
msgstr ""
"添加了 :variable:`CMAKE_UNITY_BUILD` 变量来初始化 :prop_tgt:`UNITY_BUILD` "
"目标属性，告诉生成器批量包含源文件以加快编译时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:126
msgid ""
"The :prop_tgt:`BUILD_RPATH` and :prop_tgt:`INSTALL_RPATH` target "
"properties now support :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
":prop_tgt:`BUILD_RPATH` 和 :prop_tgt:`INSTALL_RPATH` 目标属性现在支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:129
msgid ""
"The :prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` target property was added"
" to remove compiler-defined ``RPATH`` entries from a target. This property"
" is initialized by the :variable:`CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH` "
"variable."
msgstr ""
"添加了 :prop_tgt:`INSTALL_REMOVE_ENVIRONMENT_RPATH` 目标属性以从目标中删除编译器定义的 "
"``RPATH`` 条目。此属性由 CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:134
msgid ""
"The :prop_tgt:`PRECOMPILE_HEADERS` target property was added to specify a "
"list of headers to precompile for faster compilation times. Set it using "
"the :command:`target_precompile_headers` command."
msgstr ""
"添加了 :prop_tgt:`PRECOMPILE_HEADERS` "
"目标属性以指定要预编译的标头列表以缩短编译时间。使用 :command:`target_precompile_headers` 命令设置它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:138
msgid ""
"The :prop_tgt:`UNITY_BUILD` target property was added to tell generators "
"to batch include source files for faster compilation times."
msgstr "添加了 :prop_tgt:`UNITY_BUILD` 目标属性，告诉生成器批量包含源文件以加快编译时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:142
msgid ""
"The :prop_tgt:`VS_CONFIGURATION_TYPE` target property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`VS_CONFIGURATION_TYPE` 目标属性现在支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:145
msgid ""
"The :prop_tgt:`VS_DPI_AWARE` target property was added to tell "
":ref:`Visual Studio Generators` to set the ``EnableDpiAwareness`` property"
" in ``.vcxproj`` files."
msgstr ""
"添加了 :prop_tgt:`VS_DPI_AWARE` 目标属性以告知 :ref:`Visual Studio Generators` 在 "
"`.vcxproj`` 文件中设置 ``EnableDpiAwareness`` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:149
msgid ""
"The :prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING` target property was"
" added to tell the :generator:`Xcode` generator to set the value of the "
"``Allow debugging when using document Versions Browser`` schema option."
msgstr ""
"添加了 :prop_tgt:`XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING` "
"目标属性，以告知 :generator:`Xcode` 生成器设置“使用文档版本浏览器时允许调试”模式选项的值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:156
msgid ""
"The :module:`FindDoxygen` module :command:`doxygen_add_docs` command "
"gained a new ``USE_STAMP_FILE`` option.  When this option present, the "
"custom target created by the command will only re-run Doxygen if any of "
"the source files have changed since the last successful run."
msgstr ""
":module:`FindDoxygen` 模块 :command:`doxygen_add_docs` 命令获得了一个新的 "
"``USE_STAMP_FILE`` 选项。当此选项存在时，如果自上次成功运行以来任何源文件发生更改，则由命令创建的自定义目标将仅重新运行 "
"Doxygen。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:161
msgid "The :module:`FindGnuTLS` module now provides an imported target."
msgstr ":module:`FindGnuTLS` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:163
msgid ""
"The :module:`FindPackageHandleStandardArgs` module "
":command:`find_package_handle_standard_args` command gained a new "
"``REASON_FAILURE_MESSAGE`` option to specify a message giving the reason "
"for the failure."
msgstr ""
":module:`FindPackageHandleStandardArgs` 模块 "
":command:`find_package_handle_standard_args` 命令获得了一个新的 "
"``REASON_FAILURE_MESSAGE`` 选项来指定给出失败原因的消息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:168
msgid ""
"The :module:`FindPkgConfig` module :command:`pkg_search_module` macro now "
"defines a ``<prefix>_MODULE_NAME`` result variable containing the first "
"matching module name."
msgstr ""
":module:`FindPkgConfig` 模块 :command:`pkg_search_module` "
"宏现在定义了一个包含第一个匹配模块名称的 ``<prefix>_MODULE_NAME`` 结果变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:172
msgid ""
"The :module:`FindPython3` and :module:`FindPython` modules gained options "
"to control which ``ABIs`` will be searched."
msgstr "FindPython3 和 FindPython 模块获得了控制将搜索哪些 ABI 的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:175
msgid ""
"The :module:`FindPython3`, :module:`FindPython2`, and :module:`FindPython`"
" modules now support direct specification of artifacts via cache entries."
msgstr "FindPython3、FindPython2 和 FindPython 模块现在支持通过缓存条目直接指定工件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:181
msgid ""
"When using :prop_tgt:`AUTOMOC`, the new "
":variable:`CMAKE_AUTOMOC_PATH_PREFIX` variable or "
":prop_tgt:`AUTOMOC_PATH_PREFIX` target property may be enabled to generate"
" the ``-p`` path prefix option for ``moc``.  This ensures that ``moc`` "
"output files are identical on different build setups (given, that the "
"headers compiled by ``moc`` are in an :command:`include directory "
"<target_include_directories>`). Also it ensures that ``moc`` output files "
"will compile correctly when the source and/or build directory is a "
"symbolic link."
msgstr ""
"使用 AUTOMOC 时，可以启用新的 CMAKE_AUTOMOC_PATH_PREFIX 变量或 AUTOMOC_PATH_PREFIX "
"目标属性来为 moc 生成 -p 路径前缀选项。这确保了 ``moc`` 输出文件在不同的构建设置上是相同的（假定由 ``moc`` 编译的标头位于"
" :command:`include 目录 "
"<target_include_directories>`）。它还确保当源和/或构建目录是符号链接时，``moc`` 输出文件将正确编译。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:193
msgid ""
":manual:`ctest(1)` now has the ability to schedule tests based on resource"
" requirements for each test. See :ref:`ctest-resource-allocation` for "
"details."
msgstr ""
":manual:`ctest(1)` 现在能够根据每个测试的资源需求安排测试。有关详细信息，请参阅:ref:`ctest-resource-"
"allocation`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:197
msgid ""
"A new test property, :prop_test:`SKIP_REGULAR_EXPRESSION`, has been added."
" This property is similar to :prop_test:`FAIL_REGULAR_EXPRESSION` and "
":prop_test:`PASS_REGULAR_EXPRESSION`, but with the same meaning as "
":prop_test:`SKIP_RETURN_CODE`. This is useful, for example, in cases where"
" the user has no control over the return code of the test. For example, in"
" Catch2, the return value is the number of assertion failed, therefore it "
"is impossible to use it for :prop_test:`SKIP_RETURN_CODE`."
msgstr ""
"添加了一个新的测试属性 :prop_test:`SKIP_REGULAR_EXPRESSION`。此属性类似于 "
":prop_test:`FAIL_REGULAR_EXPRESSION` 和 "
":prop_test:`PASS_REGULAR_EXPRESSION`，但与 :prop_test:`SKIP_RETURN_CODE` "
"含义相同。这很有用，例如，在用户无法控制测试返回码的情况下。例如，在 Catch2 中，返回值是断言失败的次数，因此不能将其用于 "
":prop_test:`SKIP_RETURN_CODE`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:208
msgid ""
":manual:`cpack(1)` learned support for multiple configurations for ``-C`` "
"option."
msgstr ":manual:`cpack(1)` 学习了对 ``-C`` 选项的多种配置的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:211
msgid ""
"The :cpack_gen:`CPack DEB Generator` is now able to format generic text "
"(usually used as the description for multiple CPack generators) according "
"to the `Debian Policy Manual`_.  See the "
":variable:`CPACK_PACKAGE_DESCRIPTION_FILE` and "
":variable:`CPACK_DEBIAN_<COMPONENT>_DESCRIPTION` variables."
msgstr ""
":cpack_gen:`CPack DEB Generator` 现在可以根据 Debian Policy Manual "
"格式化通用文本（通常用作多个 CPack 生成器的描述）。请参阅 :variable:`CPACK_PACKAGE_DESCRIPTION_FILE` "
"和 :variable:`CPACK_DEBIAN_<COMPONENT>_DESCRIPTION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:217
msgid ""
"The :cpack_gen:`CPack Archive Generator` learned to generate ``.tar.zst`` "
"packages with Zstandard compression."
msgstr ""
":cpack_gen:`CPack Archive Generator` 学会了使用 Zstandard 压缩生成 ``.tar.zst`` 包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:225
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0067`` "
"(``CMP0066`` and below were already deprecated). The :manual:`cmake-"
"policies(7)` manual explains that the OLD behaviors of all policies are "
"deprecated and that projects should port to the NEW behaviors."
msgstr ""
"为策略“CMP0067”添加了明确的弃用诊断（“CMP0066”及以下已弃用）。 :manual:`cmake-policies(7)` "
"手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:231
msgid ""
"The :variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` variable has been "
"deprecated.  Use the :variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` variable "
"instead."
msgstr ""
":variable:`CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY` 变量已被弃用。请改用 "
":variable:`CMAKE_FIND_USE_PACKAGE_REGISTRY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:235
msgid ""
"The :module:`GetPrerequisites` module has been deprecated, as it has been "
"superseded by :command:`file(GET_RUNTIME_DEPENDENCIES)`."
msgstr ""
":module:`GetPrerequisites` 模块已被弃用，因为它已被 "
":command:`file(GET_RUNTIME_DEPENDENCIES)` 取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:238
msgid ""
"The ``CPACK_INSTALL_SCRIPT`` variable has been deprecated in favor of the "
"new, more accurately named :variable:`CPACK_INSTALL_SCRIPTS` variable."
msgstr ""
"``CPACK_INSTALL_SCRIPT`` 变量已被弃用，取而代之的是新的，更准确地命名 :variable:`CPACK_INSTALL_SCRIPTS`"
" 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:244
msgid ""
"The :manual:`cmake(1)` ``-C <initial-cache>`` option now evaluates the "
"initial cache script with :variable:`CMAKE_SOURCE_DIR` and "
":variable:`CMAKE_BINARY_DIR` set to the top-level source and build trees."
msgstr ""
":manual:`cmake(1)` ``-C <initial-cache>`` 选项现在使用 "
":variable:`CMAKE_SOURCE_DIR` 和 :variable:`CMAKE_BINARY_DIR` 设置为顶级源和造树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:248
msgid ""
"The :manual:`cmake(1)` ``-E remove_directory`` command-line tool, when "
"given the path to a symlink to a directory, now removes just the symlink."
"  It no longer removes content of the linked directory."
msgstr ""
":manual:`cmake(1)` ``-E remove_directory`` "
"命令行工具，在给定目录符号链接的路径时，现在只删除符号链接。它不再删除链接目录的内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:252
msgid ""
"The :manual:`ctest(1)`  ``--build-makeprogram`` command-line option now "
"specifies the make program used when configuring a project with the "
":generator:`Ninja` generator or the :ref:`Makefile Generators`."
msgstr ""
":manual:`ctest(1)` ``--build-makeprogram`` 命令行选项现在指定使用 :generator:`Ninja` "
"生成器或 :ref:`Makefile 生成器配置项目时使用的 make 程序`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:256
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command has been updated so that ``GIT_SUBMODULES \"\"`` initializes no "
"submodules. See policy :policy:`CMP0097`."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令已更新，因此 "
"``GIT_SUBMODULES \"\"`` 不初始化任何子模块。请参阅政策:policy:`CMP0097`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:260
msgid ""
"The :module:`FindGTest` module has been updated to recognize MSVC build "
"trees generated by GTest 1.8.1."
msgstr ":module:`FindGTest` 模块已更新，可以识别 GTest 1.8.1 生成的 MSVC 构建树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:263
msgid ""
"The :command:`project` command no longer strips leading zeros in version "
"components.  See policy :policy:`CMP0096`."
msgstr ":command:`project` 命令不再删除版本组件中的前导零。请参阅政策:policy:`CMP0096`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:266
msgid ""
"The Qt Compressed Help file is now named ``CMake.qch``, which no longer "
"contains the release version in the file name.  When CMake is upgraded in-"
"place, the name and location of this file will remain constant. Tools such"
" as IDEs, help viewers, etc. should now be able to refer to this file at a"
" fixed location that remains valid across CMake upgrades."
msgstr ""
"Qt 压缩帮助文件现在命名为“CMake.qch”，文件名中不再包含发布版本。当 CMake 就地升级时，该文件的名称和位置将保持不变。 "
"IDE、帮助查看器等工具现在应该能够在固定位置引用此文件，该位置在 CMake 升级期间仍然有效。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:272
msgid ""
"``RPATH`` entries are properly escaped in the generated CMake scripts used"
" for installation.  See policy :policy:`CMP0095`."
msgstr "``RPATH`` 条目在生成的用于安装的 CMake 脚本中被正确转义。请参阅政策:policy:`CMP0095`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:275
msgid ""
"When using :variable:`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` on Windows the "
"auto-generated exports are now updated only when the object files "
"providing the symbols are updated."
msgstr ""
"在 Windows 上使用 :variable:`CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS` "
"时，自动生成的导出现在仅在更新提供符号的目标文件时更新。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:282
msgid "Changes made since CMake 3.16.0 include the following."
msgstr "自 CMake 3.16.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:285
msgid "3.16.2"
msgstr "3.16.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:287
msgid ""
"CMake 3.16.0 and 3.16.1 processed ``.hh`` files with :prop_tgt:`AUTOMOC`. "
"This was a behavior change from CMake 3.15 and below that can break "
"existing projects, so it has been reverted as of 3.16.2."
msgstr ""
"CMake 3.16.0 和 3.16.1 使用 AUTOMOC 处理 ``.hh`` 文件。这是 CMake 3.15 "
"及以下版本的行为更改，可能会破坏现有项目，因此从 3.16.2 起已将其还原。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:292
msgid "3.16.5"
msgstr "3.16.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:294
msgid ""
"The :module:`FindPython`, :module:`FindPython2`, and :module:`FindPython3`"
" modules no longer create cache entries for "
"``Python{,2,3}_LIBRARY_RELEASE`` and ``Python{,2,3}_LIBRARY_DEBUG``.  "
"Those values are always computed from other results and so should not be "
"cached.  The entries were created by CMake 3.16.0 through 3.16.4 but were "
"always ``FORCE``-set and could not be meaningfully edited by users."
msgstr ""
":module:`FindPython`、 :module:`FindPython2` 和 :module:`FindPython3` 模块不再为 "
"``Python{,2,3}_LIBRARY_RELEASE`` 和 ``Python{,2,3 "
"创建缓存条目}_LIBRARY_DEBUG``。这些值始终是根据其他结果计算得出的，因此不应缓存。这些条目由 CMake 3.16.0 到 "
"3.16.4 创建，但始终为“FORCE”-set，用户无法进行有意义的编辑。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:301
msgid ""
"Additionally, the modules no longer expose their internal ``_Python*`` "
"cache entries publicly.  CMake 3.16.0 through 3.16.4 accidentally made "
"them visible as advanced cache entries."
msgstr ""
"此外，模块不再公开公开其内部 ``_Python*`` 缓存条目。 CMake 3.16.0 到 3.16.4 意外地将它们显示为高级缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:306
msgid "3.16.7"
msgstr "3.16.7"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:308
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:340
msgid ""
"Selection of the Objective C or C++ compiler now considers the "
":envvar:`CC` or :envvar:`CXX` environment variable if the :envvar:`OBJC` "
"or :envvar:`OBJCXX` environment variable is not set."
msgstr ""
"如果未设置 :envvar:`OBJC` 或 :envvar:`OBJCXX` 环境变量，现在选择 Objective C 或 C++ 编译器会考虑"
" :envvar:`CC` 或 :envvar:`CXX` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:312
#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:344
msgid ""
"The :module:`FindPkgConfig` module now extracts include directories "
"prefixed with ``-isystem`` into the ``*_INCLUDE_DIRS`` variables and "
":prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` target properties. Previously "
"they would be places in ``*_CFLAGS_OTHER`` variables and "
":prop_tgt:`INTERFACE_COMPILE_OPTIONS` target properties."
msgstr ""
":module:`FindPkgConfig` 模块现在将包含前缀为 ``-isystem`` 的目录提取到 ``*_INCLUDE_DIRS`` "
"变量和 :prop_tgt:`INTERFACE_INCLUDE_DIRECTORIES` "
"目标属性中。以前它们会放在``*_CFLAGS_OTHER`` 变量和 :prop_tgt:`INTERFACE_COMPILE_OPTIONS` "
"目标属性中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:319
msgid "3.16.9"
msgstr "3.16.9"

#: ../../cmake-prefix/src/cmake/Help/release/3.16.rst:321
msgid ""
"The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to "
"``OFF`` because this feature can break existing projects that have "
"identically named header files in different include directories. This "
"restores compatibility with behavior of CMake 3.15 and below."
msgstr ""
":variable:`CMAKE_AUTOMOC_PATH_PREFIX` 的默认值已更改为 "
"``OFF``，因为此功能可能会破坏在不同包含目录中具有相同名称头文件的现有项目。这将恢复与 CMake 3.15 及更低版本行为的兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:2
msgid "CMake 3.17 Release Notes"
msgstr "CMake 3.17 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:8
msgid "Changes made since CMake 3.16 include the following."
msgstr "自 CMake 3.16 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:16
msgid ""
":manual:`cmake(1)` gained a :generator:`Ninja Multi-Config` generator, "
"which is similar to the :generator:`Ninja` generator but can be used to "
"build multiple configurations at once."
msgstr ""
":manual:`cmake(1)` 获得了一个 :generator:`Ninja Multi-Config` 生成器，它类似于 "
":generator:`Ninja` 生成器，但可用于一次构建多个配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:20
msgid ""
":ref:`Visual Studio Generators` learned to support per-config sources. "
"Previously only :ref:`Command-Line Build Tool Generators` supported them."
msgstr ""
":ref:`Visual Studio Generators` 学会了支持每个配置源。以前只有 :ref:`Command-Line Build "
"Tool Generators` 支持它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:23
msgid ""
":ref:`Visual Studio Generators` for VS 2010 and above now support "
"specifying the ``VCTargetsPath`` value for project files in "
":variable:`CMAKE_GENERATOR_TOOLSET` setting."
msgstr ""
"VS 2010 及更高版本的 Visual Studio Generators 现在支持在 CMAKE_GENERATOR_TOOLSET "
"设置中为项目文件指定 `VCTargetsPath`` 值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:27
msgid ""
":ref:`Visual Studio Generators` for VS 2010 and above learned to support "
".NET Standard and .NET Core.  See the :prop_tgt:`DOTNET_TARGET_FRAMEWORK` "
"target property and associated :variable:`CMAKE_DOTNET_TARGET_FRAMEWORK` "
"variable."
msgstr ""
":ref: VS 2010 及更高版本的 Visual Studio Generators 学会了支持 .NET Standard 和 .NET "
"Core。请参阅 DOTNET_TARGET_FRAMEWORK 目标属性和关联的 CMAKE_DOTNET_TARGET_FRAMEWORK "
"变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:35
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"now offers meta-features for the CUDA language standard levels (e.g. "
"``cuda_std_03``, ``cuda_std_14``).  See "
":prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES`."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在为 CUDA "
"语言标准级别（例如 "
"``cuda_std_03``、``cuda_std_14``）提供元特征。请参阅:prop_gbl:`CMAKE_CUDA_KNOWN_FEATURES`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:43
msgid ""
"The IBM XL Fortran compiler is now supported by the :generator:`Ninja` "
"generator."
msgstr "Ninja 生成器现在支持 IBM XL Fortran 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:49
msgid ""
":manual:`cmake(1)` gained a ``--debug-find`` command-line option to enable"
" additional human-readable output on where ``find_*`` commands search."
msgstr ""
":manual:`cmake(1)` 获得了一个 ``--debug-find`` 命令行选项，以在 ``find_*`` "
"命令搜索的位置启用额外的人类可读输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:52
msgid ""
":manual:`cmake(1)` gained a ``--trace-format`` command-line option that "
"can be used to set the ``--trace`` output format. Currently, the old human"
" readable and the new JSON format are supported. The new JSON format is "
"easier to parse automatically than the existing format."
msgstr ""
":manual:`cmake(1)` 获得了一个 ``--trace-format`` 命令行选项，可用于设置 ``--trace`` "
"输出格式。目前，支持旧的人类可读格式和新的 JSON 格式。新的 JSON 格式比现有格式更容易自动解析。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:57
msgid ""
":manual:`cmake(1)` gained a ``-E rm`` command-line tool that can be used "
"to remove directories and files.  This supersedes the existing ``-E "
"remove`` and ``-E remove_directory`` tools and has better semantics."
msgstr ""
":manual:`cmake(1)` 获得了一个 ``-E rm`` 命令行工具，可用于删除目录和文件。这取代了现有的 ``-E remove`` "
"和 ``-E remove_directory`` 工具并具有更好的语义。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:64
msgid ""
"The :command:`add_custom_command` command learned to interpret paths in "
"``DEPENDS`` arguments that are specified relative to the current binary "
"directory."
msgstr ""
":command:`add_custom_command` 命令学会了解释相对于当前二进制目录指定的 ``DEPENDS`` 参数中的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:68
msgid ""
"The :command:`foreach` command learned a new ``ZIP_LISTS`` option to "
"iterate over multiple lists simultaneously."
msgstr ":command:`foreach` 命令学习了一个新的 ``ZIP_LISTS`` 选项来同时迭代多个列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:71
msgid ""
"The :command:`load_cache(READ_WITH_PREFIX)` command mode is now allowed "
"when using ``cmake -P`` to :ref:`Run a Script <Script Processing Mode>`."
msgstr ""
":command:`load_cache(READ_WITH_PREFIX)` 命令模式在使用 ``cmake -P`` 到 :ref:`Run a"
" Script <Script Processing Mode>` 时被允许。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:74
msgid ""
"The :command:`message` command learned to output context provided in the "
":variable:`CMAKE_MESSAGE_CONTEXT` variable for log levels ``NOTICE`` and "
"below.  Enable this output with the new ``--log-context`` command-line "
"option or :variable:`CMAKE_MESSAGE_CONTEXT_SHOW` variable."
msgstr ""
":command:`message` 命令学会输出在 :variable:`CMAKE_MESSAGE_CONTEXT` 变量中为日志级别 "
"``NOTICE`` 及以下提供的上下文。使用新的 ``--log-context`` 命令行选项或 "
"CMAKE_MESSAGE_CONTEXT_SHOW 变量启用此输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:79
msgid ""
"The :command:`message` command gained new keywords ``CHECK_START``, "
"``CHECK_PASS`` and ``CHECK_FAIL``."
msgstr ""
":command:`message` 命令获得了新的关键字 ``CHECK_START``、``CHECK_PASS`` 和 "
"``CHECK_FAIL``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:82
msgid ""
"The :command:`target_compile_options` command now honors the ``BEFORE`` "
"keyword more consistently.  See policy :policy:`CMP0101`."
msgstr ""
":command:`target_compile_options` 命令现在更一致地支持 ``BEFORE`` "
"关键字。请参阅政策:policy:`CMP0101`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:88
msgid ""
"A :variable:`CMAKE_CTEST_ARGUMENTS` variable was added to specify a list "
"of command-line arguments passed to CTest when running through the "
"``test`` (or ``RUN_TESTS``) target of the generated build system."
msgstr ""
"添加了 :variable:`CMAKE_CTEST_ARGUMENTS` "
"变量以指定在运行生成的构建系统的``test``（或``RUN_TESTS``）目标时传递给 CTest 的命令行参数列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:92
msgid ""
"The following variables are now defined inside a :command:`function`:"
msgstr "以下变量现在在 :command:`function` 中定义："

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:94
msgid ":variable:`CMAKE_CURRENT_FUNCTION`"
msgstr ":variable:`CMAKE_CURRENT_FUNCTION`"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:95
msgid ":variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`"
msgstr ":variable:`CMAKE_CURRENT_FUNCTION_LIST_DIR`"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:96
msgid ":variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`"
msgstr ":variable:`CMAKE_CURRENT_FUNCTION_LIST_FILE`"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:97
msgid ":variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`"
msgstr ":variable:`CMAKE_CURRENT_FUNCTION_LIST_LINE`"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:99
msgid ""
"The :variable:`CMAKE_CUDA_RUNTIME_LIBRARY` variable and "
":prop_tgt:`CUDA_RUNTIME_LIBRARY` target property were introduced to select"
" the CUDA runtime library used when linking targets that use CUDA."
msgstr ""
":variable:`CMAKE_CUDA_RUNTIME_LIBRARY` 变量和 "
":prop_tgt:`CUDA_RUNTIME_LIBRARY` 目标属性被引入以选择在链接使用 CUDA 的目标时使用的 CUDA 运行时库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:104
msgid ""
"The :variable:`CMAKE_FIND_DEBUG_MODE` variable was introduced to print "
"extra ``find_*`` call information during the cmake run to standard error. "
"Output is designed for human consumption and not for parsing."
msgstr ""
":variable:`CMAKE_FIND_DEBUG_MODE` 变量被引入以在 cmake 运行到标准错误期间打印额外的 ``find_*`` "
"调用信息。输出是为人类消费而设计的，而不是为解析而设计的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:108
msgid ""
"The :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable now takes its "
"initial value from the :envvar:`CMAKE_EXPORT_COMPILE_COMMANDS` environment"
" variable if no explicit configuration is given."
msgstr ""
"如果没有给出显式配置，CMAKE_EXPORT_COMPILE_COMMANDS 变量现在从 "
"CMAKE_EXPORT_COMPILE_COMMANDS 环境变量中获取其初始值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:112
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable, if not set "
"explicitly, now takes its initial value from the "
":envvar:`CMAKE_<LANG>_COMPILER_LAUNCHER` environment variable."
msgstr ""
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量，如果未明确设置，现在从 "
":envvar:`CMAKE_<LANG>_COMPILER_LAUNCHER` 环境变量中获取其初始值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:116
msgid ""
"The :variable:`CMAKE_MESSAGE_LOG_LEVEL` variable can now be used to "
"persist a log level between CMake runs, unlike the ``--log-level`` command"
" line option which only applies to that particular run."
msgstr ""
":variable:`CMAKE_MESSAGE_LOG_LEVEL` 变量现在可用于在 CMake 运行之间保持日志级别，这与仅适用于该特定运行的"
" ``--log-level`` 命令行选项不同。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:120
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_ENVIRONMENT` variable was added to "
"initialize the :prop_tgt:`XCODE_SCHEME_ENVIRONMENT` target property."
msgstr ""
"添加了 :variable:`CMAKE_XCODE_SCHEME_ENVIRONMENT` 变量来初始化 "
":prop_tgt:`XCODE_SCHEME_ENVIRONMENT` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:123
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_WORKING_DIRECTORY` variable and "
"associated :prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY` target property were"
" added to tell the :generator:`Xcode` generator to set the value of the "
"``Custom Working Directory`` schema option."
msgstr ""
"添加了 :variable:`CMAKE_XCODE_SCHEME_WORKING_DIRECTORY` 变量和关联的 "
":prop_tgt:`XCODE_SCHEME_WORKING_DIRECTORY` 目标属性，以告知 :generator:`Xcode` "
"生成器设置“自定义工作目录”架构选项的值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:131
msgid ""
"The :prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` target property and associated "
":variable:`CMAKE_AIX_EXPORT_ALL_SYMBOLS` variable were created to "
"optionally explicitly disable automatic export of symbols from shared "
"libraries on AIX."
msgstr ""
":prop_tgt:`AIX_EXPORT_ALL_SYMBOLS` "
"目标属性和关联的 :variable:`CMAKE_AIX_EXPORT_ALL_SYMBOLS` 变量的创建是为了选择性地显式禁用从 AIX "
"上的共享库自动导出符号。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:136
msgid ""
"The :prop_tgt:`DEPRECATION` target property was added to mark a target as "
"deprecated.  If a linked target is marked as deprecated, a warning with "
"the deprecation message is issued at generate time."
msgstr ""
"添加了 :prop_tgt:`DEPRECATION` "
"目标属性以将目标标记为已弃用。如果链接的目标被标记为已弃用，则会在生成时发出带有弃用消息的警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:141
msgid ""
"The :prop_tgt:`INSTALL_NAME_DIR` target property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`. In "
"particular, the :genex:`$<INSTALL_PREFIX>` generator expression can be "
"used to set the directory relative to the install-time prefix."
msgstr ""
":prop_tgt:`INSTALL_NAME_DIR` 目标属性现在支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。特别是， :genex:`$<INSTALL_PREFIX>` "
"生成器表达式可用于设置相对于安装时前缀的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:146
msgid ""
"Target properties :prop_tgt:`MACHO_COMPATIBILITY_VERSION` and "
":prop_tgt:`MACHO_CURRENT_VERSION` were added to set the "
"``compatibility_version`` and ``curent_version``, respectively, for Mach-O"
" binaries.  For backwards compatibility, if these properties are not set, "
":prop_tgt:`SOVERSION` and :prop_tgt:`VERSION` are used respectively as "
"fallbacks."
msgstr ""
"添加了目标属性 :prop_tgt:`MACHO_COMPATIBILITY_VERSION` 和 "
":prop_tgt:`MACHO_CURRENT_VERSION` 以分别为 Mach-O 二进制文件设置 "
"``compatibility_version`` 和 ``curent_version``。为了向后兼容，如果未设置这些属性，则 "
":prop_tgt:`SOVERSION` 和 :prop_tgt:`VERSION` 分别用作回退。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:153
msgid ""
"The :prop_tgt:`VS_DOTNET_DOCUMENTATION_FILE` target property was added to "
"tell :ref:`Visual Studio Generators` to generate a ``DocumentationFile`` "
"reference in ``.csproj`` files."
msgstr ""
"添加了 :prop_tgt:`VS_DOTNET_DOCUMENTATION_FILE` 目标属性以告知 :ref:`Visual Studio "
"Generators` 在 ``.csproj`` 文件中生成 ``DocumentationFile`` 引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:160
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command gained a ``GIT_SUBMODULES_RECURSE`` option to specify whether Git "
"submodules should be updated recursively.  The default is on to preserve "
"existing behavior."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令获得了一个 "
"``GIT_SUBMODULES_RECURSE`` 选项来指定 Git 子模块是否应该递归更新。默认设置为打开以保留现有行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:165
msgid ""
"The :module:`FindCUDAToolkit` module was added to find the CUDA Toolkit "
"without enabling CUDA as a language."
msgstr "添加了 :module:`FindCUDAToolkit` 模块以在不启用 CUDA 作为语言的情况下查找 CUDA 工具包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:168
msgid ""
"The :module:`FindCURL` module learned to find CURL using the "
"``CURLConfig.cmake`` package configuration file generated by CURL's cmake "
"buildsystem.  It also gained a new ``CURL_NO_CURL_CMAKE`` option to "
"disable this behavior."
msgstr ""
":module:`FindCURL` 模块学会了使用 CURL 的 cmake 构建系统生成的 ``CURLConfig.cmake`` "
"包配置文件来查找 CURL。它还获得了一个新的“CURL_NO_CURL_CMAKE”选项来禁用此行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:173
msgid ""
"The :module:`FindFLEX` module's ``FLEX_TARGET`` command now runs ``flex`` "
"with :variable:`CMAKE_CURRENT_BINARY_DIR` as the working directory. See "
"policy :policy:`CMP0098`."
msgstr ""
"FindFLEX 模块的 FLEX_TARGET 命令现在以 CMAKE_CURRENT_BINARY_DIR 作为工作目录运行 "
"flex。请参阅政策:policy:`CMP0098`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:177
msgid ""
"The :module:`FindLibArchive` module now provides an imported target for "
"libarchive."
msgstr ":module:`FindLibArchive` 模块现在为 libarchive 提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:180
msgid ""
"The :module:`FindPython` module has learned to find Python components in "
"active virtual environments managed by ``conda``."
msgstr "FindPython 模块已经学会在由 conda 管理的活动虚拟环境中查找 Python 组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:183
msgid ""
"The :module:`FindPython3` and :module:`FindPython` modules gained, "
"respectively, variable ``Python3_SOABI`` and ``Python_SOABI`` giving the "
"standard extension suffix for modules. Moreover, commands "
"``Python3_add_library()`` and ``Python_add_library()`` gained the option "
"``WITH_SOABI`` to prefix the library suffix with the value of ``SOABI``."
msgstr ""
":module:`FindPython3` 和 :module:`FindPython` 模块分别获得变量 ``Python3_SOABI`` 和 "
"``Python_SOABI`` 为模块提供标准扩展后缀。此外，命令 ``Python3_add_library()`` 和 "
"``Python_add_library()`` 获得了选项 ``WITH_SOABI`` 以 ``SOABI`` 的值作为库后缀的前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:189
msgid ""
"The :module:`FindLibXml2` module now provides an imported target for the "
"``xmllint`` executable."
msgstr ":module:`FindLibXml2` 模块现在为 ``xmllint`` 可执行文件提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:195
msgid ""
":prop_tgt:`AUTOMOC` and :prop_tgt:`AUTOUIC` learned to process headers "
"with a ``.hh`` extension.  See policy :policy:`CMP0100`."
msgstr ""
":prop_tgt:`AUTOMOC` 和 :prop_tgt:`AUTOUIC` 学会了处理带有 `.hh`` "
"扩展名的标头。请参阅政策:policy:`CMP0100`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:201
msgid ""
"The :variable:`CTEST_CONFIGURATION_TYPE` variable is now set from the "
"command line when :manual:`ctest(1)` is invoked with ``-C <cfg>``."
msgstr ""
":variable:`CTEST_CONFIGURATION_TYPE` 变量现在在使用``-C <cfg>`` "
"调用 :manual:`ctest(1)` 时从命令行设置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:204
msgid ""
"The :manual:`ctest(1)` tool gained support for Dr. Memory to run memcheck "
"runs."
msgstr ":manual:`ctest(1)` 工具获得了对 Dr. Memory 运行 memcheck 运行的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:207
msgid ""
"The :manual:`ctest(1)` tool gained a ``--no-tests=<[error|ignore]>`` "
"option to explicitly set and unify the behavior between direct invocation "
"and script mode if no tests were found."
msgstr ""
":manual:`ctest(1)` 工具获得了一个 ``--no-tests=<[error|ignore]>`` "
"选项，用于在未找到测试时显式设置和统一直接调用和脚本模式之间的行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:211
msgid ""
"The :manual:`ctest(1)` tool gained a ``--repeat <mode>:<n>`` option to "
"specify conditions in which to repeat tests.  This generalizes the "
"existing ``--repeat-until-fail <n>`` option to add modes for ``until-"
"pass`` and ``after-timeout``."
msgstr ""
":manual:`ctest(1)` 工具获得了一个 ``--repeat <mode>:<n>`` "
"选项来指定重复测试的条件。这概括了现有的``--repeat-until-fail <n>``选项以添加``until-"
"pass``和``after-timeout``的模式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:216
msgid ""
"The :command:`ctest_test` command gained a ``REPEAT <mode>:<n>`` option to"
" specify conditions in which to repeat tests."
msgstr ":command:`ctest_test` 命令获得了 ``REPEAT <mode>:<n>`` 选项来指定重复测试的条件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:222
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` learned to use the "
":variable:`CPACK_DMG_<component>_FILE_NAME` variable to set a custom "
"filename when packaging components into their own DMGs."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 学会了使用 "
":variable:`CPACK_DMG_<component>_FILE_NAME` 变量在将组件打包到自己的 DMG 中时设置自定义文件名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:227
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` learned to handle RTF formatted"
" license files.  When :variable:`CPACK_DMG_SLA_DIR` variable is set, "
"``<language>.license.rtf`` is considered, but only as a fallback when the "
"plaintext (``.txt``) file is not found in order to maintain backwards "
"compatibility."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 学会了处理 RTF 格式的许可证文件。当 "
":variable:`CPACK_DMG_SLA_DIR` 变量被设置时，``<language>.license.rtf`` "
"被考虑，但仅当找不到明文 (``.txt``) 文件时作为回退以保持向后兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:233
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained a new variable "
":variable:`CPACK_NSIS_MUI_HEADERIMAGE` to set the header image. To not "
"break existing setups, it still defaults to :variable:`CPACK_PACKAGE_ICON`"
" if the new variable is not set."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 获得了一个新变量 "
":variable:`CPACK_NSIS_MUI_HEADERIMAGE` 来设置标题图像。为了不破坏现有设置，如果未设置新变量，它仍默认为 "
":variable:`CPACK_PACKAGE_ICON`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:238
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now supports "
":variable:`CPACK_NSIS_UNINSTALL_NAME`. This can be used to specify the "
"name of the Uninstall program."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 现在支持 "
":variable:`CPACK_NSIS_UNINSTALL_NAME`。这可用于指定卸载程序的名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:242
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now supports "
":variable:`CPACK_NSIS_WELCOME_TITLE` and "
":variable:`CPACK_NSIS_WELCOME_TITLE_3LINES`. These can be used to specify "
"the welcome page title and display it in 3 lines."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 现在支持 :variable:`CPACK_NSIS_WELCOME_TITLE`"
" 和 :variable:`CPACK_NSIS_WELCOME_TITLE_3LINES`。这些可用于指定欢迎页面标题并分 3 行显示。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:247
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now supports "
":variable:`CPACK_NSIS_FINISH_TITLE` and "
":variable:`CPACK_NSIS_FINISH_TITLE_3LINES`. These can be used to specify "
"the finish page title and display it in 3 lines."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 现在支持 :variable:`CPACK_NSIS_FINISH_TITLE` "
"和 :variable:`CPACK_NSIS_FINISH_TITLE_3LINES`。这些可用于指定结束页面标题并以 3 行显示。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:252
msgid ""
"The :cpack_gen:`CPack productbuild Generator` gained support for a "
":variable:`CPACK_PRODUCTBUILD_BACKGROUND` variable to specify a background"
" image for the macOS installer."
msgstr ""
":cpack_gen:`CPack productbuild Generator` 获得了对 "
":variable:`CPACK_PRODUCTBUILD_BACKGROUND` 变量的支持，以指定 macOS 安装程序的背景图像。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:259
msgid ""
":manual:`ccmake(1)` now displays cache values using colors based on the "
"entry type if the terminal supports color."
msgstr ":manual:`ccmake(1)` 现在如果终端支持颜色，则根据条目类型使用颜色显示缓存值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:262
msgid ""
":manual:`ccmake(1)` now displays messages and a progress bar during "
"configure and generate.  It will keep the output displayed if any errors "
"or warnings occurred."
msgstr ":manual:`ccmake(1)` 现在在配置和生成期间显示消息和进度条。如果发生任何错误或警告，它将保持输出显示。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:269
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0068`` and "
"policy ``CMP0069`` (``CMP0067`` and below were already deprecated). The "
":manual:`cmake-policies(7)` manual explains that the OLD behaviors of all "
"policies are deprecated and that projects should port to the NEW "
"behaviors."
msgstr ""
"为策略“CMP0068”和策略“CMP0069”添加了明确的弃用诊断（“CMP0067”及以下已弃用）。 :manual:`cmake-"
"policies(7)` 手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:275
msgid ""
"The CPack ``PackageMaker`` generator has been deprecated because Xcode no "
"longer distributes the PackageMaker tools. The undocumented ``OSXX11`` "
"generator has also been deprecated."
msgstr ""
"CPack ``PackageMaker`` 生成器已被弃用，因为 Xcode 不再分发 PackageMaker 工具。未记录的 "
"``OSXX11`` 生成器也已弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:279
msgid ""
"The :manual:`cmake(1)` command-line ``-E remove`` and ``-E "
"remove_directory`` tools are deprecated in favor of the new ``-E rm`` "
"tool.  The older tools always returned 0 if a named path did not exist "
"even without the force option and cannot be fixed without breaking "
"compatibility, and so have been superseded."
msgstr ""
":manual:`cmake(1)` 命令行``-E remove`` 和``-E remove_directory`` "
"工具已弃用，取而代之的是新的``-E rm`` 工具。如果命名路径不存在，即使没有强制选项，旧工具也总是返回 "
"0，并且在不破坏兼容性的情况下无法修复，因此已被取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:285
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now requires NSIS 3.0 or later."
msgstr ":cpack_gen:`CPack NSIS Generator` 现在需要 NSIS 3.0 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:290
msgid ""
"The :manual:`file API <cmake-file-api(7)>` index file now emits a "
"``multiConfig`` flag specifying whether or not the generator supports "
"multiple output configurations."
msgstr ""
":manual:`file API <cmake-file-api(7)>` 索引文件现在发出一个``multiConfig`` "
"标志，指定生成器是否支持多个输出配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:294
msgid ""
"Target link properties :prop_tgt:`INTERFACE_LINK_OPTIONS`, "
":prop_tgt:`INTERFACE_LINK_DIRECTORIES` and "
":prop_tgt:`INTERFACE_LINK_DEPENDS` are now transitive over private "
"dependencies on static libraries. See policy :policy:`CMP0099`."
msgstr ""
"目标链接属性 "
":prop_tgt:`INTERFACE_LINK_OPTIONS`、 :prop_tgt:`INTERFACE_LINK_DIRECTORIES` "
"和 :prop_tgt:`INTERFACE_LINK_DEPENDS` "
"现在可以通过对静态库的私有依赖项传递。请参阅政策:policy:`CMP0099`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:300
msgid ""
"When using MinGW tools, the :command:`find_library` command no longer "
"finds ``.dll`` files by default.  Instead, it expects ``.dll.a`` import "
"libraries to be available."
msgstr ""
"使用 MinGW 工具时， :command:`find_library` 命令默认不再查找 `.dll`` 文件。相反，它期望 ``.dll.a``"
" 导入库可用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:304
msgid ""
"The :generator:`MinGW Makefiles` generator no longer issues an error if "
"``sh.exe`` is present in the environment's ``PATH``."
msgstr "如果环境的 PATH 中存在 sh.exe，MinGW Makefiles 生成器不再发出错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:307
msgid ""
"The :generator:`Ninja` generator now prefers the first ninja build tool to"
" appear in the ``PATH`` no matter whether it is called ``ninja-build``, "
"``ninja``, or ``samu``.  Previously the first of those names to appear "
"anywhere in the ``PATH`` would be preferred."
msgstr ""
":generator:`Ninja` 生成器现在更喜欢第一个 ninja 构建工具出现在 ``PATH`` 中，无论它被称为 ``ninja-"
"build``、``ninja`` 或 ``samu`` .以前，首选出现在 ``PATH`` 中任何位置的这些名称中的第一个。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:312
msgid ""
"With SDCC the ``sdar`` tool is now preferred over ``sdcclib`` as "
"librarian. The latter was deprecated by SDCC 3.2.0 and removed in SDCC "
"3.8.6."
msgstr ""
"对于 SDCC，“sdar”工具现在比“sdcclib”更受青睐作为图书管理员。后者已被 SDCC 3.2.0 弃用并在 SDCC 3.8.6 "
"中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:315
msgid ""
"With SDCC the default flags no longer include any target-specific flags. "
"Previously the default flags were hard-coded for 8051."
msgstr "使用 SDCC，默认标志不再包含任何特定于目标的标志。以前，默认标志是为 8051 硬编码的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:318
msgid ""
"The :variable:`CMAKE_VS_GLOBALS` variable value now applies during "
"compiler identification and in targets created by the "
":command:`add_custom_target` command."
msgstr ""
":variable:`CMAKE_VS_GLOBALS` 变量值现在适用于编译器识别期间和由 :command:`add_custom_target`"
" 命令创建的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:322
msgid ""
"The :generator:`Xcode` generator no longer hard-codes ``-Wmost``, ``-Wno-"
"four-char-constants``, and ``-Wno-unknown-pragmas`` warning flags."
msgstr ""
":generator:`Xcode` 生成器不再硬编码``-Wmost``、``-Wno-four-char-constants`` "
"和``-Wno-unknown-pragmas`` 警告标志。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:328
msgid "Changes made since CMake 3.17.0 include the following."
msgstr "自 CMake 3.17.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:331
msgid "3.17.1"
msgstr "3.17.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:333
msgid ""
"CMake 3.17.0 updated the :cpack_gen:`CPack NSIS Generator` with changes "
"that require NSIS 3.0 or later.  CMake 3.17.1 now enforces the use of a "
"sufficiently new version."
msgstr ""
"CMake 3.17.0 更新了 :cpack_gen:`CPack NSIS Generator`，其中包含需要 NSIS 3.0 "
"或更高版本的更改。 CMake 3.17.1 现在强制使用足够新的版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:338
msgid "3.17.3"
msgstr "3.17.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:351
msgid "3.17.5"
msgstr "3.17.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.17.rst:353
msgid ""
"The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to "
"``OFF`` because this feature can break existing projects that have "
"identically named header files in different include directories. This "
"restores compatibility with behavior of CMake 3.15 and below. The default "
"was also changed to ``OFF`` in 3.16.9."
msgstr ""
":variable:`CMAKE_AUTOMOC_PATH_PREFIX` 的默认值已更改为 "
"``OFF``，因为此功能可能会破坏在不同包含目录中具有相同名称头文件的现有项目。这将恢复与 CMake 3.15 及更低版本行为的兼容性。在 "
"3.16.9 中，默认值也更改为 ``OFF``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:2
msgid "CMake 3.18 Release Notes"
msgstr "CMake 3.18 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:8
msgid "Changes made since CMake 3.17 include the following."
msgstr "自 CMake 3.17 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:16
msgid ""
"The ``CUDA`` language can now be compiled using Clang on non-Windows "
"platforms. Separable compilation is not yet supported on any platform."
msgstr "现在可以在非 Windows 平台上使用 Clang 编译 ``CUDA`` 语言。任何平台尚不支持可分离编译。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:22
msgid ""
":manual:`cmake(1)` gained support for profiling of CMake scripts through "
"the parameters ``--profiling-output`` and ``--profiling-format``."
msgstr ""
":manual:`cmake(1)` 通过参数 ``--profiling-output`` 和 ``--profiling-format`` "
"获得了对 CMake 脚本分析的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:25
msgid ""
":manual:`cmake(1)` gained a ``cat`` command line option that can be used "
"to concatenate files and print them on standard output."
msgstr ":manual:`cmake(1)` 获得了一个 ``cat`` 命令行选项，可用于连接文件并将它们打印在标准输出上。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:32
msgid ""
"The :command:`add_library` and :command:`add_executable` commands learned "
"to create :ref:`Alias Targets` referencing non-``GLOBAL`` :ref:`Imported "
"Targets`."
msgstr ""
":command:`add_library` 和 :command:`add_executable` 命令学会了创建 :ref:`Alias "
"Targets` 引用非 ``GLOBAL`` :ref:`Imported Targets`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:36
msgid ""
"The :command:`cmake_language()` command was added for meta-operations on "
"scripted or built-in commands, starting with a mode to ``CALL`` other "
"commands, and ``EVAL CODE`` to inplace evaluate a CMake script."
msgstr ""
":command:`cmake_language()` 命令被添加用于脚本或内置命令的元操作，从模式开始以``CALL`` "
"其他命令，以及``EVAL CODE`` 以就地评估 CMake 脚本."

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:40
msgid ""
"The :command:`execute_process` command gained the ``ECHO_OUTPUT_VARIABLE``"
" and ``ECHO_ERROR_VARIABLE`` options."
msgstr ""
":command:`execute_process` 命令获得了 ``ECHO_OUTPUT_VARIABLE`` 和 "
"``ECHO_ERROR_VARIABLE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:43
msgid ""
"The :command:`export` command now raise an error if used multiple times "
"with same ``FILE`` without ``APPEND``. See policy :policy:`CMP0103`."
msgstr ""
":command:`export` 命令现在会在没有 ``APPEND`` 的情况下多次使用相同的 ``FILE`` "
"时引发错误。请参阅政策:policy:`CMP0103`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:46
msgid ""
"The :command:`file` command gained the ``ARCHIVE_CREATE`` and "
"``ARCHIVE_EXTRACT`` subcommands to expose the :manual:`cmake(1)` ``-E "
"tar`` functionality to CMake scripting code."
msgstr ""
":command:`file` 命令获得了 ``ARCHIVE_CREATE`` 和 ``ARCHIVE_EXTRACT`` 子命令以将 "
":manual:`cmake(1)` ``-E tar`` 功能暴露给 CMake 脚本代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:50
msgid ""
"The :command:`file(CONFIGURE)` subcommand was created in order to "
"replicate the :command:`configure_file` functionality without resorting to"
" a pre-existing file on disk as input. The content is instead passed as a "
"string."
msgstr ""
":command:`file(CONFIGURE)` 子命令的创建是为了复制 :command:`configure_file` "
"功能，而无需求助于磁盘上预先存在的文件作为输入。内容而是作为字符串传递。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:55
msgid ""
"The :command:`file(UPLOAD)` command gained ``TLS_VERIFY`` and "
"``TLS_CAINFO`` options to control server certificate verification."
msgstr ""
":command:`file(UPLOAD)` 命令获得了 ``TLS_VERIFY`` 和 ``TLS_CAINFO`` "
"选项来控制服务器证书验证。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:58
msgid ""
"The :command:`find_program`, :command:`find_library`, :command:`find_path`"
" and :command:`find_file` commands gained a new ``REQUIRED`` option that "
"will stop processing with an error message if nothing is found."
msgstr ""
":command:`find_program`、 :command:`find_library`、 :command:`find_path` 和 "
":command:`find_file` 命令获得了一个新的 ``REQUIRED`` 选项，如果未找到任何内容，该选项将停止处理并显示错误消息."

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:62
msgid ""
"The :command:`get_property` command with ``SOURCE`` scope gained the "
"``DIRECTORY`` and ``TARGET_DIRECTORY`` options to get a property from the "
"provided directory scope."
msgstr ""
"具有 ``SOURCE`` 作用域的 :command:`get_property` 命令获得了 ``DIRECTORY`` 和 "
"``TARGET_DIRECTORY`` 选项以从提供的目录作用域中获取属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:66
msgid ""
"The :command:`get_source_file_property` command gained the ``DIRECTORY`` "
"and ``TARGET_DIRECTORY`` options to get a property from the provided "
"directory scope."
msgstr ""
":command:`get_source_file_property` 命令获得了 ``DIRECTORY`` 和 "
"``TARGET_DIRECTORY`` 选项以从提供的目录范围获取属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:70
msgid ""
"The :command:`list` operation ``SORT`` gained the ``NATURAL`` sort option "
"to sort using natural order (see ``strverscmp(3)`` manual)."
msgstr ""
":command:`list` 操作 ``SORT`` 获得了 ``NATURAL`` 排序选项以使用自然顺序进行排序（参见 "
"``strverscmp(3)`` 手册）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:73
msgid ""
"The :command:`set_property` command with the ``SOURCE`` scope gained the "
"``DIRECTORY`` and ``TARGET_DIRECTORY`` options to set properties in the "
"provided directory scopes."
msgstr ""
"具有 ``SOURCE`` 作用域的 :command:`set_property` 命令获得了 ``DIRECTORY`` 和 "
"``TARGET_DIRECTORY`` 选项以在提供的目录作用域中设置属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:77
msgid ""
"The :command:`set_source_files_properties` command gained the "
"``DIRECTORY`` and ``TARGET_DIRECTORY`` options to set properties in the "
"provided directory scopes."
msgstr ""
":command:`set_source_files_properties` 命令获得了 ``DIRECTORY`` 和 "
"``TARGET_DIRECTORY`` 选项以在提供的目录范围内设置属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:81
msgid ""
"The :command:`string` command learned a new ``HEX`` sub-command, which "
"converts strings into their hexadecimal representation."
msgstr ":command:`string` 命令学习了一个新的 ``HEX`` 子命令，它将字符串转换为十六进制表示。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:87
msgid ""
"A :variable:`CMAKE_CUDA_ARCHITECTURES` variable was added to specify CUDA "
"output architectures.  Users are encouraged to use this instead of "
"specifying options manually, as this approach is compiler-agnostic. The "
"variable is initialized automatically when "
":variable:`CMAKE_CUDA_COMPILER_ID <CMAKE_<LANG>_COMPILER_ID>` is "
"``NVIDIA``. The variable is used to initialize the new "
":prop_tgt:`CUDA_ARCHITECTURES` target property.  See policy "
":policy:`CMP0104`."
msgstr ""
"添加了 :variable:`CMAKE_CUDA_ARCHITECTURES` 变量以指定 CUDA "
"输出架构。鼓励用户使用它而不是手动指定选项，因为这种方法与编译器无关。当 :variable:`CMAKE_CUDA_COMPILER_ID "
"<CMAKE_<LANG>_COMPILER_ID>` 为 ``NVIDIA`` 时，该变量会自动初始化。该变量用于初始化新的 "
"CUDA_ARCHITECTURES 目标属性。请参阅政策:policy:`CMP0104`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:95
msgid ""
"The :variable:`CMAKE_PCH_WARN_INVALID` variable was added to initialize "
"the :prop_tgt:`PCH_WARN_INVALID` target property to allow the removal of "
"the precompiled header invalid warning."
msgstr ""
"添加了 :variable:`CMAKE_PCH_WARN_INVALID` 变量来初始化 :prop_tgt:`PCH_WARN_INVALID`"
" 目标属性，以允许删除预编译标头无效警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:102
msgid ""
"The :prop_tgt:`CUDA_ARCHITECTURES` target property was added to specify "
"CUDA output architectures. Users are encouraged to use this instead of "
"specifying options manually, as this approach is compiler-agnostic. The "
"property is initialized by the new :variable:`CMAKE_CUDA_ARCHITECTURES` "
"variable.  See policy :policy:`CMP0104`."
msgstr ""
"添加了 :prop_tgt:`CUDA_ARCHITECTURES` 目标属性以指定 CUDA "
"输出架构。鼓励用户使用它而不是手动指定选项，因为这种方法与编译器无关。该属性由新的 CMAKE_CUDA_ARCHITECTURES "
"变量初始化。请参阅政策:policy:`CMP0104`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:108
msgid ""
"The :prop_tgt:`Fortran_PREPROCESS` target property and "
":prop_sf:`Fortran_PREPROCESS` source-file property were added to control "
"preprocessing of Fortran source files."
msgstr ""
"添加了 :prop_tgt:`Fortran_PREPROCESS` 目标属性和 :prop_sf:`Fortran_PREPROCESS` "
"源文件属性以控制 Fortran 源文件的预处理。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:112
msgid ""
"The :prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` target property "
"and associated :variable:`CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` "
"variable were created to allow adding a postfix to the name of a framework"
" file name when using a multi-config generator."
msgstr ""
":prop_tgt:`FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` "
"目标属性和关联的 :variable:`CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>` "
"变量的创建是为了允许在使用多配置生成器时向框架文件名的名称添加后缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:117
msgid ""
"The :prop_sf:`OBJECT_OUTPUTS` source file property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_sf:`OBJECT_OUTPUTS` 源文件属性现在支持 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:120
msgid ""
"The :prop_tgt:`PCH_WARN_INVALID` target property was added to allow the "
"removal of the precompiled header invalid warning."
msgstr "添加了 :prop_tgt:`PCH_WARN_INVALID` 目标属性以允许删除预编译标头无效警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:123
msgid ""
"The :prop_tgt:`UNITY_BUILD_MODE` target property was added to tell "
"generators which algorithm to use for grouping included source files."
msgstr "添加了 :prop_tgt:`UNITY_BUILD_MODE` 目标属性来告诉生成器使用哪种算法对包含的源文件进行分组。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:127
msgid ""
"The :prop_tgt:`VS_SOURCE_SETTINGS_<tool>` target property was added to "
"tell :ref:`Visual Studio Generators` for VS 2010 and above to add metadata"
" to non-built source files using ``<tool>``."
msgstr ""
":prop_tgt:`VS_SOURCE_SETTINGS_<tool>` 目标属性已添加，以告诉 :ref:`Visual Studio "
"Generators` for VS 2010 及更高版本使用 ``<tool>`` 将元数据添加到非构建的源文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:131
msgid ""
"The :prop_sf:`VS_SETTINGS` source file property was added to tell "
":ref:`Visual Studio Generators` for VS 2010 and above to add metadata to a"
" non-built source file."
msgstr ""
"添加了 :prop_sf:`VS_SETTINGS` 源文件属性，告诉 :ref:`Visual Studio Generators` for VS "
"2010 及更高版本将元数据添加到非构建的源文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:135
msgid ""
"The :prop_tgt:`VS_PLATFORM_TOOLSET` target property was added to tell "
":ref:`Visual Studio Generators` for VS 2010 and above to override the "
"platform toolset."
msgstr ""
"添加了 :prop_tgt:`VS_PLATFORM_TOOLSET` 目标属性，告诉 :ref:`Visual Studio "
"Generators` for VS 2010 及更高版本覆盖平台工具集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:139
msgid ""
"The :prop_tgt:`VS_SOLUTION_DEPLOY` target property was added to tell "
":ref:`Visual Studio Generators` for VS 2010 and above to mark a target for"
" deployment even when not building for Windows Phone/Store/CE."
msgstr ""
":prop_tgt:`VS_SOLUTION_DEPLOY` 目标属性被添加来告诉 :ref:`Visual Studio Generators` "
"用于 VS 2010 及更高版本以标记部署目标，即使不是为 Windows Phone/Store/CE 构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:146
msgid ""
"The :module:`CheckLinkerFlag` module has been added to provide a facility "
"to check validity of link flags."
msgstr "添加了 :module:`CheckLinkerFlag` 模块以提供检查链接标志有效性的工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:149
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command gained a new ``GIT_REMOTE_UPDATE_STRATEGY`` keyword.  This can be "
"used to specify how failed rebase operations during a git update should be"
" handled. The ``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` variable was also "
"added as a global default and is honored by both the "
":module:`ExternalProject` and :module:`FetchContent` modules."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令获得了一个新的 "
"``GIT_REMOTE_UPDATE_STRATEGY`` 关键字。这可用于指定应如何处理 git 更新期间失败的 rebase 操作。 "
"``CMAKE_EP_GIT_REMOTE_UPDATE_STRATEGY`` 变量也被添加为全局默认值，并被 "
":module:`ExternalProject` 和 :module:`FetchContent` 模块采用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:156
msgid ""
"The :module:`FetchContent` module :command:`FetchContent_Declare` command "
"now supports a ``SOURCE_SUBDIR`` option.  It can be used to direct "
":command:`FetchContent_MakeAvailable` to look in a different location for "
"the ``CMakeLists.txt`` file."
msgstr ""
":module:`FetchContent` 模块 :command:`FetchContent_Declare` 命令现在支持 "
"``SOURCE_SUBDIR`` 选项。它可用于指示 :command:`FetchContent_MakeAvailable` 在不同位置查找 "
"``CMakeLists.txt`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:161
msgid "The :module:`FindBLAS` module now provides an imported target."
msgstr ":module:`FindBLAS` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:163
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:105
msgid "The :module:`FindCUDAToolkit` module:"
msgstr ":module:`FindCUDAToolkit` 模块："

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:165
msgid ""
"gained the variable ``CUDAToolkit_LIBRARY_ROOT``, which is the directory "
"containing the ``nvvm`` directory and ``version.txt``."
msgstr ""
"获得变量 ``CUDAToolkit_LIBRARY_ROOT``，这是包含``nvvm``目录和``version.txt``的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:169
msgid ""
"uses toolkit and library root found during ``CUDA`` compiler detection."
msgstr "使用在“CUDA”编译器检测期间找到的工具包和库根目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:171
msgid "The :module:`FindLAPACK` module now provides an imported target."
msgstr ":module:`FindLAPACK` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:173
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules:"
msgstr ""
":module:`FindPython3`、 :module:`FindPython2` 和 :module:`FindPython` 模块："

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:176
msgid ""
"gained the possibility to create per-artifact cache variables for "
"interactive editing in :manual:`cmake-gui(1)` and :manual:`ccmake(1)`."
msgstr ""
"在 :manual:`cmake-gui(1)` 和 :manual:`ccmake(1)` 中获得了为交互式编辑创建每个工件缓存变量的可能性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:179
msgid ""
"gained sub-components ``Development.Module`` and ``Development.Embed`` "
"under the ``Development`` component."
msgstr ""
"在``Development`` 组件下获得子组件``Development.Module`` 和``Development.Embed``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:182
msgid ""
"gained the capability to specify which Python implementations to find, "
"including ``IronPython`` and ``PyPy``."
msgstr "获得了指定要查找哪些 Python 实现的能力，包括“IronPython”和“PyPy”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:185
msgid ""
"The :module:`FindRuby` module input and output variables were all renamed "
"from ``RUBY_`` to ``Ruby_`` for consistency with other find modules. Input"
" variables of the old case will be honored if provided, and output "
"variables of the old case are always provided."
msgstr ""
":module:`FindRuby` 模块输入和输出变量全部从 ``RUBY_`` 重命名为 ``Ruby_`` "
"以与其他查找模块保持一致。如果提供旧案例的输入变量，则将得到尊重，并且始终提供旧案例的输出变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:190
msgid ""
"The :module:`FindSWIG` module now accepts target languages as  "
"``COMPONENTS`` and ``OPTIONAL_COMPONENTS`` arguments to ``find_package``."
msgstr ""
":module:`FindSWIG` 模块现在接受目标语言作为 ``COMPONENTS`` 和 ``OPTIONAL_COMPONENTS`` "
"参数到 ``find_package``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:193
msgid ""
"The :module:`GoogleTest` module :command:`gtest_discover_tests` command:"
msgstr ":module:`GoogleTest` 模块 :command:`gtest_discover_tests` 命令："

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:195
msgid ""
"gained a new ``DISCOVERY_MODE`` option to control when the test discovery "
"step is run.  It offers a new ``PRE_TEST`` setting to run the discovery at"
" test time instead of build time.  A new "
"``CMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE`` variable can be used to "
"change the default globally."
msgstr ""
"获得了一个新的“DISCOVERY_MODE”选项来控制何时运行测试发现步骤。它提供了一个新的“PRE_TEST”设置，可以在测试时而不是构建时运行发现。一个新的“CMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE”变量可用于全局更改默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:201
msgid ""
"gained a new optional parameter ``XML_OUTPUT_DIR``. When set the JUnit XML"
" test results are stored in that directory."
msgstr "获得了一个新的可选参数 ``XML_OUTPUT_DIR``。设置时，JUnit XML 测试结果存储在该目录中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:204
msgid "The :module:`FindLibXslt` module now provides imported targets."
msgstr ":module:`FindLibXslt` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:206
msgid ""
"The :module:`UseSWIG` module now supports Fortran as a target language if "
"the ``SWIG_EXECUTABLE`` is SWIG-Fortran_."
msgstr ""
"如果 SWIG_EXECUTABLE 是 SWIG-Fortran_，那么 UseSWIG 模块现在支持 Fortran 作为目标语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:214
msgid ""
"The :genex:`$<DEVICE_LINK:...>` and :genex:`$<HOST_LINK:...>` generator "
"expressions were added to manage device and host link steps."
msgstr ""
"添加了 :genex:`$<DEVICE_LINK:...>` 和 :genex:`$<HOST_LINK:...>` "
"生成器表达式来管理设备和主机链接步骤。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:217
msgid ""
"The :genex:`$<LINK_LANGUAGE:...>` and :genex:`$<LINK_LANG_AND_ID:...>` "
"generator expressions were added."
msgstr ""
"添加了 :genex:`$<LINK_LANGUAGE:...>` 和 :genex:`$<LINK_LANG_AND_ID:...>` "
"生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:223
msgid ""
":manual:`ctest(1)` gained a new :variable:`CTEST_RESOURCE_SPEC_FILE` "
"variable, which can be used to specify a :ref:`resource specification file"
" <ctest-resource-specification-file>`."
msgstr ""
":manual:`ctest(1)` 获得了一个新的 :variable:`CTEST_RESOURCE_SPEC_FILE` "
"变量，可用于指定:ref:`资源规范文件 <ctest-resource-specification-file>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:227
msgid ""
":manual:`ctest(1)` gained a ``--stop-on-failure`` option, which can be "
"used to stop running the tests once one has failed."
msgstr ":manual:`ctest(1)` 获得了一个 ``--stop-on-failure`` 选项，可以用来在测试失败后停止运行测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:230
msgid ""
"The :command:`ctest_test` command gained a ``STOP_ON_FAILURE`` option "
"which can be used to stop running the tests once one has failed."
msgstr ""
":command:`ctest_test` 命令获得了一个 ``STOP_ON_FAILURE`` 选项，该选项可用于在测试失败后停止运行测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:233
msgid ""
"The :module:`CTestCoverageCollectGCOV` module "
":command:`ctest_coverage_collect_gcov` command gained a "
"``TARBALL_COMPRESSION`` option to control compression of the tarball of "
"collected results."
msgstr ""
":module:`CTestCoverageCollectGCOV` "
"模块 :command:`ctest_coverage_collect_gcov` 命令获得了一个 ``TARBALL_COMPRESSION`` "
"选项来控制对收集结果的 tarball 的压缩。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:241
msgid ""
"The :cpack_gen:`CPack Archive Generator`'s ``TXZ`` format learned the "
":variable:`CPACK_ARCHIVE_THREADS` variable to enable parallel compression."
" Requires support in the ``liblzma`` used by CMake."
msgstr ""
"CPack Archive Generator 的 TXZ 格式学习了 CPACK_ARCHIVE_THREADS 变量以启用并行压缩。需要 "
"CMake 使用的 ``liblzma`` 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:245
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained a new variable "
":variable:`CPACK_NSIS_MANIFEST_DPI_AWARE` to declare that the installer is"
" DPI-aware."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 获得了一个新变量 "
":variable:`CPACK_NSIS_MANIFEST_DPI_AWARE` 来声明安装程序是 DPI 感知的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:249
msgid ""
"The :cpack_gen:`CPack RPM Generator` gained "
":variable:`CPACK_RPM_PRE_TRANS_SCRIPT_FILE` and "
":variable:`CPACK_RPM_POST_TRANS_SCRIPT_FILE` variables to specify pre- and"
" post-transaction scripts."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"获得了 :variable:`CPACK_RPM_PRE_TRANS_SCRIPT_FILE` "
"和 :variable:`CPACK_RPM_POST_TRANS_SCRIPT_FILE` 变量来指定交易前和交易后脚本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:257
msgid ""
":manual:`cmake-gui(1)` now populates its generator selection widget "
"default value from the :envvar:`CMAKE_GENERATOR` environment variable.  "
"Additionally, environment variables :envvar:`CMAKE_GENERATOR_PLATFORM` and"
" :envvar:`CMAKE_GENERATOR_TOOLSET` are used to populate their respective "
"widget defaults."
msgstr ""
":manual:`cmake-gui(1)` 现在从 :envvar:`CMAKE_GENERATOR` "
"环境变量填充其生成器选择小部件默认值。此外，环境变量 :envvar:`CMAKE_GENERATOR_PLATFORM` 和 "
":envvar:`CMAKE_GENERATOR_TOOLSET` 用于填充它们各自的小部件默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:263
msgid ""
":manual:`ccmake(1)` learned to read a :envvar:`CCMAKE_COLORS` environment "
"variable to customize colors."
msgstr ":manual:`ccmake(1)` 学会了读取 :envvar:`CCMAKE_COLORS` 环境变量来自定义颜色。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:266
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of the availability of C11 features in MSVC 19.27 and 19.28, "
"including support for the ``c_restrict``, ``c_static_assert`` features and"
" the ``-std:c11`` flag."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在知道 MSVC 19.27 和"
" 19.28 中 C11 功能的可用性，包括对 ``c_restrict``、``c_static_assert`` 功能的支持和 "
"``-std:c11`` 标志。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:274
msgid ""
"The :module:`Documentation` module has been deprecated via "
":policy:`CMP0106`. This module was essentially VTK code that CMake should "
"not be shipping anymore."
msgstr ""
":module:`Documentation` 模块已通过 :policy:`CMP0106` 弃用。该模块本质上是 CMake 不应再发布的 "
"VTK 代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:278
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0070`` and "
"policy ``CMP0071`` (``CMP0069`` and below were already deprecated). The "
":manual:`cmake-policies(7)` manual explains that the OLD behaviors of all "
"policies are deprecated and that projects should port to the NEW "
"behaviors."
msgstr ""
"为策略“CMP0070”和策略“CMP0071”添加了明确的弃用诊断（“CMP0069”及以下已弃用）。 :manual:`cmake-"
"policies(7)` 手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:287
msgid ""
"On Windows, the :generator:`Ninja` and :generator:`Ninja Multi-Config` "
"generators, when a compiler is not explicitly specified, now select the "
"first compiler (of any name) found in directories listed by the ``PATH`` "
"environment variable."
msgstr ""
"在 Windows 上， :generator:`Ninja` 和 :generator:`Ninja Multi-Config` "
"生成器，当未明确指定编译器时，现在选择在 ``PATH` 列出的目录中找到的第一个编译器（任何名称） ` 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:292
msgid ""
"The :prop_tgt:`LINK_OPTIONS` and :prop_tgt:`INTERFACE_LINK_OPTIONS` target"
" properties are now used for the device link step. See policy "
":policy:`CMP0105`."
msgstr ""
":prop_tgt:`LINK_OPTIONS` 和 :prop_tgt:`INTERFACE_LINK_OPTIONS` "
"目标属性现在用于设备链接步骤。请参阅政策:policy:`CMP0105`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:296
msgid ""
"Creation of an ``ALIAS`` target overwriting an existing target now raises "
"an error. See policy :policy:`CMP0107`."
msgstr "创建覆盖现有目标的“ALIAS”目标现在会引发错误。请参阅政策:policy:`CMP0107`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:299
msgid ""
"Linking a target to itself through an alias now raises an error. See "
"policy :policy:`CMP0108`."
msgstr "通过别名将目标链接到自身现在会引发错误。请参阅政策:policy:`CMP0108`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:302
msgid ""
"The :module:`FindPackageHandleStandardArgs` module option "
"``REQUIRED_VARS`` is now optional if ``HANDLE_COMPONENTS`` is specified."
msgstr ""
"如果指定了“HANDLE_COMPONENTS”，则 FindPackageHandleStandardArgs "
"模块选项“REQUIRED_VARS”现在是可选的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:305
msgid ""
"The :command:`source_group` command now also recognizes forward slashes as"
" subgroup delimiters, not just backslashes."
msgstr ":command:`source_group` 命令现在也将正斜杠识别为子组定界符，而不仅仅是反斜杠。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:308
msgid ""
":manual:`ctest(1)` now logs environment variables that it sets for each "
"test, either due to the :prop_test:`ENVIRONMENT` property or the "
":ref:`resource allocation <ctest-resource-allocation>` feature, and "
"submits this log to CDash. It does not log environment variables that were"
" set outside of CTest."
msgstr ""
":manual:`ctest(1)` 现在记录它为每个测试设置的环境变量，这可能是由于 :prop_test:`ENVIRONMENT` 属性或 "
":ref:`resource allocation <ctest-resource-allocation>` 特性，和将此日志提交给 "
"CDash。它不会记录在 CTest 之外设置的环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:314
msgid ""
"When building CMake itself from source and not using a system-provided "
"libcurl, HTTP/2 support is now enabled for commands supporting network "
"communication via ``http(s)``, such as :command:`file(DOWNLOAD)`, "
":command:`file(UPLOAD)`, and :command:`ctest_submit`. The precompiled "
"binaries provided on ``cmake.org`` now support HTTP/2."
msgstr ""
"当从源代码构建 CMake 本身而不使用系统提供的 libcurl 时，现在为支持通过 ``http(s)`` 支持网络通信的命令启用 HTTP/2"
" 支持，例如 :command:`file(DOWNLOAD)`， :command:`文件（上传）`，和 :command:`ctest_submit`。 "
"``cmake.org`` 上提供的预编译二进制文件现在支持 HTTP/2。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:320
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to 2.1."
msgstr ""
":manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` 字段已更新为 "
"2.1。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:323
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 \"target\" object "
"gained a new ``precompileHeaders`` field in the ``compileGroups`` objects."
msgstr ""
":manual:`cmake-file-api(7)` “codemodel” version 2 “target” 对象在 "
"``compileGroups`` 对象中获得了一个新的 ``precompileHeaders`` 字段。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:329
msgid "Changes made since CMake 3.18.0 include the following."
msgstr "自 CMake 3.18.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:332
msgid "3.18.1"
msgstr "3.18.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:334
msgid ""
"The :generator:`Xcode` generator, when :variable:`CMAKE_OSX_ARCHITECTURES`"
" is not defined, now selects ``$(NATIVE_ARCH_ACTUAL)`` as the default "
"architecture (the Xcode ``ARCHS`` setting).  This is needed for Xcode 12 "
"to select the host's architecture, which older versions of Xcode did by "
"default."
msgstr ""
":generator:`Xcode` 生成器，当 :variable:`CMAKE_OSX_ARCHITECTURES` 未定义时，现在选择 "
"``$(NATIVE_ARCH_ACTUAL)`` 作为默认架构（Xcode ``ARCHS`` 设置）。这是 Xcode 12 "
"选择主机架构所必需的，旧版本的 Xcode 默认会这样做。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:340
msgid ""
"In CMake 3.18.0 the :command:`add_test` command learned to support special"
" characters in test names.  This was accidentally left out of its release "
"notes.  Unfortunately the fix breaks existing projects that were using "
"manual quoting or escaping to work around the prior limitation.  This fix "
"has been reverted in 3.18.1, but may be re-introduced in future versions "
"of CMake with a policy for compatibility."
msgstr ""
"在 CMake 3.18.0 中， :command:`add_test` "
"命令学会了支持测试名称中的特殊字符。这被意外地排除在其发行说明之外。不幸的是，该修复破坏了使用手动引用或转义来解决先前限制的现有项目。此修复已在 "
"3.18.1 中恢复，但可能会在未来版本的 CMake 中重新引入，并具有兼容性策略。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:348
msgid "3.18.2"
msgstr "3.18.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:350
msgid ""
"The default value of :variable:`CMAKE_AUTOMOC_PATH_PREFIX` was changed to "
"``OFF`` because this feature can break existing projects that have "
"identically named header files in different include directories. This "
"restores compatibility with behavior of CMake 3.15 and below. The default "
"was also changed to ``OFF`` in 3.16.9 and 3.17.5."
msgstr ""
":variable:`CMAKE_AUTOMOC_PATH_PREFIX` 的默认值已更改为 "
"``OFF``，因为此功能可能会破坏在不同包含目录中具有相同名称头文件的现有项目。这将恢复与 CMake 3.15 及更低版本行为的兼容性。在 "
"3.16.9 和 3.17.5 中，默认值也更改为“关闭”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:356
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"was updated for MSVC 19.27 as mentioned above (``c_restrict``)."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能已针对 MSVC 19.27 "
"进行了更新，如上所述 (``c_restrict``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:360
msgid "3.18.3"
msgstr "3.18.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.18.rst:362
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"was updated for MSVC 19.28 as mentioned above (``c_static_assert``)."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能已针对 MSVC 19.28 "
"进行了更新，如上所述 (``c_static_assert``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:2
msgid "CMake 3.19 Release Notes"
msgstr "CMake 3.19 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:8
msgid "Changes made since CMake 3.18 include the following."
msgstr "自 CMake 3.18 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:14
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:14
msgid "Presets"
msgstr "预设"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:16
msgid ""
":manual:`cmake(1)` and :manual:`cmake-gui(1)` now recognize "
"``CMakePresets.json`` and ``CMakeUserPresets.json`` files (see "
":manual:`cmake-presets(7)`)."
msgstr ""
":manual:`cmake(1)` 和 :manual:`cmake-gui(1)` 现在可以识别 ``CMakePresets.json`` 和"
" ``CMakeUserPresets.json`` 文件（参见:manual:`cmake-presets(7 )`)."

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:23
msgid ""
"The :generator:`Xcode` generator now uses the Xcode \"new build system\" "
"when generating for Xcode 12.0 or higher. See the "
":variable:`CMAKE_XCODE_BUILD_SYSTEM` variable. One may use ``-T "
"buildsystem=1`` to switch to the legacy build system."
msgstr ""
":generator:`Xcode` 生成器现在在为 Xcode 12.0 或更高版本生成时使用 "
"Xcode“新构建系统”。请参阅 :variable:`CMAKE_XCODE_BUILD_SYSTEM` 变量。可以使用 ``-T "
"buildsystem=1`` 切换到遗留构建系统。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:28
msgid ""
"The :generator:`Xcode` generator gained support for linking libraries and "
"frameworks via the *Link Binaries With Libraries* build phase instead of "
"always by embedding linker flags directly.  This behavior is controlled by"
" a new :prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE` target property, which is "
"initialized by a new :variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE` "
"variable."
msgstr ""
":generator:`Xcode` 生成器通过 *Link Binaries With Libraries* "
"构建阶段获得了对链接库和框架的支持，而不是总是通过直接嵌入链接器标志。此行为由新的 :prop_tgt:`XCODE_LINK_BUILD_PHASE_MODE`"
" 目标属性控制，该属性由新的 :variable:`CMAKE_XCODE_LINK_BUILD_PHASE_MODE` 变量初始化。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:35
msgid ""
"The :ref:`Visual Studio Generators` for VS 2015 and above gained support "
"for the Visual Studio Tools for Android.  One may now set "
":variable:`CMAKE_SYSTEM_NAME` to ``Android`` to generate ``.vcxproj`` "
"files for the Android tools."
msgstr ""
"VS 2015 及更高版本的 :ref:`Visual Studio Generators` 获得了对 Visual Studio Tools "
"for Android 的支持。现在可以将 :variable:`CMAKE_SYSTEM_NAME` 设置为 ``Android`` 来为 "
"Android 工具生成 ``.vcxproj`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:43
msgid ""
"CMake learned to support ``ISPC`` as a first-class language that can be "
"enabled via the :command:`project` and :command:`enable_language` "
"commands. ``ISPC`` is currently supported by the :ref:`Makefile "
"Generators` and the :generator:`Ninja` generator on Linux, macOS, and "
"Windows using the Intel ISPC compiler."
msgstr ""
"CMake 学会了支持 ``ISPC`` 作为一流的语言，可以通过 :command:`project` 和 "
":command:`enable_language` 命令启用。使用英特尔 ISPC 编译器的 Linux、macOS 和 Windows 上的 "
"Makefile Generators 和 Ninja 生成器目前支持 ``ISPC``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:49
msgid "``CUDA`` language support for Clang now includes:"
msgstr "Clang 的 ``CUDA`` 语言支持现在包括："

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:51
msgid "separable compilation (:prop_tgt:`CUDA_SEPARABLE_COMPILATION`), and"
msgstr "可分离编译（ :prop_tgt:`CUDA_SEPARABLE_COMPILATION`），和"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:52
msgid "finding scattered toolkit installations when cross-compiling."
msgstr "交叉编译时查找分散的工具包安装。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:54
msgid "``CUDA`` language support now works on QNX."
msgstr "``CUDA`` 语言支持现在适用于 QNX。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:59
msgid "Apple Silicon is now supported (since CMake 3.19.2):"
msgstr "现在支持 Apple Silicon（自 CMake 3.19.2 起）："

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:61
msgid ""
"The :variable:`CMAKE_HOST_SYSTEM_PROCESSOR` is selected using ``uname "
"-m``. Since this may vary based on CMake's own architecture and that of "
"the invoking process tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR` "
"variable or :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable "
"may be set to specify a host architecture explicitly."
msgstr ""
":variable:`CMAKE_HOST_SYSTEM_PROCESSOR` 使用 ``uname -m`` 选择。由于这可能会根据 CMake "
"自己的体系结构和调用进程树的体系结构而有所不同，因此可以设置 :variable:`CMAKE_APPLE_SILICON_PROCESSOR` "
"变量或 :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` 环境变量以明确指定主机体系结构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:67
msgid ""
"If :variable:`CMAKE_OSX_ARCHITECTURES` is not set, CMake adds explicit "
"flags to tell the compiler to build for the "
":variable:`CMAKE_HOST_SYSTEM_PROCESSOR` so the toolchain does not have to "
"guess based on the process tree's architecture."
msgstr ""
"如果未设置 :variable:`CMAKE_OSX_ARCHITECTURES`，CMake 会添加显式标志以告知编译器为 "
":variable:`CMAKE_HOST_SYSTEM_PROCESSOR` 构建，因此工具链不必根据进程树的架构进行猜测。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:75
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to 2.2."
msgstr ""
":manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` 字段已更新为 "
"2.2。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:78
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 \"target\" object "
"gained a new ``languageStandard`` field in the ``compileGroups`` objects."
msgstr ""
":manual:`cmake-file-api(7)` “codemodel” version 2 “target” 对象在 "
"``compileGroups`` 对象中获得了一个新的 ``languageStandard`` 字段。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:84
msgid ""
"The :manual:`cmake(1)` command-line tool's ``--install`` mode gained a "
"``--default-directory-permissions`` option."
msgstr ""
":manual:`cmake(1)` 命令行工具的 ``--install`` 模式获得了 ``--default-directory-"
"permissions`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:87
msgid ""
":manual:`cmake(1)` gained a ``-E create_hardlink`` command-line tool that "
"can be used to create hardlinks between files."
msgstr ""
":manual:`cmake(1)` 获得了一个 ``-E create_hardlink`` 命令行工具，可用于在文件之间创建硬链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:91
#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:14
msgid "GUI"
msgstr "图形用户界面"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:93
msgid ""
"The :manual:`CMake GUI <cmake-gui(1)>` now has an environment variable "
"editor."
msgstr ":manual:`CMake GUI <cmake-gui(1)>` 现在有一个环境变量编辑器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:99
msgid ""
"The :command:`add_test` command now (officially) supports whitespace and "
"other special characters in the name for the test it creates. See policy "
":policy:`CMP0110`."
msgstr ""
":command:`add_test` 命令现在（正式）支持其创建的测试名称中的空格和其他特殊字符。请参阅政策:policy:`CMP0110`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:103
msgid ""
"The :command:`cmake_language` command gained a ``DEFER`` mode to schedule "
"command calls to occur at the end of processing a directory."
msgstr ":command:`cmake_language` 命令获得了一个 ``DEFER`` 模式来安排命令调用在处理目录结束时发生。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:106
msgid ""
"The :command:`configure_file` command gained a ``NO_SOURCE_PERMISSIONS`` "
"option to suppress copying the input file's permissions to the output "
"file."
msgstr ""
":command:`configure_file` 命令获得了一个 ``NO_SOURCE_PERMISSIONS`` "
"选项来禁止将输入文件的权限复制到输出文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:109
msgid ""
"The :command:`execute_process` command gained a ``COMMAND_ERROR_IS_FATAL``"
" option to specify a fatal error."
msgstr ""
":command:`execute_process` 命令获得了 ``COMMAND_ERROR_IS_FATAL`` 选项来指定致命错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:112
msgid ""
"The :command:`file(ARCHIVE_CREATE)` command gained a ``COMPRESSION_LEVEL``"
" option to specify the compression level."
msgstr ""
":command:`file(ARCHIVE_CREATE)` 命令获得了一个 ``COMPRESSION_LEVEL`` 选项来指定压缩级别。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:115
msgid ""
"The :command:`file(CHMOD)` and :command:`file(CHMOD_RECURSE)` subcommands "
"were added to set permissions of files and directories."
msgstr ""
"添加了 :command:`file(CHMOD)` 和 :command:`file(CHMOD_RECURSE)` "
"子命令来设置文件和目录的权限。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:118
msgid ""
"The :command:`file(DOWNLOAD)` command ``<file>`` argument is now optional."
"  If it is not specified, the file is not saved."
msgstr ":command:`file(DOWNLOAD)` 命令``<file>`` 参数现在是可选的。如果未指定，则不保存文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:121
msgid ""
"The :command:`file(GENERATE)` command gained a new ``TARGET`` keyword to "
"support resolving target-dependent generator expressions."
msgstr ""
":command:`file(GENERATE)` 命令获得了一个新的 ``TARGET`` 关键字来支持解析依赖于目标的生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:124
msgid ""
"The :command:`file` command gained a new ``REAL_PATH`` sub-command to "
"compute a path with symlinks resolved."
msgstr ":command:`file` 命令获得了一个新的 ``REAL_PATH`` 子命令来计算已解析符号链接的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:127
msgid ""
"The :command:`find_package` command learned to handle a version range."
msgstr ":command:`find_package` 命令学会了处理版本范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:129
msgid ""
"The :command:`separate_arguments` command gained a new ``PROGRAM`` option."
" It allows the arguments to be treated as a program invocation and will "
"resolve the executable to a full path if it can be found."
msgstr ""
":command:`separate_arguments` 命令获得了一个新的 ``PROGRAM`` "
"选项。它允许将参数视为程序调用，并将可执行文件解析为完整路径（如果可以找到）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:133
msgid ""
"The ``DIRECTORY`` option of the :command:`set_property`, "
":command:`get_property`, and :command:`get_directory_property` commands "
"now accepts references to binary directory paths, such as the value of "
":variable:`CMAKE_CURRENT_BINARY_DIR`."
msgstr ""
":command:`set_property`、 :command:`get_property` 和 "
":command:`get_directory_property` 命令的 ``DIRECTORY`` 选项现在接受对二进制目录路径的引用，例如 "
"CMAKE_CURRENT_BINARY_DIR 的值."

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:138
msgid ""
"The :command:`string` command gained a set of new ``JSON`` sub commands "
"that provide JSON parsing capabilities."
msgstr ":command:`string` 命令获得了一组新的 ``JSON`` 子命令，提供 JSON 解析功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:144
msgid ""
"The :variable:`CMAKE_CLANG_VFS_OVERLAY` variable was added to tell Clang "
"to use a VFS overlay to support the Windows SDK when cross-compiling from "
"hosts with case-sensitive filesystems."
msgstr ""
"添加了 :variable:`CMAKE_CLANG_VFS_OVERLAY` 变量，告诉 Clang "
"在从具有区分大小写的文件系统的主机进行交叉编译时使用 VFS 覆盖来支持 Windows SDK。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:148
msgid ""
"The :variable:`CMAKE_MFC_FLAG` variable now supports generator "
"expressions."
msgstr ":variable:`CMAKE_MFC_FLAG` 变量现在支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:150
msgid ""
"The :variable:`CMAKE_OPTIMIZE_DEPENDENCIES` variable was added to "
"initialize the new :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property and "
"avoid unnecessarily building dependencies for a static library."
msgstr ""
"添加了 :variable:`CMAKE_OPTIMIZE_DEPENDENCIES` 变量以初始化新的 "
":prop_tgt:`OPTIMIZE_DEPENDENCIES` 目标属性并避免为静态库构建不必要的依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:154
msgid ""
"The :variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` variable was added to "
"initialize the new :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property."
msgstr ""
"添加了 :variable:`CMAKE_PCH_INSTANTIATE_TEMPLATES` 变量以初始化新的 "
":prop_tgt:`PCH_INSTANTIATE_TEMPLATES` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:157
msgid ""
"The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` variable "
"was added to tell the :ref:`Visual Studio Generators` what maximum version"
" of the Windows SDK to choose."
msgstr ""
"添加了 :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` 变量来告诉 "
":ref:`Visual Studio Generators` 要选择的 Windows SDK 的最高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:164
msgid ""
"The :prop_tgt:`EXCLUDE_FROM_ALL` target property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`EXCLUDE_FROM_ALL` 目标属性现在支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:167
msgid ""
"The :prop_tgt:`OPTIMIZE_DEPENDENCIES` target property was added to avoid "
"unnecessarily building dependencies for a static library."
msgstr "添加了 :prop_tgt:`OPTIMIZE_DEPENDENCIES` 目标属性以避免不必要地为静态库构建依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:170
msgid ""
"The :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` target property was added to "
"enable template instantiation in the precompiled header. This is enabled "
"by default and may significantly improve compile times. Currently only "
"supported for Clang (version 11 or later)."
msgstr ""
"添加了 :prop_tgt:`PCH_INSTANTIATE_TEMPLATES` "
"目标属性以在预编译标头中启用模板实例化。这是默认启用的，可能会显着缩短编译时间。目前仅支持 Clang（版本 11 或更高版本）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:175
msgid ""
"The :prop_tgt:`WIN32_EXECUTABLE` target property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`WIN32_EXECUTABLE` 目标属性现在支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:181
msgid ""
"The :module:`CheckCompilerFlag` module has been added to generalize "
":module:`CheckCCompilerFlag` and :module:`CheckCXXCompilerFlag` to more "
"languages. It also supports the ``CUDA`` and ``ISPC`` languages."
msgstr ""
"添加了 CheckCompilerFlag 模块以将 CheckCCompilerFlag 和 CheckCXXCompilerFlag "
"推广到更多语言。它还支持 ``CUDA`` 和 ``ISPC`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:186
msgid ""
"The :module:`CheckLinkerFlag` module now supports the ``CUDA`` language."
msgstr ":module:`CheckLinkerFlag` 模块现在支持 ``CUDA`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:188
msgid ""
"The :module:`CheckSourceCompiles` module has been added to generalize "
":module:`CheckCSourceCompiles` and :module:`CheckCXXSourceCompiles` to "
"more languages. It also supports the ``CUDA`` and ``ISPC`` languages."
msgstr ""
"添加了 CheckSourceCompiles 模块以将 CheckCSourceCompiles 和 CheckCXXSourceCompiles"
" 推广到更多语言。它还支持 ``CUDA`` 和 ``ISPC`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:193
msgid ""
"The :module:`CheckSourceRuns` module has been added to generalize "
":module:`CheckCSourceRuns` and :module:`CheckCXXSourceRuns` to more "
"languages. It also supports the ``CUDA`` language."
msgstr ""
"添加了 CheckSourceRuns 模块以将 CheckCSourceRuns 和 CheckCXXSourceRuns "
"推广到更多语言。它还支持 ``CUDA`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:198
msgid ""
"The :module:`CMakePackageConfigHelpers` module gained support for version "
"ranges."
msgstr ":module:`CMakePackageConfigHelpers` 模块获得了对版本范围的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:201
msgid ""
"The :module:`FindCUDAToolkit` module gained support for finding CUDA "
"toolkits that do not contain ``nvcc``, as well as for finding scattered "
"toolkit installations when cross-compiling."
msgstr ""
":module:`FindCUDAToolkit` 模块支持查找不包含 ``nvcc`` 的 CUDA "
"工具包，以及在交叉编译时查找分散的工具包安装。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:205
msgid ""
"The :module:`FindPackageHandleStandardArgs` module learned to handle "
"version ranges. It also gained the ``find_package_check_version()`` "
"command to check the validity of a version against version-related "
"arguments of :command:`find_package` command."
msgstr ""
"FindPackageHandleStandardArgs 模块学会了处理版本范围。它还获得了 "
"``find_package_check_version()`` 命令来根据 :command:`find_package` "
"命令的版本相关参数检查版本的有效性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:210
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules gained the ability to handle a version range."
msgstr "FindPython3、FindPython2 和 FindPython 模块获得了处理版本范围的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:213
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules provide, respectively, the variable ``Python3_LINK_OPTIONS``, "
"``Python2_LINK_OPTIONS`` and ``Python_LINK_OPTIONS`` for link options."
msgstr ""
"FindPython3、FindPython2 和 FindPython 模块分别提供链接选项的变量 "
"Python3_LINK_OPTIONS、Python2_LINK_OPTIONS 和 Python_LINK_OPTIONS。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:217
msgid "The :module:`FindSDL` module now provides:"
msgstr ":module:`FindSDL` 模块现在提供："

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:219
msgid "An imported target ``SDL::SDL``."
msgstr "导入的目标“SDL::SDL”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:221
msgid "Result variables ``SDL_LIBRARIES`` and ``SDL_INCLUDE_DIRS``."
msgstr "结果变量“SDL_LIBRARIES”和“SDL_INCLUDE_DIRS”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:223
msgid ""
"Version variables ``SDL_VERSION``, ``SDL_VERSION_MAJOR``, "
"``SDL_VERSION_MINOR``, and ``SDL_VERSION_PATCH``."
msgstr ""
"版本变量“SDL_VERSION”、“SDL_VERSION_MAJOR”、“SDL_VERSION_MINOR”和“SDL_VERSION_PATCH”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:226
msgid ""
"The :module:`FindSWIG` module gained the ability to handle a version "
"range."
msgstr "FindSWIG 模块获得了处理版本范围的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:228
msgid ""
"The :module:`FindTIFF` module gained a ``CXX`` component to find the "
"``tiffxx`` library containing C++ bindings."
msgstr ":module:`FindTIFF` 模块获得了一个 ``CXX`` 组件来查找包含 C++ 绑定的 ``tiffxx`` 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:231
msgid ""
"The :module:`FindVulkan` module now provides a ``Vulkan::glslc`` imported "
"target and associated ``Vulkan_GLSLC_EXECUTABLE`` variable which contain "
"the path to the GLSL SPIR-V compiler."
msgstr ""
":module:`FindVulkan` 模块现在提供了一个``Vulkan::glslc`` "
"导入目标和关联的``Vulkan_GLSLC_EXECUTABLE`` 变量，其中包含 GLSL SPIR-V 编译器的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:235
msgid ""
"The :module:`UseSWIG` module gained support for new source file properties"
" ``OUTPUT_DIR`` and ``OUTFILE_DIR`` to manage output directories on a per-"
"source basis."
msgstr "UseSWIG 模块获得了对新源文件属性“OUTPUT_DIR”和“OUTFILE_DIR”的支持，以在每个源的基础上管理输出目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:242
msgid ""
":manual:`ctest(1)` now supports the CUDA ``compute-sanitizer`` checker "
"(previously known as ``cuda-memcheck``) as the "
"``CTEST_MEMORYCHECK_COMMAND``. The different tools (``memcheck``, "
"``racecheck``, ``synccheck`` and ``initcheck``) supported by ``compute-"
"sanitizer`` can be selected by adding appropriate flags to the "
"``CTEST_MEMORYCHECK_COMMAND_OPTIONS`` variable.  The default flags are "
"``--tool memcheck --leak-check full``."
msgstr ""
":manual:`ctest(1)` 现在支持 CUDA ``compute-sanitizer`` 检查器（以前称为 ``cuda-"
"memcheck``）作为 "
"``CTEST_MEMORYCHECK_COMMAND``。可以通过向“CTEST_MEMORYCHECK_COMMAND_OPTIONS”添加适当的标志来选择“compute-"
"sanitizer”支持的不同工具（“memcheck”、“racecheck”、“synccheck”和“initcheck”） "
"`变量。默认标志是``--tool memcheck --leak-check full``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:252
msgid ""
"CPack gained the :variable:`CPACK_PRE_BUILD_SCRIPTS`, "
":variable:`CPACK_POST_BUILD_SCRIPTS`, and :variable:`CPACK_PACKAGE_FILES` "
"variables."
msgstr ""
"CPack 获得了 :variable:`CPACK_PRE_BUILD_SCRIPTS`、 :variable:`CPACK_POST_BUILD_SCRIPTS` "
"和 :variable:`CPACK_PACKAGE_FILES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:256
msgid ""
"The :cpack_gen:`CPack External Generator` gained the "
":variable:`CPACK_EXTERNAL_BUILT_PACKAGES` variable."
msgstr ""
":cpack_gen:`CPack 外部生成器` 获得了 :variable:`CPACK_EXTERNAL_BUILT_PACKAGES` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:259
msgid ""
"The :cpack_gen:`CPack WIX Generator` gained a "
":variable:`CPACK_WIX_CUSTOM_XMLNS` option to specify custom XML "
"namespaces."
msgstr ""
":cpack_gen:`CPack WIX Generator` 获得了一个 :variable:`CPACK_WIX_CUSTOM_XMLNS` "
"选项来指定自定义 XML 命名空间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:265
msgid ""
":ref:`Interface Libraries` may now have source files added via "
":command:`add_library` or :command:`target_sources`.  Those with sources "
"will be generated as part of the build system."
msgstr ""
":ref:`Interface Libraries` 现在可以通过 :command:`add_library` 或 "
":command:`target_sources` 添加源文件。那些有源代码的将作为构建系统的一部分生成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:272
msgid ""
"Compatibility with versions of CMake older than 2.8.12 is now deprecated "
"and will be removed from a future version.  Calls to "
":command:`cmake_minimum_required` or :command:`cmake_policy` that set the "
"policy version to an older value now issue a deprecation diagnostic."
msgstr ""
"与 2.8.12 之前的 CMake 版本的兼容性现已弃用，并将从未来版本中删除。调用 "
":command:`cmake_minimum_required` 或 :command:`cmake_policy` "
"将策略版本设置为旧值，现在会发出弃用诊断。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:277
msgid ""
"An explicit deprecation diagnostic was added for policy ``CMP0071`` "
"(``CMP0071`` and below were already deprecated). The :manual:`cmake-"
"policies(7)` manual explains that the OLD behaviors of all policies are "
"deprecated and that projects should port to the NEW behaviors."
msgstr ""
"为策略“CMP0071”添加了明确的弃用诊断（“CMP0071”及以下已弃用）。 :manual:`cmake-policies(7)` "
"手册解释说所有策略的旧行为都已弃用，项目应该移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:283
msgid "macOS SDKs older than 10.5 are no longer supported."
msgstr "不再支持早于 10.5 的 macOS SDK。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:285
msgid ""
":manual:`cmake-gui(1)` now requires Qt5. Support for compiling with Qt4 "
"has been removed."
msgstr ":manual:`cmake-gui(1)` 现在需要 Qt5。已删除对使用 Qt4 进行编译的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:288
msgid ""
"The :manual:`cmake(1)` command-line option ``--warn-unused-vars`` has been"
" removed and is now silently ignored.  The option has not worked correctly"
" since CMake 3.3."
msgstr ""
":manual:`cmake(1)` 命令行选项 ``--warn-unused-vars`` 已被删除，现在被静默忽略。自 CMake 3.3 "
"以来，该选项无法正常工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:293
msgid "Documentation"
msgstr "文档"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:295
msgid "The following guides have been added:"
msgstr "添加了以下指南："

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:297
msgid ":guide:`IDE Integration Guide`"
msgstr ":guide:`IDE 集成指南`"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:298
msgid ":guide:`Importing and Exporting Guide`"
msgstr ":guide:`导入和导出指南`"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:303
msgid ""
"Building for macOS will now use the latest SDK available on the system, "
"unless the user has explicitly chosen a SDK using "
":variable:`CMAKE_OSX_SYSROOT`.  The deployment target or system macOS "
"version will not affect the choice of SDK."
msgstr ""
"为 macOS 构建现在将使用系统上可用的最新 SDK，除非用户明确选择了使用 CMAKE_OSX_SYSROOT 的 SDK。部署目标或系统 "
"macOS 版本不会影响 SDK 的选择。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:308
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER` variable may now be used to store "
"\"mandatory\" compiler flags like the :envvar:`CC` and other environment "
"variables."
msgstr ""
":variable:`CMAKE_<LANG>_COMPILER` 变量现在可用于存储“强制”编译器标志，如 :envvar:`CC` "
"和其他环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:312
msgid ""
"The :variable:`CMAKE_<LANG>_FLAGS_INIT` variable will now be considered "
"during the compiler identification check if other sources like "
":variable:`CMAKE_<LANG>_FLAGS` or :envvar:`CFLAGS` are not set."
msgstr ""
":variable:`CMAKE_<LANG>_FLAGS_INIT` 变量现在将在编译器识别检查期间考虑是否未设置其他来源，如 "
":variable:`CMAKE_<LANG>_FLAGS` 或 :envvar:`CFLAGS`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:316
msgid ""
"The :command:`find_program` command now requires permission to execute but"
" not to read the file found.  See policy :policy:`CMP0109`."
msgstr ":command:`find_program` 命令现在需要执行权限，但不需要读取找到的文件。请参阅政策:policy:`CMP0109`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:319
msgid ""
"An imported target missing its location property fails during generation "
"if the location is used.  See policy :policy:`CMP0111`."
msgstr "如果使用位置，则导入的目标缺少其位置属性会在生成过程中失败。请参阅政策:policy:`CMP0111`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:322
msgid ""
"The following target-based generator expressions that query for directory "
"or file name components no longer add a dependency on the evaluated "
"target. See policy :policy:`CMP0112`."
msgstr "以下查询目录或文件名组件的基于目标的生成器表达式不再添加对评估目标的依赖性。请参阅政策:policy:`CMP0112`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:326
msgid "``TARGET_FILE_DIR``"
msgstr "``TARGET_FILE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:327
msgid "``TARGET_LINKER_FILE_BASE_NAME``"
msgstr "``TARGET_LINKER_FILE_BASE_NAME``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:328
msgid "``TARGET_LINKER_FILE_NAME``"
msgstr "``TARGET_LINKER_FILE_NAME``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:329
msgid "``TARGET_LINKER_FILE_DIR``"
msgstr "``TARGET_LINKER_FILE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:330
msgid "``TARGET_SONAME_FILE_NAME``"
msgstr "``TARGET_SONAME_FILE_NAME``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:331
msgid "``TARGET_SONAME_FILE_DIR``"
msgstr "``TARGET_SONAME_FILE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:332
msgid "``TARGET_PDB_FILE_NAME``"
msgstr "``TARGET_PDB_FILE_NAME``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:333
msgid "``TARGET_PDB_FILE_DIR``"
msgstr "``TARGET_PDB_FILE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:334
msgid "``TARGET_BUNDLE_DIR``"
msgstr "``TARGET_BUNDLE_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:335
msgid "``TARGET_BUNDLE_CONTENT_DIR``"
msgstr "``TARGET_BUNDLE_CONTENT_DIR``"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:337
msgid ""
":ref:`Makefile Generators` no longer repeat custom commands from target "
"dependencies.  See policy :policy:`CMP0113`."
msgstr ":ref:`Makefile Generators` 不再重复来自目标依赖项的自定义命令。请参阅政策:policy:`CMP0113`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:340
msgid ""
"The :module:`ExternalProject` module handling of step target dependencies "
"has been revised.  See policy :policy:`CMP0114`."
msgstr "步骤目标依赖项的 :module:`ExternalProject` 模块处理已被修改。请参阅政策:policy:`CMP0114`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:343
msgid ""
"The :prop_tgt:`OSX_ARCHITECTURES` target property is now respected for the"
" ``ASM`` language."
msgstr ":prop_tgt:`OSX_ARCHITECTURES` 目标属性现在适用于 ``ASM`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:346
msgid ""
"If ``CUDA`` compiler detection fails with user-specified "
":variable:`CMAKE_CUDA_ARCHITECTURES` or "
":variable:`CMAKE_CUDA_HOST_COMPILER`, an error is raised."
msgstr ""
"如果 ``CUDA`` 编译器检测因用户指定的 :variable:`CMAKE_CUDA_ARCHITECTURES` 或 "
":variable:`CMAKE_CUDA_HOST_COMPILER` 而失败，则会引发错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:353
msgid "Changes made since CMake 3.19.0 include the following."
msgstr "自 CMake 3.19.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:356
msgid "3.19.1"
msgstr "3.19.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:358
msgid ""
"CMake 3.19.0 compiles source files with the :prop_sf:`LANGUAGE` property "
"by passing an explicit language flag such as ``-x c``. This is consistent "
"with the property's documented meaning that the source file is written in "
"the specified language.  However, it can break projects that were using "
"the property only to cause the specified language's compiler to be used.  "
"This has been reverted to restore behavior from CMake 3.18 and below."
msgstr ""
"CMake 3.19.0 通过传递显式语言标志（例如 -x c）使用 :prop_sf:`LANGUAGE` "
"属性编译源文件。这与属性的文档含义一致，即源文件是用指定语言编写的。但是，它可能会破坏仅使用该属性以导致使用指定语言的编译器的项目。这已被恢复以恢复"
" CMake 3.18 及以下版本的行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:366
msgid "CUDA 11.1 support for Clang."
msgstr "CUDA 11.1 支持 Clang。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:369
msgid "3.19.2"
msgstr "3.19.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:371
msgid ""
"The precompiled macOS binary provided on ``cmake.org`` is now a universal "
"binary with ``x86_64`` and ``arm64`` architectures. It requires macOS "
"10.10 or newer. The package file naming pattern has been changed from "
"``cmake-$ver-Darwin-x86_64`` to ``cmake-$ver-macos-universal``."
msgstr ""
"``cmake.org`` 上提供的预编译 macOS 二进制文件现在是具有 ``x86_64`` 和 ``arm64`` "
"架构的通用二进制文件。它需要 macOS 10.10 或更高版本。包文件命名模式已从“cmake-$ver-"
"Darwin-x86_64”更改为“cmake-$ver-macos-universal”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:377
msgid ""
"Apple Silicon host architecture selection support was updated. CMake "
"3.19.0 and 3.19.1 always chose ``arm64`` as the host architecture. CMake "
"3.19.2 returns to using ``uname -m`` as CMake 3.18 and below did. Since "
"this may vary based on CMake's own architecture and that of the invoking "
"process tree, the :variable:`CMAKE_APPLE_SILICON_PROCESSOR` variable or "
":envvar:`CMAKE_APPLE_SILICON_PROCESSOR` environment variable may be set to"
" specify a host architecture explicitly."
msgstr ""
"更新了 Apple Silicon 主机架构选择支持。 CMake 3.19.0 和 3.19.1 始终选择“arm64”作为主机架构。 CMake"
" 3.19.2 恢复使用 ``uname -m``，就像 CMake 3.18 及以下版本一样。由于这可能会根据 CMake "
"自己的体系结构和调用进程树的体系结构而有所不同，因此可以设置 :variable:`CMAKE_APPLE_SILICON_PROCESSOR` "
"变量或 :envvar:`CMAKE_APPLE_SILICON_PROCESSOR` 环境变量以明确指定主机体系结构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:385
msgid ""
"The :variable:`CMAKE_ISPC_HEADER_SUFFIX` variable and corresponding "
":prop_tgt:`ISPC_HEADER_SUFFIX` target property were added to control the "
"header suffix used by ``ISPC`` compiler generated headers."
msgstr ""
"添加了 :variable:`CMAKE_ISPC_HEADER_SUFFIX` 变量和相应的 "
":prop_tgt:`ISPC_HEADER_SUFFIX` 目标属性来控制 ``ISPC`` 编译器生成的标头所使用的标头后缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:390
msgid "3.19.3"
msgstr "3.19.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:392
msgid ""
"A precompiled Linux ``aarch64`` binary is now provided on ``cmake.org``."
msgstr "预编译的 Linux ``aarch64`` 二进制文件现在在 ``cmake.org`` 上提供。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:394
msgid "Two precompiled macOS binaries are now provided on ``cmake.org``:"
msgstr "``cmake.org`` 现在提供了两个预编译的 macOS 二进制文件："

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:396
msgid ""
"The naming pattern ``cmake-$ver-macos-universal`` is a universal binary "
"with ``x86_64`` and ``arm64`` architectures.  It requires macOS 10.13 or "
"newer."
msgstr ""
"命名模式“cmake-$ver-macos-universal”是具有“x86_64”和“arm64”架构的通用二进制文件。它需要 macOS "
"10.13 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:400
msgid ""
"The naming pattern ``cmake-$ver-macos10.10-universal`` is a universal "
"binary with ``x86_64`` and ``arm64`` architectures.  It requires macOS "
"10.10 or newer."
msgstr ""
"命名模式“cmake-$ver-macos10.10-universal”是一个具有“x86_64”和“arm64”架构的通用二进制文件。它需要 "
"macOS 10.10 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:405
msgid "3.19.4"
msgstr "3.19.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:407
msgid ""
"The :variable:`CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM` variable "
"introduced in 3.19.0 previously worked only with the :generator:`Visual "
"Studio 14 2015` generator.  It has now been fixed to work with "
":ref:`Visual Studio Generators` for later VS versions too."
msgstr ""
"3.19.0 中引入的 CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM 变量以前仅适用于 "
"Visual Studio 14 2015 生成器。它现在已被修复，可以与 :ref:`Visual Studio Generators` "
"一起用于更高版本的 VS。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:413
msgid "3.19.5"
msgstr "3.19.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:415
msgid ""
"When :prop_tgt:`IOS_INSTALL_COMBINED` is enabled and the "
":generator:`Xcode` generator is used, it is now possible to initiate an "
"install or package creation by running ``cmake --install`` or ``cpack`` "
"from the command line. When using the Xcode new build system, these are "
"the only supported methods due to a limitation of Xcode.  Initiating these"
" operations by building the ``install`` or ``package`` targets in Xcode is"
" only supported when using the legacy build system."
msgstr ""
"当启用:prop_tgt:`IOS_INSTALL_COMBINED` 并使用:generator:`Xcode` "
"生成器时，现在可以通过从命令行。使用 Xcode 新构建系统时，由于 Xcode "
"的限制，这些是唯一受支持的方法。只有在使用旧版构建系统时才支持通过在 Xcode 中构建“install”或“package”目标来启动这些操作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:423
msgid ""
"The framework handling introduced in 3.19.0 as part of supporting Xcode's "
"*Link Binaries With Libraries* build phase broke the ability to switch "
"between device and simulator builds without reconfiguring.  That "
"capability has now been restored."
msgstr ""
"作为支持 Xcode 的 *Link Binaries With Libraries* 构建阶段的一部分，3.19.0 "
"中引入的框架处理打破了无需重新配置即可在设备和模拟器构建之间切换的能力。该功能现已恢复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:429
msgid "3.19.6"
msgstr "3.19.6"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:431
msgid ""
"The :manual:`cmake-presets(7)` feature no longer allows comments in "
"``CMakePresets.json`` or ``CMakeUserPresets.json`` files. This was "
"mistakenly allowed by the implementation in CMake 3.19.0 through CMake "
"3.19.5, and was not documented."
msgstr ""
":manual:`cmake-presets(7)` 功能不再允许在 ``CMakePresets.json`` 或 "
"``CMakeUserPresets.json`` 文件中进行评论。这是 CMake 3.19.0 到 CMake 3.19.5 "
"中的实现错误地允许的，并且没有记录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:437
msgid "3.19.7"
msgstr "3.19.7"

#: ../../cmake-prefix/src/cmake/Help/release/3.19.rst:439
msgid ""
"With :ref:`Visual Studio Generators` for VS 2017 and higher, the "
":variable:`CMAKE_GENERATOR_TOOLSET` field ``version=`` now accepts three-"
"component MSVC toolset versions such as ``14.28.29910``. See the "
":variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` variable."
msgstr ""
"对于 VS 2017 及更高版本的 Visual Studio Generators，CMAKE_GENERATOR_TOOLSET 字段 "
"version= 现在接受三组件 MSVC 工具集版本，例如 "
"14.28.29910。请参阅 :variable:`CMAKE_VS_PLATFORM_TOOLSET_VERSION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:2
msgid "CMake 3.2 Release Notes"
msgstr "CMake 3.2 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:8
msgid "Changes made since CMake 3.1 include the following."
msgstr "自 CMake 3.1 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:16
msgid ""
"CMake learned to support unicode characters :ref:`encoded as UTF-8 <CMake "
"Language Encoding>` on Windows.  This was already supported on platforms "
"whose system APIs accept UTF-8 encoded strings. Unicode characters may now"
" be used in CMake code, paths to source files, configured files such as "
"``.h.in`` files, and other files read and written by CMake.  Note that "
"because CMake interoperates with many other tools, there may still be some"
" limitations when using certain unicode characters."
msgstr ""
"CMake 学会了支持 unicode 字符 :ref:`在 Windows 上编码为 UTF-8 <CMake 语言编码>`。这已经在其系统 "
"API 接受 UTF-8 编码字符串的平台上得到支持。 Unicode 字符现在可用于 CMake 代码、源文件路径、配置文件（如 .h.in "
"文件）以及 CMake 读取和写入的其他文件。请注意，由于 CMake 与许多其他工具互操作，因此在使用某些 unicode "
"字符时可能仍然存在一些限制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:29
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands learned a new ``BYPRODUCTS`` option to specify files produced as "
"side effects of the custom commands.  These are not outputs because they "
"do not always have to be newer than inputs."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令学习了一个新的 "
"``BYPRODUCTS`` 选项来指定生成的文件作为自定义命令的副作用。这些不是输出，因为它们不一定总是比输入更新。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:34
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands learned a new ``USES_TERMINAL`` option to request that the "
"command be given direct access to the terminal if possible. The "
":generator:`Ninja` generator will places such commands in the ``console`` "
":prop_gbl:`pool <JOB_POOLS>`.  Build targets provided by CMake that are "
"meant for individual interactive use, such as ``install``, are now placed "
"in this pool."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令学习了一个新的 "
"``USES_TERMINAL`` 选项，以请求在可能的情况下让命令直接访问终端。 :generator:`Ninja` 生成器会将此类命令放在 "
"``console`` :prop_gbl:`pool <JOB_POOLS>` 中。 CMake "
"提供的用于个人交互使用的构建目标，例如“install”，现在放置在这个池中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:42
msgid ""
"A new :command:`continue` command was added that can be called inside loop"
" contexts to end the current iteration and start the next one at the top "
"of the loop block."
msgstr "添加了一个新的 :command:`continue` 命令，可以在循环上下文中调用它来结束当前迭代并在循环块的顶部开始下一个迭代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:46
msgid ""
"The :command:`file(LOCK)` subcommand was created to allow CMake processes "
"to synchronize through file and directory locks."
msgstr ":command:`file(LOCK)` 子命令的创建是为了允许 CMake 进程通过文件和目录锁进行同步。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:49
msgid ""
"The :command:`file(STRINGS)` now supports UTF-16LE, UTF-16BE, UTF-32LE, "
"UTF-32BE as ``ENCODING`` options."
msgstr ""
":command:`file(STRINGS)` 现在支持 UTF-16LE、UTF-16BE、UTF-32LE、UTF-32BE 作为 "
"``ENCODING`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:52
msgid ""
"The :command:`install(EXPORT)` command now works with an absolute "
"``DESTINATION`` even if targets in the export set are installed with a "
"destination or :ref:`usage requirements <Target Usage Requirements>` "
"specified relative to the install prefix.  The value of the "
":variable:`CMAKE_INSTALL_PREFIX` variable is hard-coded into the installed"
" export file as the base for relative references."
msgstr ""
":command:`install(EXPORT)` 命令现在可以使用绝对的 ``DESTINATION``，即使导出集中的目标安装有目的地或 "
":ref:`usage requirements <Target Usage Requirements>` 相对于安装前缀。 "
":variable:`CMAKE_INSTALL_PREFIX` 变量的值被硬编码到安装的导出文件中作为相对引用的基础。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:59
msgid ""
"The :command:`try_compile` command source file signature now honors link "
"flags (e.g. :variable:`CMAKE_EXE_LINKER_FLAGS`) in the generated test "
"project.  See policy :policy:`CMP0056`."
msgstr ""
":command:`try_compile` "
"命令源文件签名现在支持生成的测试项目中的链接标志（例如:variable:`CMAKE_EXE_LINKER_FLAGS`）。请参阅政策:policy:`CMP0056`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:63
msgid ""
"The :command:`try_run` command learned to honor the ``LINK_LIBRARIES`` "
"option just as :command:`try_compile` already does."
msgstr ""
":command:`try_run` 命令学会了遵守 ``LINK_LIBRARIES`` 选项，就像 :command:`try_compile`"
" 已经做的那样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:66
msgid ""
"The :command:`file(GENERATE)` command now generates the output file with "
"the same permissions as the input file if set."
msgstr ":command:`file(GENERATE)` 命令现在生成与输入文件具有相同权限的输出文件（如果已设置）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:69
msgid ""
"The :command:`file(GENERATE)` command can now generate files which are "
"used as source files for buildsystem targets.  Generated files "
"automatically get their :prop_sf:`GENERATED` property set to ``TRUE``."
msgstr ""
":command:`file(GENERATE)` 命令现在可以生成用作构建系统目标源文件的文件。生成的文件会自动将它们的 "
":prop_sf:`GENERATED` 属性设置为 ``TRUE``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:76
msgid ""
"The :variable:`CMAKE_MATCH_COUNT` variable was introduced to record the "
"number of matches made in the last regular expression matched in an "
":command:`if` command or a :command:`string` command."
msgstr ""
"引入了 :variable:`CMAKE_MATCH_COUNT` 变量来记录在 :command:`if` 命令或 "
":command:`string` 命令中匹配的最后一个正则表达式中的匹配次数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:83
msgid ""
"An :prop_tgt:`ANDROID_API_MIN` target property was introduced to specify "
"the minimum version to be targeted by the toolchain."
msgstr "引入了 :prop_tgt:`ANDROID_API_MIN` 目标属性以指定工具链要定位的最低版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:86
msgid ""
"A :prop_sf:`VS_SHADER_FLAGS` source file property was added to specify "
"additional shader flags to ``.hlsl`` files, for the Visual Studio "
"generators."
msgstr ""
"添加了 :prop_sf:`VS_SHADER_FLAGS` 源文件属性，为 Visual Studio 生成器指定附加着色器标志到 "
"`.hlsl`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:93
msgid ""
"The :module:`ExternalData` module learned to support :ref:`Custom Fetch "
"Scripts <ExternalData Custom Fetch Scripts>`. This allows projects to "
"specify custom ``.cmake`` scripts for fetching data objects during the "
"build."
msgstr ""
":module:`ExternalData` 模块学会了支持 :ref:`Custom Fetch Scripts <ExternalData "
"Custom Fetch Scripts>`。这允许项目指定自定义 ``.cmake`` 脚本以在构建期间获取数据对象。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:98
msgid ""
"The :module:`ExternalProject` module learned options to create independent"
" external project step targets that do not depend on the builtin steps."
msgstr ":module:`ExternalProject` 模块学习了创建不依赖于内置步骤的独立外部项目步骤目标的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:102
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command learned a new ``CMAKE_CACHE_DEFAULT_ARGS`` option to initialize "
"cache values in the external project without setting them on future "
"builds."
msgstr ""
"ExternalProject 模块 ExternalProject_Add 命令学习了一个新的 CMAKE_CACHE_DEFAULT_ARGS "
"选项来初始化外部项目中的缓存值，而无需在未来的构建中设置它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:107
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command learned a new ``TEST_EXCLUDE_FROM_MAIN`` option to exclude tests "
"from the main build."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令学习了一个新的 "
"``TEST_EXCLUDE_FROM_MAIN`` 选项来从主构建中排除测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:111
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command learned a new ``UPDATE_DISCONNECTED`` option to avoid "
"automatically updating the source tree checkout from version control."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令学习了一个新的 "
"``UPDATE_DISCONNECTED`` 选项，以避免从版本控制中自动更新源树签出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:115
msgid ""
"The :module:`FindCUDA` module learned about the ``cusolver`` library in "
"CUDA 7.0."
msgstr ":module:`FindCUDA` 模块了解了 CUDA 7.0 中的 ``cusolver`` 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:118
msgid ""
"The :module:`FindGit` module learned to find the ``git`` command-line tool"
" that comes with GitHub for Windows installed in user home directories."
msgstr ""
":module:`FindGit` 模块学会了在用户主目录中找到 GitHub for Windows 附带的 ``git`` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:121
msgid ""
"A :module:`FindGSL` module was introduced to find the GNU Scientific "
"Library."
msgstr "引入了一个 :module:`FindGSL` 模块来查找 GNU 科学图书馆。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:124
msgid ""
"A :module:`FindIntl` module was introduced to find the Gettext ``libintl``"
" library."
msgstr "引入了一个 :module:`FindIntl` 模块来查找 Gettext ``libintl`` 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:127
msgid "The :module:`FindLATEX` module learned to support components."
msgstr ":module:`FindLATEX` 模块学会了支持组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:129
msgid "The :module:`FindMPI` module learned to find MS-MPI on Windows."
msgstr ":module:`FindMPI` 模块学会了在 Windows 上查找 MS-MPI。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:131
msgid ""
"The :module:`FindOpenSSL` module now reports ``crypto`` and ``ssl`` "
"libraries separately in ``OPENSSL_CRYPTO_LIBRARY`` and "
"``OPENSSL_SSL_LIBRARY``, respectively, to allow applications to link to "
"one without the other."
msgstr ""
":module:`FindOpenSSL` 模块现在分别在 ``OPENSSL_CRYPTO_LIBRARY`` 和 "
"``OPENSSL_SSL_LIBRARY`` 中分别报告 ``crypto`` 和 ``ssl`` 库，以允许应用程序链接到一个而不链接另一个。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:136
msgid ""
"The :module:`WriteCompilerDetectionHeader` module learned to create a "
"define for portability of the ``cxx_thread_local`` feature. The define "
"expands to either the C++11 ``thread_local`` keyword, or a pre-"
"standardization compiler-specific equivalent, as appropriate."
msgstr ""
":module:`WriteCompilerDetectionHeader` 模块学会了为 ``cxx_thread_local`` "
"特性的可移植性创建一个定义。定义扩展为 C++11 ``thread_local`` 关键字，或适当的预标准化编译器特定等效项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:141
msgid ""
"The :module:`WriteCompilerDetectionHeader` module learned to create "
"multiple output files per compiler and per language, instead of creating "
"one large file."
msgstr "WriteCompilerDetectionHeader 模块学会了为每个编译器和每种语言创建多个输出文件，而不是创建一个大文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:148
msgid ""
"The :command:`ctest_coverage` command learned to support Delphi coverage."
msgstr ":command:`ctest_coverage` 命令学会了支持 Delphi 覆盖率。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:150
msgid ""
"The :command:`ctest_coverage` command learned to support Javascript "
"coverage."
msgstr ":command:`ctest_coverage` 命令学会了支持 Javascript 覆盖。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:152
msgid ""
"The :module:`CTestCoverageCollectGCOV` module was introduced as an "
"alternative to the :command:`ctest_coverage` command for collecting "
"``gcov`` results for submission to CDash."
msgstr ""
":module:`CTestCoverageCollectGCOV` 模块作为 :command:`ctest_coverage` "
"命令的替代品被引入，用于收集 ``gcov`` 结果以提交给 CDash。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:159
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned options to set per-component "
"descriptions and summaries.  See the "
":variable:`CPACK_RPM_<component>_PACKAGE_DESCRIPTION` and "
":variable:`CPACK_RPM_<component>_PACKAGE_SUMMARY` variables."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了设置每个组件描述和摘要的选项。请参阅 :variable:`CPACK_RPM_<组件>_PACKAGE_DESCRIPTION` "
"和 :variable:`CPACK_RPM_<组件>_PACKAGE_SUMMARY` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:164
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned options to specify "
"requirements for pre- and post-install scripts.  See the "
":variable:`CPACK_RPM_PACKAGE_REQUIRES_PRE` and "
":variable:`CPACK_RPM_PACKAGE_REQUIRES_POST` variables."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了用于指定安装前和安装后脚本要求的选项。请参阅 :variable:`CPACK_RPM_PACKAGE_REQUIRES_PRE` "
"和 :variable:`CPACK_RPM_PACKAGE_REQUIRES_POST` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:169
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned options to specify "
"requirements for pre- and post-uninstall scripts.  See the "
":variable:`CPACK_RPM_PACKAGE_REQUIRES_PREUN` and "
":variable:`CPACK_RPM_PACKAGE_REQUIRES_POSTUN` variables."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了用于指定卸载前和卸载后脚本要求的选项。请参阅 :variable:`CPACK_RPM_PACKAGE_REQUIRES_PREUN` "
"和 :variable:`CPACK_RPM_PACKAGE_REQUIRES_POSTUN` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:174
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned a new "
":variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX` variable to specify a "
"component-specific value to use instead of "
":variable:`CPACK_PACKAGING_INSTALL_PREFIX`."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了一个新的 :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX` "
"变量来指定要使用的特定于组件的值，而不是 :variable:`CPACK_PACKAGING_INSTALL_PREFIX`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:179
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned a new "
":variable:`CPACK_RPM_RELOCATION_PATHS` variable to specify multiple "
"relocation prefixes for a single rpm package."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了一个新的 :variable:`CPACK_RPM_RELOCATION_PATHS` 变量来为单个 rpm 包指定多个重定位前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:186
msgid ""
"The :manual:`cmake(1)` ``-E tar`` command now supports creating "
"``.xz``-compressed archives with the ``J`` flag."
msgstr ":manual:`cmake(1)` ``-E tar`` 命令现在支持使用 ``J`` 标志创建 ``.xz`` 压缩档案。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:189
msgid ""
"The :manual:`cmake(1)` ``-E tar`` command learned a new ``--files-"
"from=<file>`` option to specify file names using lines in a file to "
"overcome command-line length limits."
msgstr ""
":manual:`cmake(1)` ``-E tar`` 命令学习了一个新的 ``--files-from=<file>`` "
"选项来使用文件中的行来指定文件名以克服命令行长度限制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:193
msgid ""
"The :manual:`cmake(1)` ``-E tar`` command learned a new ``--mtime=<date>``"
" option to specify the modification time recorded in tarball entries."
msgstr ""
":manual:`cmake(1)` ``-E tar`` 命令学习了一个新的 ``--mtime=<date>`` 选项来指定 tarball "
"条目中记录的修改时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:197
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by more compilers, including:"
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` "
"功能现在可以识别更多编译器支持的功能，包括："

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:200
msgid "Apple Clang (``AppleClang``) for Xcode versions 4.4 though 6.1."
msgstr "Xcode 版本 4.4 到 6.1 的 Apple Clang (``AppleClang``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:201
msgid "GNU compiler versions 4.4 through 5.0 on UNIX and Apple (``GNU``)."
msgstr "UNIX 和 Apple 上的 GNU 编译器版本 4.4 到 5.0 (``GNU``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:202
msgid "Microsoft Visual Studio (``MSVC``) for versions 2010 through 2015."
msgstr "适用于 2010 至 2015 版本的 Microsoft Visual Studio (``MSVC``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:203
msgid "Oracle SolarisStudio (``SunPro``) version 12.4."
msgstr "Oracle SolarisStudio (``SunPro``) 12.4 版。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:205
msgid ""
"The :ref:`Qt AUTORCC` feature now tracks files listed in ``.qrc`` files as"
" dependencies. If an input file to the ``rcc`` tool is changed, the tool "
"is automatically re-run."
msgstr ""
":ref:`Qt AUTORCC` 功能现在将 `.qrc`` 文件中列出的文件作为依赖项进行跟踪。如果更改 ``rcc`` "
"工具的输入文件，该工具会自动重新运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:212
msgid ""
"The :command:`break` command now rejects calls outside of a loop context "
"or that pass arguments to the command. See policy :policy:`CMP0055`."
msgstr ":command:`break` 命令现在拒绝循环上下文之外的调用或将参数传递给命令的调用。请参阅政策:policy:`CMP0055`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:219
msgid ""
"Files written in the :manual:`cmake-language(7)`, such as "
"``CMakeLists.txt`` or ``*.cmake`` files, are now expected to be encoded as"
" UTF-8.  If files are already ASCII, they will be compatible.  If files "
"were in a different encoding, including Latin 1, they will need to be "
"converted."
msgstr ""
"使用 :manual:`cmake-language(7)` 编写的文件，例如 ``CMakeLists.txt`` 或 ``*.cmake`` "
"文件，现在需要编码为 UTF-8。如果文件已经是 ASCII，它们将是兼容的。如果文件采用不同的编码，包括 Latin 1，则需要进行转换。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:225
msgid ""
"The :module:`FindOpenGL` module no longer explicitly searches for any "
"dependency on X11 libraries with the :module:`FindX11` module.  Such "
"dependencies should not need to be explicit. Applications using X11 APIs "
"themselves should find and link to X11 libraries explicitly."
msgstr ""
":module:`FindOpenGL` 模块不再使用 :module:`FindX11` 模块显式搜索对 X11 "
"库的任何依赖。这种依赖关系不需要是明确的。使用 X11 API 的应用程序本身应该明确地找到并链接到 X11 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:231
msgid ""
"The implementation of CMake now relies on some C++ compiler features which"
" are not supported by some older compilers.  As a result, those old "
"compilers can no longer be used to build CMake itself.  CMake continues to"
" be able to generate Makefiles and project files for users of those old "
"compilers however.  Compilers known to no longer be capable of building "
"CMake are:"
msgstr ""
"CMake 的实现现在依赖于某些旧编译器不支持的一些 C++ 编译器功能。因此，那些旧的编译器不能再用于构建 CMake 本身。然而，CMake "
"继续能够为那些旧编译器的用户生成 Makefile 和项目文件。已知不再能够构建 CMake 的编译器是："

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:237
msgid "Visual Studio 6 and 7.0 -- superseded by VisualStudio 7.1 and newer."
msgstr "Visual Studio 6 和 7.0——被 VisualStudio 7.1 和更新版本取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:238
msgid "GCC 2.95 -- superseded by GCC 3 and newer compilers."
msgstr "GCC 2.95——被 GCC 3 和更新的编译器取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:239
msgid "Borland compilers -- superseded by other Windows compilers."
msgstr "Borland 编译器——被其他 Windows 编译器取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:240
msgid "Compaq compilers -- superseded by other compilers."
msgstr "Compaq 编译器——被其他编译器取代。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:241
msgid "SGI compilers -- IRIX was dropped as a host platform."
msgstr "SGI 编译器——IRIX 被放弃作为主机平台。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:246
msgid ""
"On Windows and OS X, commands supporting network communication via "
"``https``, such as :command:`file(DOWNLOAD)`, :command:`file(UPLOAD)`, and"
" :command:`ctest_submit`, now support SSL/TLS even when CMake is not built"
" against OpenSSL. The Windows or OS X native SSL/TLS implementation is "
"used by default. OS-configured certificate authorities will be trusted "
"automatically."
msgstr ""
"在 Windows 和 OS X 上，支持通过 ``https`` 进行网络通信的命令，例如 "
":command:`file(DOWNLOAD)`、 :command:`file(UPLOAD)` 和 "
":command:`ctest_submit`，现在支持 SSL /TLS，即使 CMake 不是针对 OpenSSL 构建的。默认情况下使用 "
"Windows 或 OS X 本机 SSL/TLS 实现。操作系统配置的证书颁发机构将被自动信任。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:253
msgid ""
"On other platforms, when CMake is built with OpenSSL, these commands now "
"search for OS-configured certificate authorities in a few ``/etc`` paths "
"to be trusted automatically."
msgstr ""
"在其他平台上，当使用 OpenSSL 构建 CMake 时，这些命令现在会在几个“/etc”路径中搜索操作系统配置的证书颁发机构，以自动信任。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:257
msgid ""
"On OS X with Makefile and Ninja generators, when a compiler is found in "
"``/usr/bin`` it is now mapped to the corresponding compiler inside the "
"Xcode application folder, if any.  This allows such build trees to "
"continue to work with their original compiler even when ``xcode-select`` "
"switches to a different Xcode installation."
msgstr ""
"在带有 Makefile 和 Ninja 生成器的 OS X 上，当在 ``/usr/bin`` 中找到编译器时，它现在映射到 Xcode "
"应用程序文件夹内的相应编译器（如果有）。这允许此类构建树继续使用其原始编译器，即使在“xcode-select”切换到不同的 Xcode "
"安装时也是如此。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:263
msgid ""
"The Visual Studio generators now write solution and project files in UTF-8"
" instead of Windows-1252.  Windows-1252 supported Latin 1 languages such "
"as those found in North and South America and Western Europe.  With UTF-8,"
" additional languages are now supported."
msgstr ""
"Visual Studio 生成器现在使用 UTF-8 而不是 Windows-1252 编写解决方案和项目文件。 Windows-1252 支持 "
"Latin 1 语言，例如北美、南美和西欧的语言。使用 UTF-8，现在支持其他语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:269
msgid ""
"The :generator:`Xcode` generator no longer requires a value for the "
":variable:`CMAKE_MAKE_PROGRAM` variable to be located up front. It now "
"locates ``xcodebuild`` when needed at build time."
msgstr ""
":generator:`Xcode` 生成器不再需要位于前面的 :variable:`CMAKE_MAKE_PROGRAM` "
"变量的值。它现在在构建时需要时定位 ``xcodebuild``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.2.rst:273
msgid ""
"When building CMake itself using SolarisStudio 12, the default ``libCStd``"
" standard library is not sufficient to build CMake.  The SolarisStudio "
"distribution supports compiler options to use ``STLPort4`` or "
"``libstdc++``. An appropriate option to select the standard library is now"
" added automatically when building CMake with SolarisStudio compilers."
msgstr ""
"使用 SolarisStudio 12 构建 CMake 本身时，默认的 ``libCStd`` 标准库不足以构建 CMake。 "
"SolarisStudio 发行版支持使用“STLPort4”或“libstdc++”的编译器选项。在使用 SolarisStudio 编译器构建 "
"CMake 时，现在会自动添加一个用于选择标准库的适当选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:2
msgid "CMake 3.20 Release Notes"
msgstr "CMake 3.20 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:8
msgid "Changes made since CMake 3.19 include the following."
msgstr "自 CMake 3.19 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:16
msgid ""
":manual:`cmake-presets(7)` gained support for build and test presets."
msgstr ":manual:`cmake-presets(7)` 获得了对构建和测试预设的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:21
msgid ""
":ref:`Makefile Generators`, for some toolchains, now use the compiler to "
"extract implicit dependencies while compiling source files."
msgstr ":ref:`Makefile Generators`，对于某些工具链，现在使用编译器在编译源文件时提取隐式依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:27
msgid ""
"C++23 compiler modes may now be specified via the "
":prop_tgt:`CXX_STANDARD`, :prop_tgt:`CUDA_STANDARD`, or "
":prop_tgt:`OBJCXX_STANDARD` target properties, or via the :manual:`Compile"
" Features <cmake-compile-features(7)>` functionality's ``cxx_std_23`` "
"meta-feature."
msgstr ""
"C++23 编译器模式现在可以通过 :prop_tgt:`CXX_STANDARD`、 :prop_tgt:`CUDA_STANDARD` 或 "
":prop_tgt:`OBJCXX_STANDARD` 目标属性或通过 :manual:`Compile Features <cmake-"
"compile- features(7)>` 功能的``cxx_std_23`` 元特征。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:32
msgid ""
"``CUDA`` language support now works when ``nvcc`` is a symbolic link, for "
"example due to a ``ccache`` or ``colornvcc`` wrapper script."
msgstr ""
"当 ``nvcc`` 是符号链接时，``CUDA`` 语言支持现在可以工作，例如由于 ``ccache`` 或 ``colornvcc`` "
"包装器脚本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:35
msgid ""
"The :envvar:`CUDAARCHS` environment variable was added for initializing "
":variable:`CMAKE_CUDA_ARCHITECTURES`. Useful in cases where the compiler "
"default is unsuitable for the machine's GPU."
msgstr ""
"添加了 :envvar:`CUDAARCHS` 环境变量用于初始化 "
":variable:`CMAKE_CUDA_ARCHITECTURES`。在编译器默认值不适合机器 GPU 的情况下很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:42
msgid ""
"The NVIDIA HPC SDK compilers are now supported with compiler id ``NVHPC``."
msgstr "现在支持编译器 ID 为“NVHPC”的 NVIDIA HPC SDK 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:44
msgid ""
"The Intel oneAPI NextGen LLVM compilers are now supported with compiler id"
" ``IntelLLVM``:"
msgstr "Intel oneAPI NextGen LLVM 编译器现在支持编译器 ID 为“IntelLLVM”："

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:47
msgid ""
"The ``icx``/``icpx`` C/C++ compilers on Linux, and the ``icx`` C/C++ "
"compiler on Windows, are fully supported as of oneAPI 2021.1."
msgstr ""
"从 oneAPI 2021.1 开始，Linux 上的 ``icx``/``icpx`` C/C++ 编译器和 Windows 上的 ``icx``"
" C/C++ 编译器得到完全支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:50
msgid ""
"The ``ifx`` Fortran compiler on Linux is supported as of oneAPI 2021.1."
msgstr "从 oneAPI 2021.1 开始支持 Linux 上的 ``ifx`` Fortran 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:52
msgid "The ``ifx`` Fortran compiler on Windows is not yet supported."
msgstr "尚不支持 Windows 上的 ``ifx`` Fortran 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:54
msgid ""
"The Intel oneAPI Classic compilers (``icc``, ``icpc``, and ``ifort``) "
"continue to be supported with compiler id ``Intel``."
msgstr ""
"Intel oneAPI Classic 编译器（``icc``、``icpc`` 和``ifort``）继续支持编译器 ID ``Intel``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:57
msgid "Support was added for the IAR STM8 compiler."
msgstr "添加了对 IAR STM8 编译器的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:62
msgid ""
"CMake's support for :ref:`Cross Compiling for Android` is now merged with "
"the Android NDK's toolchain file. They now have similar behavior, though "
"some variable names differ. User-facing changes include:"
msgstr ""
"CMake 对 :ref:`Android 交叉编译` 的支持现已与 Android NDK "
"的工具链文件合并。它们现在具有相似的行为，尽管一些变量名称不同。面向用户的更改包括："

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:67
msgid ""
"``find_*`` functions will search NDK ABI / API specific paths by default."
msgstr "``find_*`` 函数将默认搜索 NDK ABI / API 特定路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:69
msgid ""
"The default :variable:`CMAKE_BUILD_TYPE` for Android is now "
"``RelWithDebInfo``."
msgstr "Android 的默认 :variable:`CMAKE_BUILD_TYPE` 现在是 ``RelWithDebInfo``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:72
msgid ""
"The :variable:`CMAKE_ANDROID_NDK_VERSION` variable was added to report the"
" version of the NDK."
msgstr "添加了 :variable:`CMAKE_ANDROID_NDK_VERSION` 变量来报告 NDK 的版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:78
msgid ""
"The :manual:`cmake-file-api(7)` gained a new \"toolchains\" object kind "
"that describes the compiler used for each enabled language."
msgstr ":manual:`cmake-file-api(7)` 获得了一个新的“工具链”对象类型，它描述了用于每种启用语言的编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:84
msgid ""
":command:`add_custom_command` and :command:`add_custom_target` now support"
" :manual:`generator expressions <cmake-generator-expressions(7)>` in their"
" ``OUTPUT`` and ``BYPRODUCTS`` options."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 现在在它们的 "
"``OUTPUT`` 和 ``BYPRODUCTS`` 选项中支持 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:88
msgid ""
"Their ``COMMAND``, ``WORKING_DIRECTORY``, and ``DEPENDS`` options gained "
"support for new generator expressions :genex:`$<COMMAND_CONFIG:...>` and "
":genex:`$<OUTPUT_CONFIG:...>` that control cross-config handling when "
"using the :generator:`Ninja Multi-Config` generator."
msgstr ""
"他们的 ``COMMAND``、``WORKING_DIRECTORY`` 和 ``DEPENDS`` "
"选项获得了对新生成器表达式的支持:genex:`$<COMMAND_CONFIG:...>` 和 "
":genex:`$<OUTPUT_CONFIG:.. .>` 在使用 Ninja Multi-Config 生成器时控制交叉配置处理。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:93
msgid ""
"The :command:`add_custom_command` command gained ``DEPFILE`` support on "
":ref:`Makefile Generators`."
msgstr ""
":command:`add_custom_command` 命令在 :ref:`Makefile Generators` 上获得了 "
"``DEPFILE`` 支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:96
msgid ""
"The :command:`add_library` command previously prohibited imported object "
"libraries when using potentially multi-architecture configurations. This "
"mostly affected the :generator:`Xcode` generator, e.g. when targeting iOS "
"or one of the other device platforms.  This restriction has now been "
"removed."
msgstr ""
":command:`add_library` 命令以前在使用潜在的多架构配置时禁止导入对象库。这主要影响了 Xcode 生成器，例如针对 iOS "
"或其他设备平台之一时。此限制现已取消。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:102
msgid ""
"The :command:`cmake_path` command was added for operations on filesystem "
"paths."
msgstr "添加了 :command:`cmake_path` 命令以对文件系统路径进行操作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:105
msgid ""
"The :command:`configure_file` command gained ``USE_SOURCE_PERMISSIONS`` "
"and ``FILE_PERMISSIONS`` options to support copying of permissions of the "
"source file and using specified permissions respectively."
msgstr ""
":command:`configure_file` 命令获得了``USE_SOURCE_PERMISSIONS`` "
"和``FILE_PERMISSIONS`` 选项以分别支持复制源文件的权限和使用指定的权限。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:109
msgid ""
"The :command:`file(GENERATE)` command gained a ``NEWLINE_STYLE`` option to"
" specify how newlines are handled for the generated file."
msgstr ""
":command:`file(GENERATE)` 命令获得了一个 ``NEWLINE_STYLE`` 选项来指定如何为生成的文件处理换行符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:112
msgid ""
"The :command:`file(GENERATE)` command gained ``NO_SOURCE_PERMISSIONS``, "
"``USE_SOURCE_PERMISSIONS``, and ``FILE_PERMISSIONS`` options for "
"controlling the permissions of the generated file."
msgstr ""
":command:`file(GENERATE)` 命令获得了 "
"``NO_SOURCE_PERMISSIONS``、``USE_SOURCE_PERMISSIONS`` 和 "
"``FILE_PERMISSIONS`` 选项，用于控制生成文件的权限。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:116
msgid ""
"The :command:`install(FILES)` command ``RENAME`` option learned to support"
" :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":command:`install(FILES)` 命令 ``RENAME`` 选项学会了支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:119
msgid ""
"The :command:`target_include_directories` command gained a new option "
"``AFTER``."
msgstr ":command:`target_include_directories` 命令获得了一个新选项 ``AFTER``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:122
msgid ""
"The :command:`target_sources` command now supports targets created by the "
":command:`add_custom_target` command."
msgstr ""
":command:`target_sources` 命令现在支持由 :command:`add_custom_target` 命令创建的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:125
msgid ""
"The :command:`try_run` command gained a ``WORKING_DIRECTORY`` option to "
"set the working directory in which to run the compiled check executable."
msgstr ""
":command:`try_run` 命令获得了一个``WORKING_DIRECTORY`` 选项来设置运行已编译检查可执行文件的工作目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:131
msgid ""
"The :variable:`CMAKE_<LANG>_BYTE_ORDER` variable was added to provide the "
"target architecture byte order detected from the toolchain."
msgstr "添加了 :variable:`CMAKE_<LANG>_BYTE_ORDER` 变量以提供从工具链检测到的目标体系结构字节顺序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:134
msgid ""
"The :variable:`CMAKE_RUNTIME_OUTPUT_DIRECTORY`, "
":variable:`CMAKE_LIBRARY_OUTPUT_DIRECTORY`, and "
":variable:`CMAKE_ARCHIVE_OUTPUT_DIRECTORY` variables now support target-"
"dependent generator expressions."
msgstr ""
"CMAKE_RUNTIME_OUTPUT_DIRECTORY、CMAKE_LIBRARY_OUTPUT_DIRECTORY 和 "
"CMAKE_ARCHIVE_OUTPUT_DIRECTORY 变量现在支持目标相关的生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:142
msgid ""
"The :prop_tgt:`<LANG>_CLANG_TIDY` target property and the associated "
":variable:`CMAKE_<LANG>_CLANG_TIDY` variable learned to support the "
"``OBJC`` and ``OBJCXX`` languages."
msgstr ""
":prop_tgt:`<LANG>_CLANG_TIDY` 目标属性和关联的 :variable:`CMAKE_<LANG>_CLANG_TIDY` "
"变量学会了支持 ``OBJC`` 和 ``OBJCXX`` 语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:146
msgid ""
"The :prop_tgt:`EXPORT_COMPILE_COMMANDS` target property was added for the "
"associated :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` variable to allow for"
" configuration of exporting compile commands per target."
msgstr ""
"为关联的 CMAKE_EXPORT_COMPILE_COMMANDS 变量添加了 EXPORT_COMPILE_COMMANDS "
"目标属性，以允许配置每个目标的导出编译命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:150
msgid ""
"The :prop_sf:`GENERATED` source-file property is now visible from any "
"directory scope, regardless of the scope in which it is set. See policy "
":policy:`CMP0118`."
msgstr ""
":prop_sf:`GENERATED` 源文件属性现在在任何目录范围内都是可见的，无论其设置范围如何。请参阅政策:policy:`CMP0118`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:154
msgid ""
"The :prop_tgt:`UNITY_BUILD_UNIQUE_ID` target property was added to support"
" generation of an identifier that is unique per source file in unity "
"builds.  It can help to resolve duplicate symbol problems with anonymous "
"namespaces."
msgstr ""
"添加了 :prop_tgt:`UNITY_BUILD_UNIQUE_ID` "
"目标属性以支持在统一构建中生成每个源文件唯一的标识符。它可以帮助解决匿名名称空间的重复符号问题。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:159
msgid ""
"The :prop_tgt:`WIN32_EXECUTABLE` target property now works with Clang on "
"Windows."
msgstr ":prop_tgt:`WIN32_EXECUTABLE` 目标属性现在适用于 Windows 上的 Clang。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:162
msgid ""
"The :prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` target "
"property was added to tell the :generator:`Xcode` generator to embed "
"frameworks. Aspects of the embedding can be customized with the "
":prop_tgt:`XCODE_EMBED_FRAMEWORKS_PATH <XCODE_EMBED_<type>>`, "
":prop_tgt:`XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY`, and "
":prop_tgt:`XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY` target "
"properties."
msgstr ""
"添加了 :prop_tgt:`XCODE_EMBED_FRAMEWORKS <XCODE_EMBED_<type>>` "
"目标属性，以告诉 :generator:`Xcode` 生成器嵌入框架。嵌入的各个方面可以使用 XCODE_EMBED_FRAMEWORKS_PATH"
" <XCODE_EMBED_<type>>`、XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY 和 "
"XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COP 进行自定义Y` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:172
msgid ""
"The :module:`ExternalData` module :command:`ExternalData_Add_Target` "
"function gained a ``SHOW_PROGRESS <bool>`` option for controlling whether "
"or not to show progress output during the build."
msgstr ""
":module:`ExternalData` 模块 :command:`ExternalData_Add_Target` 函数获得了一个 "
"``SHOW_PROGRESS <bool>`` 选项，用于控制是否在构建期间显示进度输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:176
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"function gained a ``CONFIGURE_HANDLED_BY_BUILD`` option.  This can be used"
" to make subsequent runs of the configure step be triggered by the build "
"step when an external project dependency rebuilds instead of always re-"
"running the configure step in such cases."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 函数获得了一个 "
"``CONFIGURE_HANDLED_BY_BUILD`` "
"选项。这可用于在外部项目依赖项重建时由构建步骤触发配置步骤的后续运行，而不是在这种情况下总是重新运行配置步骤。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:182
msgid ""
"The :module:`FindBoost` module gained a ``Boost_NO_WARN_NEW_VERSIONS`` "
"option to silence the warning about unknown dependencies for new Boost "
"versions."
msgstr ""
":module:`FindBoost` 模块获得了一个 ``Boost_NO_WARN_NEW_VERSIONS`` 选项来消除关于新 Boost "
"版本未知依赖项的警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:186
msgid ""
"The :module:`FindCUDAToolkit` module gained support for finding CUDA "
"toolkits when ``nvcc`` is a symbolic link, for example due to a ``ccache``"
" or ``colornvcc`` wrapper script."
msgstr ""
":module:`FindCUDAToolkit` 模块获得了在 ``nvcc`` 是符号链接时查找 CUDA 工具包的支持，例如由于 "
"``ccache`` 或 ``colornvcc`` 包装器脚本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:190
msgid ""
"The :module:`FindGDAL` module has been improved to document and mark as "
"advanced its cache variables. There is a new ``FindGDAL_SKIP_GDAL_CONFIG``"
" variable which may be used to skip over the ``gdal-config``-based search."
" Users may also set ``GDAL_ADDITIONAL_LIBRARY_VERSIONS`` to add additional"
" versions to the library name search strategy."
msgstr ""
":module:`FindGDAL` "
"模块已得到改进，可以记录并标记为高级缓存变量。有一个新的“FindGDAL_SKIP_GDAL_CONFIG”变量，可用于跳过基于“gdal-"
"config”的搜索。用户还可以设置``GDAL_ADDITIONAL_LIBRARY_VERSIONS`` 以将其他版本添加到库名称搜索策略中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:196
msgid "The :module:`FindIntl` module now provides an imported target."
msgstr ":module:`FindIntl` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:198
msgid "The :module:`FindOpenSSL` module learned to support a version range."
msgstr ":module:`FindOpenSSL` 模块学会了支持一个版本范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:200
msgid ""
"The :module:`FindPython3`, :module:`FindPython2` and :module:`FindPython` "
"modules gained options controlling how unversioned interpreter names are "
"searched."
msgstr "FindPython3、FindPython2 和 FindPython 模块获得了控制如何搜索未版本化的解释器名称的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:204
msgid ""
"The :module:`UseJava` module ``add_jar()`` command's "
"``GENERATE_NATIVE_HEADERS`` feature gained options to export the generated"
" target."
msgstr ""
":module:`UseJava` 模块``add_jar()`` 命令的``GENERATE_NATIVE_HEADERS`` "
"特性获得了导出生成目标的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:208
msgid ""
"The :module:`UseSWIG` module gained the capability, for :ref:`Makefile "
"<Makefile Generators>` and :ref:`Ninja <Ninja Generators>` generators, to "
"use the ``swig`` tool to generate implicit dependencies."
msgstr ""
":module:`UseSWIG` 模块获得了能力，对于 :ref:`Makefile <Makefile Generators>` "
"和 :ref:`Ninja <Ninja Generators>` 生成器，使用 ``swig`` 工具生成隐式依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:215
msgid "The :ref:`Qt AUTOMOC` feature now works with per-config sources."
msgstr ":ref:`Qt AUTOMOC` 特性现在可以与 per-config 源一起使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:220
msgid ""
":manual:`ctest(1)` gained a :option:`--test-dir <ctest --test-dir>` option"
" to specify the directory in which to look for tests."
msgstr ""
":manual:`ctest(1)` 获得了一个 :option:`--test-dir <ctest --test-dir>` "
"选项来指定在其中查找测试的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:226
msgid ""
":module:`CPack` gained the :variable:`CPACK_THREADS` variable to control "
"the number of threads used for parallelized operations, such as "
"compressing the installer package."
msgstr ""
":module:`CPack` 获得了 :variable:`CPACK_THREADS` 变量来控制用于并行操作的线程数，例如压缩安装程序包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:230
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned a new "
":variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS_PRIVATE_DIRS` variable to "
"specify additional search directories for resolving private library "
"dependencies when using ``dpkg-shlibdeps``."
msgstr ""
":cpack_gen:`CPack DEB Generator` "
"学习了一个新的 :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS_PRIVATE_DIRS` "
"变量来指定额外的搜索目录，以便在使用 ``dpkg-shlibdeps`` 时解析私有库依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:236
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained a new "
":variable:`CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST` variable to control "
"visibility of the widget listing installer pages on the left side of the "
"wizard. This feature available only since QtIFW 4.0."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了一个新的 :variable:`CPACK_IFW_PACKAGE_WIZARD_SHOW_PAGE_LIST` "
"变量来控制向导左侧的小部件列表安装程序页面的可见性。此功能仅在 QtIFW 4.0 之后可用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:241
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained new "
":variable:`CPACK_NSIS_BRANDING_TEXT` and "
":variable:`CPACK_NSIS_BRANDING_TEXT_TRIM_POSITION` variables to change the"
" text at the bottom of the install window and change its trim position"
msgstr ""
":cpack_gen:`CPack NSIS Generator` "
"获得了新的 :variable:`CPACK_NSIS_BRANDING_TEXT` "
"和 :variable:`CPACK_NSIS_BRANDING_TEXT_TRIM_POSITION` 变量来更改安装窗口底部的文本并更改其修剪位置"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:246
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now correctly handles Unicode "
"characters.  If you want to have a :variable:`CPACK_RESOURCE_FILE_LICENSE`"
" with UTF-8 characters, it needs to be encoded in UTF-8 BOM."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 现在可以正确处理 Unicode 字符。如果你想要一个带有 UTF-8 字符的 "
":variable:`CPACK_RESOURCE_FILE_LICENSE`，它需要以 UTF-8 BOM 编码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:250
msgid "The :cpack_gen:`CPack NuGet Generator` gained options:"
msgstr ":cpack_gen:`CPack NuGet Generator` 获得选项："

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:252
msgid ""
":variable:`CPACK_NUGET_PACKAGE_ICON` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_ICON` allow package icons to be "
"specified by local files."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_ICON` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_ICON` 允许由本地文件指定包图标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:255
msgid ""
":variable:`CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_EXPRESSION` add support "
"for specifying licenses recognized by the `Software Package Data "
"Exchange`_ (SPDX)."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_LICENSE_EXPRESSION` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_EXPRESSION` "
"添加了对指定由“软件包数据交换”(SPDX) 识别的许可证的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:259
msgid ""
":variable:`CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_FILE_NAME` allow "
"licenses to be specified by local files."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_LICENSE_FILE_NAME` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSE_FILE_NAME` 允许由本地文件指定许可证。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:262
msgid ""
":variable:`CPACK_NUGET_PACKAGE_LANGUAGE` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LANGUAGE` allow the locale for a"
" package to be specified, for example ``en_CA``."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_LANGUAGE` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LANGUAGE` 允许指定包的语言环境，例如 "
"``en_CA``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:271
msgid ""
"The :manual:`cmake-server(7)` mode has been removed. Clients should use "
"the :manual:`cmake-file-api(7)` instead."
msgstr ""
":manual:`cmake-server(7)` 模式已被删除。客户应该改用 :manual:`cmake-file-api(7)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:274
msgid ""
"The :module:`WriteCompilerDetectionHeader` module has been deprecated via "
"policy :policy:`CMP0120`.  Projects should be ported away from it."
msgstr ""
":module:`WriteCompilerDetectionHeader` 模块已通过策略 :policy:`CMP0120` "
"弃用。项目应该远离它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:277
msgid ""
"The :module:`TestBigEndian` module has been deprecated in favor of the "
":variable:`CMAKE_<LANG>_BYTE_ORDER` variable."
msgstr ""
":module:`TestBigEndian` 模块已被弃用，取而代之的是 :variable:`CMAKE_<LANG>_BYTE_ORDER` "
"变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:280
msgid ""
"The :module:`AddFileDependencies` module is deprecated. Port projects to "
"use :command:`set_property` directly."
msgstr ""
":module:`AddFileDependencies` 模块已弃用。移植项目以直接使用 :command:`set_property`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:283
msgid ""
"The :cpack_gen:`CPack NuGet Generator` deprecated some variables to "
"reflect changes in the NuGet specification:"
msgstr ":cpack_gen:`CPack NuGet Generator` 弃用了一些变量以反映 NuGet 规范中的变化："

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:286
msgid ""
":variable:`CPACK_NUGET_PACKAGE_ICONURL` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_ICONURL` have been deprecated; "
"replace with a reference to a local icon file."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_ICONURL` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_ICONURL` 已被弃用；替换为对本地图标文件的引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:289
msgid ""
":variable:`CPACK_NUGET_PACKAGE_LICENSEURL` and "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSEURL` have been "
"deprecated; replace with a reference to the project's license file or SPDX"
" license expression."
msgstr ""
":variable:`CPACK_NUGET_PACKAGE_LICENSEURL` 和 "
":variable:`CPACK_NUGET_<compName>_PACKAGE_LICENSEURL` 已被弃用；替换为对项目许可文件或 "
"SPDX 许可表达式的引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:297
msgid ""
"When running :manual:`cmake(1)` to :ref:`Generate a Project Buildsystem`, "
"unknown command-line arguments starting with a hyphen (``-``) are now "
"rejected with an error.  Previously they were silently ignored."
msgstr ""
"当运行 :manual:`cmake(1)` 到 :ref:`Generate a Project Buildsystem` 时，以连字符 "
"(``-``) 开头的未知命令行参数现在会被错误拒绝。以前他们被默默地忽略了。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:301
msgid ""
"Source file extensions must now be explicit. See policy :policy:`CMP0115` "
"for details."
msgstr "源文件扩展名现在必须是明确的。有关详细信息，请参阅政策:policy:`CMP0115`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:304
msgid ""
"The :prop_sf:`LANGUAGE` source file property now forces compilation as the"
" specified language.  See policy :policy:`CMP0119`."
msgstr ":prop_sf:`LANGUAGE` 源文件属性现在强制编译为指定语言。请参阅政策:policy:`CMP0119`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:307
msgid ""
"On AIX, installation of XCOFF executables and shared libraries no longer "
"requires relinking to change the runtime search path from the build-tree "
"RPATH to the install-tree RPATH.  CMake now edits the XCOFF binaries "
"directly during installation, as has long been done on ELF platforms."
msgstr ""
"在 AIX 上，安装 XCOFF 可执行文件和共享库不再需要重新链接以将运行时搜索路径从构建树 RPATH 更改为安装树 RPATH。 CMake "
"现在在安装过程中直接编辑 XCOFF 二进制文件，就像长期以来在 ELF 平台上所做的那样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:313
msgid ""
"With MSVC-like compilers the value of :variable:`CMAKE_CXX_FLAGS "
"<CMAKE_<LANG>_FLAGS>` no longer contains the ``/GR`` flag for runtime type"
" information by default. See policy :policy:`CMP0117`."
msgstr ""
"对于类似 MSVC 的编译器，CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` 的值默认不再包含用于运行时类型信息的 "
"``/GR`` 标志。请参阅政策:policy:`CMP0117`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:318
msgid ""
"Ninja generators now transform the ``DEPFILE`` generated by an "
":command:`add_custom_command`. See policy :policy:`CMP0116` for details."
msgstr ""
"Ninja 生成器现在转换由 :command:`add_custom_command` 生成的 "
"``DEPFILE``。有关详细信息，请参阅政策:policy:`CMP0116`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:321
msgid ""
"The precompiled Linux binaries provided on `cmake.org "
"<https://cmake.org/download/>`_ have changed their naming pattern to "
"``cmake-$ver-linux-$arch``, where ``$arch`` is either ``x86_64`` or "
"``aarch64``."
msgstr ""
"`cmake.org <https://cmake.org/download/>`_ 上提供的预编译 Linux 二进制文件已将其命名模式更改为 "
"``cmake-$ver-linux-$arch``，其中 ``$arch` ` 是 ``x86_64`` 或 ``aarch64``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:326
msgid ""
"The precompiled Windows binaries provided on `cmake.org "
"<https://cmake.org/download/>`_ have changed their naming pattern to "
"``cmake-$ver-windows-$arch``, where ``$arch`` is either ``x86_64`` or "
"``i386``."
msgstr ""
"`cmake.org <https://cmake.org/download/>`_ 上提供的预编译 Windows 二进制文件已将其命名模式更改为"
" ``cmake-$ver-windows-$arch``，其中 ``$arch` ` 是 ``x86_64`` 或 ``i386``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:334
msgid "Changes made since CMake 3.20.0 include the following."
msgstr "自 CMake 3.20.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:337
msgid "3.20.1"
msgstr "3.20.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:339
msgid ""
"The :module:`FindIntl` module in CMake 3.20.0 added checks "
"``Intl_HAVE_GETTEXT_BUILTIN``, ``Intl_HAVE_DCGETTEXT_BUILTIN``, and "
"``Intl_IS_BUILTIN``, but they were not implemented correctly. These have "
"been removed and replaced with a single ``Intl_IS_BUILT_IN`` check, whose "
"name is consistent with the :module:`FindIconv` module."
msgstr ""
"CMake 3.20.0 中的:module:`FindIntl` "
"模块添加了检查``Intl_HAVE_GETTEXT_BUILTIN``、``Intl_HAVE_DCGETTEXT_BUILTIN`` "
"和``Intl_IS_BUILTIN``，但它们没有正确实现。这些已被删除并替换为单个“Intl_IS_BUILT_IN”检查，其名称与 "
"FindIconv 模块一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:345
msgid ""
"The ``-rpath`` linker flag is now specified as supported on all Apple "
"platforms, not just macOS.  The ``install_name_dir`` used for iOS, tvOS "
"and watchOS should now default to ``@rpath`` instead of using a full "
"absolute path and failing at runtime when the library or framework is "
"embedded in an application bundle (see :prop_tgt:`XCODE_EMBED_<type>`)."
msgstr ""
"``-rpath`` 链接器标志现在被指定为在所有 Apple 平台上都受支持，而不仅仅是 macOS。用于 iOS、tvOS 和 watchOS "
"的“install_name_dir”现在应该默认为“@rpath”，而不是使用完整的绝对路径，并且当库或框架嵌入到应用程序包中时在运行时失败（参见:prop_tgt:"
" `XCODE_EMBED_<type>`）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:352
msgid "3.20.2"
msgstr "3.20.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:354
msgid ""
"The Intel Classic 2021 compiler version numbers are now detected correctly"
" as having major version 2021.  CMake 3.20.1 and below were not aware of a"
" change to the identification macro version scheme made by Intel starting "
"in version 2021, and detected the version as 20.2."
msgstr ""
"英特尔经典 2021 编译器版本号现在被正确检测为具有主要版本 2021。CMake 3.20.1 及更低版本不知道英特尔从 2021 "
"版开始对标识宏版本方案进行了更改，并检测到版本为 20.2。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:359
msgid ""
"The Intel oneAPI Fortran compiler is now identified as ``IntelLLVM``. The "
"oneAPI 2021.1 Fortran compiler is missing an identification macro, so "
"CMake 3.20.1 and below identified it as ``Intel``.  CMake now has a "
"special case to recognize oneAPI 2021.1 Fortran as ``IntelLLVM``. The "
"oneAPI 2021.2 Fortran compiler defines the proper identification macro and"
" so is identified as ``IntelLLVM`` by all CMake 3.20 versions."
msgstr ""
"Intel oneAPI Fortran 编译器现在被标识为“IntelLLVM”。 oneAPI 2021.1 Fortran "
"编译器缺少标识宏，因此 CMake 3.20.1 及以下版本将其标识为“Intel”。 CMake 现在有一个特例，可以将 oneAPI "
"2021.1 Fortran 识别为“IntelLLVM”。 oneAPI 2021.2 Fortran 编译器定义了正确的标识宏，因此被所有 "
"CMake 3.20 版本标识为“IntelLLVM”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:367
msgid "3.20.3, 3.20.4, 3.20.5, 3.20.6"
msgstr "3.20.3、3.20.4、3.20.5、3.20.6"

#: ../../cmake-prefix/src/cmake/Help/release/3.20.rst:369
#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:341
#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:176
#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:319
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:369
#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:181
msgid ""
"These versions made no changes to documented features or interfaces. Some "
"implementation updates were made to support ecosystem changes and/or fix "
"regressions."
msgstr "这些版本未对记录的功能或界面进行任何更改。进行了一些实施更新以支持生态系统更改和/或修复回归。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:2
msgid "CMake 3.21 Release Notes"
msgstr "CMake 3.21 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:8
msgid "Changes made since CMake 3.20 include the following."
msgstr "自 CMake 3.20 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:16
msgid ""
":manual:`cmake-presets(7)` gained support for specifying the install "
"prefix in a configure preset."
msgstr ":manual:`cmake-presets(7)` 获得了对在配置预设中指定安装前缀的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:19
msgid ""
":manual:`cmake-presets(7)` gained support for conditional enabling of "
"presets."
msgstr ":manual:`cmake-presets(7)` 获得了对有条件启用预设的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:21
msgid ""
":manual:`cmake-presets(7)` gained support for a ``${hostSystemName}`` "
"macro."
msgstr ":manual:`cmake-presets(7)` 获得了对 ``${hostSystemName}`` 宏的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:23
msgid ""
":manual:`cmake-presets(7)` gained support for omitting the ``generator`` "
"and ``binaryDir`` fields."
msgstr ""
":manual:`cmake-presets(7)` 获得了对省略 ``generator`` 和 ``binaryDir`` 字段的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:29
msgid "The :generator:`Visual Studio 17 2022` generator was added."
msgstr "添加了 :generator:`Visual Studio 17 2022` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:31
msgid ""
"The :ref:`Makefile Generators` and the :generator:`Ninja` generator "
"learned to add linker launcher tools along with the linker for ``C``, "
"``CXX``, ``OBJC``, and ``OBJCXX`` languages. See the "
":variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variable and "
":prop_tgt:`<LANG>_LINKER_LAUNCHER` target property for details."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` 生成器学会了添加链接器启动器工具以及用于 "
"``C``、``CXX``、``OBJC`` 和 ``OBJCXX 的链接器``语言。有关详细信息，请参阅 "
":variable:`CMAKE_<LANG>_LINKER_LAUNCHER` 变量和 "
":prop_tgt:`<LANG>_LINKER_LAUNCHER` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:40
msgid ""
"CMake learned to support ``HIP`` as a first-class language that can be "
"enabled via the :command:`project` and :command:`enable_language` "
"commands."
msgstr ""
"CMake 学会了支持 ``HIP`` 作为一流的语言，可以通过 :command:`project` 和 "
":command:`enable_language` 命令启用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:43
msgid ""
":prop_tgt:`C_STANDARD`, :prop_tgt:`OBJC_STANDARD`, and the "
":manual:`Compile Features <cmake-compile-features(7)>` functionality "
"gained support for C17 and C23."
msgstr ""
":prop_tgt:`C_STANDARD`、 :prop_tgt:`OBJC_STANDARD` 和 :manual:`Compile "
"Features <cmake-compile-features(7)>` 功能获得了对 C17 和 C23 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:47
msgid ""
"Source file extensions ``.ixx`` and ``.cppm`` are now treated as C++."
msgstr "源文件扩展名“.ixx”和“.cppm”现在被视为 C++。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:52
msgid ""
":manual:`cmake(1)` gained the :option:`--install-prefix <cmake --install-"
"prefix>` command-line option to specify the location of the install "
"prefix."
msgstr ""
":manual:`cmake(1)` 获得了 :option:`--install-prefix <cmake --install-prefix>` "
"命令行选项来指定安装前缀的位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:55
msgid ""
":manual:`cmake(1)` gained the :option:`--toolchain <cmake --toolchain>` "
"command-line option to specify a toolchain file."
msgstr ""
":manual:`cmake(1)` 获得了 :option:`--toolchain <cmake --toolchain>` "
"命令行选项来指定工具链文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:58
msgid ""
":manual:`cmake(1)` :option:`-E capabilities <cmake-E capabilities>` "
"output, for some generators, may now contain a ``supportedPlatforms`` "
"field listing platforms known to be supported in "
":variable:`CMAKE_GENERATOR_PLATFORM`."
msgstr ""
":manual:`cmake(1)` :option:`-E capabilities <cmake-E capabilities>` "
"输出，对于某些生成器，现在可能包含一个 ``supportedPlatforms`` 字段列表已知支持的平台 :variable:` "
"CMAKE_GENERATOR_PLATFORM`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:62
msgid "Messages printed to a terminal now may be colored by message type."
msgstr "打印到终端的消息现在可以按消息类型着色。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:67
msgid ""
"The Fujitsu compiler is now supported using compiler id ``Fujitsu`` in "
"traditional (``Trad``) mode, and compiler id ``FujitsuClang`` in ``Clang``"
" mode."
msgstr ""
"Fujitsu 编译器现在支持在传统 (``Trad``) 模式下使用编译器 ID ``Fujitsu``，在``Clang`` 模式下使用编译器 "
"ID ``FujitsuClang``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:74
msgid "CMake now supports the MSYS runtime environment, much like CYGWIN."
msgstr "CMake 现在支持 MSYS 运行时环境，很像 CYGWIN。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:79
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to 2.3."
msgstr ""
":manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` 字段已更新为 "
"2.3。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:82
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 gained a new "
"\"directory\" object containing directory-level information. This includes"
" a list of installers generated by the :command:`install` command."
msgstr ""
":manual:`cmake-file-api(7)` “代码模型”版本 2 获得了一个包含目录级信息的新“目录”对象。这包括由 "
":command:`install` 命令生成的安装程序列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:90
msgid "The :command:`add_custom_command` command ``DEPFILE`` option:"
msgstr ":command:`add_custom_command` 命令``DEPFILE`` 选项："

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:92
msgid ""
"may now use :manual:`generator expressions <cmake-generator-"
"expressions(7)>`,"
msgstr ""
"现在可以使用 :manual:`generator expressions <cmake-generator-expressions(7)>`,"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:95
msgid ""
"is now supported by :ref:`Visual Studio Generators` for VS 2012 and above,"
" and"
msgstr "Visual Studio Generators 现在支持 VS 2012 及更高版本，并且"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:98
msgid "is now supported by the :generator:`Xcode` generator."
msgstr "Xcode 生成器现在支持它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:100
msgid ""
"The :command:`add_custom_command(TARGET)` command (for :ref:`Build Events "
"<add_custom_command(TARGET)>`) gained support for resolving target-"
"dependent generator expressions."
msgstr ""
":command:`add_custom_command(TARGET)` 命令（用于 :ref:`Build Events "
"<add_custom_command(TARGET)>`）获得了对解析依赖于目标的生成器表达式的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:104
msgid ""
"The :command:`build_command` command gained a ``PARALLEL_LEVEL`` option."
msgstr ":command:`build_command` 命令获得了一个 ``PARALLEL_LEVEL`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:106
msgid ""
"The :command:`file(COPY_FILE)` command was added to copy a single file."
msgstr "添加了 :command:`file(COPY_FILE)` 命令来复制单个文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:108
msgid ""
"The :command:`file(GET_RUNTIME_DEPENDENCIES)` command gained new "
"``POST_INCLUDE_FILES`` and ``POST_EXCLUDE_FILES`` arguments."
msgstr ""
":command:`file(GET_RUNTIME_DEPENDENCIES)` 命令获得了新的 ``POST_INCLUDE_FILES`` 和"
" ``POST_EXCLUDE_FILES`` 参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:111
msgid ""
"The :command:`file(REAL_PATH)` command gained the option ``EXPAND_TILDE`` "
"to replace any leading tilde with the path to the user's home directory."
msgstr ""
":command:`file(REAL_PATH)` 命令获得了选项 `EXPAND_TILDE`` 以用用户主目录的路径替换任何前导波浪号。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:114
msgid ""
"The :command:`file(RENAME)` command learned to optionally capture failure "
"in a result variable.  It also gained a ``NO_REPLACE`` option to fail if "
"the destination exists."
msgstr ""
":command:`file(RENAME)` 命令学会了选择性地在结果变量中捕获失败。它还获得了一个 ``NO_REPLACE`` "
"选项，如果目标存在则失败。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:118
msgid ""
"The :command:`install` command gained a new ``IMPORTED_RUNTIME_ARTIFACTS``"
" mode, which can be used to install the runtime artifacts of imported "
"targets."
msgstr ""
":command:`install` 命令获得了一种新的 ``IMPORTED_RUNTIME_ARTIFACTS`` "
"模式，可用于安装导入目标的运行时构件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:121
msgid ""
"The :command:`install` command gained a new ``RUNTIME_DEPENDENCY_SET`` "
"mode, which can be used to install runtime dependencies using "
":command:`file(GET_RUNTIME_DEPENDENCIES)`."
msgstr ""
":command:`install` 命令获得了一个新的 ``RUNTIME_DEPENDENCY_SET`` 模式，可用于使用 "
":command:`file(GET_RUNTIME_DEPENDENCIES)` 安装运行时依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:125
msgid ""
"The :command:`install(TARGETS)` command gained new "
"``RUNTIME_DEPENDENCIES`` and ``RUNTIME_DEPENDENCY_SET`` arguments, which "
"can be used to install runtime dependencies using "
":command:`file(GET_RUNTIME_DEPENDENCIES)`."
msgstr ""
":command:`install(TARGETS)` 命令获得了新的 ``RUNTIME_DEPENDENCIES`` 和 "
"``RUNTIME_DEPENDENCY_SET`` 参数，可用于使用 "
":command:`file(GET_RUNTIME_DEPENDENCIES)` 安装运行时依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:129
msgid ""
"The :command:`install(SCRIPT|CODE)` command supports a new option "
"``ALL_COMPONENTS`` which allows the corresponding code to run for every "
"component of a per component installation."
msgstr ""
":command:`install(SCRIPT|CODE)` 命令支持一个新选项 "
"`ALL_COMPONENTS``，它允许为每个组件安装的每个组件运行相应的代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:134
msgid ""
"The :command:`project` command now sets variables "
":variable:`PROJECT_IS_TOP_LEVEL` and :variable:`<PROJECT-"
"NAME>_IS_TOP_LEVEL` to indicate whether it was called in a top-level "
"``CMakeLists.txt`` file."
msgstr ""
":command:`project` 命令现在设置变量 :variable:`PROJECT_IS_TOP_LEVEL` "
"和 :variable:`<PROJECT-NAME>_IS_TOP_LEVEL` 以指示它是否在顶级 ``CMakeLists.txt`` "
"文件中被调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:141
msgid ""
"The :envvar:`CMAKE_TOOLCHAIN_FILE` environment variable was added to "
"provide a default value for the :variable:`CMAKE_TOOLCHAIN_FILE` variable."
msgstr ""
"添加了 :envvar:`CMAKE_TOOLCHAIN_FILE` 环境变量以为 :variable:`CMAKE_TOOLCHAIN_FILE`"
" 变量提供默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:147
msgid ""
"The :prop_dir:`IMPORTED_TARGETS` directory property was added to get a "
"list of :ref:`Imported Targets` created in the current directory."
msgstr ""
"添加了 :prop_dir:`IMPORTED_TARGETS` 目录属性以获取在当前目录中创建的 :ref:`Imported Targets` "
"列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:151
msgid ""
"The :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS <XCODE_EMBED_<type>>` target "
"property was added to tell the :generator:`Xcode` generator to embed app "
"extensions such as iMessage sticker packs. Aspects of the embedding can be"
" customized with the :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_PATH "
"<XCODE_EMBED_<type>>`, "
":prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_CODE_SIGN_ON_COPY "
"<XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>` and "
":prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY "
"<XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>` properties."
msgstr ""
"添加了:prop_tgt:`XCODE_EMBED_APP_EXTENSIONS <XCODE_EMBED_<type>>` "
"目标属性，以告知:generator:`Xcode` 生成器嵌入应用程序扩展，例如 iMessage 贴纸包。嵌入的各个方面可以使用 "
":prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_PATH "
"<XCODE_EMBED_<type>>`、 :prop_tgt:`XCODE_EMBED_APP_EXTENSIONS_CODE_SIGN_ON_COPY"
" <XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>` 和 :prop_tgt "
"进行自定义 :`XCODE_EMBED_APP_EXTENSIONS_REMOVE_HEADERS_ON_COPY "
"<XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>` 属性."

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:163
msgid ""
"The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to support"
" the serial ``Fujitsu_SSL2`` and parallel ``Fujitsu_SSL2BLAMP`` libraries."
msgstr ""
":module:`FindBLAS` 和 :module:`FindLAPACK` 模块学会了支持串行 ``Fujitsu_SSL2`` 和并行 "
"``Fujitsu_SSL2BLAMP`` 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:166
msgid "The :module:`FindDevIL` module now provides imported targets."
msgstr ":module:`FindDevIL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:168
msgid "The :module:`FindIconv` module now has version support."
msgstr ":module:`FindIconv` 模块现在有版本支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:170
msgid "The :module:`FindIntl` module now has version support."
msgstr ":module:`FindIntl` 模块现在有版本支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:172
msgid ""
"The :module:`FindMPI` module learned to support ``Fujitsu`` and "
"``FujitsuClang`` in both host and cross compiling modes."
msgstr "FindMPI 模块学会了在主机和交叉编译模式下支持 ``Fujitsu`` 和 ``FujitsuClang``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:175
msgid ""
"The :module:`FindMsys` module was added to find MSYS installations. Like "
":module:`FindCygwin`, it is used automatically by some other find modules "
"to locate UNIX-style tools on Windows."
msgstr ""
"添加了 :module:`FindMsys` 模块以查找 MSYS 安装。像 :module:`FindCygwin` "
"一样，其他一些查找模块会自动使用它在 Windows 上定位 UNIX 风格的工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:179
msgid ""
"The :module:`FindOpenMP` module learned to support ``Fujitsu`` and "
"``FujitsuClang``."
msgstr ":module:`FindOpenMP` 模块学会了支持 ``Fujitsu`` 和 ``FujitsuClang``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:182
msgid ""
"The :module:`FindVulkan` module gained imported targets "
"``Vulkan::Headers`` and ``Vulkan::glslangValidator``."
msgstr ""
":module:`FindVulkan` 模块获得了导入的目标 ``Vulkan::Headers`` 和 "
"``Vulkan::glslangValidator``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:185
msgid ""
"The :module:`UseJava` module command ``add_jar`` gained a ``RESOURCES`` "
"option to allow explicit naming of resources with non-optional namespace."
msgstr "UseJava 模块命令 add_jar 获得了 RESOURCES 选项，以允许使用非可选命名空间显式命名资源。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:188
msgid ""
"The :module:`UseSWIG` module use now standard library naming conventions "
"for the ``CSharp`` language. See policy :policy:`CMP0122`."
msgstr ":module:`UseSWIG` 模块现在使用 ``CSharp`` 语言的标准库命名约定。请参阅政策:policy:`CMP0122`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:191
msgid ""
"The :module:`UseSWIG` module now supports using the ``swig`` tool to "
"generate implicit dependencies with the :generator:`Xcode` generator."
msgstr ""
":module:`UseSWIG` 模块现在支持使用 ``swig`` 工具通过 :generator:`Xcode` 生成器生成隐式依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:197
msgid "A new :genex:`TARGET_RUNTIME_DLLS` generator expression was added."
msgstr "添加了一个新的 :genex:`TARGET_RUNTIME_DLLS` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:202
msgid ""
":manual:`ctest(1)` gained documentation for its ability to capture "
":ref:`Additional Test Measurements`."
msgstr ""
":manual:`ctest(1)` 因其捕获 :ref:`Additional Test Measurements` 的能力而获得文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:205
msgid ""
":manual:`ctest(1)` learned to recognize files attached to a test at run "
"time. Previously it was only possible to attach files to tests at "
"configure time by using the :prop_test:`ATTACHED_FILES` or "
":prop_test:`ATTACHED_FILES_ON_FAIL` test properties. See :ref:`Additional "
"Test Measurements` for more information."
msgstr ""
":manual:`ctest(1)` 学会了在运行时识别附加到测试的文件。以前只能通过使用 :prop_test:`ATTACHED_FILES` "
"或 :prop_test:`ATTACHED_FILES_ON_FAIL` "
"测试属性在配置时将文件附加到测试。有关更多信息，请参阅 :ref:`附加测试测量 <Additional Test Measurements>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:211
msgid ""
":manual:`ctest(1)` gained a :option:`--output-junit <ctest --output-"
"junit>` option to write test results to a JUnit XML file."
msgstr ""
":manual:`ctest(1)` 获得了一个 :option:`--output-junit <ctest --output-junit>` "
"选项，用于将测试结果写入 JUnit XML 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:214
msgid ""
"The :command:`ctest_build` command gained a ``PARALLEL_LEVEL`` option."
msgstr ":command:`ctest_build` 命令获得了一个 ``PARALLEL_LEVEL`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:219
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` gained option "
":variable:`CPACK_DMG_FILESYSTEM` to control the ``.dmg`` filesystem."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` "
"获得了选项 :variable:`CPACK_DMG_FILESYSTEM` 来控制 ``.dmg`` 文件系统。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:222
msgid ""
"The :cpack_gen:`CPack IFW Generator` now supports hyphens in names given "
"to :command:`cpack_ifw_configure_component` or "
":command:`cpack_ifw_configure_component_group` as ``DEPENDS`` or "
"``DEPENDENCIES`` arguments.  This requires QtIFW 3.1 or later."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"现在支持给 :command:`cpack_ifw_configure_component` 或 "
":command:`cpack_ifw_configure_component_group` 作为``DEPENDS`` "
"或``DEPENDENCIES`` 参数的名称中的连字符。这需要 QtIFW 3.1 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:227
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained a new "
":variable:`CPACK_NSIS_EXECUTABLE` variable to specify the ``makensis`` "
"executable to use instead of the default one."
msgstr ""
":cpack_gen:`CPack NSIS Generator` 获得了一个新的 :variable:`CPACK_NSIS_EXECUTABLE`"
" 变量来指定要使用的 ``makensis`` 可执行文件而不是默认的可执行文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:231
msgid ""
"The :variable:`CPACK_CUSTOM_INSTALL_VARIABLES` variable was added to set "
"variables in ``cmake_install.cmake`` script invocations made by CPack."
msgstr ""
"添加了 :variable:`CPACK_CUSTOM_INSTALL_VARIABLES` 变量以在 CPack 进行的 "
"``cmake_install.cmake`` 脚本调用中设置变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:237
msgid ""
"Undocumented :variable:`CMAKE_SYSTEM_NAME` version-stripping behavior has "
"been removed entirely. If it is set by a ``-D`` flag or by a "
":manual:`toolchain file <cmake-toolchains(7)>`, it is left unaltered, even"
" if it still contains a version number. Similar "
":variable:`CMAKE_HOST_SYSTEM_NAME` version-stripping behavior, also "
"undocumented, has been moved earlier, before :command:`project` or "
":command:`enable_language` is called."
msgstr ""
"未记录的 :variable:`CMAKE_SYSTEM_NAME` 版本剥离行为已被完全删除。如果它由 ``-D`` 标志或 "
":manual:`toolchain 文件 <cmake-toolchains(7)>` 设置，则它保持不变，即使它仍然包含版本号。类似的 "
":variable:`CMAKE_HOST_SYSTEM_NAME` 版本剥离行为，也未记录，已在调用 :command:`project` 或 "
":command:`enable_language` 之前移动。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:245
msgid ""
"``ARMClang`` cpu/arch compile and link flags are no longer added "
"automatically based on the :variable:`CMAKE_SYSTEM_PROCESSOR` variable or "
"the undocumented ``CMAKE_SYSTEM_ARCH`` variable. They must be specified "
"explicitly.  See policy :policy:`CMP0123`."
msgstr ""
"不再根据 CMAKE_SYSTEM_PROCESSOR 变量或未记录的 CMAKE_SYSTEM_ARCH 变量自动添加 ``ARMClang`` "
"cpu/arch 编译和链接标志。它们必须明确指定。请参阅政策:policy:`CMP0123`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:253
msgid ""
"The :command:`find_file`, :command:`find_path`, :command:`find_program`, "
"and :command:`find_library` commands handle cache variables in the same "
"way regardless how they are defined. See policy :policy:`CMP0125` for "
"details."
msgstr ""
":command:`find_file`、 :command:`find_path`、 :command:`find_program` 和 "
":command:`find_library` "
"命令以相同的方式处理缓存变量，无论它们是如何定义的。有关详细信息，请参阅政策:policy:`CMP0125`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:257
msgid ""
"The :command:`find_file`, :command:`find_path`, :command:`find_program`, "
"and :command:`find_library` commands gained the option ``NO_CACHE`` to "
"store find result in normal variable."
msgstr ""
":command:`find_file`、 :command:`find_path`、 :command:`find_program` 和 "
":command:`find_library` 命令获得了选项 ``NO_CACHE`` 以将查找结果存储在普通变量中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:261
msgid ""
"The :command:`foreach` command now isolates loop variables in the loop "
"scope. See policy :policy:`CMP0124` for details."
msgstr ":command:`foreach` 命令现在在循环范围内隔离循环变量。有关详细信息，请参阅政策:policy:`CMP0124`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:264
msgid ""
"The :command:`list` command's ``GET``, ``INSERT``, ``SUBLIST``, and "
"``REMOVE_AT`` subcommands now error with invalid (i.e., non-integer) "
"values are given as any of their index arguments based on the setting of "
"policy :policy:`CMP0121`."
msgstr ""
":command:`list` 命令的 ``GET``、``INSERT``、``SUBLIST`` 和 ``REMOVE_AT`` "
"子命令现在错误并给出无效（即非整数）值作为任何它们的索引参数基于策略设置:policy:`CMP0121`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:269
msgid ""
"The :command:`set(CACHE)` command no longer removes a normal variable of "
"the same name, if any. See policy :policy:`CMP0126`."
msgstr ":command:`set(CACHE)` 命令不再删除同名的普通变量（如果有的话）。请参阅政策:policy:`CMP0126`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:272
msgid ""
":command:`target_link_libraries` calls referencing object libraries via "
"the :genex:`TARGET_OBJECTS` generator expression now place the object "
"files before all libraries on the link line, regardless of their specified"
" order.  See documentation on :ref:`Linking Object Libraries via "
"\\$\\<TARGET_OBJECTS\\>` for details."
msgstr ""
":command:`target_link_libraries` 通过 :genex:`TARGET_OBJECTS` "
"生成器表达式调用引用目标库现在将目标文件放在链接行上所有库之前，无论它们的指定顺序如何。有关详细信息，请参阅有关 :ref:`通过 "
"\\$\\<TARGET_OBJECTS\\>` 链接对象库的文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:278
msgid ""
"The :ref:`Ninja Generators` now pass source files and include directories "
"to the compiler using absolute paths.  This makes diagnostic messages and "
"debug symbols more consistent, and matches the :ref:`Makefile Generators`."
msgstr ""
":ref:`Ninja Generators` 现在使用绝对路径将源文件和包含目录传递给编译器。这使得诊断消息和调试符号更加一致，并且与 "
"Makefile Generators 相匹配。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:282
msgid ""
"The :generator:`NMake Makefiles` generator now encodes the generated "
"makefiles as UTF-8 with a BOM when using ``nmake`` from VS 9 or above."
msgstr ""
"当使用 VS 9 或更高版本的 ``nmake`` 时， :generator:`NMake Makefiles` 生成器现在将生成的 "
"makefiles 编码为带有 BOM 的 UTF-8。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:285
msgid ""
"The :ref:`Visual Studio Generators` for VS 2010 and above now place per-"
"source preprocessor definitions after target-wide preprocssor definitions."
"  This makes VS consistent with the :ref:`Ninja Generators` and the "
":ref:`Makefile Generators`."
msgstr ""
"VS 2010 及更高版本的 :ref:`Visual Studio Generators` "
"现在将每个源预处理器定义放在目标范围预处理器定义之后。这使得 VS 与 :ref:`Ninja Generators` 和 :ref:`Makefile"
" Generators` 保持一致。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:290
msgid ""
"The precompiled binaries provided on `cmake.org "
"<https://cmake.org/download/>`_ now support ``liblzma`` multi-threading.  "
"See the :variable:`CPACK_THREADS` and :variable:`CPACK_ARCHIVE_THREADS` "
"variables."
msgstr ""
"`cmake.org <https://cmake.org/download/>`_ 上提供的预编译二进制文件现在支持 ``liblzma`` "
"多线程。请参阅 :variable:`CPACK_THREADS` 和 :variable:`CPACK_ARCHIVE_THREADS` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:298
msgid "Changes made since CMake 3.21.0 include the following."
msgstr "自 CMake 3.21.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:301
msgid "3.21.1"
msgstr "3.21.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:303
msgid ""
"The :generator:`Visual Studio 17 2022` generator is now based on \"Visual "
"Studio 2022 Preview 2\".  Previously it was based on \"Preview 1.1\"."
msgstr ""
":generator:`Visual Studio 17 2022` 生成器现在基于“Visual Studio 2022 Preview "
"2”。以前它基于“Preview 1.1”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:307
msgid "3.21.2"
msgstr "3.21.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:309
msgid ""
"``CUDA`` targets with :prop_tgt:`CUDA_SEPARABLE_COMPILATION` enabled are "
"now correctly generated in non-root directories."
msgstr ""
"启用了 :prop_tgt:`CUDA_SEPARABLE_COMPILATION` 的 ``CUDA`` 目标现在可以在非根目录中正确生成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:312
msgid ""
"The :generator:`Visual Studio 17 2022` generator is now based on \"Visual "
"Studio 2022 Preview 3.1\".  Previously it was based on \"Preview 2\"."
msgstr ""
":generator:`Visual Studio 17 2022` 生成器现在基于“Visual Studio 2022 Preview "
"3.1”。以前它是基于“Preview 2”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:316
msgid "3.21.3"
msgstr "3.21.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:318
msgid ""
"The :generator:`Visual Studio 17 2022` generator is now based on \"Visual "
"Studio 2022 Preview 4\".  Previously it was based on \"Preview 3.1\"."
msgstr ""
":generator:`Visual Studio 17 2022` 生成器现在基于“Visual Studio 2022 Preview "
"4”。以前它基于“Preview 3.1”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:321
msgid ""
"The AMD ROCm Platform ``hipcc`` compiler was identifed by CMake 3.21.0 "
"through 3.21.2 as a distinct compiler with id ``ROCMClang``.  This has "
"been removed because it caused regressions.  Instead:"
msgstr ""
"CMake 3.21.0 到 3.21.2 将 AMD ROCm 平台“hipcc”编译器标识为具有 "
"id“ROCMClang”的独特编译器。这已被删除，因为它导致回归。反而："

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:325
msgid ""
"``hipcc`` may no longer be used as a ``HIP`` compiler because it "
"interferes with flags CMake needs to pass to Clang.  Use Clang directly."
msgstr ""
"``hipcc`` 可能不再用作 ``HIP`` 编译器，因为它会干扰 CMake 需要传递给 Clang 的标志。直接使用 Clang。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:328
msgid ""
"``hipcc`` may once again be used as a ``CXX`` compiler, and is treated as "
"whatever compiler it selects underneath, as CMake 3.20 and below did."
msgstr ""
"``hipcc`` 可以再次用作 ``CXX`` 编译器，并被视为它在下面选择的任何编译器，就像 CMake 3.20 及以下版本一样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:332
msgid "3.21.4"
msgstr "3.21.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:334
msgid ""
"The :generator:`Visual Studio 17 2022` generator is now based on the "
"\"Visual Studio 2022\" release candidates.  Previously it was based on "
"preview versions."
msgstr ""
":generator:`Visual Studio 17 2022` 生成器现在基于“Visual Studio "
"2022”候选版本。以前它基于预览版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.21.rst:339
msgid "3.21.5, 3.21.6, 3.21.7"
msgstr "3.21.5, 3.21.6, 3.21.7"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:2
msgid "CMake 3.22 Release Notes"
msgstr "CMake 3.22 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:8
msgid "Changes made since CMake 3.21 include the following."
msgstr "自 CMake 3.21 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:16
msgid ""
"The :command:`cmake_host_system_information` command can now query `OS "
"identification variables`_ from the :file:`/etc/os-release` file."
msgstr ""
":command:`cmake_host_system_information` 命令现在可以从 :file:`/etc/os-release` "
"文件中查询`OS 标识变量`_。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:19
msgid ""
"The :command:`string(TIMESTAMP)` command now supports the ``%V`` specifier"
" for ISO 8601 week numbers."
msgstr ":command:`string(TIMESTAMP)` 命令现在支持 ISO 8601 周数的 ``%V`` 说明符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:27
msgid ""
"The :envvar:`CMAKE_BUILD_TYPE` environment variable was added to provide a"
" default value for the :variable:`CMAKE_BUILD_TYPE` variable."
msgstr ""
"添加了 :envvar:`CMAKE_BUILD_TYPE` 环境变量以为 :variable:`CMAKE_BUILD_TYPE` "
"变量提供默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:30
msgid ""
"The :envvar:`CMAKE_CONFIGURATION_TYPES` environment variable was added to "
"provide a default value for the :variable:`CMAKE_CONFIGURATION_TYPES` "
"variable."
msgstr ""
"添加了 :envvar:`CMAKE_CONFIGURATION_TYPES` 环境变量以为 "
":variable:`CMAKE_CONFIGURATION_TYPES` 变量提供默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:34
msgid ""
"The :envvar:`CMAKE_INSTALL_MODE` environment variable was added to tell "
":command:`install` rules (implemented by :command:`file(INSTALL)`) to "
"install symbolic links instead of copying of files."
msgstr ""
"添加了 :envvar:`CMAKE_INSTALL_MODE` 环境变量来告诉 :command:`install` 规则（由 "
":command:`file(INSTALL)` 实现）安装符号链接而不是复制文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:38
msgid ""
"The :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` and "
":variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK` variables were added to control "
"the linker flag and check used by the :prop_tgt:`LINK_WHAT_YOU_USE` target"
" property."
msgstr ""
"添加了 :variable:`CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG` 和 "
":variable:`CMAKE_LINK_WHAT_YOU_USE_CHECK` 变量来控制链接器标志并检查 "
":prop_tgt:`LINK_WHAT_YOU_USE` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:43
msgid ""
"The :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` variable was "
"added to turn a non-REQUIRED :command:`find_package` call into a REQUIRED "
"one."
msgstr ""
"添加了 :variable:`CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>` 变量以将非必需的 "
":command:`find_package` 调用转换为必需的调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:50
msgid ""
"The :prop_tgt:`<LANG>_EXTENSIONS` target property is now initialized to "
":variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`, detected from the compiler. "
"See :policy:`CMP0128`."
msgstr ""
":prop_tgt:`<LANG>_EXTENSIONS` 目标属性现在初始化为 "
":variable:`CMAKE_<LANG>_EXTENSIONS_DEFAULT`，从编译器中检测到。请参阅:policy:`CMP0128`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:54
msgid ""
"The :prop_sf:`VS_SETTINGS` source file property is now supported for all "
"source file types.  Previously it worked only for non-built sources."
msgstr ":prop_sf:`VS_SETTINGS` 源文件属性现在支持所有源文件类型。以前它只适用于非构建源。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:60
msgid ""
"The :module:`CMakeDependentOption` module "
":command:`cmake_dependent_option` macro now supports full :ref:`Condition "
"Syntax`. See policy :policy:`CMP0127`."
msgstr ""
":module:`CMakeDependentOption` 模块 :command:`cmake_dependent_option` "
"宏现在支持完整的 :ref:`Condition Syntax`。请参阅政策:policy:`CMP0127`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:64
msgid ""
"The :module:`FetchContent` module now passes through the "
":variable:`CMAKE_TLS_VERIFY`, :variable:`CMAKE_TLS_CAINFO`, "
":variable:`CMAKE_NETRC` and :variable:`CMAKE_NETRC_FILE` variables (when "
"defined) to the underlying :module:`ExternalProject` sub-build. "
"Previously, those variables were silently ignored by "
":module:`FetchContent`."
msgstr ""
"FetchContent 模块现在通过 CMAKE_TLS_VERIFY、CMAKE_TLS_CAINFO、CMAKE_NETRC 和 "
"CMAKE_NETRC_FILE 变量（定义时）传递给底层模块： `ExternalProject` 子构建。以前，这些变量被 "
":module:`FetchContent` 默默地忽略了。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:70
msgid ""
"The :module:`FindBLAS` and :module:`FindLAPACK` modules gained a "
"``BLA_SIZEOF_INTEGER`` option to find a BLAS/LAPACK whose ABI uses a "
"specific integer size."
msgstr ""
"FindBLAS 和 FindLAPACK 模块获得了 BLA_SIZEOF_INTEGER 选项来查找 ABI 使用特定整数大小的 "
"BLAS/LAPACK。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:74
msgid "The :module:`FindJasper` module now provides an imported target."
msgstr ":module:`FindJasper` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:76
msgid "The :module:`FindMatlab` module now provides imported targets."
msgstr "FindMatlab 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:78
msgid ""
"The :module:`FindPkgConfig` module gained a :variable:`PKG_CONFIG_ARGN` "
"variable to specify arguments to ``pkg-config`` calls."
msgstr ""
":module:`FindPkgConfig` 模块获得了一个 :variable:`PKG_CONFIG_ARGN` 变量来指定 ``pkg-"
"config`` 调用的参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:81
msgid ""
"The :module:`GoogleTest` module :command:`gtest_discover_tests` function "
"gained a ``TEST_FILTER`` option to filter tests using ``--gtest_filter`` "
"during test discovery."
msgstr ""
":module:`GoogleTest` 模块 :command:`gtest_discover_tests` 函数获得了一个 "
"``TEST_FILTER`` 选项，可以在测试发现期间使用 ``--gtest_filter`` 过滤测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:85
msgid ""
"The :module:`UseSWIG` module, for :ref:`Visual Studio Generators`, can now"
" use the ``swig`` tool to generate implicit dependencies."
msgstr ""
":ref:`Visual Studio Generators` 的 :module:`UseSWIG` 模块现在可以使用 ``swig`` "
"工具生成隐式依赖项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:91
msgid ""
":manual:`ctest(1)` learned to recognize labels attached to a test at run "
"time. Previously it was only possible to attach labels to tests at "
"configure time by using the :prop_test:`LABELS` test property. See "
":ref:`Additional Test Measurements` for more information."
msgstr ""
":manual:`ctest(1)` 学会了在运行时识别附加在测试上的标签。以前只能在配置时使用 :prop_test:`LABELS` "
"测试属性将标签附加到测试。有关更多信息，请参阅 :ref:`附加测试测量 <Additional Test Measurements>` 。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:96
msgid ""
":manual:`ctest(1)` learned to be able to modify the environment for a test"
" through the :prop_test:`ENVIRONMENT_MODIFICATION` property. This is "
"allows for updates to environment variables based on the environment "
"present at test time."
msgstr ""
":manual:`ctest(1)` 学会了能够通过 :prop_test:`ENVIRONMENT_MODIFICATION` "
"属性修改测试环境。这允许根据测试时存在的环境更新环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:101
msgid ""
"The :command:`ctest_memcheck` command now also generates a "
":file:`DynamicAnalysis-Test.xml` file which may be used to submit test "
"results to CDash."
msgstr ""
":command:`ctest_memcheck` 命令现在还会生成一个 :file:`DynamicAnalysis-Test.xml` "
"文件，可用于将测试结果提交给 CDash。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:108
msgid ""
"The :cpack_gen:`CPack DEB Generator` gained the option to set "
":variable:`CPACK_DEBIAN_COMPRESSION_TYPE` to ``zstd``, which enables "
"Zstandard compression for deb packages."
msgstr ""
":cpack_gen:`CPack DEB Generator` 获得了将 "
":variable:`CPACK_DEBIAN_COMPRESSION_TYPE` 设置为 ``zstd`` 的选项，这为 deb 包启用了 "
"Zstandard 压缩。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:112
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained a new "
":variable:`CPACK_NSIS_IGNORE_LICENSE_PAGE` variable to suppress the "
"license page in the installer."
msgstr ""
":cpack_gen:`CPack NSIS Generator` "
"获得了一个新的 :variable:`CPACK_NSIS_IGNORE_LICENSE_PAGE` 变量来抑制安装程序中的许可页面。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:116
msgid ""
"The :cpack_gen:`CPack RPM Generator` gained the "
":variable:`CPACK_RPM_REQUIRES_EXCLUDE_FROM` option to avoid scanning "
"specific paths for dependencies."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"获得了 :variable:`CPACK_RPM_REQUIRES_EXCLUDE_FROM` 选项以避免扫描依赖项的特定路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:123
msgid ""
"The :generator:`Visual Studio 10 2010` generator is now deprecated and "
"will be removed in a future version of CMake."
msgstr ":generator:`Visual Studio 10 2010` 生成器现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:129
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"now correctly disables or enables compiler extensions when no standard "
"level is specified and avoids unnecessarily adding language standard flags"
" if the requested settings match the compiler's defaults. See "
":policy:`CMP0128`."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` "
"功能现在可以在未指定标准级别时正确禁用或启用编译器扩展，并避免在请求的设置与编译器的默认设置匹配时不必要地添加语言标准标志。请参阅:policy:`CMP0128`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:134
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"now ignores features for languages that are not enabled."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在忽略未启用语言的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:137
msgid ""
"The :ref:`Ninja Generators` now implement the ``edit_cache`` target using "
":manual:`ccmake(1)` if available."
msgstr ""
":ref:`Ninja Generators` 现在使用 :manual:`ccmake(1)` 实现 ``edit_cache`` "
"目标（如果可用）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:140
msgid ""
"The :generator:`Ninja` and :generator:`NMake Makefiles` generators now use"
" the MSVC ``-external:I`` flag for system includes. This became available "
"as of VS 16.10 (toolchain version 14.29.30037)."
msgstr ""
":generator:`Ninja` 和 :generator:`NMake Makefiles` 生成器现在使用 MSVC "
"``-external:I`` 标志进行系统包含。这从 VS 16.10（工具链版本 14.29.30037）开始可用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:144
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now requires NSIS 3.03 or later."
msgstr ":cpack_gen:`CPack NSIS Generator` 现在需要 NSIS 3.03 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:149
msgid "Changes made since CMake 3.22.0 include the following."
msgstr "自 CMake 3.22.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:152
msgid "3.22.1"
msgstr "3.22.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:154
#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:387
#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:264
msgid ""
"This version made no changes to documented features or interfaces. Some "
"implementation updates were made to support ecosystem changes and/or fix "
"regressions."
msgstr "此版本未对记录的功能或界面进行任何更改。进行了一些实施更新以支持生态系统更改和/或修复回归。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:159
msgid "3.22.2"
msgstr "3.22.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:161
msgid ""
"The ``OLD`` behavior of :policy:`CMP0128` was fixed to add flags even when"
" the specified standard matches the compiler default."
msgstr ":policy:`CMP0128` 的 ``OLD`` 行为被修复为添加标志，即使指定的标准与编译器默认值匹配。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:165
msgid "3.22.3"
msgstr "3.22.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:167
msgid ""
"The :command:`while` command again ignores errors in condition evaluation "
"as CMake 3.21 and below did.  This bug was fixed in 3.22.0, but exposed "
"errors in existing projects.  The fix has been reverted to restore "
"compatibility.  The fix may be restored in a future version of CMake via a"
" policy."
msgstr ""
":command:`while` 命令再次像 CMake 3.21 及更低版本那样忽略条件评估中的错误。此错误在 3.22.0 "
"中已修复，但在现有项目中暴露了错误。该修复程序已恢复以恢复兼容性。该修复程序可能会通过策略在未来版本的 CMake 中恢复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.22.rst:174
msgid "3.22.4, 3.22.5, 3.22.6"
msgstr "3.22.4、3.22.5、3.22.6"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:2
msgid "CMake 3.23 Release Notes"
msgstr "CMake 3.23 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:8
msgid "Changes made since CMake 3.22 include the following."
msgstr "自 CMake 3.22 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:16
msgid ":manual:`cmake-presets(7)` files now support schema version ``4``."
msgstr ":manual:`cmake-presets(7)` 文件现在支持架构版本 ``4``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:18
msgid ""
":manual:`cmake-presets(7)` files now have an optional ``include`` field, "
"which allows the files to include other files."
msgstr ":manual:`cmake-presets(7)` 文件现在有一个可选的 ``include`` 字段，允许文件包含其他文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:21
msgid ""
":manual:`cmake-presets(7)` files now support a ``${fileDir}`` macro, which"
" contains the directory containing the preset file."
msgstr ":manual:`cmake-presets(7)` 文件现在支持 ``${fileDir}`` 宏，它包含包含预设文件的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:24
msgid ""
":manual:`cmake-presets(7)` gained support for specifying the "
"``resolvePackageReferences`` command line option in a build preset to "
"control restoration behavior of package references from external package "
"managers. Currently this is only supported by the Visual Studio generator "
"to support restoring packages from NuGet. Other generators ignore this "
"option."
msgstr ""
":manual:`cmake-presets(7)` 获得了对在构建预设中指定 ``resolvePackageReferences`` "
"命令行选项的支持，以控制来自外部包管理器的包引用的恢复行为。目前只有 Visual Studio 生成器支持从 NuGet "
"恢复包。其他生成器忽略此选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:33
msgid ""
"The :ref:`Visual Studio Generators` for VS 2019 and above learned to "
"support .NET SDK-style project files (``.csproj``) for C# projects. See "
"the :prop_tgt:`DOTNET_SDK` target property and corresponding "
":variable:`CMAKE_DOTNET_SDK` variable.  :command:`add_custom_command` is "
"not yet supported in .NET SDK-style projects."
msgstr ""
"VS 2019 及更高版本的 :ref:`Visual Studio Generators` 学会了支持 C# 项目的 .NET SDK "
"样式的项目文件 (``.csproj``)。请参阅 :prop_tgt:`DOTNET_SDK` "
"目标属性和相应的 :variable:`CMAKE_DOTNET_SDK` 变量。 .NET SDK 样式的项目尚不支持 "
":command:`add_custom_command`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:39
msgid ""
"The :ref:`Visual Studio Generators` for VS 2017 and above learned to use "
"portable instances of Visual Studio not known to the VS installer. See the"
" :variable:`CMAKE_GENERATOR_INSTANCE` variable."
msgstr ""
"VS 2017 及更高版本的 :ref:`Visual Studio Generators` 学会了使用 VS 安装程序不知道的 Visual "
"Studio 的可移植实例。请参阅 :variable:`CMAKE_GENERATOR_INSTANCE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:46
msgid ""
"The :manual:`cmake(1)` :option:`--build <cmake --build>` command, when "
"used with :ref:`Visual Studio Generators` on projects that set the "
":prop_tgt:`VS_PACKAGE_REFERENCES` target property, now automatically "
"restores package references from NuGet.  The cache variable "
":variable:`CMAKE_VS_NUGET_PACKAGE_RESTORE` may be set to toggle this "
"behavior in a build tree.  Use the :option:`--resolve-package-references "
"<cmake--build --resolve-package-references>` command-line option to "
"control the behavior on one invocation."
msgstr ""
":manual:`cmake(1)` :option:`--build <cmake --build>` 命令，当与 :ref:`Visual "
"Studio Generators` 一起用于设置 :prop_tgt:`VS_PACKAGE_REFERENCES` 目标属性的项目时，现在自动从"
" NuGet 恢复包引用。缓存变量 :variable:`CMAKE_VS_NUGET_PACKAGE_RESTORE` 可以设置为在构建树中切换此行为。使用 "
":option:`--resolve-package-references <cmake--build --resolve-package-"
"references>` 命令行选项来控制一次调用的行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:55
msgid ""
"The :manual:`cmake(1)` command line tool gained a :option:`--debug-find-"
"pkg <cmake --debug-find-pkg>` option to enable debug messages under "
"specific :command:`find_package` calls."
msgstr ""
":manual:`cmake(1)` 命令行工具获得了一个 :option:`--debug-find-pkg <cmake --debug-"
"find-pkg>` 选项以在特定 :command:`find_package` 下启用调试消息电话。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:60
msgid ""
"The :manual:`cmake(1)` command line tool gained a :option:`--debug-find-"
"var <cmake --debug-find-var>` option to enable debug messages for "
"``find_*`` calls that use specific result variables."
msgstr ""
":manual:`cmake(1)` 命令行工具获得了一个 :option:`--debug-find-var <cmake --debug-"
"find-var>` 选项来为 ``find_*`` 调用启用调试消息使用特定的结果变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:68
msgid ""
"The IBM Open XL C/C++ compiler, based on LLVM, is now supported with "
"compiler id ``IBMClang``."
msgstr "基于 LLVM 的 IBM Open XL C/C++ 编译器现在受编译器 ID“IBMClang”支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:71
msgid ""
"The MCST LCC compiler is now supported with compiler id ``LCC``. See "
"policy :policy:`CMP0129`."
msgstr "MCST LCC 编译器现在支持编译器 ID 为“LCC”。请参阅政策:policy:`CMP0129`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:77
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to ``2.4``."
msgstr ":manual:`cmake-file-api(7)` “代码模型”版本 2 ``version`` 字段已更新为 ``2.4``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:80
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``directory`` "
"object ``installers`` field gained a new ``fileSet`` installer type."
msgstr ""
":manual:`cmake-file-api(7)` \"codemodel\" version 2 ``directory`` object "
"``installers`` 字段获得了新的 ``fileSet`` 安装程序类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:86
msgid ""
"The :command:`define_property` command gained a new "
"``INITIALIZE_FROM_VARIABLE`` option to cause a target property to be "
"initialized from a variable when a target is created."
msgstr ""
":command:`define_property` 命令获得了一个新的 ``INITIALIZE_FROM_VARIABLE`` "
"选项，可以在创建目标时从变量中初始化目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:90
msgid ""
"The :command:`install(TARGETS)` command gained a new ``FILE_SET`` "
"argument, which can be used to install header file sets associated with a "
"target."
msgstr ""
":command:`install(TARGETS)` 命令获得了一个新的 ``FILE_SET`` 参数，可用于安装与目标关联的头文件集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:93
#, python-format
msgid ""
"The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands "
"now support the ``%f`` specifier for microseconds."
msgstr ""
":command:`string(TIMESTAMP)` 和 :command:`file(TIMESTAMP)` 命令现在支持微秒的 ``%f``"
" 说明符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:96
msgid ""
"The :command:`target_sources` command gained a new ``FILE_SET`` mode, "
"which can be used to add headers as header-only source files of a target."
msgstr ""
":command:`target_sources` 命令获得了一个新的 ``FILE_SET`` 模式，可用于将标头添加为目标的仅标头源文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:102
msgid ""
"The :variable:`CMAKE_CUDA_ARCHITECTURES` variable and associated "
":prop_tgt:`CUDA_ARCHITECTURES` target property now support the ``all``, "
"and ``all-major`` values for CUDA toolkit 7.0+."
msgstr ""
":variable:`CMAKE_CUDA_ARCHITECTURES` 变量和关联的 :prop_tgt:`CUDA_ARCHITECTURES` "
"目标属性现在支持 CUDA 工具包 7.0+ 的 ``all`` 和 ``all-major`` 值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:106
msgid ""
"The :variable:`CMAKE_IGNORE_PREFIX_PATH` and "
":variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` variables were added to tell "
"the :command:`find_package`, :command:`find_program`, "
":command:`find_library`, :command:`find_path`, and :command:`find_file` "
"commands to ignore specified prefixes."
msgstr ""
"添加了 :variable:`CMAKE_IGNORE_PREFIX_PATH` 和 :variable:`CMAKE_SYSTEM_IGNORE_PREFIX_PATH` "
"变量以告知 :command:`find_package`、:command:`find_program`、:command:`find_library`、:command:`find_path`"
" 和： command:`find_file` 命令忽略指定的前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:112
msgid ""
"The :variable:`CMAKE_LINK_LIBRARIES_ONLY_TARGETS` variable and "
"corresponding :prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS` target property were"
" added to optionally require that all link items that can be target names "
"are actually names of existing targets."
msgstr ""
"添加了 :variable:`CMAKE_LINK_LIBRARIES_ONLY_TARGETS` 变量和相应的 "
":prop_tgt:`LINK_LIBRARIES_ONLY_TARGETS` "
"目标属性，以选择性地要求所有可以作为目标名称的链接项实际上是现有目标的名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:120
msgid ""
"The :prop_tgt:`HEADER_SETS` and :prop_tgt:`INTERFACE_HEADER_SETS` read-"
"only target properties were added to list header sets associated with a "
"target."
msgstr ""
":prop_tgt:`HEADER_SETS` 和 :prop_tgt:`INTERFACE_HEADER_SETS` "
"只读目标属性已添加到与目标关联的列表头集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:123
msgid ""
"The :prop_tgt:`HEADER_SET` and :prop_tgt:`HEADER_SET_<NAME>` target "
"properties were added to list files in the default header set and named "
"header sets, respectively."
msgstr ""
":prop_tgt:`HEADER_SET` 和 :prop_tgt:`HEADER_SET_<NAME>` "
"目标属性分别添加到默认标头集和命名标头集中的列表文件中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:127
msgid ""
"The :prop_tgt:`HEADER_DIRS` and :prop_tgt:`HEADER_DIRS_<NAME>` target "
"properties were added to specify the base directories of the default "
"header set and named header sets, respectively."
msgstr ""
"添加了 :prop_tgt:`HEADER_DIRS` 和 :prop_tgt:`HEADER_DIRS_<NAME>` "
"目标属性，分别指定默认标头集和命名标头集的基本目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:131
msgid ""
"The :prop_tgt:`IMPORTED_NO_SYSTEM` target property was added to specify "
"that an :ref:`Imported Target <Imported Targets>` should not be treated as"
" a system library (i.e. its include directories are not automatically "
"``SYSTEM``)."
msgstr ""
"添加了 :prop_tgt:`IMPORTED_NO_SYSTEM` 目标属性以指定:ref:`Imported Target <Imported "
"Targets>` 不应被视为系统库（即它的包含目录不会自动成为 ``SYSTEM``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:136
msgid ""
"The :prop_tgt:`XCODE_EMBED_PLUGINS <XCODE_EMBED_<type>>` target property "
"was added to tell the :generator:`Xcode` generator what targets to put in "
"the ``Embed PlugIns`` build phase."
msgstr ""
":prop_tgt:`XCODE_EMBED_PLUGINS <XCODE_EMBED_<type>>` 目标属性被添加来告诉 "
":generator:`Xcode` 生成器在 ``Embed PlugIns`` 构建阶段放置什么目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:140
msgid ""
"The :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` target property"
" and supporting "
":variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` variable were"
" added to tell the :generator:`Xcode` generator to enable specifying the "
"Xcode scheme option property ``GPU Frame Capture``."
msgstr ""
":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` "
"目标属性和支持 :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE` "
"变量被添加来告诉 :generator:`Xcode` 生成器启用指定 Xcode 方案选项属性``GPU Frame Capture``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:148
msgid ""
"The :module:`CheckPIESupported` module now supports the ``OBJC``, "
"``OBJCXX``, ``CUDA``, and ``HIP`` languages.  It also now honors "
":variable:`CMAKE_SYSROOT` and :variable:`CMAKE_OSX_SYSROOT`."
msgstr ""
":module:`CheckPIESupported` 模块现在支持 ``OBJC``、``OBJCXX``、``CUDA`` 和 ``HIP`` "
"语言。它现在也支持 :variable:`CMAKE_SYSROOT` 和 :variable:`CMAKE_OSX_SYSROOT`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:152
msgid ""
"The :module:`ExternalProject` module's :command:`ExternalProject_Add` "
"command gained support for a ``USES_TERMINAL_PATCH`` option to give the "
"patch step exclusive terminal access."
msgstr ""
":module:`ExternalProject` 模块的 :command:`ExternalProject_Add` 命令获得了对 "
"``USES_TERMINAL_PATCH`` 选项的支持，以赋予补丁步骤独占终端访问权限。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:156
msgid ""
"The :module:`FindCUDAToolkit` module now provides a target for "
"``libcufft_static_nocallback``, if found."
msgstr ""
":module:`FindCUDAToolkit` 模块现在为 ``libcufft_static_nocallback`` "
"提供了一个目标（如果找到的话）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:159
msgid ""
"The :module:`FindGLUT` module now provides the ``GLUT_INCLUDE_DIRS`` "
"result variable to conform with naming conventions documented in the "
":manual:`cmake-developer(7)` manual.  This supersedes the legacy "
"``GLUT_INCLUDE_DIR`` variable."
msgstr ""
"FindGLUT 模块现在提供 GLUT_INCLUDE_DIRS 结果变量，以符合 cmake-developer(7) "
"手册中记录的命名约定。这取代了遗留的 ``GLUT_INCLUDE_DIR`` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:164
msgid ""
"The :module:`FindGTest` module now provides a target for GMock, if found."
msgstr ":module:`FindGTest` 模块现在为 GMock 提供目标（如果找到的话）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:166
msgid ""
"The :module:`FindVulkan` module now provides a ``Vulkan_VERSION`` result "
"variable reporting the version number."
msgstr ":module:`FindVulkan` 模块现在提供报告版本号的 ``Vulkan_VERSION`` 结果变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:172
msgid ""
":manual:`ctest(1)` gained a new "
":variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT` variable, which can be used to"
" specify a timeout for submission inactivity."
msgstr ""
":manual:`ctest(1)` 获得了一个新的 :variable:`CTEST_SUBMIT_INACTIVITY_TIMEOUT` "
"变量，可用于指定提交不活动的超时时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:178
msgid ""
"The :cpack_gen:`CPack productbuild Generator` gained the new "
":variable:`CPACK_PRODUCTBUILD_DOMAINS`, "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_ANYWHERE`, "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_USER`, and "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_ROOT` variables for adding the "
"domains element to the Distribution XML. With these variables, it is now "
"possible to install products to the user's home directory without "
"requiring administrative privileges."
msgstr ""
"The :cpack_gen:`CPack productbuild Generator` gained the new "
":variable:`CPACK_PRODUCTBUILD_DOMAINS`, "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_ANYWHERE`, "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_USER`, and "
":variable:`CPACK_PRODUCTBUILD_DOMAINS_ROOT` variables for adding the "
"domains element to the Distribution XML .使用这些变量，现在无需管理权限即可将产品安装到用户的主目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:187
msgid ""
"The :cpack_gen:`CPack productbuild Generator` gained a new variable, "
":variable:`CPACK_PRODUCTBUILD_IDENTIFIER`, used to customize the unique "
"product identifier associated with the product."
msgstr ""
":cpack_gen:`CPack productbuild Generator` 获得了一个新变量 "
":variable:`CPACK_PRODUCTBUILD_IDENTIFIER`，用于自定义与产品关联的唯一产品标识符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:191
msgid ""
"The ``CPack.distribution.dist.in`` template used by the :cpack_gen:`CPack "
"productbuild Generator` and CPack ``PackageMaker`` generator was updated "
"to use a new ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable for its main "
"content. This replaced the previously undocumented and now deprecated "
"``CPACK_PACKAGEMAKER_CHOICES`` variable."
msgstr ""
":cpack_gen:`CPack productbuild Generator` 和 CPack ``PackageMaker`` "
"生成器使用的``CPack.distribution.dist.in`` "
"模板已更新为使用新的``CPACK_APPLE_PKG_INSTALLER_CONTENT`` 变量作为其主要内容。这取代了以前未记录且现已弃用的 "
"``CPACK_PACKAGEMAKER_CHOICES`` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:198
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained the new "
":variable:`CPACK_IFW_ARCHIVE_FORMAT` and "
":variable:`CPACK_IFW_ARCHIVE_COMPRESSION` variables for setting the format"
" used when packaging new component data archives, and choosing the "
"compression level used. These features are available for QtIFW 4.2 and "
"newer."
msgstr ""
"CPack IFW Generator 获得了新的 CPACK_IFW_ARCHIVE_FORMAT 和 "
"CPACK_IFW_ARCHIVE_COMPRESSION 变量，用于设置打包新组件数据存档时使用的格式，并选择使用的压缩级别。这些功能适用于 "
"QtIFW 4.2 及更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:205
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained new "
":variable:`CPACK_IFW_PACKAGE_DISABLE_COMMAND_LINE_INTERFACE` variable to "
"prevent the user from passing any consumer command to the installer, like "
"``install``, ``update``, and ``remove``. This feature is available for "
"QtIFW 4.0 and newer."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_DISABLE_COMMAND_LINE_INTERFACE` "
"变量，以防止用户将任何消费者命令传递给安装程序，例如 ``install``、``update`` 和 ``remove`` .此功能适用于 "
"QtIFW 4.0 及更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:211
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained the new "
":variable:`CPACK_IFW_PACKAGE_PRODUCT_IMAGES` variable for adding a list of"
" images to be shown on the ``PerformInstallationPage``. This feature is "
"available for QtIFW 4.0 and newer."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_PRODUCT_IMAGES` 变量，用于添加要在 "
"``PerformInstallationPage`` 上显示的图像列表。此功能适用于 QtIFW 4.0 及更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:216
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained the new "
":variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM`, "
":variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM_ARGUMENTS`, and "
":variable:`CPACK_IFW_PACKAGE_RUN_PROGRAM_DESCRIPTION` variables for "
"executing a command after the installer is done if the user accepts the "
"action.  This feature is available for QtIFW 4.0 and newer."
msgstr ""
"CPack IFW Generator 获得了新的 "
"CPACK_IFW_PACKAGE_RUN_PROGRAM、CPACK_IFW_PACKAGE_RUN_PROGRAM_ARGUMENTS 和 "
"CPACK_IFW_PACKAGE_RUN_PROGRAM_DESCRIPTION 变量，用于在用户接受安装程序完成后执行命令行动。此功能适用于 "
"QtIFW 4.0 及更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:223
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained the new "
":variable:`CPACK_IFW_PACKAGE_SIGNING_IDENTITY` variable for specifying a "
"code signing identity to be used for signing the generated app bundle. "
"This feature is available on macOS only, and for QtIFW 3.0 and newer."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_SIGNING_IDENTITY` "
"变量，用于指定用于对生成的应用程序包进行签名的代码签名身份。此功能仅适用于 macOS，适用于 QtIFW 3.0 及更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:228
msgid ""
"The :cpack_gen:`CPack WIX Generator` gained a new variable, "
":variable:`CPACK_WIX_SKIP_WIX_UI_EXTENSION`, to skip the inclusion of "
"WixUIExtensions."
msgstr ""
":cpack_gen:`CPack WIX Generator` 获得了一个新变量 "
":variable:`CPACK_WIX_SKIP_WIX_UI_EXTENSION`，以跳过包含 WixUIExtensions。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:235
msgid ""
":manual:`cmake(1)` now warns when multiple source paths are specified, as "
"in ``cmake -S src1 src2``.  This has never been officially documented or "
"supported, but older versions accidentally accepted multiple source paths "
"and used the last path specified.  Update scripts to avoid passing "
"multiple source path arguments."
msgstr ""
":manual:`cmake(1)` 现在在指定多个源路径时发出警告，如在 ``cmake -S src1 src2`` "
"中。这从未被正式记录或支持，但旧版本意外地接受了多个源路径并使用了最后指定的路径。更新脚本以避免传递多个源路径参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:241
msgid ""
"The :manual:`cpack(1)` undocumented ``OSXX11`` generator has been removed."
msgstr ":manual:`cpack(1)` 未记录的 ``OSXX11`` 生成器已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:243
msgid ""
"The previously undocumented ``CPACK_PACKAGEMAKER_CHOICES`` variable used "
"in the ``CPack.distribution.dist.in`` template has been replaced by a new "
"``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable. This only affects projects"
" that were providing their own custom ``CPack.distribution.dist.in`` "
"template file, but still relied on ``CPACK_PACKAGEMAKER_CHOICES`` being "
"set. Those custom template files should be updated to use "
"``CPACK_APPLE_PKG_INSTALLER_CONTENT`` instead, or to fully define all the "
"template file's contents without relying on substitution of either "
"variable."
msgstr ""
"``CPack.distribution.dist.in`` 模板中使用的先前未记录的 ``CPACK_PACKAGEMAKER_CHOICES``"
" 变量已被新的 ``CPACK_APPLE_PKG_INSTALLER_CONTENT`` "
"变量替换。这只会影响那些提供自己的自定义“CPack.distribution.dist.in”模板文件的项目，但仍然依赖于“CPACK_PACKAGEMAKER_CHOICES”的设置。这些自定义模板文件应该更新为使用“CPACK_APPLE_PKG_INSTALLER_CONTENT”，或者完全定义所有模板文件的内容而不依赖于任何一个变量的替换。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:255
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` no longer attaches "
":variable:`CPACK_RESOURCE_FILE_LICENSE` as the license agreement in the "
"generated ``.dmg`` unless explicitly activated by a "
":variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` option. In CMake "
"projects, the :module:`CPack` module enables the option by default for "
"compatibility."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 不再附加 "
":variable:`CPACK_RESOURCE_FILE_LICENSE` 作为生成的 ``.dmg`` 中的许可协议，除非由 "
":variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` 选项明确激活。在 CMake "
"项目中， :module:`CPack` 模块默认启用该选项以实现兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:262
msgid ""
"``CUDA`` targets may now enable both "
":prop_tgt:`CUDA_SEPARABLE_COMPILATION` and "
":prop_tgt:`CUDA_PTX_COMPILATION`."
msgstr ""
"``CUDA`` 目标现在可以同时启用 :prop_tgt:`CUDA_SEPARABLE_COMPILATION` 和 "
":prop_tgt:`CUDA_PTX_COMPILATION`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:265
msgid "``CUDA`` compiler detection now:"
msgstr "``CUDA`` 编译器检测现在："

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:267
msgid ""
"issues an error in all cases when it's unable to compute the default "
"architecture(s) if required (see :policy:`CMP0104`),"
msgstr "如果需要，在无法计算默认架构的所有情况下都会发出错误（请参阅:policy:`CMP0104`），"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:270
msgid "handles ``OFF`` for :variable:`CMAKE_CUDA_ARCHITECTURES` on Clang,"
msgstr "在 Clang 上为 :variable:`CMAKE_CUDA_ARCHITECTURES` 处理 ``OFF``，"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:272
msgid "supports the theoretical case of multiple default architectures, and"
msgstr "支持多个默认架构的理论案例，并且"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:274
msgid "tries to detect invalid architectures and issue an error."
msgstr "尝试检测无效架构并发出错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:276
msgid ""
"``CUDA`` with Clang now implements policy :policy:`CMP0105` and the "
":genex:`$<DEVICE_LINK:...>` and :genex:`$<HOST_LINK:...>` generator "
"expressions."
msgstr ""
"带有 Clang 的 ``CUDA`` 现在实现策略:policy:`CMP0105` 和:genex:`$<DEVICE_LINK:...>` "
"和:genex:`$<HOST_LINK:...>` 生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:280
msgid ""
"The :command:`define_property` command's ``BRIEF_DOCS`` and ``FULL_DOCS`` "
"arguments are now optional."
msgstr ""
":command:`define_property` 命令的 ``BRIEF_DOCS`` 和 ``FULL_DOCS`` 参数现在是可选的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:283
msgid ""
":manual:`ccmake(1)` may now be enabled on Windows when building CMake from"
" source.  This is experimental, and so is not included in official "
"distributions."
msgstr ""
":manual:`ccmake(1)` 现在可以在从源代码构建 CMake 时在 Windows 上启用。这是实验性的，因此不包含在官方发行版中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:290
msgid "Changes made since CMake 3.23.0 include the following."
msgstr "自 CMake 3.23.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:293
msgid "3.23.1"
msgstr "3.23.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:295
msgid ""
"The :command:`target_sources` ``FILE_SET`` feature added in CMake 3.23.0 "
"does not yet place header files properly in Apple :prop_tgt:`FRAMEWORK` "
"targets.  Pending further work in a future version of CMake, it is now an "
"error to add a ``FILE_SET`` of type ``HEADERS`` to such targets on Apple "
"platforms."
msgstr ""
"CMake 3.23.0 中添加的 :command:`target_sources` ``FILE_SET`` 功能尚未在 Apple "
":prop_tgt:`FRAMEWORK` 目标中正确放置头文件。在 CMake 的未来版本中等待进一步的工作，现在在 Apple "
"平台上向此类目标添加类型为“HEADERS”的“FILE_SET”是错误的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:301
msgid ""
"The :prop_tgt:`HEADER_SETS` and :prop_tgt:`INTERFACE_HEADER_SETS` target "
"properties added in CMake 3.23.0 are now read-only records of the header "
"sets created by the :command:`target_sources` command."
msgstr ""
"CMake 3.23.0 中添加的 :prop_tgt:`HEADER_SETS` 和 "
":prop_tgt:`INTERFACE_HEADER_SETS` 目标属性现在是 :command:`target_sources` "
"命令创建的标头集的只读记录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:306
msgid "3.23.2"
msgstr "3.23.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:308
msgid ""
"The ``CPACK_PACKAGEMAKER_CHOICES`` variable used in the "
"``CPack.distribution.dist.in`` template file was replaced by a new "
"``CPACK_APPLE_PKG_INSTALLER_CONTENT`` variable in CMake 3.23.0. This broke"
" projects that provided their own template file but still expected the "
"``CPACK_PACKAGEMAKER_CHOICES`` variable to be defined. The old "
"``CPACK_PACKAGEMAKER_CHOICES`` variable is now also set to the same "
"content as it was before, but it is formally deprecated."
msgstr ""
"``CPack.distribution.dist.in`` 模板文件中使用的``CPACK_PACKAGEMAKER_CHOICES`` 变量在 "
"CMake 3.23.0 中被新的``CPACK_APPLE_PKG_INSTALLER_CONTENT`` "
"变量替换。这破坏了提供自己的模板文件但仍期望定义“CPACK_PACKAGEMAKER_CHOICES”变量的项目。旧的 "
"``CPACK_PACKAGEMAKER_CHOICES`` 变量现在也设置为与以前相同的内容，但已正式弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.23.rst:317
msgid "3.23.3, 3.23.4, 3.23.5"
msgstr "3.23.3、3.23.4、3.23.5"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:2
msgid "CMake 3.24 Release Notes"
msgstr "CMake 3.24 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:8
msgid "Changes made since CMake 3.23 include the following."
msgstr "自 CMake 3.23 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:16
msgid ":manual:`cmake-presets(7)` files now support schema version ``5``."
msgstr ":manual:`cmake-presets(7)` 文件现在支持架构版本 ``5``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:18
msgid ""
":manual:`cmake-presets(7)` files now support a ``${pathListSep}`` macro, "
"which expands to ``:`` or ``;`` based on the platform."
msgstr ""
":manual:`cmake-presets(7)` 文件现在支持 ``${pathListSep}`` 宏，它根据平台扩展为 ``:`` 或 "
"``;``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:21
msgid ""
":manual:`cmake-presets(7)` files gained support for specifying a "
"``testOutputTruncation`` field in test presets, which specifies the "
"truncation mode once the maximum test output size has been reached."
msgstr ""
":manual:`cmake-presets(7)` 文件获得了对在测试预设中指定 ``testOutputTruncation`` "
"字段的支持，该字段指定一旦达到最大测试输出大小时的截断模式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:28
msgid ""
"The :generator:`Green Hills MULTI` generator now generates build rules to "
"re-run CMake if any CMake files are updated."
msgstr ""
":generator:`Green Hills MULTI` 生成器现在生成构建规则以在任何 CMake 文件更新时重新运行 CMake。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:31
msgid ""
"The :ref:`Visual Studio Generators` now support ``SYSTEM`` headers when "
"using VS 2019 Update 11 or later."
msgstr ""
":ref:`Visual Studio Generators` 现在在使用 VS 2019 Update 11 或更高版本时支持``SYSTEM``"
" 标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:37
msgid ""
":manual:`cmake(1)` gained the :option:`--fresh <cmake --fresh>` command-"
"line option to remove any existing ``CMakeCache.txt`` file and associated "
"``CMakeFiles/`` directory, when configuring a build tree, thus starting a "
"new configuration as if the build tree were freshly created."
msgstr ""
":manual:`cmake(1)` 获得了 :option:`--fresh <cmake --fresh>` 命令行选项来删除任何现有的 "
"``CMakeCache.txt`` 文件和关联的 ``CMakeFiles/`` "
"目录，在配置构建树时，因此开始新的配置，就好像构建树是新创建的一样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:42
msgid ""
":manual:`cmake(1)` gained the :option:`--compile-no-warning-as-error "
"<cmake --compile-no-warning-as-error>` command-line option which causes "
"the effects of the :prop_tgt:`COMPILE_WARNING_AS_ERROR` target property "
"and :variable:`CMAKE_COMPILE_WARNING_AS_ERROR` variable to be ignored."
msgstr ""
":manual:`cmake(1)` 获得了 :option:`--compile-no-warning-as-error <cmake "
"--compile-no-warning-as-error>` "
"命令行选项，它会导致以下效果 :prop_tgt:`COMPILE_WARNING_AS_ERROR` 目标属性和 "
":variable:`CMAKE_COMPILE_WARNING_AS_ERROR` 变量被忽略。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:48
msgid ""
"The :manual:`cmake(1)` :option:`--trace=json-v1 <cmake --trace>` trace "
"format gained fields ``global_frame`` and ``line_end``."
msgstr ""
":manual:`cmake(1)` :option:`--trace=json-v1 <cmake --trace>` 跟踪格式获得字段 "
"``global_frame`` 和 ``line_end``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:51
msgid ""
"The :manual:`cmake(1)` :option:`-E <cmake -E>` commands :option:`cat "
"<cmake-E cat>` and :option:`env <cmake-E env>` learned to respect a double"
" dash (:option:`-- <cmake-E_env -->`) argument that acts as a delimiter "
"indicating the end of options. Any following arguments are treated as "
"operands/positional arguments, even if they begin with a dash ``-`` "
"character."
msgstr ""
":manual:`cmake(1)` :option:`-E <cmake -E>` 命令 :option:`cat <cmake-E cat>` "
"和 :option:`env <cmake-E env>` 学会了遵守双破折号 (:option:`-- <cmake-E_env -->`) "
"参数，它充当指示选项结束的分隔符。任何后续参数都被视为操作数/位置参数，即使它们以破折号“-”字符开头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:57
msgid ""
"The :manual:`cmake(1)` :option:`-E tar <cmake-E tar>` command gained the "
":option:`--touch <cmake-E_tar --touch>` option to keep the current local "
"timestamp instead of extracting file timestamps from the archive."
msgstr ""
":manual:`cmake(1)` :option:`-E tar <cmake-E tar>` 命令获得了 :option:`-touch "
"<cmake-E_tar --touch>` 选项以保留当前本地时间戳而不是从存档中提取文件时间戳。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:65
msgid ""
"LLVM's `flang`_ Fortran compiler is now supported on some platforms, with "
"compiler id ``LLVMFlang``."
msgstr "LLVM 的 `flang`_ Fortran 编译器现在在某些平台上受支持，编译器 ID 为 ``LLVMFlang``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:70
msgid ""
"ADSP compiler support (SHARC and Blackfin) now covers both CCES and VDSP++"
" installations, with required configuration now done in the compiler "
"module itself rather than the ``Generic-ADSP`` platform module."
msgstr ""
"ADSP 编译器支持（SHARC 和 Blackfin）现在涵盖 CCES 和 VDSP++ "
"安装，所需的配置现在在编译器模块本身而不是“Generic-ADSP”平台模块中完成。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:77
msgid ""
"A dedicated ``ADSP`` platform has been added to replace the existing "
"``Generic-ADSP`` implementation. This features automatic detection of the "
"latest CCES/VDSP++ install and compiler selection (``cc21k`` vs. "
"``ccblkfn``) based off of the :variable:`CMAKE_SYSTEM_PROCESSOR` variable."
msgstr ""
"添加了一个专用的 ``ADSP`` 平台来替换现有的 ``Generic-ADSP`` 实现。此功能基于 "
"CMAKE_SYSTEM_PROCESSOR 变量自动检测最新的 CCES/VDSP++ 安装和编译器选择（``cc21k`` 与 "
"``ccblkfn``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:86
msgid ""
"The :command:`cmake_host_system_information` command, on Windows, gained a"
" ``QUERY WINDOWS_REGISTRY`` mode. See its :ref:`Query Windows registry` "
"section."
msgstr ""
":command:`cmake_host_system_information` 命令在 Windows 上获得了 ``QUERY "
"WINDOWS_REGISTRY`` 模式。请参阅其 :ref:`查询 Windows 注册表` 部分。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:90
msgid ""
"The :command:`cmake_language` command gained a new "
"``SET_DEPENDENCY_PROVIDER`` sub-command.  When a dependency provider is "
"set, calls to :command:`find_package` and "
":command:`FetchContent_MakeAvailable` can be redirected through a custom "
"command, which can choose to fulfill the request directly, modify how the "
"request is processed, or leave it to be fulfilled by the built-in "
"implementation.  See :ref:`dependency_providers`."
msgstr ""
":command:`cmake_language` 命令获得了一个新的 ``SET_DEPENDENCY_PROVIDER`` "
"子命令。设置依赖项提供程序时，可以通过自定义命令重定向对 :command:`find_package` "
"和 :command:`FetchContent_MakeAvailable` "
"的调用，该命令可以选择直接完成请求、修改请求的处理方式或将其留给由内置实现来实现。请参阅:ref:`dependency_providers`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:97
msgid ""
"The :command:`file(DOWNLOAD)` command gained options ``RANGE_START`` and "
"``RANGE_END`` to specify a range of bytes to download.  This can be useful"
" for downloading parts of big binary files."
msgstr ""
":command:`file(DOWNLOAD)` 命令获得了选项 ``RANGE_START`` 和 ``RANGE_END`` "
"来指定要下载的字节范围。这对于下载大二进制文件的部分很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:101
msgid ""
"The :command:`find_file`, :command:`find_path`, :command:`find_library`, "
":command:`find_program`, and :command:`find_package` commands gained the "
"``NO_CMAKE_INSTALL_PREFIX`` option to control searching "
":variable:`CMAKE_INSTALL_PREFIX`."
msgstr ""
":command:`find_file`、 :command:`find_path`、 :command:`find_library`、 :command:`find_program`"
" 和 :command:`find_package` 命令获得了 ``NO_CMAKE_INSTALL_PREFIX`` "
"选项来控制搜索：variable ：`CMAKE_INSTALL_PREFIX`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:106
msgid ""
"The :command:`find_file`, :command:`find_path`, :command:`find_library`, "
":command:`find_program`, and :command:`find_package` commands gained the "
"ability to specify which Windows Registry views must be queried."
msgstr ""
":command:`find_file`、 :command:`find_path`、 :command:`find_library`、 :command:`find_program`"
" 和 :command:`find_package` 命令获得了指定必须查询哪些 Windows 注册表视图的能力。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:110
msgid ""
"The :command:`find_package` command gained a ``GLOBAL`` option that allows"
" for the promotion of imported targets to global scope for the duration of"
" the :command:`find_package` call."
msgstr ""
":command:`find_package` 命令获得了一个 ``GLOBAL`` 选项，允许在 :command:`find_package` "
"调用期间将导入的目标提升到全局范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:114
msgid ""
"The :command:`if` command gained the capability to compare paths by using "
"the ``PATH_EQUAL`` operator.  See policy :policy:`CMP0139`."
msgstr ""
":command:`if` 命令通过使用 ``PATH_EQUAL`` 运算符获得了比较路径的能力。请参阅政策:policy:`CMP0139`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:120
msgid ""
"The :variable:`CMAKE_COLOR_DIAGNOSTICS` variable was added to control "
"color diagnostics generated by compilers.  This variable also controls "
"color build system messages with :ref:`Makefile Generators`, replacing "
":variable:`CMAKE_COLOR_MAKEFILE`."
msgstr ""
"添加了 :variable:`CMAKE_COLOR_DIAGNOSTICS` 变量来控制编译器生成的颜色诊断。此变量还使用 Makefile "
"Generators 控制颜色构建系统消息，替换 CMAKE_COLOR_MAKEFILE。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:125
msgid ""
"The :envvar:`CMAKE_COLOR_DIAGNOSTICS` environment variable was added to "
"set a default value for :variable:`CMAKE_COLOR_DIAGNOSTICS`."
msgstr ""
"添加了 :envvar:`CMAKE_COLOR_DIAGNOSTICS` 环境变量以设置 "
":variable:`CMAKE_COLOR_DIAGNOSTICS` 的默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:128
msgid ""
"The :variable:`CMAKE_COMPILE_WARNING_AS_ERROR` variable and corresponding "
":prop_tgt:`COMPILE_WARNING_AS_ERROR` target property were added to enable "
"compilation with a compiler-specific flag to treat warnings as errors, "
"such as ``-Werror``."
msgstr ""
"添加了 :variable:`CMAKE_COMPILE_WARNING_AS_ERROR` 变量和相应的 "
":prop_tgt:`COMPILE_WARNING_AS_ERROR` 目标属性，以便使用特定于编译器的标志进行编译，以将警告视为错误，例如 "
"``-Werror``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:133
msgid ""
"The :variable:`CMAKE_CUDA_ARCHITECTURES` variable and associated "
":prop_tgt:`CUDA_ARCHITECTURES` target property now support the special "
"``native`` value to compile for the architectures(s) of the host's GPU(s)."
msgstr ""
":variable:`CMAKE_CUDA_ARCHITECTURES` 变量和相关的 :prop_tgt:`CUDA_ARCHITECTURES`"
" 目标属性现在支持特殊的 ``native`` 值来编译主机 GPU 的架构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:138
msgid ""
"The :variable:`CMAKE_FIND_PACKAGE_TARGETS_GLOBAL` variable was added to "
"toggle behavior of the :command:`find_package` command's new ``GLOBAL`` "
"option."
msgstr ""
"添加了 :variable:`CMAKE_FIND_PACKAGE_TARGETS_GLOBAL` 变量以切换 "
":command:`find_package` 命令的新 ``GLOBAL`` 选项的行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:142
msgid ""
"The :variable:`CMAKE_FIND_USE_INSTALL_PREFIX` variable was added to toggle"
" behavior of the :command:`find_file`, :command:`find_library`, "
":command:`find_path`, :command:`find_package`, and :command:`find_program`"
" commands' new ``NO_CMAKE_INSTALL_PREFIX`` option."
msgstr ""
":variable:`CMAKE_FIND_USE_INSTALL_PREFIX` 变量被添加到 "
":command:`find_file`、 :command:`find_library`、 :command:`find_path`、 :command:`find_package`"
" 和 :command:`find_program` 的切换行为命令的新“NO_CMAKE_INSTALL_PREFIX”选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:147
msgid ""
"The :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` variable was added to "
"allow injecting custom code at the site of the first :command:`project` "
"call, after the host and target platform details have been determined."
msgstr ""
"添加了 :variable:`CMAKE_PROJECT_TOP_LEVEL_INCLUDES` "
"变量，以便在确定主机和目标平台详细信息后，允许在第一个 :command:`project` 调用的站点注入自定义代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:151
msgid ""
"The :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` variable was added"
" to tell the :command:`try_compile` command not to pass any platform "
"variables to the test project."
msgstr ""
"添加了 :variable:`CMAKE_TRY_COMPILE_NO_PLATFORM_VARIABLES` 变量，告诉 "
":command:`try_compile` 命令不要将任何平台变量传递给测试项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:155
msgid ""
"The :variable:`CMAKE_VERIFY_INTERFACE_HEADER_SETS` variable and "
"corresponding :prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` target property "
"were added to enable build rules that verify all headers in header sets "
"can be used on their own."
msgstr ""
"添加了 :variable:`CMAKE_VERIFY_INTERFACE_HEADER_SETS` 变量和相应的 "
":prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` 目标属性以启用验证标头集中所有标头的构建规则是否可以单独使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:160
msgid ""
"The :variable:`CMAKE_VS_NO_COMPILE_BATCHING` variable and corresponding "
":prop_tgt:`VS_NO_COMPILE_BATCHING` target property were added to tell "
":ref:`Visual Studio Generators` whether to disable compiler parallelism "
"and call the compiler with one source file at a time."
msgstr ""
"添加了 CMAKE_VS_NO_COMPILE_BATCHING 变量和相应的 VS_NO_COMPILE_BATCHING 目标属性，以告知 "
"Visual Studio Generators 是否禁用编译器并行性并一次使用一个源文件调用编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:165
msgid ""
"The :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY` variable and "
":prop_tgt:`WATCOM_RUNTIME_LIBRARY` target property were introduced to "
"select the runtime library used by compilers targeting the Watcom ABI. See"
" policy :policy:`CMP0136`."
msgstr ""
"引入了 :variable:`CMAKE_WATCOM_RUNTIME_LIBRARY` 变量和 "
":prop_tgt:`WATCOM_RUNTIME_LIBRARY` 目标属性来选择针对 Watcom ABI "
"的编译器使用的运行时库。请参阅政策:policy:`CMP0136`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:170
msgid ""
"The :variable:`CMAKE_XCODE_XCCONFIG` variable and corresponding "
":prop_tgt:`XCODE_XCCONFIG` target property were added to tell the "
":generator:`Xcode` generator to handle ``xcconfig`` files."
msgstr ""
"添加了 :variable:`CMAKE_XCODE_XCCONFIG` 变量和相应的 :prop_tgt:`XCODE_XCCONFIG` "
"目标属性来告诉 :generator:`Xcode` 生成器处理 ``xcconfig`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:177
msgid ""
"The :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` and "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` target properties were"
" added to express usage requirements affecting a consumer's direct link "
"dependencies."
msgstr ""
"添加了 :prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT` 和 "
":prop_tgt:`INTERFACE_LINK_LIBRARIES_DIRECT_EXCLUDE` "
"目标属性以表达影响消费者直接链接依赖项的使用要求。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:182
msgid ""
"The :prop_tgt:`INTERFACE_HEADER_SETS_TO_VERIFY` target property was added "
"to specify which header sets should be verified by "
":prop_tgt:`VERIFY_INTERFACE_HEADER_SETS`."
msgstr ""
"添加了 :prop_tgt:`INTERFACE_HEADER_SETS_TO_VERIFY` 目标属性以指定哪些标头集应由 "
":prop_tgt:`VERIFY_INTERFACE_HEADER_SETS` 验证。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:186
msgid ""
"The :prop_tgt:`LINK_LIBRARIES` target property now supports the "
":genex:`$<LINK_ONLY:...>` generator expression. See policy "
":policy:`CMP0131`."
msgstr ""
":prop_tgt:`LINK_LIBRARIES` 目标属性现在支持 :genex:`$<LINK_ONLY:...>` "
"生成器表达式。请参阅政策:policy:`CMP0131`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:190
msgid ""
"The :prop_tgt:`VS_DOTNET_STARTUP_OBJECT` target property was added to tell"
" :ref:`Visual Studio Generators` which startup class shall be used when "
"the program or project is executed. This is necessary when more than one "
"``static void Main(string[])`` function signature is available in a "
"managed .NET project."
msgstr ""
"添加了 :prop_tgt:`VS_DOTNET_STARTUP_OBJECT` 目标属性以告知 :ref:`Visual Studio "
"Generators` 在执行程序或项目时应使用哪个启动类。当托管 .NET 项目中有多个 ``static void "
"Main(string[])`` 函数签名时，这是必需的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:199
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"command gained a new ``DOWNLOAD_EXTRACT_TIMESTAMP`` option for controlling"
" whether the timestamps of extracted contents are set to match those in "
"the archive when the ``URL`` download method is used. Policy "
":policy:`CMP0135` was added to enable the option by default."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 命令获得了一个新的 "
"``DOWNLOAD_EXTRACT_TIMESTAMP`` 选项，用于控制当 ``URL`` 下载方法为用过的。添加策略:policy:`CMP0135`"
" 以默认启用该选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:205
msgid ""
"The :module:`FetchContent` module and the :command:`find_package` command "
"now support integration capabilities:"
msgstr ":module:`FetchContent` 模块和 :command:`find_package` 命令现在支持集成功能："

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:208
msgid ""
":command:`FetchContent_MakeAvailable` can now try to satisfy a dependency "
"by calling :command:`find_package` first.  A new "
":variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` variable controls whether "
"this is done by default for all dependencies, is opt-in per dependency, or"
" is disabled entirely."
msgstr ""
":command:`FetchContent_MakeAvailable` 现在可以尝试通过先调用 :command:`find_package` "
"来满足依赖关系。一个新的 :variable:`FETCHCONTENT_TRY_FIND_PACKAGE_MODE` "
"变量控制是否默认为所有依赖项完成此操作，是按依赖项选择加入，还是完全禁用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:214
msgid ""
":command:`find_package` can be re-routed to call "
":command:`FetchContent_MakeAvailable` instead.  A new read-only "
":variable:`CMAKE_FIND_PACKAGE_REDIRECTS_DIR` variable points to a "
"directory where config package files can be located to facilitate these "
"re-routed calls."
msgstr ""
":command:`find_package` 可以重新路由以调用 "
":command:`FetchContent_MakeAvailable`。一个新的只读 "
":variable:`CMAKE_FIND_PACKAGE_REDIRECTS_DIR` 变量指向配置包文件所在的目录，以促进这些重新路由的调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:220
msgid "The :module:`FindJNI` module now provides imported targets."
msgstr ":module:`FindJNI` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:222
msgid ""
"The :module:`FindMatlab` module :command:`matlab_add_mex` function gained "
"a ``NO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES`` option to disable automatic "
"linking of MATLAB libraries."
msgstr ""
"FindMatlab 模块 matlab_add_mex 函数获得了一个 NO_IMPLICIT_LINK_TO_MATLAB_LIBRARIES "
"选项来禁用 MATLAB 库的自动链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:226
msgid ""
"The :module:`FindVulkan` module now supports components to select which "
"VulkanSDK tool and libraries to find in addition to the Vulkan SDK headers"
" and library."
msgstr "FindVulkan 模块现在支持组件选择要查找的 VulkanSDK 工具和库，以及 Vulkan SDK 标头和库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:230
msgid ""
"The :module:`FindZLIB` gained a new ``ZLIB_USE_STATIC_LIBS`` variable to "
"search only for static libraries."
msgstr ":module:`FindZLIB` 获得了一个新的 ``ZLIB_USE_STATIC_LIBS`` 变量来仅搜索静态库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:236
msgid ""
"The :genex:`LINK_LIBRARY` generator expression was added to manage how "
"libraries are specified during the link step. The "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` and "
":variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` variables are used to "
"define features usable by the :genex:`LINK_LIBRARY` generator expression. "
"Moreover, the :prop_tgt:`LINK_LIBRARY_OVERRIDE` and "
":prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` target properties are "
"available to resolve incompatible features."
msgstr ""
"添加了 :genex:`LINK_LIBRARY` 生成器表达式来管理在链接步骤中如何指定库。 "
":variable:`CMAKE_<LANG>_LINK_LIBRARY_USING_<FEATURE>` "
"和 :variable:`CMAKE_LINK_LIBRARY_USING_<FEATURE>` 变量用于定义 "
":genex:`LINK_LIBRARY` 生成器表达式可用的功能。此外， :prop_tgt:`LINK_LIBRARY_OVERRIDE` "
"和 :prop_tgt:`LINK_LIBRARY_OVERRIDE_<LIBRARY>` 目标属性可用于解决不兼容的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:245
msgid ""
"The :genex:`LINK_LIBRARY` generator expression can link frameworks in "
"various ways when targeting ``Apple`` platforms. The following features "
"were added:"
msgstr ":genex:`LINK_LIBRARY` 生成器表达式可以在针对 ``Apple`` 平台时以各种方式链接框架。添加了以下功能："

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:249
msgid "``FRAMEWORK``"
msgstr "``框架``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:250
msgid "``NEEDED_FRAMEWORK``"
msgstr "``NEEDED_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:251
msgid "``REEXPORT_FRAMEWORK``"
msgstr "``REEXPORT_FRAMEWORK``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:252
msgid "``WEAK_FRAMEWORK``"
msgstr "``弱框架``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:254
msgid ""
"The :genex:`LINK_LIBRARY` generator expression can link libraries in "
"various ways when targeting ``Apple`` platforms. The following features "
"were added:"
msgstr ":genex:`LINK_LIBRARY` 生成器表达式可以在针对 ``Apple`` 平台时以各种方式链接库。添加了以下功能："

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:258
msgid "``NEEDED_LIBRARY``"
msgstr "``NEEDED_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:259
msgid "``REEXPORT_LIBRARY``"
msgstr "``REEXPORT_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:260
msgid "``WEAK_LIBRARY``"
msgstr "``WEAK_LIBRARY``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:262
msgid ""
"The :genex:`LINK_LIBRARY` generator expression gained the feature "
"``WHOLE_ARCHIVE`` to force load of all members in a static library. This "
"feature is supported on the following target platforms:"
msgstr ""
":genex:`LINK_LIBRARY` 生成器表达式获得了 ``WHOLE_ARCHIVE`` "
"特性，以强制加载静态库中的所有成员。以下目标平台支持此功能："

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:266
msgid "all ``Apple`` variants"
msgstr "所有 ``Apple`` 变体"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:267
msgid "``Linux``"
msgstr "``Linux``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:268
msgid "all ``BSD`` variants"
msgstr "所有 ``BSD`` 变体"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:269
msgid "``SunOS``"
msgstr "``SunOS``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:270
msgid "``Windows``"
msgstr "``窗户``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:271
msgid "``CYGWIN``"
msgstr "``CYGWIN``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:272
msgid "``MSYS``"
msgstr "``MSYS``"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:274
msgid ""
"The :genex:`LINK_GROUP` generator expression was added to manage the "
"grouping of libraries during the link step.  The "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` and "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` variables are used to define "
"features usable with the :genex:`LINK_GROUP` generator expression. This "
"release defines the ``RESCAN`` feature, which can be used to handle "
"circular references among static libraries when using toolchains for "
"Linux, BSD, SunOS and GNU toolchains for Windows."
msgstr ""
"添加了 :genex:`LINK_GROUP` 生成器表达式来管理链接步骤中的库分组。 "
":variable:`CMAKE_<LANG>_LINK_GROUP_USING_<FEATURE>` 和 "
":variable:`CMAKE_LINK_GROUP_USING_<FEATURE>` 变量用于定义可与 :genex:`LINK_GROUP` "
"生成器表达式一起使用的功能。此版本定义了 ``RESCAN`` 功能，在使用适用于 Linux、BSD、SunOS 的工具链和适用于 Windows"
" 的 GNU 工具链时，该功能可用于处理静态库之间的循环引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:283
msgid "The :genex:`PATH` generator expression was added to manage paths."
msgstr "添加了 :genex:`PATH` 生成器表达式来管理路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:285
msgid ""
"The :genex:`PATH_EQUAL` generator expression was added to manage path "
"comparisons."
msgstr "添加了 :genex:`PATH_EQUAL` 生成器表达式来管理路径比较。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:288
msgid ""
"The :genex:`TARGET_BUNDLE_DIR_NAME` generator expression was added to "
"evaluate to the name of the bundle directory for a given bundle target."
msgstr "添加了 :genex:`TARGET_BUNDLE_DIR_NAME` 生成器表达式以计算给定包目标的包目录的名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:295
msgid ""
":manual:`ctest(1)` gained a :option:`--test-output-truncation <ctest "
"--test-output-truncation>` option (and corresponding "
":variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` variable) to specify the "
"truncation mode once the maximum test output size has been reached. "
"Possible values are ``tail`` (default), ``middle`` or ``head``."
msgstr ""
":manual:`ctest(1)` 获得了一个 :option:`--test-output-truncation <ctest --test-"
"output-truncation>` 选项（和相应的 "
":variable:`CTEST_CUSTOM_TEST_OUTPUT_TRUNCATION` "
"变量）来指定截断模式一旦达到最大测试输出大小。可能的值是“tail”（默认值）、“middle”或“head”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:304
msgid ""
"The :cpack_gen:`CPack WIX Generator` gained a new variable, "
":variable:`CPACK_WIX_ARCHITECTURE`, to specify the installer architecture "
"in order to support computers running Windows for ARM."
msgstr ""
":cpack_gen:`CPack WIX Generator` 获得了一个新变量 "
":variable:`CPACK_WIX_ARCHITECTURE`，用于指定安装程序架构，以支持运行 Windows for ARM 的计算机。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:308
msgid ""
"CPack now supports the :variable:`CPACK_THREADS` option for ``zstd`` "
"compression when compiled with libarchive 3.6 or higher.  It is supported "
"by official CMake binaries available on `cmake.org`_."
msgstr ""
"当使用 libarchive 3.6 或更高版本编译时，CPack 现在支持 zstd 压缩的 CPACK_THREADS 选项。它由 "
"cmake.org 上提供的官方 CMake 二进制文件支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:315
msgid ""
"The :module:`CPack` module no longer enables the SLA by default in the "
":cpack_gen:`CPack DragNDrop Generator`.  See policy :policy:`CMP0133` and "
"the :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` variable."
msgstr ""
"CPack 模块不再在 CPack DragNDrop Generator 中默认启用 SLA。请参阅政策:policy:`CMP0133` "
"和 :variable:`CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:319
msgid ""
"The deprecated :cpack_gen:`CPack PackageMaker Generator` has been removed."
msgstr "已弃用的 :cpack_gen:`CPack PackageMaker Generator` 已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:321
msgid ""
"The :module:`FindGLUT` module no longer provides the undocumented "
"``GLUT_LIBRARY`` and ``GLUT_INCLUDE_PATH`` result variables."
msgstr ""
":module:`FindGLUT` 模块不再提供未记录的 ``GLUT_LIBRARY`` 和 ``GLUT_INCLUDE_PATH`` "
"结果变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:324
msgid ""
"The :module:`FindVulkan` module no longer silently ignores unknown "
"components requested by a ``find_package(Vulkan REQUIRED ...)`` call. With"
" the addition of support for components, requests for unknown components "
"now produce an error."
msgstr ""
":module:`FindVulkan` 模块不再默默地忽略由 ``find_package(Vulkan REQUIRED ...)`` "
"调用请求的未知组件。通过添加对组件的支持，对未知组件的请求现在会产生错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:332
msgid ""
"CMake no longer sets environment variables like :envvar:`CC`, "
":envvar:`CXX`, etc. when enabling the corresponding language during the "
"first CMake run in a build directory.  See policy :policy:`CMP0132`."
msgstr ""
"在构建目录中首次运行 CMake 期间启用相应语言时，CMake 不再设置环境变量，如:envvar:`CC`、 :envvar:`CXX` "
"等。请参阅政策:policy:`CMP0132`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:336
msgid ""
"The :module:`CheckIPOSupported` module :command:`check_ipo_supported` "
"command now uses the caller's :variable:`CMAKE_<LANG>_FLAGS` and "
":variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` values. See policy "
":policy:`CMP0138`."
msgstr ""
":module:`CheckIPOsupported` 模块 :command:`check_ipo_supported` 命令现在使用调用者的 "
":variable:`CMAKE_<LANG>_FLAGS` 和 :variable:`CMAKE_<LANG>_FLAGS_<CONFIG>` "
"值。请参阅政策:policy:`CMP0138`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:341
msgid ""
"The :generator:`MSYS Makefiles` and :generator:`MinGW Makefiles` "
"generators, when a compiler is not explicitly specified, now select the "
"first compiler (of any name) found in directories listed by the ``PATH`` "
"environment variable."
msgstr ""
":generator:`MSYS Makefiles` 和 :generator:`MinGW Makefiles` "
"生成器，当未明确指定编译器时，现在选择在 ``PATH`` 环境变量列出的目录中找到的第一个编译器（任何名称）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:346
msgid ""
"The :command:`try_compile` command :ref:`whole-project <Try Compiling "
"Whole Projects>` signature now propagates platform variables.  See policy "
":policy:`CMP0137`."
msgstr ""
":command:`try_compile` 命令 :ref:`whole-project <Try Compiling Whole "
"Projects>` 签名现在传播平台变量。请参阅政策:policy:`CMP0137`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:350
msgid ""
"The :command:`while` command now diagnoses errors during condition "
"evaluation.  See policy :policy:`CMP0130`."
msgstr ":command:`while` 命令现在可以在条件评估期间诊断错误。请参阅政策:policy:`CMP0130`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:353
msgid ""
"The precompiled macOS binaries provided on `cmake.org`_ no longer attach a"
" SLA to the ``.dmg`` packages.  This was removed because macOS 12 "
"deprecated the tools used to attach ``.dmg`` resources."
msgstr ""
"`cmake.org`_ 上提供的预编译 macOS 二进制文件不再将 SLA 附加到 `.dmg`` 包。这已被删除，因为 macOS 12 "
"弃用了用于附加 .dmg 资源的工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:357
msgid ""
"A precompiled Windows ``arm64`` binary is now provided on `cmake.org`_."
msgstr "预编译的 Windows ``arm64`` 二进制文件现在在 `cmake.org`_ 上提供。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:364
msgid "Changes made since CMake 3.24.0 include the following."
msgstr "自 CMake 3.24.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:367
msgid "3.24.1, 3.24.2"
msgstr "3.24.1, 3.24.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:374
msgid "3.24.3"
msgstr "3.24.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:376
msgid ""
"The ``LLVMFlang`` Fortran compiler support added in 3.24.0 has been "
"extended:"
msgstr "3.24.0 中添加的 ``LLVMFlang`` Fortran 编译器支持已得到扩展："

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:378
msgid "It now supports mixed-language linking between Fortran and C or CXX."
msgstr "它现在支持 Fortran 和 C 或 CXX 之间的混合语言链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:379
msgid ""
"It now supports the GNU ABI (MinGW) on Windows, but not yet the MSVC ABI."
msgstr "它现在支持 Windows 上的 GNU ABI (MinGW)，但还不支持 MSVC ABI。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:381
msgid ""
"Some implementation updates were made to support ecosystem changes and/or "
"fix regressions."
msgstr "进行了一些实施更新以支持生态系统更改和/或修复回归。"

#: ../../cmake-prefix/src/cmake/Help/release/3.24.rst:385
msgid "3.24.4"
msgstr "3.24.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:2
msgid "CMake 3.25 Release Notes"
msgstr "CMake 3.25 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:8
msgid "Changes made since CMake 3.24 include the following."
msgstr "自 CMake 3.24 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:16
msgid ""
"The :manual:`cmake-presets(7)` schema version has been bumped to ``6``."
msgstr ":manual:`cmake-presets(7)` 架构版本已提升至 ``6``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:18
msgid ""
"The :manual:`cmake-presets(7)` format now supports a ``packagePresets`` "
"field to specify presets for :option:`cpack --preset`."
msgstr ""
":manual:`cmake-presets(7)` 格式现在支持 ``packagePresets`` 字段来为 :option:`cpack "
"--preset` 指定预设。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:21
msgid ""
"The :manual:`cmake-presets(7)` format now supports a ``workflowPresets`` "
"field to specify presets for :option:`cmake --workflow`."
msgstr ""
":manual:`cmake-presets(7)` 格式现在支持 ``workflowPresets`` 字段来指定 :option:`cmake"
" --workflow` 的预设。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:24
msgid ""
"The :manual:`cmake-presets(7)` format now supports an ``outputJUnitFile`` "
"field to specify JUnit output in test presets."
msgstr ""
":manual:`cmake-presets(7)` 格式现在支持 ``outputJUnitFile`` 字段来指定测试预设中的 JUnit "
"输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:30
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of C++26, and defines a ``cxx_std_26`` meta-feature. C++26 "
"compiler modes may also be specified via the :prop_tgt:`CXX_STANDARD`, "
":prop_tgt:`CUDA_STANDARD`, :prop_tgt:`HIP_STANDARD`, or "
":prop_tgt:`OBJCXX_STANDARD` target properties."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 "
"C++26，并定义了``cxx_std_26`` 元特征。 C++26 编译器模式也可以通过 "
"CXX_STANDARD、CUDA_STANDARD、HIP_STANDARD 或 OBJCXX_STANDARD 目标属性指定。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:36
msgid ""
"``CUDA`` language support now includes device link-time optimization when "
"using ``nvcc``.  The :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` "
"variable and the associated :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` "
"target property will activate device LTO."
msgstr ""
"``CUDA`` 语言支持现在包括使用 ``nvcc`` 时的设备链接时间优化。 "
"CMAKE_INTERPROCEDURAL_OPTIMIZATION 变量和关联的 INTERPROCEDURAL_OPTIMIZATION "
"目标属性将激活设备 LTO。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:44
msgid ""
"A :option:`cmake --workflow --preset <cmake--workflow --preset>` mode was "
"added to drive sequences of configure, build, test, and package operations"
" through a single command."
msgstr ""
"A :option:`cmake --workflow --preset <cmake--workflow --preset>` "
"模式被添加到通过单个命令驱动配置、构建、测试和打包操作的序列。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:48
msgid ""
"The :option:`cmake -E capabilities <cmake-E capabilities>` command gained "
"a new ``tls`` field that tells whether or not TLS is enabled."
msgstr ""
":option:`cmake -E capabilities <cmake-E capabilities>` 命令获得了一个新的 ``tls`` "
"字段，指示是否启用了 TLS。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:51
msgid ""
"The :option:`cmake -E env <cmake-E env>` command-line tool gained a "
"``--modify`` flag to support :prop_test:`ENVIRONMENT_MODIFICATION` "
"operations."
msgstr ""
":option:`cmake -E env <cmake-E env>` 命令行工具获得了一个 ``--modify`` 标志以支持 "
":prop_test:`ENVIRONMENT_MODIFICATION` 操作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:55
msgid ""
"The :option:`cmake --debug-trycompile` option now prints log messages "
"reporting the directory in which each try-compile check is done."
msgstr ":option:`cmake --debug-trycompile` 选项现在打印日志消息，报告每个尝试编译检查完成的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:61
msgid ""
"Support for the `Tasking compiler toolsets`_ (SmartCode, TriCore, "
"Standalone: ARM, MCS, 8051) was added with compiler id ``Tasking``. See "
"the :variable:`CMAKE_TASKING_TOOLSET` variable."
msgstr ""
"添加了对 Tasking 编译器工具集（SmartCode、TriCore、Standalone：ARM、MCS、8051）的支持，编译器 ID 为"
" Tasking。请参阅 :variable:`CMAKE_TASKING_TOOLSET` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:70
msgid ""
"The :command:`add_subdirectory` command gained a ``SYSTEM`` option to "
"enable the :prop_dir:`SYSTEM` directory property in the subdirectory."
msgstr ""
":command:`add_subdirectory` 命令获得了一个 ``SYSTEM`` 选项以在子目录中启用 "
":prop_dir:`SYSTEM` 目录属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:73
msgid ""
"The :command:`block` and :command:`endblock` commands were added to manage"
" specific scopes (policy or variable) for a contained block of commands."
msgstr "添加了 :command:`block` 和 :command:`endblock` 命令来管理包含的命令块的特定范围（策略或变量）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:76
msgid ""
"The :command:`cmake_language` command gained a new "
"``GET_MESSAGE_LOG_LEVEL`` sub-command.  It can be used to query the "
"current message logging level."
msgstr ""
":command:`cmake_language` 命令获得了一个新的 ``GET_MESSAGE_LOG_LEVEL`` "
"子命令。它可用于查询当前的消息日志记录级别。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:80
msgid ""
"The :command:`find_file`, :command:`find_path`, :command:`find_library`, "
"and :command:`find_program` commands gained a ``VALIDATOR`` option to "
"specify a function to be called for each candidate item to validate it."
msgstr ""
":command:`find_file`、 :command:`find_path`、 :command:`find_library` 和 "
":command:`find_program` 命令获得了一个 ``VALIDATOR`` 选项来指定为每个候选项目调用的函数验证它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:84
msgid ""
"The :command:`find_package` command now considers paths of the form "
"``<prefix>/<name>*/(cmake|CMake)/<name>*/`` when searching for package "
"configuration files."
msgstr ""
":command:`find_package` "
"命令现在在搜索包配置文件时考虑格式为``<prefix>/<name>*/(cmake|CMake)/<name>*/`` 的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:88
msgid ""
"The :command:`return` command gained a ``PROPAGATE`` option to propagate "
"variables to the scope to which control returns. See policy "
":policy:`CMP0140`."
msgstr ""
":command:`return` 命令获得了一个 ``PROPAGATE`` "
"选项，可以将变量传播到控制返回的范围。请参阅政策:policy:`CMP0140`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:92
msgid ""
"The :command:`try_compile` and :command:`try_run` commands gained new "
"signatures that more consistently use keyword dispatch and do not require "
"a binary directory to be specified.  Additionally, these signatures use a "
"unique directory for each invocation, which allows multiple outputs to be "
"preserved when using :option:`cmake --debug-trycompile`."
msgstr ""
":command:`try_compile` 和 :command:`try_run` "
"命令获得了新的签名，这些签名更一致地使用关键字分派并且不需要指定二进制目录。此外，这些签名为每次调用使用一个唯一的目录，这允许在使用 cmake "
"--debug-trycompile 时保留多个输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:98
msgid ""
"The :command:`try_compile` and :command:`try_run` commands gained the "
"option ``NO_CACHE`` to store results in normal variables."
msgstr ""
":command:`try_compile` 和 :command:`try_run` 命令获得了选项 ``NO_CACHE`` "
"以将结果存储在普通变量中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:101
msgid ""
"The :command:`try_run` command gained ``RUN_OUTPUT_STDOUT_VARIABLE`` and "
"``RUN_OUTPUT_STDERR_VARIABLE`` options to capture stdout and stderr "
"separately from the output of the compiled program."
msgstr ""
":command:`try_run` 命令获得了``RUN_OUTPUT_STDOUT_VARIABLE`` "
"和``RUN_OUTPUT_STDERR_VARIABLE`` 选项以从编译程序的输出中分别捕获标准输出和标准错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:108
msgid ""
"The :variable:`BSD` and :variable:`CMAKE_HOST_BSD` variables are now set "
"to a string value when the target or host system is BSD, respectively."
msgstr ""
"当目标或主机系统是 BSD 时， :variable:`BSD` 和 :variable:`CMAKE_HOST_BSD` 变量现在分别设置为字符串值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:111
msgid ""
"The :variable:`LINUX` and :variable:`CMAKE_HOST_LINUX` variables are now "
"set to true when the target or host system is Linux, respectively."
msgstr "当目标或主机系统是 Linux 时，LINUX 和 CMAKE_HOST_LINUX 变量现在分别设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:114
msgid ""
"The :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` variable and "
":prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` target property were introduced "
"to select the debug information format for compilers targeting the MSVC "
"ABI. See policy :policy:`CMP0141`."
msgstr ""
"引入了 :variable:`CMAKE_MSVC_DEBUG_INFORMATION_FORMAT` 变量和 "
":prop_tgt:`MSVC_DEBUG_INFORMATION_FORMAT` 目标属性来为针对 MSVC ABI "
"的编译器选择调试信息格式。请参阅政策:policy:`CMP0141`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:119
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` variable and "
"corresponding :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` target "
"property were added to tell the :generator:`Xcode` generator what to put "
"in the scheme's ``Metal: API Validation`` setting."
msgstr ""
":variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` "
"变量和对应的 :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_API_VALIDATION` "
"目标属性被添加来告诉 :generator:`Xcode` 生成器在方案的``Metal: API Validation`` 设置中放入什么。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:124
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` variable "
"and corresponding :prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` "
"target property were added to tell the :generator:`Xcode` generator what "
"to put in the scheme's ``Metal: Shader Validation`` setting."
msgstr ""
"添加了 :variable:`CMAKE_XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` 变量和相应的 "
":prop_tgt:`XCODE_SCHEME_ENABLE_GPU_SHADER_VALIDATION` 目标属性来告诉 "
":generator:`Xcode` 生成器将什么放入方案的 ``Metal: Shader Validation`` 设置中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:129
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_LAUNCH_MODE` variable and corresponding "
":prop_tgt:`XCODE_SCHEME_LAUNCH_MODE` target property were added to tell "
"the :generator:`Xcode` generator what to put in the scheme's \"Launch\" "
"mode setting."
msgstr ""
"添加了 :variable:`XCODE_SCHEME_LAUNCH_MODE` 变量和相应的 "
":prop_tgt:`XCODE_SCHEME_LAUNCH_MODE` 目标属性来告诉 :generator:`Xcode` "
"生成器将什么放入方案的“启动”模式设置中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:134
msgid ""
"The :variable:`CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION` variable and "
"corresponding :prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION` target "
"property were added to tell the :generator:`Xcode` generator what "
"configuration to put in the scheme's Launch action."
msgstr ""
":variable:`CMAKE_XCODE_SCHEME_LAUNCH_CONFIGURATION` "
"变量和相应的 :prop_tgt:`XCODE_SCHEME_LAUNCH_CONFIGURATION` "
"目标属性被添加来告诉 :generator:`Xcode` 生成器在方案的启动操作中放置什么配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:142
msgid ""
"The :prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property now supports "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` 目标属性现在支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:145
msgid ""
"The :prop_tgt:`EXPORT_NO_SYSTEM` target property was added to specify that"
" :command:`install(EXPORT)` and :command:`export` commands will generate "
"na imported target with :prop_tgt:`SYSTEM` property ``OFF``."
msgstr ""
"添加了 :prop_tgt:`EXPORT_NO_SYSTEM` 目标属性以指定:command:`install(EXPORT)` 和 "
":command:`export` 命令将生成具有 :prop_tgt:`SYSTEM` 属性 ``OFF`` 的导入目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:150
msgid ""
"The :prop_tgt:`SYSTEM` target property was added to specify whether a "
"target should be treated as a system library (i.e. its include directories"
" are automatically ``SYSTEM`` when compiling consumers).  If not set, the "
"default is the previous behavior: on for imported targets and off for "
"other targets."
msgstr ""
"添加了 :prop_tgt:`SYSTEM` 目标属性以指定目标是否应被视为系统库（即，其包含目录在编译消费者时自动为 "
"``SYSTEM``）。如果未设置，则默认为以前的行为：对导入的目标打开，对其他目标关闭。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:156
msgid ""
"The :prop_dir:`SYSTEM` directory property was added to initialize the "
":prop_tgt:`SYSTEM` target property for targets created in that directory."
msgstr "添加了 :prop_dir:`SYSTEM` 目录属性以初始化在该目录中创建的目标的 :prop_tgt:`SYSTEM` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:162
msgid ""
"The :module:`FetchContent` module's :command:`FetchContent_Declare` "
"command gained a ``SYSTEM`` option which sets the :prop_dir:`SYSTEM` "
"directory property on subdirectories created by "
":command:`FetchContent_MakeAvailable`."
msgstr ""
":module:`FetchContent` 模块的 :command:`FetchContent_Declare` 命令获得了一个 "
"``SYSTEM`` 选项，它在 :command:`FetchContent_MakeAvailable` 创建的子目录上设置 "
":prop_dir:`SYSTEM` 目录属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:167
msgid ""
"The :module:`FindCUDAToolkit` module now provides a target for :ref:`nvtx3"
" <cuda_toolkit_nvtx3>` for CUDA 10.0+, which supersedes :ref:`nvToolsExt "
"<cuda_toolkit_nvToolsExt>`. A deprecation warning is emitted when using "
"``nvToolsExt`` if the project requires CMake 3.25 and CUDA 10.0+ is used."
msgstr ""
":module:`FindCUDAToolkit` 模块现在为 CUDA 10.0+ 的 :ref:`nvtx3 "
"<cuda_toolkit_nvtx3>` 提供了一个目标，它取代了 :ref:`nvToolsExt "
"<cuda_toolkit_nvToolsExt>`。如果项目需要 CMake 3.25 并使用 CUDA 10.0+，则在使用 "
"``nvToolsExt`` 时会发出弃用警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:173
msgid ""
"The :module:`FindDoxygen` module's version handling has been improved:"
msgstr ":module:`FindDoxygen` 模块的版本处理得到改进："

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:175
msgid ""
"Multiple candidate installations will now be considered, if needed, to "
"satisfy version constraints.  Previously, only the first one encountered "
"would be considered."
msgstr "如果需要，现在将考虑多个候选安装以满足版本限制。以前，只会考虑遇到的第一个。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:179
msgid "Version ranges are supported."
msgstr "支持版本范围。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:181
msgid ""
"Variations in the version format reported by Doxygen are now tolerated "
"(e.g. a trailing git commit hash)."
msgstr "现在可以容忍 Doxygen 报告的版本格式的变化（例如，尾随的 git 提交哈希）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:184
msgid "The :module:`FindOpenAL` module now provides an imported target."
msgstr ":module:`FindOpenAL` 模块现在提供了一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:186
msgid ""
"The :module:`FindOpenSP` module was added to find the OpenSP library."
msgstr "添加了 :module:`FindOpenSP` 模块以查找 OpenSP 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:188
msgid "The :module:`FindVulkan` module gained support for new components:"
msgstr ":module:`FindVulkan` 模块获得了对新组件的支持："

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:191
msgid "``dxc``"
msgstr "``dxc``"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:191
msgid "DirectX Shader Compiler."
msgstr "DirectX 着色器编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:194
msgid "``volk``"
msgstr "``大众``"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:194
msgid "Volk open-source vulkan meta-loader."
msgstr "Volk 开源 vulkan 元加载器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:199
msgid ""
"The :cpack_gen:`CPack Archive Generator` gained a new "
":variable:`CPACK_ARCHIVE_FILE_EXTENSION` variable to control the package "
"file name extension."
msgstr ""
":cpack_gen:`CPack Archive Generator` "
"获得了一个新的 :variable:`CPACK_ARCHIVE_FILE_EXTENSION` 变量来控制包文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:203
msgid ""
"The :cpack_gen:`CPack NSIS Generator` gained two new variables "
":variable:`CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS` and "
":variable:`CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS` to provide arguments to "
"the nsis executable invocation."
msgstr ""
"CPack NSIS Generator 获得了两个新变量 CPACK_NSIS_EXECUTABLE_PRE_ARGUMENTS 和 "
"CPACK_NSIS_EXECUTABLE_POST_ARGUMENTS 为 nsis 可执行文件调用提供参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:208
msgid ""
"The :module:`CPack` module gained the "
":variable:`CPACK_READELF_EXECUTABLE`, "
":variable:`CPACK_OBJCOPY_EXECUTABLE`, and "
":variable:`CPACK_OBJDUMP_EXECUTABLE` variables to control the locations of"
" binutils used by :manual:`cpack(1)`."
msgstr ""
"CPack 模块获得了 CPACK_READELF_EXECUTABLE、CPACK_OBJCOPY_EXECUTABLE 和 "
"CPACK_OBJDUMP_EXECUTABLE 变量来控制 cpack(1) 使用的 binutils 的位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:216
msgid ""
"The :prop_tgt:`IMPORTED_NO_SYSTEM` target property has been deprecated in "
"favor of :prop_tgt:`SYSTEM` and :prop_tgt:`EXPORT_NO_SYSTEM`."
msgstr ""
":prop_tgt:`IMPORTED_NO_SYSTEM` 目标属性已被弃用，取而代之的是 :prop_tgt:`SYSTEM` 和 "
":prop_tgt:`EXPORT_NO_SYSTEM`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:219
msgid "The :generator:`Visual Studio 10 2010` generator has been removed."
msgstr ":generator:`Visual Studio 10 2010` 生成器已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:221
msgid ""
"The :generator:`Visual Studio 11 2012` generator is now deprecated and "
"will be removed in a future version of CMake."
msgstr ":generator:`Visual Studio 11 2012` 生成器现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:227
msgid ""
"The :envvar:`SSL_CERT_FILE` and :envvar:`SSL_CERT_DIR` environment "
"variables can now be used to override where to find certificate "
"authorities for TLS/SSL operations."
msgstr ""
":envvar:`SSL_CERT_FILE` 和 :envvar:`SSL_CERT_DIR` 环境变量现在可用于覆盖在哪里可以找到 "
"TLS/SSL 操作的证书颁发机构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:231
msgid ""
"If :prop_tgt:`<LANG>_CLANG_TIDY` includes a ``-p`` argument, the full "
"compiler command line is no longer appended after ``--``."
msgstr ""
"如果 :prop_tgt:`<LANG>_CLANG_TIDY` 包含一个 `-p`` 参数，则完整的编译器命令行不再附加在 ``--`` 之后。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:234
msgid ""
"The :generator:`Xcode` generator no longer adds the per-config suffix "
"``$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)`` to library search paths. "
"See policy :policy:`CMP0142`."
msgstr ""
":generator:`Xcode` 生成器不再将每个配置后缀 "
"``$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)`` "
"添加到库搜索路径。请参阅政策:policy:`CMP0142`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:241
msgid "Changes made since CMake 3.25.0 include the following."
msgstr "自 CMake 3.25.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:244
msgid "3.25.1"
msgstr "3.25.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:246
msgid ""
"On Windows, when targeting the MSVC ABI, the :command:`find_library` "
"command no longer accepts ``.a`` file names.  This behavior was added in "
"CMake 3.25.0, but has been reverted due finding GNU-ABI libraries in cases"
" we did not previously."
msgstr ""
"在 Windows 上，当以 MSVC ABI 为目标时， :command:`find_library` 命令不再接受 ``.a`` "
"文件名。此行为已添加到 CMake 3.25.0 中，但由于在我们之前没有找到 GNU-ABI 库的情况下已恢复。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:252
msgid "3.25.2"
msgstr "3.25.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:254
msgid ""
"CUDA language level 20 (corresponding to C++20) is now supported with NVCC"
" 12.0 and above."
msgstr "NVCC 12.0 及更高版本现在支持 CUDA 语言级别 20（对应于 C++20）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:257
msgid ""
"On Windows, the ``icpx`` compiler now provided by Intel oneAPI 2023.0 and "
"above is no longer selected because its GNU-like command-line is not yet "
"supported by CMake."
msgstr ""
"在 Windows 上，不再选择 Intel oneAPI 2023.0 及更高版本现在提供的 ``icpx`` 编译器，因为它的 GNU-like"
" 命令行尚未被 CMake 支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.25.rst:262
msgid "3.25.3"
msgstr "3.25.3"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:2
msgid "CMake 3.26 Release Notes"
msgstr "CMake 3.26 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:8
msgid "Changes made since CMake 3.25 include the following."
msgstr "自 CMake 3.25 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:16
msgid ""
"The ``ASM_MARMASM`` language was added to support the Microsoft ARM "
"assembler language."
msgstr "添加了“ASM_MARMASM”语言以支持 Microsoft ARM 汇编语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:22
msgid ""
"The :option:`cmake -E copy <cmake-E copy>` command-line tool now supports "
"a ``-t`` argument."
msgstr ":option:`cmake -E copy <cmake-E copy>`命令行工具现在支持``-t``参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:25
msgid ""
"The :option:`cmake -E copy_directory_if_different <cmake-E "
"copy_directory_if_different>` command-line tool was added."
msgstr ""
"添加了 :option:`cmake -E copy_directory_if_different <cmake-E "
"copy_directory_if_different>` 命令行工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:29
msgid "Configure Log"
msgstr "配置日志"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:31
msgid ""
"CMake now writes a YAML log of configure-time checks to "
"``CMakeFiles/CMakeConfigureLog.yaml`` under the top of the build tree. See"
" the :manual:`cmake-configure-log(7)` manual."
msgstr ""
"CMake 现在将配置时检查的 YAML "
"日志写入构建树顶部的“CMakeFiles/CMakeConfigureLog.yaml”。请参阅 :manual:`cmake-configure-"
"log(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:38
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` field "
"has been updated to 2.5."
msgstr ""
":manual:`cmake-file-api(7)` \"codemodel\" version 2 ``version`` 字段已更新为 "
"2.5。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:41
msgid ""
"The :manual:`cmake-file-api(7)` \"codemodel\" version 2 \"target\" object "
"gained a new ``fileSets`` field and associated ``fileSetIndex`` field to "
"``sources`` objects."
msgstr ""
":manual:`cmake-file-api(7)` “codemodel” version 2 “target” 对象获得了一个新的 "
"``fileSets`` 字段并将 ``fileSetIndex`` 字段关联到 ``sources`` 对象。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:45
msgid ""
"The :manual:`cmake-file-api(7)` gained a new \"configureLog\" object kind "
"that enables stable access to the :manual:`cmake-configure-log(7)`."
msgstr ""
":manual:`cmake-file-api(7)` 获得了一个新的“configureLog”对象类型，可以稳定访问 "
":manual:`cmake-configure-log(7)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:51
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands now support :manual:`generator expressions <cmake-generator-"
"expressions(7)>` in their ``COMMENT`` option."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令现在在其 "
"``COMMENT`` 选项中支持 :manual:`generator expressions <cmake-generator-"
"expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:55
msgid ""
"The :command:`message` command gained a ``CONFIGURE_LOG`` mode to record "
"an entry in the :manual:`cmake-configure-log(7)`."
msgstr ""
":command:`message` 命令获得了 ``CONFIGURE_LOG`` 模式来记录 :manual:`cmake-configure-"
"log(7)` 中的条目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:58
msgid ""
"The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands "
"now support the ``%z`` and ``%Z`` specifiers for the time zone."
msgstr ""
":command:`string(TIMESTAMP)` 和 :command:`file(TIMESTAMP)` 命令现在支持时区的 ``%z``"
" 和 ``%Z`` 说明符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:61
msgid ""
"The :command:`try_compile` and :command:`try_run` commands gained a "
"``LOG_DESCRIPTION`` option specifying text to be recorded in the "
":manual:`cmake-configure-log(7)`."
msgstr ""
":command:`try_compile` 和 :command:`try_run` 命令获得了一个 ``LOG_DESCRIPTION`` "
"选项，指定要记录在 :manual:`cmake-configure-log(7)` 中的文本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:65
msgid ""
"The :command:`try_compile` and :command:`try_run` commands gained a "
"``NO_LOG`` option to skip recording a :manual:`cmake-configure-log(7)` "
"entry."
msgstr ""
":command:`try_compile` 和 :command:`try_run` 命令获得了 ``NO_LOG`` 选项以跳过记录 "
":manual:`cmake-configure-log(7)` 条目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:72
msgid ""
"The :variable:`CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT` variable is now set"
" for ``GNU``, ``MSVC``, and ``AppleClang`` compilers that have only one "
"frontend variant."
msgstr ""
":variable:`CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT` 变量现在设置为只有一个前端变体的 "
"``GNU``、``MSVC`` 和 ``AppleClang`` 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:76
msgid ""
"A :variable:`CMAKE_VS_VERSION_BUILD_NUMBER` variable is now set by "
":ref:`Visual Studio Generators` for VS 2017 and above to report the four-"
"component Visual Studio version number."
msgstr ""
"CMAKE_VS_VERSION_BUILD_NUMBER 变量现在由 Visual Studio Generators 为 VS 2017 "
"及更高版本设置，以报告由四部分组成的 Visual Studio 版本号。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:83
msgid ""
"The :prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` target property was "
"added to allow the ``clang-tidy`` tool to export its suggested fixes to a "
"set of ``.yaml`` files. A new "
":variable:`CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` variable was created "
"to initialize this property."
msgstr ""
"添加了 :prop_tgt:`<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` 目标属性，以允许 ``clang-tidy``"
" 工具将其建议的修复导出到一组 ``.yaml`` 文件中。创建了一个新的 "
":variable:`CMAKE_<LANG>_CLANG_TIDY_EXPORT_FIXES_DIR` 变量来初始化此属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:89
msgid ""
"The :prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS <XCODE_EMBED_<type>>` "
"target property was added to tell the :generator:`Xcode` generator to "
"embed ExtensionKit-based extensions such as extensions using the "
"Background Assets framework.  Aspects of the embedding can be customized "
"with:"
msgstr ""
"添加了:prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS <XCODE_EMBED_<type>>` "
"目标属性，以告知:generator:`Xcode` 生成器嵌入基于 ExtensionKit "
"的扩展，例如使用后台资产框架的扩展。嵌入的各个方面可以通过以下方式定制："

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:94
msgid ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_PATH <XCODE_EMBED_<type>>`"
msgstr ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_PATH <XCODE_EMBED_<type>>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:95
msgid ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_CODE_SIGN_ON_COPY "
"<XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>`"
msgstr ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_CODE_SIGN_ON_COPY "
"<XCODE_EMBED_<type>_CODE_SIGN_ON_COPY>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:96
msgid ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_REMOVE_HEADERS_ON_COPY "
"<XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>`"
msgstr ""
":prop_tgt:`XCODE_EMBED_EXTENSIONKIT_EXTENSIONS_REMOVE_HEADERS_ON_COPY "
"<XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY>`"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:101
msgid ""
"The :module:`ExternalProject` module's :command:`ExternalProject_Add` "
"command gained an ``INSTALL_BYPRODUCTS`` option to specify files generated"
" by the ``install`` step."
msgstr ""
":module:`ExternalProject` 模块的 :command:`ExternalProject_Add` 命令获得了一个 "
"``INSTALL_BYPRODUCTS`` 选项来指定由 ``install`` 步骤生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:107
msgid "gained support for the ``sbsa-linux`` cross compilation target, and"
msgstr "获得了对 ``sbsa-linux`` 交叉编译目标的支持，并且"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:109
msgid "now provides an imported target for ``nvrtc_static``, if found."
msgstr "如果找到，现在为 ``nvrtc_static`` 提供一个导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:111
msgid "The :module:`FindImageMagick` module now provides imported targets."
msgstr ":module:`FindImageMagick` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:113
msgid ""
"The :module:`FindPython3` and :module:`FindPython` modules gained support "
"for the `Stable Application Binary Interface`_."
msgstr "FindPython3 和 FindPython 模块获得了对“稳定应用程序二进制接口”的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:116
msgid ""
"The :module:`UseSWIG` module gained support for the ``perl5`` language."
msgstr ":module:`UseSWIG` 模块获得了对 ``perl5`` 语言的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:123
msgid ""
"The :genex:`$<BUILD_LOCAL_INTERFACE:...>` generator expression was added "
"to prevent usage requirements from being exported to dependent projects."
msgstr "添加了 :genex:`$<BUILD_LOCAL_INTERFACE:...>` 生成器表达式以防止将使用要求导出到相关项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:129
msgid ""
"The :envvar:`CTEST_NO_TESTS_ACTION` environment variable was added to "
"provide a default value for the :option:`--no-tests=\\<action\\> <ctest "
"--no-tests>` command line argument of :manual:`ctest(1)`."
msgstr ""
":envvar:`CTEST_NO_TESTS_ACTION` 环境变量被添加为 :option:`--no-tests=\\<action\\> "
"<ctest --no-tests>` 的命令行参数提供默认值 :manual:` ctest(1)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:137
msgid ""
"The ``CMakeFiles/CMakeOutput.log`` and ``CMakeFiles/CMakeError.log`` files"
" are no longer populated by CMake's built-in modules. :manual:`cmake(1)` "
"no longer suggests looking at them after a ``CMake Error`` occurs.  "
"Information previously logged to those files is instead logged to the "
":manual:`cmake-configure-log(7)`."
msgstr ""
"CMake 的内置模块不再填充“CMakeFiles/CMakeOutput.log”和“CMakeFiles/CMakeError.log”文件。"
" :manual:`cmake(1)` 不再建议在发生 ``CMake 错误`` 后查看它们。之前记录到这些文件的信息改为记录到 "
":manual:`cmake-configure-log(7)`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:143
msgid ""
"On CYGWIN, the undocumented ``CMAKE_LEGACY_CYGWIN_WIN32`` mode for "
"compatibility with CMake versions older than 2.8.4 has been removed."
msgstr ""
"在 CYGWIN 上，用于与 2.8.4 之前的 CMake 版本兼容的未记录的“CMAKE_LEGACY_CYGWIN_WIN32”模式已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:149
msgid ""
":ref:`Language Standard Flags`, such as ``-std=c++11``, when generated due"
" to :command:`target_compile_features` or "
":variable:`CMAKE_<LANG>_STANDARD`, are now placed before flags added by "
":command:`target_compile_options`, rather than after them."
msgstr ""
":ref:`Language Standard "
"Flags`，例如``-std=c++11``，当由于:command:`target_compile_features` 或 "
":variable:`CMAKE_<LANG>_STANDARD` "
"而生成时，现在放置在标志之前由 :command:`target_compile_options` 添加，而不是在它们之后。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:154
msgid ""
"For all ``COMPILE_DEFINITIONS`` properties, any leading ``-D`` on an item "
"is removed whether or not it was specified by a generator expression."
msgstr "对于所有“COMPILE_DEFINITIONS”属性，项目上的任何前导“-D”都将被删除，无论它是否由生成器表达式指定。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:157
msgid ""
"The ``compile_commands.json`` database enabled by "
":variable:`CMAKE_EXPORT_COMPILE_COMMANDS` now provides the ``output`` "
"field in the compile commands objects.  This allows multi-config "
"generators, such as the :generator:`Ninja Multi-Config` generator, to "
"provide the compile commands for all configurations."
msgstr ""
"由 :variable:`CMAKE_EXPORT_COMPILE_COMMANDS` 启用的``compile_commands.json`` "
"数据库现在在编译命令对象中提供``output`` 字段。这允许多配置生成器，例如 Ninja Multi-Config "
"生成器，为所有配置提供编译命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:163
msgid ""
"The :prop_gbl:`USE_FOLDERS` global property is treated as ``ON`` by "
"default. See policy :policy:`CMP0143`."
msgstr ":prop_gbl:`USE_FOLDERS` 全局属性默认被视为 ``ON``。请参阅政策:policy:`CMP0143`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:166
msgid ""
"The top-level :command:`project` call will now emit an author warning if "
"the documented command order in relation to "
":command:`cmake_minimum_required` is not respected."
msgstr ""
"如果不遵守与 cmake_minimum_required 相关的记录命令顺序，则顶级 :command:`project` "
"调用现在将发出作者警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:170
msgid ""
"The :option:`cmake --trace` option now follows :command:`try_compile` and "
":command:`try_run` invocations."
msgstr ""
":option:`cmake --trace` 选项现在跟随 :command:`try_compile` 和 :command:`try_run`"
" 调用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:176
msgid "Changes made since CMake 3.26.0 include the following."
msgstr "自 CMake 3.26.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.26.rst:179
msgid "3.26.1, 3.26.2, 3.26.3, 3.26.4"
msgstr "3.26.1、3.26.2、3.26.3、3.26.4"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:2
msgid "CMake 3.3 Release Notes"
msgstr "CMake 3.3 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:8
msgid "Changes made since CMake 3.2 include the following."
msgstr "自 CMake 3.2 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:16
msgid ""
"The :ref:`Makefile Generators` now add ``.DELETE_ON_ERROR`` to the "
"makefiles that contain the actual build rules for files on disk. This "
"tells GNU make to remove rule outputs when their recipe modifies an output"
" but fails."
msgstr ""
":ref:`Makefile Generators` 现在将 ``.DELETE_ON_ERROR`` 添加到包含磁盘文件实际构建规则的 "
"makefile 中。这告诉 GNU make 在他们的配方修改输出但失败时删除规则输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:21
msgid ""
"The :ref:`Visual Studio Generators` learned to support ``.xaml`` source "
"files and automatically associate them with corresponding ``.h`` and "
"``.cpp`` sources."
msgstr ""
":ref:`Visual Studio Generators` 学会了支持 ``.xaml`` 源文件并自动将它们与相应的 ``.h`` 和 "
"``.cpp`` 源相关联。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:25
msgid ""
"A new experimental :generator:`Green Hills MULTI` generator was added on "
"Windows.  `Green Hills MULTI`_ is an IDE for embedded real-time systems."
msgstr ""
"在 Windows 上添加了一个新的实验性 :generator:`Green Hills MULTI` 生成器。 `Green Hills "
"MULTI`_ 是用于嵌入式实时系统的 IDE。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:34
msgid ""
"The :command:`add_dependencies` command learned to allow dependencies to "
"be added to :ref:`interface libraries <Interface Libraries>`. Dependencies"
" added to an interface library are followed transitively in its place "
"since the target itself does not build."
msgstr ""
":command:`add_dependencies` 命令学会了允许将依赖项添加到 :ref:`interface libraries "
"<Interface Libraries>`。添加到接口库的依赖项会在其位置上传递，因为目标本身不会构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:39
msgid ""
"The :command:`execute_process` command learned to support specifying the "
"same file for ``OUTPUT_FILE`` and ``ERROR_FILE``."
msgstr ""
":command:`execute_process` 命令学会了支持为 ``OUTPUT_FILE`` 和 ``ERROR_FILE`` "
"指定相同的文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:42
msgid ""
"The :command:`file(GLOB)` and :command:`file(GLOB_RECURSE)` commands "
"learned a new ``LIST_DIRECTORIES <bool>`` option to specify whether the "
"glob result should include directories."
msgstr ""
":command:`file(GLOB)` 和 :command:`file(GLOB_RECURSE)` 命令学习了一个新的 "
"``LIST_DIRECTORIES <bool>`` 选项来指定 glob 结果是否应该包含目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:46
msgid ""
"The :command:`find_library`, :command:`find_path`, and "
":command:`find_file` commands now search in installation prefixes derived "
"from the ``PATH`` environment variable."
msgstr ""
":command:`find_library`、 :command:`find_path` 和 :command:`find_file` "
"命令现在搜索从 ``PATH`` 环境变量派生的安装前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:50
msgid ""
"The :command:`if` command learned a new ``IN_LIST`` operator that "
"evaluates to true if a given element is contained in a named list."
msgstr ""
":command:`if` 命令学习了一个新的 ``IN_LIST`` 运算符，如果给定元素包含在命名列表中，该运算符的计算结果为 true。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:53
msgid ""
"The :command:`install(EXPORT)` and :command:`export()` commands learned to"
" export targets that populate the :prop_tgt:`INTERFACE_SOURCES` target "
"property."
msgstr ""
":command:`install(EXPORT)` 和 :command:`export()` 命令学会了导出填充 "
":prop_tgt:`INTERFACE_SOURCES` 目标属性的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:57
msgid ""
"The :command:`install(TARGETS)` command learned to support generator "
"expressions in the ``DESTINATION`` value."
msgstr ":command:`install(TARGETS)` 命令学会了在 ``DESTINATION`` 值中支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:63
msgid ""
"The version of some Fortran compilers is now detected and stored in the "
":variable:`CMAKE_Fortran_COMPILER_VERSION <CMAKE_<LANG>_COMPILER_VERSION>`"
" variable."
msgstr ""
"现在检测到某些 Fortran 编译器的版本并将其存储在 :variable:`CMAKE_Fortran_COMPILER_VERSION "
"<CMAKE_<LANG>_COMPILER_VERSION>` 变量中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:67
msgid ""
"The :ref:`Visual Studio Generators` learned a new "
":variable:`CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` option to put the "
"``INSTALL`` target in the default build of a solution (``.sln``) file."
msgstr ""
":ref:`Visual Studio Generators` 学习了一个新的 "
":variable:`CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` 选项，用于将 ``INSTALL`` "
"目标放入解决方案 (``.sln``) 文件的默认构建中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:75
msgid ""
"A :prop_tgt:`CROSSCOMPILING_EMULATOR` target property and supporting "
":variable:`CMAKE_CROSSCOMPILING_EMULATOR` variable were introduced to "
"allow target platform binaries to run on the host during cross compiling."
msgstr ""
"一个 :prop_tgt:`CROSSCOMPILING_EMULATOR` 目标属性和支持 "
":variable:`CMAKE_CROSSCOMPILING_EMULATOR` 变量被引入以允许目标平台二进制文件在交叉编译期间在主机上运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:80
msgid ""
"A :prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` target property and supporting "
":variable:`CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE` variable were introduced to "
"tell the :ref:`Makefile Generators` and the :generator:`Ninja` generator "
"to run ``include-what-you-use`` along with the compiler for ``C`` and "
"``CXX`` languages."
msgstr ""
":prop_tgt:`<LANG>_INCLUDE_WHAT_YOU_USE` "
"目标属性和支持 :variable:`CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE` "
"变量被引入来告诉 :ref:`Makefile Generators` 和 :generator:`Ninja` 生成器运行 `` include-"
"what-you-use`` 以及用于 ``C`` 和 ``CXX`` 语言的编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:86
msgid ""
"The :prop_tgt:`<LANG>_VISIBILITY_PRESET` and "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` target properties now affect "
"compilation in sources of all target types.  See policy :policy:`CMP0063`."
msgstr ""
":prop_tgt:`<LANG>_VISIBILITY_PRESET` 和 "
":prop_tgt:`VISIBILITY_INLINES_HIDDEN` "
"目标属性现在影响所有目标类型源中的编译。请参阅政策:policy:`CMP0063`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:91
msgid ""
"The :prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` target property learned to "
"support generator expressions."
msgstr ":prop_tgt:`XCODE_ATTRIBUTE_<an-attribute>` 目标属性学会了支持生成器表达式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:97
msgid ""
"The :module:`CheckFortranCompilerFlag` module was introduced to check "
"``Fortran`` compiler flags, much like the :module:`CheckCCompilerFlag` "
"module already does for ``C``."
msgstr ""
":module:`CheckFortranCompilerFlag` 模块被引入来检查``Fortran`` 编译器标志，就像 "
":module:`CheckCCompilerFlag` 模块已经为 ``C`` 做的一样。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:101
msgid ""
"The :module:`ExternalData` module learned a new "
":variable:`ExternalData_NO_SYMLINKS` option to disable use of symbolic "
"links to populate the real data files and use copies instead."
msgstr ""
":module:`ExternalData` 模块学习了一个新的 :variable:`ExternalData_NO_SYMLINKS` "
"选项来禁止使用符号链接来填充真实数据文件，而是使用副本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:106
msgid ""
"The :module:`ExternalData` module learned a new ``RECURSE:`` option in "
"``DATA{}`` references specifying directories. This allows an entire "
"directory tree of associated files to be matched."
msgstr ""
":module:`ExternalData` 模块在指定目录的 ``DATA{}`` 引用中学习了一个新的 ``RECURSE:`` "
"选项。这允许匹配关联文件的整个目录树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:111
msgid ""
"The :module:`ExternalData` module learned a new URL template placeholder "
"``%(algo:<key>)`` to allow custom mapping from algorithm name to URL "
"component through configuration of new "
":variable:`ExternalData_URL_ALGO_<algo>_<key>` variables. This allows more"
" flexibility in remote URLs."
msgstr ""
":module:`ExternalData` 模块学习了一个新的 URL 模板占位符 ``%(algo:<key>)`` 以允许通过配置新的 "
":variable:`ExternalData_URL_ALGO_<algo>_< 从算法名称到 URL 组件的自定义映射键>`变量。这允许远程 "
"URL 具有更大的灵活性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:117
msgid ""
"The :module:`ExternalProject` module learned to replace tokens like "
"``<BINARY_DIR>`` in the ``BYPRODUCTS`` of each step."
msgstr ""
":module:`ExternalProject` 模块学会了在每个步骤的 ``BYPRODUCTS`` 中替换诸如 "
"``<BINARY_DIR>`` 的标记。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:120
msgid ""
"The :module:`ExternalProject` module APIs learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>` when "
"using ``LOG_*`` options and in CMake initial cache options."
msgstr ""
":module:`ExternalProject` 模块 API 学会了在使用 ``LOG_*`` 选项和 CMake 初始缓存选项时支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:124
msgid ""
"The :module:`FindBoost` module now tracks the directories containing "
"libraries separately for RELEASE and DEBUG configurations."
msgstr "FindBoost 模块现在跟踪包含库的目录，分别用于 RELEASE 和 DEBUG 配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:127
msgid ""
"The :module:`FindCUDA` module now defaults to using the static CUDA "
"runtime library if it is available.  A new "
"``CUDA_USE_STATIC_CUDA_RUNTIME`` option is offered to control this "
"behavior."
msgstr ""
"FindCUDA 模块现在默认使用静态 CUDA 运行时库（如果可用）。提供了一个新的 "
"``CUDA_USE_STATIC_CUDA_RUNTIME`` 选项来控制此行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:132
msgid ""
"The :module:`FindMatlab` module was completely rewritten.  It learned "
"about versions and components and to find Matlab in a more precise and "
"multiplatform way.  The module now offers APIs to create mex extensions, "
"documentation, and unit tests."
msgstr ""
":module:`FindMatlab` 模块被完全重写。它了解版本和组件，并以更精确和多平台的方式找到 Matlab。该模块现在提供 API "
"来创建 mex 扩展、文档和单元测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:137
msgid ""
"The :module:`FindPackageHandleStandardArgs` module "
"``FIND_PACKAGE_HANDLE_STANDARD_ARGS`` function now always populates both "
"the ``<PackageName>_FOUND`` and ``<UPPERCASE_NAME>_FOUND`` variables (the "
"latter for backwards compatibility).  The ``FOUND_VAR`` option is now "
"ignored except to enforce its allowed values."
msgstr ""
":module:`FindPackageHandleStandardArgs` 模块 "
"``FIND_PACKAGE_HANDLE_STANDARD_ARGS`` 函数现在始终填充 ``<PackageName>_FOUND`` 和 "
"``<UPPERCASE_NAME>_FOUND`` 变量（后者用于向后兼容）。 ``FOUND_VAR`` "
"选项现在被忽略，除非强制执行其允许的值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:145
msgid ""
"The :module:`InstallRequiredSystemLibraries` module learned a new "
"``CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT`` option to specify the "
"installation component."
msgstr ""
"InstallRequiredSystemLibraries 模块学习了一个新的 "
"CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT 选项来指定安装组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:152
msgid ""
"A new ``COMPILE_LANGUAGE`` generator expression was introduced to allow "
"specification of compile options for target files based on the "
":prop_sf:`LANGUAGE` of each source file.  Due to limitations of the "
"underlying native build tools, this feature has varying support across "
"generators.  See the :manual:`cmake-generator-expressions(7)` manual for "
"details."
msgstr ""
"引入了一个新的 ``COMPILE_LANGUAGE`` 生成器表达式，以允许根据每个源文件的 :prop_sf:`LANGUAGE` "
"指定目标文件的编译选项。由于底层本机构建工具的限制，此功能在生成器之间具有不同的支持。有关详细信息，请参阅 :manual:`cmake-"
"generator-expressions(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:162
msgid ""
"The :manual:`ctest(1)` tool learned a new ``--repeat-until-fail <n>`` "
"option to help find sporadic test failures."
msgstr ""
":manual:`ctest(1)` 工具学习了一个新的 ``--repeat-until-fail <n>`` 选项来帮助查找零星的测试失败。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:165
msgid ""
"The :module:`CTestCoverageCollectGCOV` module learned to support the same "
"``CTEST_CUSTOM_COVERAGE_EXCLUDE`` option as the :command:`ctest_coverage` "
"command."
msgstr ""
":module:`CTestCoverageCollectGCOV` 模块学会了支持与 :command:`ctest_coverage` "
"命令相同的 ``CTEST_CUSTOM_COVERAGE_EXCLUDE`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:172
msgid ""
"The :cpack_gen:`CPack IFW Generator` learned to support Qt Framework "
"Installer 2.0 tools."
msgstr ""
":cpack_gen:`CPack IFW Generator` 学会了支持 Qt Framework Installer 2.0 工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:175
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned a new "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS` variable to specify"
" per-component use of ``dpkg-shlibdeps``."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学习了一个新的 "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS` 变量来指定每个组件使用 ``dpkg-"
"shlibdeps``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:179
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned a new "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` option to specify "
"per-component dependencies."
msgstr ""
":cpack_gen:`CPack DEB Generator` "
"学习了一个新的 :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` "
"选项来指定每个组件的依赖关系。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:183
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to package symbolic links "
"more cleanly and now supports directory symlinks with recent ``rpmbuild`` "
"versions."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了更干净地打包符号链接，现在支持带有最新 ``rpmbuild`` "
"版本的目录符号链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:187
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned a new "
":variable:`CPACK_RPM_ADDITIONAL_MAN_DIRS` variable to specify directories "
"containing man pages for the brp-compress RPM macro."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了一个新的 :variable:`CPACK_RPM_ADDITIONAL_MAN_DIRS` 变量来指定包含 brp-compress RPM "
"宏手册页的目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:191
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned a new "
":variable:`CPACK_RPM_<component>_PACKAGE_ARCHITECTURE` variable to specify"
" a component-specific package architecture."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了一个新的 :variable:`CPACK_RPM_<component>_PACKAGE_ARCHITECTURE` "
"变量来指定组件特定的包架构。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:195
msgid ""
"The CPack WIX generator learned the new "
":prop_inst:`CPACK_START_MENU_SHORTCUTS`, "
":prop_inst:`CPACK_DESKTOP_SHORTCUTS` and "
":prop_inst:`CPACK_STARTUP_SHORTCUTS` installed file properties which can "
"be used to install shortcuts in the Start Menu, on the Desktop and in the "
"Startup Folder respectively."
msgstr ""
"CPack WIX 生成器学习了新的 "
":prop_inst:`CPACK_START_MENU_SHORTCUTS`、 :prop_inst:`CPACK_DESKTOP_SHORTCUTS`"
" 和 :prop_inst:`CPACK_STARTUP_SHORTCUTS` 安装文件属性，可用于在开始菜单、桌面和启动文件夹中安装快捷方式分别。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:205
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by GNU compilers on Windows, versions "
"4.4 through 5.0."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 Windows "
"4.4 到 5.0 版 GNU 编译器支持的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:209
msgid ""
"The :manual:`cmake(1)` ``-E tar`` command learned a new "
"``--format<format>`` option to specify the archive format to be written."
msgstr ""
":manual:`cmake(1)` ``-E tar`` 命令学习了一个新的 ``--format<format>`` "
"选项来指定要写入的存档格式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:213
msgid ""
"On OS X, CMake learned to create XCTest bundles to test Frameworks and App"
" Bundles within Xcode.  The :module:`FindXCTest` module provides "
"convenience functions to handle :prop_tgt:`XCTEST` bundles."
msgstr ""
"在 OS X 上，CMake 学会了创建 XCTest 包来测试 Xcode 中的框架和应用程序包。 FindXCTest "
"模块提供了方便的函数来处理 XCTEST 包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:220
msgid ""
"On OS X the :manual:`cmake-gui(1)` no longer has the ``Install For Command"
" Line Use`` menu item.  Instead there is a ``How to Install For Command "
"Line Use`` menu item that shows an informational dialog box explaining how"
" to make the command line tools available.  For example::"
msgstr ""
"在 OS X 上， :manual:`cmake-gui(1)` 不再有 ``Install For Command Line Use`` "
"菜单项。相反，有一个“如何为命令行使用安装”菜单项，它显示一个信息对话框，解释如何使命令行工具可用。例如：："

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:228
msgid ""
"The :command:`ctest_build` and :command:`build_command` commands no longer"
" tell ``make`` tools to ignore errors with the ``-i`` option. Previously "
"this was done for :ref:`Makefile Generators` but not others. See policy "
":policy:`CMP0061`."
msgstr ""
":command:`ctest_build` 和 :command:`build_command` 命令不再告诉 ``make`` 工具使用 "
"``-i`` 选项忽略错误。以前这是为 :ref:`Makefile Generators` "
"而不是其他人完成的。请参阅政策:policy:`CMP0061`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:233
msgid ""
"The :generator:`Visual Studio 10 2010` generator no longer checks for "
"running VS IDEs with the project open or asks them to reload. This was "
"originally done for VS 10 because it had been done for VS 7 through 9 to "
"avoid prompting for every project in a solution. Since VS >= 10 allow the "
"whole solution to reload at once they do not need CMake to help them."
msgstr ""
":generator:`Visual Studio 10 2010` 生成器不再在项目打开时检查正在运行的 VS IDE "
"或要求它们重新加载。这最初是为 VS 10 完成的，因为它已经为 VS 7 到 9 完成，以避免提示解决方案中的每个项目。由于 VS >= 10 "
"允许立即重新加载整个解决方案，因此他们不需要 CMake 来帮助他们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:240
msgid ""
"The :generator:`Visual Studio 7` generator (.NET 2002) is now deprecated "
"and will be removed in a future version of CMake."
msgstr ""
":generator:`Visual Studio 7` 生成器 (.NET 2002) 现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:243
msgid ""
"The :generator:`Visual Studio 6` generator is now deprecated and will be "
"removed in a future version of CMake."
msgstr ":generator:`Visual Studio 6` 生成器现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:246
msgid ""
"The :command:`find_package` command no longer considers project build "
"trees recently configured in a :manual:`cmake-gui(1)`. This was previously"
" done only on Windows and is now never done. The ``NO_CMAKE_BUILDS_PATH`` "
"option is now ignored if given and effectively always on. Projects may "
"populate the :ref:`User Package Registry` to aid users building multiple "
"dependent projects one after another."
msgstr ""
":command:`find_package` 命令不再考虑最近在 :manual:`cmake-gui(1)` 中配置的项目构建树。这以前只在 "
"Windows 上完成，现在从未完成。 ``NO_CMAKE_BUILDS_PATH`` 选项现在被忽略，如果给出并且有效地始终打开。项目可能会填充"
" :ref:`User Package Registry` 以帮助用户一个接一个地构建多个依赖项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:254
msgid ""
"The :command:`add_definitions()` command no longer causes a "
":prop_dir:`DEFINITIONS` directory property to be populated. See policy "
":policy:`CMP0059`."
msgstr ""
":command:`add_definitions()` 命令不再导致 :prop_dir:`DEFINITIONS` "
"目录属性被填充。请参阅政策:policy:`CMP0059`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:258
msgid ""
"With Visual Studio 7, 8, and 9 generators the value of the ``$(OutDir)`` "
"placeholder no longer evaluates to the configuration name.  Projects "
"should use ``$(ConfigurationName)`` for that instead."
msgstr ""
"使用 Visual Studio 7、8 和 9 生成器，``$(OutDir)`` 占位符的值不再计算为配置名称。项目应该使用 "
"``$(ConfigurationName)`` 来代替。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:262
msgid ""
"Using the output of :command:`export()` with the :command:`install(FILES)`"
" command is no longer allowed.  See policy :policy:`CMP0062` for details."
msgstr ""
"不再允许将 :command:`export()` 的输出与 :command:`install(FILES)` "
"命令一起使用。有关详细信息，请参阅政策:policy:`CMP0062`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:268
msgid ""
"The :generator:`Ninja` generator now requires that calls to the "
":command:`add_custom_command` and :command:`add_custom_target` commands "
"use the ``BYPRODUCTS`` option to explicitly specify any files generated by"
" the custom commands that are not listed as outputs (perhaps because their"
" timestamps are allowed to be older than the inputs).  See policy "
":policy:`CMP0058`."
msgstr ""
":generator:`Ninja` 生成器现在要求调用 :command:`add_custom_command` 和 "
":command:`add_custom_target` 命令使用 ``BYPRODUCTS`` "
"选项来显式指定由未列出的自定义命令生成的任何文件作为输出（可能是因为允许它们的时间戳早于输入）。请参阅政策:policy:`CMP0058`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:275
msgid ""
"Build-time progress output of :ref:`Makefile Generators` has been "
"improved. It no longer mixes progress and build rule messages during "
"parallel builds. The link rule messages now have progress and are "
"displayed as bold green instead of bold red (since red is often associated"
" with an error message)."
msgstr ""
":ref:`Makefile Generators` "
"的构建时进度输出已得到改进。它不再在并行构建期间混合进度和构建规则消息。链接规则消息现在有进展并显示为粗体绿色而不是粗体红色（因为红色通常与错误消息相关联）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:280
msgid ""
"The :variable:`CMAKE_CFG_INTDIR` variable value for Visual Studio 7, 8, "
"and 9 is now ``$(ConfigurationName)`` instead of ``$(OutDir)``. This "
"should have no effect on the intended use cases of the variable."
msgstr ""
"Visual Studio 7、8 和 9 的 :variable:`CMAKE_CFG_INTDIR` 变量值现在是 "
"``$(ConfigurationName)`` 而不是 ``$(OutDir)``。这对变量的预期用例应该没有影响。"

#: ../../cmake-prefix/src/cmake/Help/release/3.3.rst:284
msgid ""
"Linking to library files by a full path in an implicit linker search "
"directory (e.g. ``/usr/lib/libfoo.a``) no longer asks the linker to search"
" for the library (e.g. ``-lfoo``) and now links by full path. See policy "
":policy:`CMP0060`."
msgstr ""
"通过隐式链接器搜索目录（例如``/usr/lib/libfoo.a``）中的完整路径链接到库文件不再要求链接器搜索库（例如``-lfoo``），现在按完整路径链接。请参阅政策:policy:`CMP0060`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:2
msgid "CMake 3.4 Release Notes"
msgstr "CMake 3.4 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:8
msgid "Changes made since CMake 3.3 include the following."
msgstr "自 CMake 3.3 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:16
msgid ""
"The :generator:`Visual Studio 14 2015` generator learned to select a "
"Windows 10 SDK based on the value of the :variable:`CMAKE_SYSTEM_VERSION` "
"variable and the SDKs available on the host."
msgstr ""
"Visual Studio 14 2015 生成器学会了根据 CMAKE_SYSTEM_VERSION 变量的值和主机上可用的 SDK 选择 "
"Windows 10 SDK。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:20
msgid ""
"CMake learned rudimentary support for the Apple Swift language.  When "
"using the :generator:`Xcode` generator with Xcode 6.1 or higher, one may "
"enable the ``Swift`` language with the :command:`enable_language` command "
"or the :command:`project` command (this is an error with other generators "
"or when Xcode is too old).  Then one may list ``.swift`` source files in "
"targets for compilation."
msgstr ""
"CMake 学会了对 Apple Swift 语言的基本支持。在 Xcode 6.1 或更高版本中使用 Xcode 生成器时，可以使用 "
":command:`enable_language` 命令或 :command:`project` 命令启用 ``Swift`` "
"语言（这是一个错误其他生成器或 Xcode 太旧时）。然后可以在编译目标中列出 ``.swift`` 源文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:30
msgid ""
"The :command:`find_program` command learned a ``NAMES_PER_DIR`` option to "
"consider all given ``NAMES`` in each directory before moving on to the "
"next directory."
msgstr ""
":command:`find_program` 命令学习了一个 ``NAMES_PER_DIR`` "
"选项，在移动到下一个目录之前考虑每个目录中所有给定的 ``NAMES``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:34
msgid ""
"The :command:`get_filename_component` command learned a new ``BASE_DIR`` "
"subcommand.  This is used to specify a base directory when calculating an "
"absolute path from a relative path."
msgstr ""
":command:`get_filename_component` 命令学习了一个新的 ``BASE_DIR`` "
"子命令。这用于在从相对路径计算绝对路径时指定基本目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:38
msgid ""
"The :command:`if` command learned a new ``TEST`` operator that evaluates "
"to true if a given test name has been defined by the :command:`add_test` "
"command.  See policy :policy:`CMP0064`."
msgstr ""
":command:`if` 命令学习了一个新的 ``TEST`` 运算符，如果给定的测试名称已由 :command:`add_test` "
"命令定义，则该运算符的计算结果为 true。请参阅政策:policy:`CMP0064`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:42
msgid ""
"The :command:`install(DIRECTORY)` command ``DESTINATION`` option learned "
"to support :manual:`generator expressions <cmake-generator-"
"expressions(7)>`."
msgstr ""
":command:`install(DIRECTORY)` 命令 ``DESTINATION`` 选项学会了支持 "
":manual:`generator expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:45
msgid ""
"The :command:`install(FILES)` command ``DESTINATION`` option learned to "
"support :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":command:`install(FILES)` 命令 ``DESTINATION`` 选项学会了支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:48
msgid "The :command:`string` command learned a new ``APPEND`` subcommand."
msgstr ":command:`string` 命令学习了一个新的 ``APPEND`` 子命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:53
msgid ""
"The :ref:`Makefile Generators` and the :generator:`Ninja` generator "
"learned to add compiler launcher tools like distcc and ccache along with "
"the compiler for ``C`` and ``CXX`` languages.  See the "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variable and "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` target property for details."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` 生成器学会了添加编译器启动器工具，如 distcc "
"和 ccache，以及用于 ``C`` 和 ``CXX`` 语言的编译器。有关详细信息，请参阅 "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量和 "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:59
msgid ""
"New :variable:`CMAKE_LINK_SEARCH_START_STATIC` and "
":variable:`CMAKE_LINK_SEARCH_END_STATIC` variables were introduced to "
"initialize the :prop_tgt:`LINK_SEARCH_START_STATIC` and "
":prop_tgt:`LINK_SEARCH_END_STATIC` target properties, respectively."
msgstr ""
"引入了新的 :variable:`CMAKE_LINK_SEARCH_START_STATIC` 和 "
":variable:`CMAKE_LINK_SEARCH_END_STATIC` 变量来分别初始化 "
":prop_tgt:`LINK_SEARCH_START_STATIC` 和 :prop_tgt:`LINK_SEARCH_END_STATIC` "
"目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:69
msgid ""
":ref:`Visual Studio Generators` learned to support additional target "
"properties to customize projects for NVIDIA Nsight Tegra Visual Studio "
"Edition:"
msgstr ""
":ref:`Visual Studio Generators` 学会了支持额外的目标属性来为 NVIDIA Nsight Tegra Visual "
"Studio Edition 定制项目："

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:73
msgid ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"
msgstr ":prop_tgt:`ANDROID_ANT_ADDITIONAL_OPTIONS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:74
msgid ":prop_tgt:`ANDROID_ARCH`"
msgstr ":prop_tgt:`ANDROID_ARCH`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:75
msgid ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_ASSETS_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:76
msgid ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"
msgstr ":prop_tgt:`ANDROID_JAR_DEPENDENCIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:77
msgid ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_JAR_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:78
msgid ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"
msgstr ":prop_tgt:`ANDROID_JAVA_SOURCE_DIR`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:79
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"
msgstr ":prop_tgt:`ANDROID_NATIVE_LIB_DEPENDENCIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:80
msgid ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"
msgstr ":prop_tgt:`ANDROID_NATIVE_LIB_DIRECTORIES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:81
msgid ":prop_tgt:`ANDROID_PROCESS_MAX`"
msgstr ":prop_tgt:`ANDROID_PROCESS_MAX`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:82
msgid ":prop_tgt:`ANDROID_PROGUARD`"
msgstr ":prop_tgt:`ANDROID_PROGUARD`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:83
msgid ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"
msgstr ":prop_tgt:`ANDROID_PROGUARD_CONFIG_PATH`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:84
msgid ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"
msgstr ":prop_tgt:`ANDROID_SECURE_PROPS_PATH`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:85
msgid ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"
msgstr ":prop_tgt:`ANDROID_SKIP_ANT_STEP`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:86
msgid ":prop_tgt:`ANDROID_STL_TYPE`"
msgstr ":prop_tgt:`ANDROID_STL_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:88
msgid ""
"The :prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`, "
":prop_tgt:`LIBRARY_OUTPUT_DIRECTORY`, and "
":prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` target properties learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`ARCHIVE_OUTPUT_DIRECTORY`、 :prop_tgt:`LIBRARY_OUTPUT_DIRECTORY` "
"和 :prop_tgt:`RUNTIME_OUTPUT_DIRECTORY` 目标属性学会了支持 :manual:`generator "
"expressions <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:93
msgid ""
"The :prop_tgt:`SOURCE_DIR` and :prop_tgt:`BINARY_DIR` target properties "
"were introduced to allow project code to query where a target is defined."
msgstr ""
":prop_tgt:`SOURCE_DIR` 和 :prop_tgt:`BINARY_DIR` 目标属性被引入以允许项目代码查询定义目标的位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:96
msgid ""
"The :prop_tgt:`OUTPUT_NAME` target property and its variants learned to "
"support :manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_tgt:`OUTPUT_NAME` 目标属性及其变体学会了支持 :manual:`generator expressions "
"<cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:99
msgid ""
"A :prop_gbl:`TARGET_MESSAGES` global property was added to tell the "
":ref:`Makefile Generators` whether to generate commands to print output "
"after each target is completed."
msgstr ""
"添加了一个 :prop_gbl:`TARGET_MESSAGES` 全局属性来告诉 :ref:`Makefile Generators` "
"是否生成命令以在每个目标完成后打印输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:103
msgid ""
"On Windows with MS-compatible tools, CMake learned to optionally generate "
"a module definition (``.def``) file for ``SHARED`` libraries. See the "
":prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property."
msgstr ""
"在具有 MS 兼容工具的 Windows 上，CMake "
"学会了为“SHARED”库选择性地生成一个模块定义（“.def”）文件。请参阅 :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS`"
" 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:110
msgid ""
"The :module:`ExternalProject` module :command:`ExternalProject_Add` "
"function ``GIT_SUBMODULES`` option now also limits the set of submodules "
"that are initialized in addition to the prior behavior of limiting the set"
" of submodules that are updated."
msgstr ""
":module:`ExternalProject` 模块 :command:`ExternalProject_Add` 函数 "
"``GIT_SUBMODULES`` 选项现在除了之前限制更新的子模块集的行为之外，还限制了初始化的子模块集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:115
msgid ""
"The :module:`ExternalProject` module learned new ``USES_TERMINAL`` "
"arguments for giving steps exclusive terminal access.  This is useful with"
" the :generator:`Ninja` generator to monitor CMake superbuild progress and"
" prevent CPU oversubscription."
msgstr ""
":module:`ExternalProject` 模块学习了新的 ``USES_TERMINAL`` 参数，用于为步骤提供独占终端访问权限。这对于"
" :generator:`Ninja` 生成器很有用，可以监控 CMake 超级构建进度并防止 CPU 超额订阅。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:120
msgid ""
"The :module:`FindBISON` module ``BISON_TARGET`` macro learned a new "
"``DEFINES_FILE`` option to specify a custom output header to be generated."
msgstr ""
":module:`FindBISON` 模块 ``BISON_TARGET`` 宏学习了一个新的 ``DEFINES_FILE`` "
"选项来指定要生成的自定义输出标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:124
msgid ""
"The :module:`FindHDF5` module learend a new ``HDF5_PREFER_PARALLEL`` "
"option allowing users to specify that a parallel HDF5 tool is preferred if"
" both are available."
msgstr ""
":module:`FindHDF5` 模块学习了一个新的 ``HDF5_PREFER_PARALLEL`` 选项，允许用户指定首选并行 HDF5 "
"工具（如果两者都可用）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:128
msgid "The :module:`FindIce` module now provides imported targets."
msgstr ":module:`FindIce` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:130
msgid ""
"The :module:`FindJava` module learned to optionally find the ``idlj`` and "
"``jarsigner`` tools."
msgstr ":module:`FindJava` 模块学会了选择性地查找 ``idlj`` 和 ``jarsigner`` 工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:133
msgid "The :module:`FindOpenSSL` module now provides imported targets."
msgstr ":module:`FindOpenSSL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:135
msgid ""
"The :module:`FindOpenSSL` module learned a new ``OPENSSL_USE_STATIC_LIBS``"
" option to search only for static libraries."
msgstr ""
":module:`FindOpenSSL` 模块学习了一个新的 ``OPENSSL_USE_STATIC_LIBS`` 选项来仅搜索静态库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:138
msgid ""
"The :module:`FindPkgConfig` learned a new :command:`pkg_get_variable` "
"command which may be used to query for arbitrary variables from a package "
"(such as for related tools or data and plugin install paths)."
msgstr ""
":module:`FindPkgConfig` 学习了一个新的 :command:`pkg_get_variable` "
"命令，可用于查询包中的任意变量（例如相关工具或数据和插件安装路径）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:142
msgid ""
"The :module:`FindProtobuf` module gained a new "
":command:`protobuf_generate_python` function to generate python sources "
"from ``.proto`` files."
msgstr ""
":module:`FindProtobuf` 模块获得了一个新的 :command:`protobuf_generate_python` "
"函数，可以从 `.proto`` 文件生成 Python 源代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:146
msgid ""
"The :module:`FindTIFF` module learned to search separately for debug and "
"release variants."
msgstr ":module:`FindTIFF` 模块学会了分别搜索调试和发布变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:149
msgid ""
"The :module:`FindwxWidgets` module learned to support version requests."
msgstr "FindwxWidgets 模块学会了支持版本请求。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:151
msgid ""
"The :module:`FindXercesC` module learned to search separately for debug "
"and release variants."
msgstr ":module:`FindXercesC` 模块学会了分别搜索调试和发布变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:154
msgid ""
"The :module:`FindZLIB` module learned to search separately for debug and "
"release variants."
msgstr ":module:`FindZLIB` 模块学会了分别搜索调试和发布变体。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:157
msgid ""
"The :module:`GNUInstallDirs` module learned special default values for "
"certain installation prefixes according to the `GNU Coding Standards`_ and"
" the `Filesystem Hierarchy Standard`_."
msgstr ""
":module:`GNUInstallDirs` 模块根据 `GNU 编码标准`_ 和 `文件系统层次结构标准`_ 学习了某些安装前缀的特殊默认值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:161
msgid ""
"The :module:`UseJava` module ``add_jar`` function learned to support "
"response files (e.g. ``@srcs.txt``) for source specification."
msgstr ":module:`UseJava` 模块 ``add_jar`` 函数学会了支持源规范的响应文件（例如 ``@srcs.txt``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:165
msgid ""
"The :module:`UseJava` module ``install_jar`` function learned new "
"``DESTINATION`` and ``COMPONENT`` options to specify the corresponding "
":command:`install` command options."
msgstr ""
":module:`UseJava` 模块 ``install_jar`` 函数学习了新的 ``DESTINATION`` 和 "
"``COMPONENT`` 选项来指定相应的 :command:`install` 命令选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:169
msgid ""
"The :module:`UseJava` module gained a new ``create_javah`` function to "
"create C headers from Java classes."
msgstr ":module:`UseJava` 模块获得了一个新的 ``create_javah`` 函数来从 Java 类创建 C 头文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:178
msgid ""
"A new ``$<SHELL_PATH:...>`` :manual:`generator expression <cmake-"
"generator-expressions(7)>` has been added."
msgstr ""
"添加了一个新的``$<SHELL_PATH:...>``:manual:`generator expression <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:185
msgid ""
"CTest learned to optionally measure the CPU load during parallel testing "
"and avoid starting tests that may cause the load to exceed a given "
"threshold.  See the :manual:`ctest(1)` command ``--test-load`` option, the"
" ``TestLoad`` setting of the :ref:`CTest Test Step`, the "
":variable:`CTEST_TEST_LOAD` variable, and the ``TEST_LOAD`` option of the "
":command:`ctest_test` command."
msgstr ""
"CTest 学会了在并行测试期间有选择地测量 CPU 负载，并避免启动可能导致负载超过给定阈值的测试。请参阅 :manual:`ctest(1)` "
"命令的``--test-load`` 选项、 :ref:`CTest 测试步骤` 的``TestLoad`` "
"设置、 :variable:`CTEST_TEST_LOAD` 变量，和 :command:`ctest_test` 命令的 "
"``TEST_LOAD`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:192
msgid ""
":manual:`ctest(1)` learned options ``--test-output-size-passed`` and "
"``--test-output-size-failed`` to customize the limit on test output size "
"submitted when running as a :ref:`Dashboard Client`."
msgstr ""
":manual:`ctest(1)` 学习选项 ``--test-output-size-passed`` 和 ``--test-output-"
"size-failed`` 来自定义运行时提交的测试输出大小的限制一个 :ref:`仪表板客户端`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:200
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to set package dependencies "
"per component.  See variables:"
msgstr ":cpack_gen:`CPack DEB Generator` 学会了为每个组件设置包依赖性。查看变量："

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:203
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:204
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:205
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:206
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:207
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:208
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:209
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:210
msgid ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS`"
msgstr ":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS`"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:212
msgid "The :module:`CPack` module learned to package empty directories."
msgstr ":module:`CPack` 模块学会了打包空目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:214
msgid ""
"The :module:`CPack` module gained a new setting, "
"``CPACK_VERBATIM_VARIABLES``, which can be used to ensure the cpack "
"program receives the settings' values exactly as they were set, even if "
"they contain CMake-special characters. For compatibility, it's off by "
"default."
msgstr ""
":module:`CPack` 模块获得了一个新设置，``CPACK_VERBATIM_VARIABLES``，可用于确保 cpack "
"程序接收设置的值，即使它们包含 CMake 特殊字符也是如此。为了兼容性，默认情况下它是关闭的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:222
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by GNU C compilers on Windows."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 Windows 上 "
"GNU C 编译器支持的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:225
msgid ""
"CMake learned to honor ``*.manifest`` source files with MSVC tools. "
"Manifest files named as sources of ``.exe`` and ``.dll`` targets will be "
"merged with linker-generated manifests and embedded in the binary."
msgstr ""
"CMake 学会了使用 MSVC 工具来尊重 ``*.manifest`` "
"源文件。命名为“.exe”和“.dll”目标源的清单文件将与链接器生成的清单合并并嵌入到二进制文件中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:230
msgid ""
"The Concurrent Fortran 77 compiler is now supported. Its "
":variable:`compiler id <CMAKE_<LANG>_COMPILER_ID>` is ``CCur``."
msgstr ""
"现在支持 Concurrent Fortran 77 编译器。它的 :variable:`编译器 ID <CMAKE_<LANG>_COMPILER_ID>` 是"
" ``CCur``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:233
msgid ""
":manual:`cmake(1)` gained a new ``--trace-expand`` command line option "
"that is like ``--trace`` but expands variable references in the output."
msgstr ""
":manual:`cmake(1)` 获得了一个新的 ``--trace-expand`` 命令行选项，类似于 ``--trace`` "
"但在输出中扩展了变量引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:239
msgid ""
"The :module:`CMakeExpandImportedTargets` module is now documented as "
"deprecated.  See module documentation for an explanation."
msgstr ":module:`CMakeExpandImportedTargets` 模块现在被记录为已弃用。有关解释，请参阅模块文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:242
msgid ""
"The :variable:`CMAKE_USE_RELATIVE_PATHS` variable no longer has any "
"effect.  Previously it was partially implemented and unreliable."
msgstr ":variable:`CMAKE_USE_RELATIVE_PATHS` 变量不再有任何作用。以前它是部分实现的并且不可靠。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:248
msgid ""
"The :module:`CheckFunctionExists`, :module:`CheckLibraryExists`, "
":module:`CheckSymbolExists`, and :module:`FindThreads` modules learned to "
"work in environments where only CXX is enabled."
msgstr ""
"CheckFunctionExists、CheckLibraryExists、CheckSymbolExists 和 FindThreads "
"模块学会了在仅启用 CXX 的环境中工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:252
msgid ""
"The :cpack_gen:`CPack DEB Generator` now correctly excludes symlinks "
"during package checksum calculation."
msgstr ":cpack_gen:`CPack DEB Generator` 现在可以在包校验和计算期间正确排除符号链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:255
msgid ""
"The :cpack_gen:`CPack DEB Generator` no longer uses fakeroot and system "
"tar program for packaging."
msgstr ":cpack_gen:`CPack DEB Generator` 不再使用 fakeroot 和系统 tar 程序进行打包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:258
msgid ""
"The :module:`CPack` module no longer mangles settings with CMake-special "
"characters when they're used as defaults for other settings. The macro "
"``cpack_set_if_not_set``, which was responsible for this, is now "
"deprecated."
msgstr ""
":module:`CPack` 模块在用作其他设置的默认值时不再使用 CMake "
"特殊字符破坏设置。负责此操作的宏“cpack_set_if_not_set”现已弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:262
msgid ""
"CMake no longer links executables with flags to export symbols unless the "
":prop_tgt:`ENABLE_EXPORTS` target property is set. See policy "
":policy:`CMP0065`."
msgstr ""
"除非设置了 :prop_tgt:`ENABLE_EXPORTS` 目标属性，否则 CMake "
"不再链接带有标志的可执行文件以导出符号。请参阅政策:policy:`CMP0065`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:266
msgid ""
"The ``SONAME`` field is no longer set for ``MODULE`` libraries created "
"with the :command:`add_library` command.  ``MODULE`` libraries are meant "
"for explicit dynamic loading at runtime. They cannot be linked so "
"``SONAME`` is not useful."
msgstr ""
"不再为使用 :command:`add_library` 命令创建的 ``MODULE`` 库设置 ``SONAME`` 字段。 "
"``MODULE`` 库用于在运行时显式动态加载。它们无法链接，因此 ``SONAME`` 没有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.4.rst:271
msgid ""
"The internal :variable:`CMAKE_<LANG>_COMPILE_OBJECT` rule variable now "
"substitutes compiler include flags in a separate ``<INCLUDES>`` "
"placeholder instead of the main ``<FLAGS>`` placeholder."
msgstr ""
"内部 :variable:`CMAKE_<LANG>_COMPILE_OBJECT` 规则变量现在替换编译器包含标志在一个单独的 "
"``<INCLUDES>`` 占位符而不是主要的 ``<FLAGS>`` 占位符。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:2
msgid "CMake 3.5 Release Notes"
msgstr "CMake 3.5 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:8
msgid "Changes made since CMake 3.4 include the following."
msgstr "自 CMake 3.4 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:16
msgid ""
"The :manual:`cmake-gui(1)` gained options to control warnings about "
"deprecated functionality."
msgstr ":manual:`cmake-gui(1)` 获得了控制有关已弃用功能的警告的选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:19
msgid ""
"The :manual:`cmake-gui(1)` learned an option to set the toolset to be used"
" with VS IDE and Xcode generators, much like the existing ``-T`` option to"
" :manual:`cmake(1)`."
msgstr ""
":manual:`cmake-gui(1)` 学习了一个选项来设置工具集以与 VS IDE 和 Xcode 生成器一起使用，很像现有的 ``-T``"
" 选项给 :manual:`cmake(1)` ."

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:23
msgid ""
"The :manual:`cmake-gui(1)` gained a Regular Expression Explorer which may "
"be used to create and evaluate regular expressions in real-time. The "
"explorer window is available via the ``Tools`` menu."
msgstr ""
":manual:`cmake-gui(1)` 获得了一个正则表达式资源管理器，可用于实时创建和评估正则表达式。资源管理器窗口可通过“工具”菜单获得。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:30
msgid ""
"The ``-Wdev`` and ``-Wno-dev`` :manual:`cmake(1)` options now also enable "
"and suppress the deprecated warnings output by default."
msgstr "``-Wdev`` 和 ``-Wno-dev`` :manual:`cmake(1)` 选项现在还默认启用和抑制已弃用的警告输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:33
msgid ""
"The suppression of developer warnings as errors can now be controlled with"
" the new ``-Werror=dev`` and ``-Wno-error=dev`` :manual:`cmake(1)` "
"options."
msgstr ""
"现在可以使用新的 ``-Werror=dev`` 和 ``-Wno-error=dev`` :manual:`cmake(1)` "
"选项来控制将开发人员警告抑制为错误。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:36
msgid ""
"The :manual:`cmake(1)` ``-E`` command-line tools ``copy``, "
"``copy_if_different``, ``copy_directory``, and ``make_directory`` learned "
"to support multiple input files or directories."
msgstr ""
":manual:`cmake(1)` `-E`` 命令行工具 "
"``copy``、``copy_if_different``、``copy_directory`` 和 ``make_directory`` "
"学会了支持多个输入文件或目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:43
msgid ""
"The :command:`cmake_parse_arguments` command is now implemented natively. "
"The :module:`CMakeParseArguments` module remains as an empty placeholder "
"for compatibility."
msgstr ""
":command:`cmake_parse_arguments` 命令现在已本地实现。 :module:`CMakeParseArguments` "
"模块保留为空占位符以实现兼容性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:47
msgid ""
"The :command:`install(DIRECTORY)` command learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>` in the "
"list of directories."
msgstr ""
":command:`install(DIRECTORY)` 命令学会了在目录列表中支持 :manual:`generator expressions"
" <cmake-generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:54
msgid ""
"The :variable:`CMAKE_ERROR_DEPRECATED` variable can now be set using the "
"``-Werror=deprecated`` and ``-Wno-error=deprecated`` :manual:`cmake(1)` "
"options."
msgstr ""
":variable:`CMAKE_ERROR_DEPRECATED` 变量现在可以使用 ``-Werror=deprecated`` 和 "
"``-Wno-error=deprecated`` :manual:`cmake(1)` 选项设置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:58
msgid ""
"The :variable:`CMAKE_WARN_DEPRECATED` variable can now be set using the "
"``-Wdeprecated`` and ``-Wno-deprecated`` :manual:`cmake(1)` options."
msgstr ""
":variable:`CMAKE_WARN_DEPRECATED` 变量现在可以使用 ``-Wdeprecated`` 和 ``-Wno-"
"deprecated`` :manual:`cmake(1)` 选项设置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:64
msgid ""
"The :prop_tgt:`VS_GLOBAL_<variable>` target property is now implemented "
"for VS 2010 and above.  Previously it worked only in VS 2008 and below."
msgstr ""
":prop_tgt:`VS_GLOBAL_<variable>` 目标属性现已为 VS 2010 及更高版本实现。以前它只适用于 VS 2008 "
"及以下版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:70
msgid ""
"The :module:`ExternalProject` module learned a new ``GIT_REMOTE_NAME`` "
"option to control the ``git clone --origin`` value."
msgstr ""
":module:`ExternalProject` 模块学习了一个新的 ``GIT_REMOTE_NAME`` 选项来控制 ``git clone "
"--origin`` 值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:73
msgid ""
"The :module:`FindBoost` module now provides imported targets such as "
"``Boost::boost`` and ``Boost::filesystem``."
msgstr ""
":module:`FindBoost` 模块现在提供导入的目标，例如 ``Boost::boost`` 和 "
"``Boost::filesystem``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:76
msgid ""
"The :module:`FindFLEX` module ``FLEX_TARGET`` macro learned a new "
"``DEFINES_FILE`` option to specify a custom output header to be generated."
msgstr ""
":module:`FindFLEX` 模块 ``FLEX_TARGET`` 宏学习了一个新的 ``DEFINES_FILE`` "
"选项来指定要生成的自定义输出标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:80
msgid "The :module:`FindGTest` module now provides imported targets."
msgstr ":module:`FindGTest` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:82
msgid ""
"The :module:`FindGTK2` module, when ``GTK2_USE_IMPORTED_TARGETS`` is "
"enabled, now sets ``GTK2_LIBRARIES`` to contain the list of imported "
"targets instead of the paths to the libraries.  Moreover it now sets a new"
" ``GTK2_TARGETS`` variable containing all the targets imported."
msgstr ""
":module:`FindGTK2` 模块，当启用 ``GTK2_USE_IMPORTED_TARGETS`` 时，现在将 "
"``GTK2_LIBRARIES`` 设置为包含导入目标的列表，而不是库的路径。此外，它现在设置了一个新的 ``GTK2_TARGETS`` "
"变量，其中包含所有导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:87
msgid "The :module:`FindOpenMP` module learned to support Clang."
msgstr ":module:`FindOpenMP` 模块学会了支持 Clang。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:89
msgid ""
"The :module:`FindOpenSSL` module gained a new ``OPENSSL_MSVC_STATIC_RT`` "
"option to search for libraries using the MSVC static runtime."
msgstr ""
":module:`FindOpenSSL` 模块获得了一个新的 ``OPENSSL_MSVC_STATIC_RT`` 选项来使用 MSVC "
"静态运行时搜索库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:93
msgid "The :module:`FindPNG` module now provides imported targets."
msgstr ":module:`FindPNG` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:95
msgid "The :module:`FindTIFF` module now provides imported targets."
msgstr ":module:`FindTIFF` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:97
msgid ""
"A :module:`FindXalanC` module was introduced to find the Apache Xalan-C++ "
"XSL transform processing library."
msgstr "引入了 FindXalanC 模块来查找 Apache Xalan-C++ XSL 转换处理库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:100
msgid "The :module:`FindXercesC` module now provides imported targets."
msgstr "FindXercesC 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:105
msgid ""
"Support was added for the ARM Compiler (arm.com) with compiler id "
"``ARMCC``."
msgstr "添加了对编译器 ID 为“ARMCC”的 ARM 编译器 (arm.com) 的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:107
msgid ""
"A new platform file for cross-compiling in the Cray Linux Environment to "
"target compute nodes was added.  See :ref:`Cross Compiling for the Cray "
"Linux Environment <Cray Cross-Compile>` for usage details."
msgstr ""
"添加了用于在 Cray Linux 环境中交叉编译目标计算节点的新平台文件。有关使用详细信息，请参阅 :ref:`Cray Linux 环境的交叉编译"
" <Cray 交叉编译>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:112
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by Clang compilers on Windows (MinGW)."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 Windows "
"(MinGW) 上的 Clang 编译器支持的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:115
msgid ""
"When building for embedded Apple platforms like iOS CMake learned to build"
" and install combined targets which contain both a device and a simulator "
"build. This behavior can be enabled by setting the "
":prop_tgt:`IOS_INSTALL_COMBINED` target property."
msgstr ""
"在为 iOS 等嵌入式 Apple 平台构建时，CMake 学会了构建和安装包含设备和模拟器构建的组合目标。可以通过设置 "
"IOS_INSTALL_COMBINED 目标属性来启用此行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:123
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` learned new variable to specify"
" AppleScript file run to customize appearance of ``DragNDrop`` installer "
"folder, including background image setting using supplied PNG or multi-"
"resolution TIFF file. See the :variable:`CPACK_DMG_DS_STORE_SETUP_SCRIPT` "
"and :variable:`CPACK_DMG_BACKGROUND_IMAGE` variables."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 学习了新变量来指定 AppleScript 文件运行以自定义 "
"``DragNDrop`` 安装程序文件夹的外观，包括使用提供的 PNG 或多分辨率 TIFF "
"文件的背景图像设置。请参阅 :variable:`CPACK_DMG_DS_STORE_SETUP_SCRIPT` "
"和 :variable:`CPACK_DMG_BACKGROUND_IMAGE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:130
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to set the optional config "
"file ``Source`` field using a monolithic or per-component variable. See "
":variable:`CPACK_DEBIAN_PACKAGE_SOURCE`."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了使用整体变量或每个组件变量来设置可选配置文件``Source`` "
"字段。请参阅 :variable:`CPACK_DEBIAN_PACKAGE_SOURCE`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:134
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to set Package, Section and "
"Priority control fields per-component. See variables "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION` and "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY`."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了为每个组件设置 Package、Section 和 Priority "
"控制字段。请参阅变量 :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION` "
"和 :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:139
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` learned to add multi-lingual "
"SLAs to a DMG which is presented to the user when they try to mount the "
"DMG.  See the :variable:`CPACK_DMG_SLA_LANGUAGES` and "
":variable:`CPACK_DMG_SLA_DIR` variables for details."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 学会了将多语言 SLA 添加到 DMG，当用户尝试安装 DMG 时，该"
" DMG 会显示给用户。有关详细信息，请参阅 :variable:`CPACK_DMG_SLA_LANGUAGES` "
"和 :variable:`CPACK_DMG_SLA_DIR` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:144
msgid ""
"The :cpack_gen:`CPack NSIS Generator` learned new variables to add bitmaps"
" to the installer. See the "
":variable:`CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP` and "
":variable:`CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP` variables."
msgstr ""
":cpack_gen:`CPack NSIS Generator` "
"学习了新变量以将位图添加到安装程序。请参阅 :variable:`CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP` "
"和 :variable:`CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:149
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to set Name and Group control"
" fields per-component. See :variable:`CPACK_RPM_<component>_PACKAGE_NAME` "
"and :variable:`CPACK_RPM_<component>_PACKAGE_GROUP`."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学会了为每个组件设置名称和组控制字段。请参阅 :variable:`CPACK_RPM_<组件>_PACKAGE_NAME` "
"和 :variable:`CPACK_RPM_<组件>_PACKAGE_GROUP`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:157
msgid ""
"Warnings about deprecated functionality are now enabled by default. They "
"may be suppressed with ``-Wno-deprecated`` or by setting the "
":variable:`CMAKE_WARN_DEPRECATED` variable to false."
msgstr ""
"现在默认启用有关已弃用功能的警告。它们可以通过“-Wno-deprecated”或通过将 CMAKE_WARN_DEPRECATED 变量设置为 "
"false 来抑制。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:164
msgid ""
"The :manual:`cmake(1)` ``-E time`` command now properly passes arguments "
"with spaces or special characters through to the child process.  This may "
"break scripts that worked around the bug with their own extra quoting or "
"escaping."
msgstr ""
":manual:`cmake(1)` ``-E time`` "
"命令现在可以正确地将带有空格或特殊字符的参数传递给子进程。这可能会破坏使用自己的额外引号或转义来解决该错误的脚本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:169
msgid ""
"The :generator:`Xcode` generator was fixed to escape backslashes in "
"strings consistently with other generators.  Projects that previously "
"worked around the inconsistecy with an extra level of backslashes "
"conditioned on the Xcode generator must be updated to remove the "
"workaround for CMake 3.5 and greater."
msgstr ""
":generator:`Xcode` 生成器已修复，以与其他生成器一致地转义字符串中的反斜杠。以前解决了 Xcode "
"生成器上额外级别的反斜杠不一致问题的项目必须更新以删除 CMake 3.5 及更高版本的解决方法。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:178
msgid ""
"The :generator:`Visual Studio 14 2015` generator learned to map the "
"``/debug:fastlink`` linker flag to the ``.vcxproj`` file property."
msgstr ""
":generator:`Visual Studio 14 2015` 生成器学会了将 ``/debug:fastlink`` 链接器标志映射到 "
"``.vcxproj`` 文件属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:181
msgid ""
"The :module:`FindGTK2` module now configures the ``GTK2::sigc++`` imported"
" target to enable c++11 on its dependents when using sigc++ 2.5.1 or "
"higher."
msgstr ""
":module:`FindGTK2` 模块现在配置 ``GTK2::sigc++`` 导入目标，以便在使用 sigc++ 2.5.1 "
"或更高版本时在其依赖项上启用 c++11。"

#: ../../cmake-prefix/src/cmake/Help/release/3.5.rst:184
msgid ""
"The precompiled Windows binary provided on ``cmake.org`` is now a ``.msi``"
" package instead of an installer executable.  One may need to manually "
"uninstall CMake versions lower than 3.5 before installing the new package."
msgstr ""
"``cmake.org`` 上提供的预编译 Windows 二进制文件现在是 ``.msi`` "
"包，而不是安装程序可执行文件。在安装新包之前，可能需要手动卸载低于 3.5 的 CMake 版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:2
msgid "CMake 3.6 Release Notes"
msgstr "CMake 3.6 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:8
msgid "Changes made since CMake 3.5 include the following."
msgstr "自 CMake 3.5 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:16
msgid ""
"The :generator:`Ninja` generator learned to produce phony targets of the "
"form ``sub/dir/all`` to drive the build of a subdirectory. This is "
"equivalent to ``cd sub/dir; make all`` with :ref:`Makefile Generators`."
msgstr ""
":generator:`Ninja` 生成器学会了生成 ``sub/dir/all`` 形式的虚假目标来驱动子目录的构建。这相当于``cd "
"sub/dir;使用 :ref:`Makefile Generators` 制作所有``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:21
msgid ""
"The :generator:`Ninja` generator now includes system header files in build"
" dependencies to ensure correct re-builds when system packages are "
"updated."
msgstr ":generator:`Ninja` 生成器现在在构建依赖项中包含系统头文件，以确保在更新系统包时正确重新构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:24
msgid ""
"The :generator:`Visual Studio 14 2015` generator learned to support the "
"Clang/C2 toolsets, e.g. with the ``-T v140_clang_3_7`` option. This "
"feature is experimental."
msgstr ""
":generator:`Visual Studio 14 2015` 生成器学会了支持 Clang/C2 工具集，例如使用“-T "
"v140_clang_3_7”选项。此功能是实验性的。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:31
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands learned how to use the :prop_tgt:`CROSSCOMPILING_EMULATOR` "
"executable target property."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令学习了如何使用 "
":prop_tgt:`CROSSCOMPILING_EMULATOR` 可执行目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:35
msgid ""
"The :command:`install` command learned a new ``EXCLUDE_FROM_ALL`` option "
"to leave installation rules out of the default installation."
msgstr ""
":command:`install` 命令学习了一个新的 ``EXCLUDE_FROM_ALL`` 选项，将安装规则排除在默认安装之外。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:38
msgid ""
"The :command:`list` command gained a ``FILTER`` sub-command to filter list"
" elements by regular expression."
msgstr ":command:`list` 命令获得了一个 ``FILTER`` 子命令以通过正则表达式过滤列表元素。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:41
#, python-format
msgid ""
"The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands "
"gained support for the ``%s`` placeholder.  This is the number of seconds "
"since the UNIX Epoch."
msgstr ""
":command:`string(TIMESTAMP)` 和 :command:`file(TIMESTAMP)` 命令获得了对 `%s`` "
"占位符的支持。这是自 UNIX 纪元以来的秒数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:48
msgid ""
"A :variable:`CMAKE_DEPENDS_IN_PROJECT_ONLY` variable was introduced to "
"tell :ref:`Makefile Generators` to limit dependency scanning only to files"
" in the project source and build trees."
msgstr ""
"引入了一个 :variable:`CMAKE_DEPENDS_IN_PROJECT_ONLY` 变量来告诉 :ref:`Makefile "
"Generators` 将依赖项扫描限制在项目源代码和构建树中的文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:52
msgid ""
"A new :variable:`CMAKE_HOST_SOLARIS` variable was introduced to indicate "
"when CMake is running on an Oracle Solaris host."
msgstr ""
"引入了一个新的 :variable:`CMAKE_HOST_SOLARIS` 变量来指示 CMake 何时在 Oracle Solaris "
"主机上运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:55
msgid ""
"A :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES` variable was added"
" for use by toolchain files to specify system include directories to be "
"appended to all compiler command lines."
msgstr ""
"添加了一个 :variable:`CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES` "
"变量供工具链文件使用，以指定要附加到所有编译器命令行的系统包含目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:59
msgid ""
"The :variable:`CMAKE_<LANG>_STANDARD_LIBRARIES` variable is now "
"documented. It is intended for use by toolchain files to specify system "
"libraries to be added to all linker command lines."
msgstr ""
":variable:`CMAKE_<LANG>_STANDARD_LIBRARIES` "
"变量现已记录在案。它旨在供工具链文件使用，以指定要添加到所有链接器命令行的系统库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:63
msgid ""
"A :variable:`CMAKE_NINJA_OUTPUT_PATH_PREFIX` variable was introduced to "
"tell the :generator:`Ninja` generator to configure the generated "
"``build.ninja`` file for use as a ``subninja``."
msgstr ""
"一个 :variable:`CMAKE_NINJA_OUTPUT_PATH_PREFIX` 变量被引入来告诉 :generator:`Ninja` "
"生成器配置生成的 ``build.ninja`` 文件以用作 ``subninja``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:67
msgid ""
"A :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` variable was added for "
"use by toolchain files to specify platform-specific variables that must be"
" propagated by the :command:`try_compile` command into test projects."
msgstr ""
"添加了 :variable:`CMAKE_TRY_COMPILE_PLATFORM_VARIABLES` "
"变量供工具链文件使用，以指定特定于平台的变量，这些变量必须通过 :command:`try_compile` 命令传播到测试项目中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:72
msgid ""
"A :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable was added to "
"optionally tell the :command:`try_compile` command to build a static "
"library instead of an executable.  This is useful for cross-compiling "
"toolchains that cannot link binaries without custom flags or scripts."
msgstr ""
"添加了 :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` 变量，以选择性地告诉 "
":command:`try_compile` "
"命令构建静态库而不是可执行文件。这对于无法在没有自定义标志或脚本的情况下链接二进制文件的交叉编译工具链很有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:81
msgid ""
"A :prop_tgt:`DEPLOYMENT_REMOTE_DIRECTORY` target property was introduced "
"to tell the :generator:`Visual Studio 9 2008` and :generator:`Visual "
"Studio 8 2005` generators to generate the \"remote directory\" for WinCE "
"project deployment and debugger settings."
msgstr ""
":prop_tgt:`DEPLOYMENT_REMOTE_DIRECTORY` 目标属性被引入来告诉 :generator:`Visual "
"Studio 9 2008` 和 :generator:`Visual Studio 8 2005` 生成器为 WinCE "
"项目部署和调试器设置生成“远程目录”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:86
msgid ""
"A :prop_tgt:`<LANG>_CLANG_TIDY` target property and supporting "
":variable:`CMAKE_<LANG>_CLANG_TIDY` variable were introduced to tell the "
":ref:`Makefile Generators` and the :generator:`Ninja` generator to run "
"``clang-tidy`` along with the compiler for ``C`` and ``CXX`` languages."
msgstr ""
":prop_tgt:`<LANG>_CLANG_TIDY` 目标属性和支持 :variable:`CMAKE_<LANG>_CLANG_TIDY` "
"变量被引入来告诉 :ref:`Makefile Generators` 和 :generator:`Ninja` 生成器运行 `` clang-"
"tidy`` 以及用于 ``C`` 和 ``CXX`` 语言的编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:91
msgid ""
"A :prop_test:`TIMEOUT_AFTER_MATCH` test property was introduced to "
"optionally tell CTest to enforce a secondary timeout after matching "
"certain output from a test."
msgstr ""
"引入了 :prop_test:`TIMEOUT_AFTER_MATCH` 测试属性，以选择性地告诉 CTest "
"在匹配测试的某些输出后强制执行辅助超时。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:95
msgid ""
"A :prop_tgt:`VS_CONFIGURATION_TYPE` target property was introduced to "
"specify a custom project file type for :ref:`Visual Studio Generators` "
"supporting VS 2010 and above."
msgstr ""
":prop_tgt:`VS_CONFIGURATION_TYPE` 目标属性被引入来为支持 VS 2010 及更高版本的 :ref:`Visual "
"Studio Generators 指定自定义项目文件类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:99
msgid ""
"A :prop_dir:`VS_STARTUP_PROJECT` directory property was introduced to "
"specify for :ref:`Visual Studio Generators` the default startup project "
"for generated solutions (``.sln`` files)."
msgstr ""
":prop_dir:`VS_STARTUP_PROJECT` 目录属性被引入以指定 :ref:`Visual Studio Generators` "
"生成的解决方案（``.sln`` 文件）的默认启动项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:106
msgid ""
"The :module:`CMakePushCheckState` module now pushes/pops/resets the "
"variable ``CMAKE_EXTRA_INCLUDE_FILE`` used in :module:`CheckTypeSize`."
msgstr ""
":module:`CMakePushCheckState` 模块现在推送/弹出/重置变量 ``CMAKE_EXTRA_INCLUDE_FILE`` "
"在 :module:`CheckTypeSize` 中使用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:109
msgid ""
"The :module:`ExternalProject` module leared the ``GIT_SHALLOW 1`` option "
"to perform a shallow clone of a Git repository."
msgstr ""
":module:`ExternalProject` 模块学习了 ``GIT_SHALLOW 1`` 选项来执行 Git 存储库的浅克隆。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:112
msgid ""
"The :module:`ExternalProject` module learned to initialize Git submodules "
"recursively and also to initialize new submodules on updates.  Use the "
"``GIT_SUBMODULES`` option to restrict which submodules are initialized and"
" updated."
msgstr ""
":module:`ExternalProject` 模块学会了递归地初始化 Git 子模块，并在更新时初始化新的子模块。使用 "
"``GIT_SUBMODULES`` 选项来限制哪些子模块被初始化和更新。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:117
msgid ""
"The :module:`ExternalProject` module leared the ``DOWNLOAD_NO_EXTRACT 1`` "
"argument to skip extracting the file that is downloaded (e.g., for self-"
"extracting shell installers or ``.msi`` files)."
msgstr ""
":module:`ExternalProject` 模块学习了 ``DOWNLOAD_NO_EXTRACT 1`` "
"参数以跳过解压下载的文件（例如，对于自解压 shell 安装程序或 ``.msi`` 文件）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:121
msgid ""
"The :module:`ExternalProject` module now uses ``TLS_VERIFY`` when fetching"
" from git repositories."
msgstr ":module:`ExternalProject` 模块现在在从 git 存储库中获取数据时使用 ``TLS_VERIFY``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:124
msgid ""
"The :module:`FindBLAS` and :module:`FindLAPACK` modules learned to support"
" `OpenBLAS <http://www.openblas.net>`__."
msgstr ""
":module:`FindBLAS` 和 :module:`FindLAPACK` 模块学会了支持 `OpenBLAS "
"<http://www.openblas.net>`__。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:127
msgid ""
"The :module:`FindCUDA` module learned to find the ``cublas_device`` "
"library."
msgstr ":module:`FindCUDA` 模块学会了查找 ``cublas_device`` 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:129
msgid ""
"The :module:`FindGTest` module ``gtest_add_tests`` function now causes "
"CMake to automatically re-run when test sources change so that they can be"
" re-scanned."
msgstr ""
":module:`FindGTest` 模块``gtest_add_tests`` 函数现在会导致 CMake "
"在测试源更改时自动重新运行，以便可以重新扫描它们。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:133
msgid ""
"The :module:`FindLTTngUST` module was introduced to find the LTTng-UST "
"library."
msgstr ":module:`FindLTTngUST` 模块被引入以查找 LTTng-UST 库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:136
msgid ""
"The :module:`FindPkgConfig` module learned to optionally create imported "
"targets for the libraries it has found."
msgstr ":module:`FindPkgConfig` 模块学会了有选择地为它找到的库创建导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:139
msgid ""
"The :module:`FindProtobuf` module learned to provide a "
"``Protobuf_VERSION`` variable and check the version number requested in a "
":command:`find_package` call."
msgstr ""
":module:`FindProtobuf` 模块学会了提供一个 ``Protobuf_VERSION`` 变量并检查 "
":command:`find_package` 调用中请求的版本号。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:143
msgid ""
"The :module:`InstallRequiredSystemLibraries` module learned a new "
"``CMAKE_INSTALL_UCRT_LIBRARIES`` option to enable app-local deployment of "
"the Windows Universal CRT libraries with Visual Studio 2015."
msgstr ""
":module:`InstallRequiredSystemLibraries` 模块学习了一个新的 "
"``CMAKE_INSTALL_UCRT_LIBRARIES`` 选项，以使用 Visual Studio 2015 启用 Windows 通用 "
"CRT 库的应用程序本地部署。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:150
msgid "The Clang compiler is now supported on CYGWIN."
msgstr "CYGWIN 现在支持 Clang 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:152
msgid ""
"Support was added for the Bruce C Compiler with compiler id ``Bruce``."
msgstr "添加了对编译器 ID 为“Bruce”的 Bruce C 编译器的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:157
msgid ""
"The :command:`ctest_update` command now looks at the "
":variable:`CTEST_GIT_INIT_SUBMODULES` variable to determine whether "
"submodules should be updated or not before updating."
msgstr ""
":command:`ctest_update` 命令现在查看 :variable:`CTEST_GIT_INIT_SUBMODULES` "
"变量以确定在更新之前是否应该更新子模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:161
msgid ""
"The :command:`ctest_update` command will now synchronize submodules on an "
"update. Updates which add submodules or change a submodule's URL will now "
"be pulled properly."
msgstr ":command:`ctest_update` 命令现在将在更新时同步子模块。添加子模块或更改子模块 URL 的更新现在将被正确提取。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:168
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to handle ``$ORIGIN`` in "
"``CMAKE_INSTALL_RPATH`` when :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` is"
" used for dependency auto detection."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了如何在 `CMAKE_INSTALL_RPATH`` 中处理 "
"``$ORIGIN`` 当 CPACK_DEBIAN_PACKAGE_SHLIBDEPS 用于依赖自动检测时。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:172
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to generate "
"``DEBIAN/shlibs`` control file when package contains shared libraries."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学习了当包包含共享库时如何生成 ``DEBIAN/shlibs`` 控制文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:175
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to generate "
"``DEBIAN/postinst`` and ``DEBIAN/postrm`` files if the package installs "
"libraries in ldconfig-controlled locations (e.g. ``/lib/``, "
"``/usr/lib/``)."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学会了如何生成 ``DEBIAN/postinst`` 和 "
"``DEBIAN/postrm`` 文件，前提是软件包将库安装在 ldconfig 控制的位置（例如 ``/lib/``、` "
"`/usr/lib/``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:179
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to generate dependencies "
"between Debian packages if multi-component setup is used and "
":variable:`CPACK_COMPONENT_<compName>_DEPENDS` variables are set. For "
"backward compatibility this feature is disabled by default. See "
":variable:`CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS`."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学习了如果使用多组件设置并设置了 "
":variable:`CPACK_COMPONENT_<compName>_DEPENDS` 变量，如何在 Debian "
"包之间生成依赖关系。为了向后兼容，默认情况下禁用此功能。请参阅 :variable:`CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:185
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to set custom package "
"file names including how to generate properly-named Debian packages::"
msgstr ""
":cpack_gen:`CPack DEB Generator` 学习了如何设置自定义包文件名，包括如何生成正确命名的 Debian 包 ::"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:190
msgid ""
"For backward compatibility this feature is disabled by default. See "
":variable:`CPACK_DEBIAN_FILE_NAME` and "
":variable:`CPACK_DEBIAN_<COMPONENT>_FILE_NAME`."
msgstr ""
"为了向后兼容，默认情况下禁用此功能。请参阅 :variable:`CPACK_DEBIAN_FILE_NAME` "
"和 :variable:`CPACK_DEBIAN_<COMPONENT>_FILE_NAME`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:194
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to set the package "
"release number (``DebianRevisionNumber`` in package file name when used in"
" combination with ``DEB-DEFAULT`` value set by "
":variable:`CPACK_DEBIAN_FILE_NAME`). See "
":variable:`CPACK_DEBIAN_PACKAGE_RELEASE`."
msgstr ""
":cpack_gen:`CPack DEB Generator` 学习了如何设置包版本号（包文件名中的 "
"``DebianRevisionNumber`` 与 :variable:`CPACK_DEBIAN_FILE_NAME` 设置的 ``DEB-"
"DEFAULT`` 值结合使用）。请参阅 :variable:`CPACK_DEBIAN_PACKAGE_RELEASE`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:200
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned how to set the package "
"architecture per-component. See "
":variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE`."
msgstr ""
":cpack_gen:`CPack DEB Generator` "
"学习了如何为每个组件设置包架构。请参阅 :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:204
msgid ""
"The :cpack_gen:`CPack DragNDrop Generator` learned a new option to skip "
"the ``/Applications`` symlink. See the "
":variable:`CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK` variable."
msgstr ""
":cpack_gen:`CPack DragNDrop Generator` 学习了一个新选项来跳过 ``/Applications`` "
"符号链接。请参阅 :variable:`CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:208
msgid ""
"The :module:`CPackIFW` module gained a new "
":command:`cpack_ifw_update_repository` command to update a QtIFW-specific "
"repository from a remote repository."
msgstr ""
":module:`CPackIFW` 模块获得了一个新的 :command:`cpack_ifw_update_repository` "
"命令来从远程存储库更新特定于 QtIFW 的存储库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:212
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned how to set RPM ``dist`` tag "
"as part of RPM ``Release:`` tag when enabled (mandatory on some Linux "
"distributions for e.g. on Fedora). See "
":variable:`CPACK_RPM_PACKAGE_RELEASE_DIST`."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学习了如何在启用时将 RPM ``dist`` 标签设置为 RPM "
"``Release:`` 标签的一部分（在某些 Linux 发行版上是强制性的，例如在 Fedora "
"上）。请参阅 :variable:`CPACK_RPM_PACKAGE_RELEASE_DIST`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:217
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned how to set default values for"
" owning user/group and file/directory permissions of package content. See "
":variable:`CPACK_RPM_DEFAULT_USER`, :variable:`CPACK_RPM_DEFAULT_GROUP`, "
":variable:`CPACK_RPM_DEFAULT_FILE_PERMISSIONS`, "
":variable:`CPACK_RPM_DEFAULT_DIR_PERMISSIONS` and their per component "
"counterparts."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学习了如何为拥有包内容的用户/组和文件/目录权限设置默认值。请参阅 :variable:`CPACK_RPM_DEFAULT_USER`、 :variable:`CPACK_RPM_DEFAULT_GROUP`、 :variable:`CPACK_RPM_DEFAULT_FILE_PERMISSIONS`、 :variable:`CPACK_RPM_DEFAULT_DIR_PERMISSIONS`"
" 及其每个组件对应项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:224
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned how to set user defined "
"package file names, how to specify that rpmbuild should decide on file "
"name format as well as handling of multiple rpm packages generated by a "
"single user defined spec file. See :variable:`CPACK_RPM_PACKAGE_NAME` and "
":variable:`CPACK_RPM_<component>_PACKAGE_NAME`."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学习了如何设置用户定义的包文件名，如何指定 rpmbuild "
"应该决定文件名格式以及处理由单个用户定义的规范文件生成的多个 rpm 包。请参阅 :variable:`CPACK_RPM_PACKAGE_NAME` "
"和 :variable:`CPACK_RPM_<component>_PACKAGE_NAME`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:231
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned how to correctly handle "
"symlinks that are pointing outside generated packages."
msgstr ":cpack_gen:`CPack RPM Generator` 学会了如何正确处理指向生成包外部的符号链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:237
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by Intel C++ compilers versions 12.1 "
"through 16.0 on UNIX platforms."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 UNIX "
"平台上英特尔 C++ 编译器版本 12.1 到 16.0 支持的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:244
msgid ""
"The :module:`CMakeForceCompiler` module and its macros are now deprecated."
" See module documentation for an explanation."
msgstr ":module:`CMakeForceCompiler` 模块及其宏现已弃用。有关解释，请参阅模块文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:247
msgid ""
"The :command:`find_library`, :command:`find_path`, and "
":command:`find_file` commands no longer search in installation prefixes "
"derived from the ``PATH`` environment variable on non-Windows platforms.  "
"This behavior was added in CMake 3.3 to support Windows hosts but has "
"proven problematic on UNIX hosts. Users that keep some ``<prefix>/bin`` "
"directories in the ``PATH`` just for their tools do not necessarily want "
"any supporting ``<prefix>/lib`` directories searched.  One may set the "
"``CMAKE_PREFIX_PATH`` environment variable with a :ref:`semicolon-"
"separated list <CMake Language Lists>` of prefixes that are to be "
"searched."
msgstr ""
":command:`find_library`、 :command:`find_path` 和 :command:`find_file` 命令不再在非"
" Windows 平台上搜索源自 ``PATH`` 环境变量的安装前缀。此行为已添加到 CMake 3.3 中以支持 Windows "
"主机，但已证明在 UNIX 主机上存在问题。在 ``PATH`` 中保留一些``<prefix>/bin`` "
"目录只是为了他们的工具的用户不一定希望搜索任何支持的``<prefix>/lib`` 目录。可以使用要搜索的前缀的 :ref: 分号分隔列表 "
"<CMake Language Lists> 来设置 CMAKE_PREFIX_PATH 环境变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:257
msgid ""
"The :generator:`Visual Studio 7 .NET 2003` generator is now deprecated and"
" will be removed in a future version of CMake."
msgstr ":generator:`Visual Studio 7 .NET 2003` 生成器现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:260
msgid ""
"The :generator:`Visual Studio 7` generator (for VS .NET 2002) has been "
"removed.  It had been deprecated since CMake 3.3."
msgstr ""
":generator:`Visual Studio 7` 生成器（用于 VS .NET 2002）已被删除。自 CMake 3.3 "
"以来，它已被弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:263
msgid ""
"The :generator:`Visual Studio 6` generator has been removed. It had been "
"deprecated since CMake 3.3."
msgstr ":generator:`Visual Studio 6` 生成器已被删除。自 CMake 3.3 以来，它已被弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:269
msgid ""
"The precompiled OS X binary provided on ``cmake.org`` now requires OS X "
"10.7 or newer."
msgstr "``cmake.org`` 上提供的预编译 OS X 二进制文件现在需要 OS X 10.7 或更新版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:272
msgid ""
"On Linux and FreeBSD platforms, when building CMake itself from source and"
" not using a system-provided libcurl, OpenSSL is now used by default if it"
" is found on the system.  This enables SSL/TLS support for commands "
"supporting network communication via ``https``, such as "
":command:`file(DOWNLOAD)`, :command:`file(UPLOAD)`, and "
":command:`ctest_submit`."
msgstr ""
"在 Linux 和 FreeBSD 平台上，当从源代码构建 CMake 本身而不使用系统提供的 libcurl 时，如果在系统上找到 "
"OpenSSL，现在默认使用它。这使 SSL/TLS 支持通过 ``https`` "
"支持网络通信的命令，例如 :command:`文件（下载）`、 :command:`文件（上传）` 和 :command:`ctest_submit`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:278
msgid ""
"The :manual:`cmake(1)` ``--build`` command-line tool now rejects multiple "
"``--target`` options with an error instead of silently ignoring all but "
"the last one."
msgstr ""
":manual:`cmake(1)` ``--build`` 命令行工具现在拒绝带有错误的多个 ``--target`` "
"选项，而不是默默地忽略除最后一个以外的所有选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:282
msgid ""
":prop_tgt:`AUTOMOC` now diagnoses name collisions when multiple source "
"files in different directories use ``#include <moc_foo.cpp>`` with the "
"same name (because the generated ``moc_foo.cpp`` files would collide)."
msgstr ""
":prop_tgt:`AUTOMOC` 现在可以在不同目录中的多个源文件使用具有相同名称的``#include <moc_foo.cpp>`` "
"时诊断名称冲突（因为生成的``moc_foo.cpp`` 文件会发生冲突）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:286
msgid ""
"The :module:`FindBISON` module ``BISON_TARGET`` macro now supports special"
" characters by passing the ``VERBATIM`` option to internal "
":command:`add_custom_command` calls.  This may break clients that added "
"escaping manually to work around the bug."
msgstr ""
":module:`FindBISON` 模块 ``BISON_TARGET`` 宏现在通过将 ``VERBATIM`` 选项传递给内部 "
":command:`add_custom_command` 调用来支持特殊字符。这可能会破坏手动添加转义以解决该错误的客户端。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:291
msgid ""
"The :module:`FindFLEX` module ``FLEX_TARGET`` macro now supports special "
"characters by passing the ``VERBATIM`` option to internal "
":command:`add_custom_command` calls.  This may break clients that added "
"escaping manually to work around the bug."
msgstr ""
"FindFLEX 模块 FLEX_TARGET 宏现在通过将 VERBATIM 选项传递给内部 add_custom_command "
"调用来支持特殊字符。这可能会破坏手动添加转义以解决该错误的客户端。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:296
msgid ""
"The :module:`FindProtobuf` module input and output variables were all "
"renamed from ``PROTOBUF_`` to ``Protobuf_`` for consistency with other "
"find modules. Input variables of the old case will be honored if provided,"
" and output variables of the old case are always provided."
msgstr ""
":module:`FindProtobuf` 模块输入和输出变量全部从 ``PROTOBUF_`` 重命名为 ``Protobuf_`` "
"以与其他查找模块保持一致。如果提供旧案例的输入变量，则将得到尊重，并且始终提供旧案例的输出变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:301
msgid ""
"The :cpack_gen:`CPack RPM Generator` now supports upper cased component "
"names in per component CPackRPM specific variables. E.g. component named "
"``foo`` now expects component specific variable to be "
"``CPACK_RPM_FOO_PACKAGE_NAME`` while before it expected "
"``CPACK_RPM_foo_PACKAGE_NAME``. Upper cased component name part in "
"variables is compatible with convention used for other CPack variables. "
"For back compatibility old format of variables is still valid and "
"preferred if both versions of variable are set, but the preferred future "
"use is upper cased component names in variables. New variables that will "
"be added to CPackRPM in later versions will only support upper cased "
"component variable format."
msgstr ""
":cpack_gen:`CPack RPM Generator` 现在支持每个组件 CPackRPM "
"特定变量中的大写组件名称。例如。名为“foo”的组件现在期望组件特定变量为“CPACK_RPM_FOO_PACKAGE_NAME”，而之前它期望“CPACK_RPM_foo_PACKAGE_NAME”。变量中的大写组件名称部分与用于其他"
" CPack "
"变量的约定兼容。为了向后兼容，如果设置了两个版本的变量，则旧格式的变量仍然有效并且是首选，但未来首选使用的是变量中的大写组件名称。后续版本将添加到 "
"CPackRPM 的新变量将仅支持大写组件变量格式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.6.rst:314
msgid ""
"The CPack NSIS generator's configuration file template was fixed to quote "
"the path to the uninstaller tool used by the "
":variable:`CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL` option. This avoids"
" depending on an insecure Windows feature to run an uninstaller tool with "
"a space in the path."
msgstr ""
"CPack NSIS 生成器的配置文件模板已修复，以引用 "
":variable:`CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL` "
"选项使用的卸载程序工具的路径。这避免了依赖于不安全的 Windows 功能来运行路径中带有空格的卸载程序工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:2
msgid "CMake 3.7 Release Notes"
msgstr "CMake 3.7 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:8
msgid "Changes made since CMake 3.6 include the following."
msgstr "自 CMake 3.6 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:16
msgid ""
"CMake now supports :ref:`Cross Compiling for Android` with simple "
"toolchain files."
msgstr "CMake 现在支持 :ref:`Cross Compiling for Android` 和简单的工具链文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:19
msgid "The Clang compiler is now supported on AIX."
msgstr "AIX 现在支持 Clang 编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:24
msgid ""
"The :generator:`Ninja` generator learned to conditionally support Fortran "
"when using a ``ninja`` tool that has the necessary features. See generator"
" documentation for details."
msgstr ""
":generator:`Ninja` 生成器学会了在使用具有必要功能的 ``ninja`` 工具时有条件地支持 "
"Fortran。有关详细信息，请参阅生成器文档。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:28
msgid ""
"The :generator:`Ninja` generator learned to produce phony targets of the "
"form ``sub/dir/{test,install,package}`` to drive the build of a "
"subdirectory installation, test or packaging target. This is equivalent to"
" ``cd sub/dir; make {test,install,package}`` with :ref:`Makefile "
"Generators`."
msgstr ""
":generator:`Ninja` 生成器学会了生成 ``sub/dir/{test,install,package}`` "
"形式的虚假目标，以驱动子目录安装、测试或打包目标的构建。这相当于``cd sub/dir;使用 Makefile Generators 制作 "
"{test,install,package}``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:34
msgid ""
"The :generator:`Visual Studio 15 2017` generator was added.  This is "
"experimental and based on \"Visual Studio 2017 RC\" because this version "
"of VS has not been released."
msgstr ""
"添加了 :generator:`Visual Studio 15 2017` 生成器。这是实验性的，基于“Visual Studio 2017 "
"RC”，因为这个版本的 VS 还没有发布。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:38
msgid ""
":ref:`Visual Studio Generators` for VS 2010 and above learned to place "
"``.natvis`` source files into VS project files properly."
msgstr ""
":ref: VS 2010 及更高版本的 Visual Studio Generators 学会了将 .natvis 源文件正确放置到 VS "
"项目文件中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:41
msgid ""
"The :generator:`Xcode` generator's rudimentary Swift language support "
"learned to honor a new :variable:`CMAKE_Swift_LANGUAGE_VERSION` variable "
"to tell Xcode what version of Swift is used by the source."
msgstr ""
":generator:`Xcode` 生成器的基本 Swift "
"语言支持学会了遵守一个新的 :variable:`CMAKE_Swift_LANGUAGE_VERSION` 变量来告诉 Xcode 源使用的 "
"Swift 版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:45
msgid ""
"The :generator:`CodeLite` generator gained a new "
":variable:`CMAKE_CODELITE_USE_TARGETS` option to change project creation "
"from projects to targets."
msgstr ""
":generator:`CodeLite` 生成器获得了一个新的 :variable:`CMAKE_CODELITE_USE_TARGETS` "
"选项，可以将项目创建从项目更改为目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:52
msgid ""
"The :command:`add_custom_command` command gained a new ``DEPFILE`` option "
"that works with the :generator:`Ninja` generator to provide implicit "
"dependency information to the build tool."
msgstr ""
":command:`add_custom_command` 命令获得了一个新的 ``DEPFILE`` 选项，该选项与 "
":generator:`Ninja` 生成器一起为构建工具提供隐式依赖信息。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:56
msgid ""
"The :command:`cmake_parse_arguments` command gained a new ``PARSE_ARGV`` "
"mode to read arguments directly from ``ARGC`` and ``ARGV#`` variables "
"inside a :command:`function` body."
msgstr ""
":command:`cmake_parse_arguments` 命令获得了一个新的 ``PARSE_ARGV`` 模式，可以直接从 "
":command:`function` 体内的 ``ARGC`` 和 ``ARGV#`` 变量中读取参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:60
msgid ""
"The :command:`export` command gained an ``ANDROID_MK`` option to generate "
"``Android.mk`` files referencing CMake-built libraries as prebuilts for "
"the Android NDK build system."
msgstr ""
":command:`export` 命令获得了一个 ``ANDROID_MK`` 选项来生成 ``Android.mk`` 文件引用 CMake "
"构建的库作为 Android NDK 构建系统的预构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:64
msgid ""
"The :command:`file(DOWNLOAD)` and :command:`file(UPLOAD)` commands gained "
"``HTTPHEADER <HTTP-header>`` and ``USERPWD <username>:<password>`` "
"options."
msgstr ""
":command:`file(DOWNLOAD)` 和 :command:`file(UPLOAD)` 命令获得了 ``HTTPHEADER "
"<HTTP-header>`` 和 ``USERPWD <username>:<password>`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:67
msgid ""
"The :command:`find_library` and :command:`find_package` commands learned "
"to search in ``lib32/`` directories when the build targets a 32-bit "
"architecture.  See the :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS` global "
"property."
msgstr ""
"当构建目标为 32 位架构时， :command:`find_library` 和 :command:`find_package` 命令学会了在 "
"``lib32/`` 目录中搜索。请参阅 :prop_gbl:`FIND_LIBRARY_USE_LIB32_PATHS` 全局属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:72
msgid ""
"The :command:`find_package` command gained the possibility of sorting "
"compatible libraries by ``NAME`` or by ``NATURAL`` sorting by setting the "
"two new variables :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` and "
":variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION`."
msgstr ""
"find_package 命令通过设置两个新变量 CMAKE_FIND_PACKAGE_SORT_ORDER 和 "
"CMAKE_FIND_PACKAGE_SORT_DIRECTION 获得了按 NAME 或 NATURAL 排序兼容库的可能性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:77
msgid ""
"The :command:`if` command gained new boolean comparison operations "
"``LESS_EQUAL``, ``GREATER_EQUAL``, ``STRLESS_EQUAL``, "
"``STRGREATER_EQUAL``, ``VERSION_LESS_EQUAL``, and "
"``VERSION_GREATER_EQUAL``."
msgstr ""
":command:`if` 命令获得了新的布尔比较操作 "
"``LESS_EQUAL``、``GREATER_EQUAL``、``STRLESS_EQUAL``、``STRGREATER_EQUAL``、``VERSION_LESS_EQUAL``"
" 和 ``VERSION_GREATER_EQUAL``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:81
msgid ""
"The :command:`install` command gained an ``EXPORT_ANDROID_MK`` subcommand "
"to install ``Android.mk`` files referencing installed libraries as "
"prebuilts for the Android NDK build system."
msgstr ""
":command:`install` 命令获得了一个 ``EXPORT_ANDROID_MK`` 子命令来安装 ``Android.mk`` "
"文件，这些文件引用已安装的库作为 Android NDK 构建系统的预构建。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:85
msgid ""
"The :command:`string(TIMESTAMP)` and :command:`file(TIMESTAMP)` commands "
"gained support for the ``%a`` and ``%b`` placeholders. These are the "
"abbreviated weekday and month names."
msgstr ""
":command:`string(TIMESTAMP)` 和 :command:`file(TIMESTAMP)` 命令获得了对 ``%a`` 和 "
"``%b`` 占位符的支持。这些是缩写的工作日和月份名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:89
msgid ""
"The :command:`try_compile` command source file signature now honors "
"configuration-specific flags (e.g. :variable:`CMAKE_<LANG>_FLAGS_DEBUG`) "
"in the generated test project.  Previously only the default such flags for"
" the current toolchain were used.  See policy :policy:`CMP0066`."
msgstr ""
":command:`try_compile` "
"命令源文件签名现在支持生成的测试项目中特定于配置的标志（例如:variable:`CMAKE_<LANG>_FLAGS_DEBUG`）。以前只使用当前工具链的默认此类标志。请参阅政策:policy:`CMP0066`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:97
msgid ""
"Variable :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` was added to control "
"the sorting mode of the :command:`find_package` command."
msgstr ""
"添加了变量 :variable:`CMAKE_FIND_PACKAGE_SORT_ORDER` 以控制 "
":command:`find_package` 命令的排序模式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:100
msgid ""
"Variable :variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` was added to "
"control the sorting direction the :command:`find_package` command."
msgstr ""
"添加了变量 :variable:`CMAKE_FIND_PACKAGE_SORT_DIRECTION` 以控制 "
":command:`find_package` 命令的排序方向。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:103
msgid ""
":variable:`Toolchain files <CMAKE_TOOLCHAIN_FILE>` may now set a "
":variable:`CMAKE_<LANG>_FLAGS_INIT` variable to initialize the "
":variable:`CMAKE_<LANG>_FLAGS` cache entry the first time a language is "
"enabled in a build tree."
msgstr ""
":variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` 现在可以设置一个 :variable:`CMAKE_<LANG>_FLAGS_INIT` "
"变量来初始化 :variable:`CMAKE_<LANG>_FLAGS` 缓存条目第一次在构建中启用语言树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:108
msgid ""
":variable:`Toolchain files <CMAKE_TOOLCHAIN_FILE>` may now set "
":variable:`CMAKE_EXE_LINKER_FLAGS_INIT`, "
":variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`, and "
":variable:`CMAKE_MODULE_LINKER_FLAGS_INIT` variables to initialize the "
":variable:`CMAKE_EXE_LINKER_FLAGS`, :variable:`CMAKE_SHARED_LINKER_FLAGS`,"
" and :variable:`CMAKE_MODULE_LINKER_FLAGS` cache entries the first time a "
"language is enabled in a build tree."
msgstr ""
":variable:`工具链文件 <CMAKE_TOOLCHAIN_FILE>` "
"现在可以设置 :variable:`CMAKE_EXE_LINKER_FLAGS_INIT`、 :variable:`CMAKE_SHARED_LINKER_FLAGS_INIT`"
" 和 :variable:`CMAKE_MODULE_LINKER_FLAGS_INIT` 变量来初始化 :variable:`CMAKE_EXE_LINKER_FL "
"AGS`， :variable:`CMAKE_SHARED_LINKER_FLAGS `, 和 "
":variable:`CMAKE_MODULE_LINKER_FLAGS` 在构建树中第一次启用语言时缓存条目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:120
msgid ""
"On Apple platforms the :prop_tgt:`BUNDLE_EXTENSION` target property now "
"also applies to Frameworks and App Bundles."
msgstr "在 Apple 平台上， :prop_tgt:`BUNDLE_EXTENSION` 目标属性现在也适用于框架和应用程序包。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:123
msgid ""
"A :prop_dir:`BINARY_DIR` directory property was added to get the absolute "
"path to the binary directory corresponding to the source directory on "
"which the property is read."
msgstr "添加了 :prop_dir:`BINARY_DIR` 目录属性，以获取与读取该属性的源目录相对应的二进制目录的绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:127
msgid ""
"A :prop_dir:`BUILDSYSTEM_TARGETS` directory property was added to get the "
"list of logical buildsystem target names added by the project in a "
"directory."
msgstr "添加了 :prop_dir:`BUILDSYSTEM_TARGETS` 目录属性，以获取项目在目录中添加的逻辑构建系统目标名称列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:131
msgid ""
"A :prop_tgt:`LINK_WHAT_YOU_USE` target property and supporting "
":variable:`CMAKE_LINK_WHAT_YOU_USE` variable were introduced to detect (on"
" UNIX) shared libraries that are linked but not needed by running ``ldd -r"
" -u``."
msgstr ""
":prop_tgt:`LINK_WHAT_YOU_USE` 目标属性和支持的 :variable:`CMAKE_LINK_WHAT_YOU_USE` "
"变量被引入以检测（在 UNIX 上）链接但运行 ``ldd -r -u`` 不需要的共享库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:136
msgid ""
"A :prop_dir:`SOURCE_DIR` directory property was added to get the absolute "
"path to the source directory associated with a directory."
msgstr "添加了 :prop_dir:`SOURCE_DIR` 目录属性以获取与目录关联的源目录的绝对路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:139
msgid ""
"A :prop_dir:`SUBDIRECTORIES` directory property was added to get the list "
"of subdirectories added by a project in a directory."
msgstr "添加了 :prop_dir:`SUBDIRECTORIES` 目录属性以获取目录中项目添加的子目录列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:142
msgid ""
"A :prop_tgt:`VS_SDK_REFERENCES` target property was added to tell "
":ref:`Visual Studio Generators` to reference the named SDKs."
msgstr ""
"添加了 :prop_tgt:`VS_SDK_REFERENCES` 目标属性以告知 :ref:`Visual Studio Generators` "
"引用指定的 SDK。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:145
msgid ""
"A :prop_sf:`VS_TOOL_OVERRIDE` source file property was created to tell "
":ref:`Visual Studio Generators` what tool to use for a source file."
msgstr ""
":prop_sf:`VS_TOOL_OVERRIDE` 源文件属性的创建是为了告诉 :ref:`Visual Studio Generators` "
"源文件使用什么工具。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:148
msgid ""
"The :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property now applies to "
"executable targets with the :prop_tgt:`ENABLE_EXPORTS` property set."
msgstr ""
":prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` 目标属性现在适用于具有 "
":prop_tgt:`ENABLE_EXPORTS` 属性集的可执行目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:151
msgid ""
"A :prop_sf:`XCODE_FILE_ATTRIBUTES` source file property was added to tell "
"the :generator:`Xcode` generator to generate custom content in the Xcode "
"project attributes for the file."
msgstr ""
"添加了 :prop_sf:`XCODE_FILE_ATTRIBUTES` 源文件属性以告知 :generator:`Xcode` 生成器在文件的 "
"Xcode 项目属性中生成自定义内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:158
msgid ""
"An :module:`AndroidTestUtilities` module was added to manage transfer of "
"test data to an Android device."
msgstr "添加了一个 :module:`AndroidTestUtilities` 模块来管理测试数据到 Android 设备的传输。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:161
msgid ""
"The :module:`CheckFortranSourceCompiles` module macro "
"``CHECK_Fortran_SOURCE_COMPILES`` gained a ``SRC_EXT`` option to specify a"
" custom test Fortran source file extension."
msgstr ""
":module:`CheckFortranSourceCompiles` 模块宏 ``CHECK_Fortran_SOURCE_COMPILES``"
" 获得了一个 ``SRC_EXT`` 选项来指定自定义测试 Fortran 源文件扩展名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:165
msgid ""
"The :module:`ExternalProject` module gained ``HTTP_USERNAME`` and "
"``HTTP_PASSWORD`` options to set http download credentials."
msgstr ""
":module:`ExternalProject` 模块获得了 ``HTTP_USERNAME`` 和 ``HTTP_PASSWORD`` "
"选项来设置 http 下载凭据。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:168
msgid ""
"The :module:`ExternalProject` module gained a ``HTTP_HEADER`` option to "
"add http download headers."
msgstr ":module:`ExternalProject` 模块获得了一个 ``HTTP_HEADER`` 选项来添加 http 下载标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:171
msgid ""
"The :module:`FindBISON` module ``BISON_TARGET`` macro learned a new "
"``REPORT_FILE`` option to specify the bison ``--report-file=`` option."
msgstr ""
":module:`FindBISON` 模块 ``BISON_TARGET`` 宏学习了一个新的 ``REPORT_FILE`` 选项来指定 "
"bison ``--report-file=`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:174
msgid "The :module:`FindBZip2` module now provides imported targets."
msgstr ":module:`FindBZip2` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:176
msgid ""
"A :module:`FindICU` module was introduced to find the International "
"Components for Unicode (ICU) libraries and programs."
msgstr "引入了一个 :module:`FindICU` 模块来查找 Unicode (ICU) 库和程序的国际组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:179
msgid ""
"The :module:`FindMatlab` module learned to find the SIMULINK and MAT "
"components."
msgstr "FindMatlab 模块学会了查找 SIMULINK 和 MAT 组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:182
msgid ""
"The :module:`FindMatlab` module :command:`matlab_add_mex` command learned "
"to add executables and modules."
msgstr ""
":module:`FindMatlab` module :command:`matlab_add_mex` 命令学会了添加可执行文件和模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:185
msgid ""
"The :module:`FindMatlab` module :command:`matlab_add_unit_test` command "
"learned to support inline Matlab test code."
msgstr ""
":module:`FindMatlab` 模块 :command:`matlab_add_unit_test` 命令学会了支持内联 Matlab "
"测试代码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:188
msgid "The :module:`FindOpenCL` module now provides imported targets."
msgstr ":module:`FindOpenCL` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:190
msgid ""
"The :module:`FindOpenMP` module learned to detect the OpenMP version "
"(specification date) from the compiler."
msgstr ":module:`FindOpenMP` 模块学会了从编译器中检测 OpenMP 版本（规范日期）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:193
msgid "A :module:`FindVulkan` module was added."
msgstr "添加了一个 :module:`FindVulkan` 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:195
msgid ""
"The :module:`GenerateExportHeader` module learned a new "
"``CUSTOM_CONTENT_FROM_VARIABLE`` option to specify a variable containing "
"custom content for inclusion in the generated header."
msgstr ""
":module:`GenerateExportHeader` 模块学习了一个新的 ``CUSTOM_CONTENT_FROM_VARIABLE`` "
"选项来指定包含自定义内容的变量以包含在生成的标头中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:199
msgid ""
"The :module:`GNUInstallDirs` module gained a new "
":command:`GNUInstallDirs_get_absolute_install_dir` command."
msgstr ""
":module:`GNUInstallDirs` 模块获得了一个新的 "
":command:`GNUInstallDirs_get_absolute_install_dir` 命令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:202
msgid ""
"The :module:`UseJava` module gained APIs to \"export\" jar targets for use"
" by external CMake projects.  See the ``install_jar_exports`` and "
"``export_jars`` functions."
msgstr ""
":module:`UseJava` 模块获得了 API 以“导出”jar 目标以供外部 CMake "
"项目使用。请参阅``install_jar_exports`` 和``export_jars`` 函数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:209
msgid ""
"CTest now supports test fixtures through the new "
":prop_test:`FIXTURES_SETUP`, :prop_test:`FIXTURES_CLEANUP` and "
":prop_test:`FIXTURES_REQUIRED` test properties. When using regular "
"expressions or ``--rerun-failed`` to limit the tests to be run, a "
"fixture's setup and cleanup tests will automatically be added to the "
"execution set if any test requires that fixture."
msgstr ""
"CTest 现在通过新的 :prop_test:`FIXTURES_SETUP`、 :prop_test:`FIXTURES_CLEANUP` "
"和 :prop_test:`FIXTURES_REQUIRED` 测试属性支持测试装置。当使用正则表达式或 ``--rerun-failed`` "
"来限制要运行的测试时，如果任何测试需要该夹具，夹具的设置和清理测试将自动添加到执行集中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:215
msgid ""
"The :command:`ctest_configure`, :command:`ctest_build`, "
":command:`ctest_test`, :command:`ctest_coverage`, and "
":command:`ctest_upload` commands gained a new ``CAPTURE_CMAKE_ERROR`` "
"option to capture any errors that occur as the commands run into a "
"variable and avoid affecting the return code of the :manual:`ctest(1)` "
"process."
msgstr ""
":command:`ctest_configure`、 :command:`ctest_build`、 :command:`ctest_test`、 :command:`ctest_coverage`"
" 和 :command:`ctest_upload` 命令获得了一个新的 ``CAPTURE_CMAKE_ERROR`` "
"选项来捕获任何错误当命令运行到一个变量时发生，避免影响 ctest(1) 进程的返回码。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:224
msgid "CPack gained a :cpack_gen:`CPack productbuild Generator` on OS X."
msgstr "CPack 在 OS X 上获得了 :cpack_gen:`CPack productbuild Generator`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:226
msgid ""
"CPack gained a new :variable:`CPACK_PACKAGE_CHECKSUM` variable to enable "
"generation of a checksum file for each package file."
msgstr ""
"CPack 获得了一个新的 :variable:`CPACK_PACKAGE_CHECKSUM` 变量，可以为每个包文件生成校验和文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:229
msgid ""
"The :cpack_gen:`CPack DEB Generator` learned to support long file names "
"when archive format is set to GNU tar. See "
":variable:`CPACK_DEBIAN_ARCHIVE_TYPE`"
msgstr ""
"当存档格式设置为 GNU tar 时， :cpack_gen:`CPack DEB Generator` "
"学会了支持长文件名。请参阅 :variable:`CPACK_DEBIAN_ARCHIVE_TYPE`"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:233
msgid ""
"The :module:`CPackIFW` module gained a new "
":command:`cpack_ifw_add_package_resources` command to include additional "
"resources in the installer binary."
msgstr ""
":module:`CPackIFW` 模块获得了一个新的 :command:`cpack_ifw_add_package_resources` "
"命令以在安装程序二进制文件中包含其他资源。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:237
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and"
" :command:`cpack_ifw_configure_component_group` commands gained a new "
"``USER_INTERFACES`` option to add a list of additional pages to the IFW "
"installer."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` 和 "
":command:`cpack_ifw_configure_component_group` 命令获得了一个新的 "
"``USER_INTERFACES`` 选项，用于将附加页面列表添加到 IFW 安装程序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:242
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to generate debuginfo "
"packages on demand. See :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` and its "
"per component version."
msgstr ""
":cpack_gen:`CPack RPM Generator` "
"学会了按需生成调试信息包。请参阅 :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` 及其每个组件版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:246
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to generate source rpm (SRPM)"
" packages on demand. See :variable:`CPACK_RPM_PACKAGE_SOURCES`, "
":variable:`CPACK_RPM_SOURCE_PKG_BUILD_PARAMS` and "
":variable:`CPACK_RPM_SOURCE_PKG_PACKAGING_INSTALL_PREFIX`."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了按需生成源 rpm (SRPM) "
"包。请参阅 :variable:`CPACK_RPM_PACKAGE_SOURCES`、 :variable:`CPACK_RPM_SOURCE_PKG_BUILD_PARAMS`"
" 和 :variable:`CPACK_RPM_SOURCE_PKG_PACKAGING_INSTALL_PREFIX`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:251
msgid ""
"The :cpack_gen:`CPack NSIS Generator` now supports "
":variable:`CPACK_NSIS_<compName>_INSTALL_DIRECTORY`. This can be used to "
"set component specific installation directories."
msgstr ""
":cpack_gen:`CPack NSIS Generator` "
"现在支持 :variable:`CPACK_NSIS_<compName>_INSTALL_DIRECTORY`。这可用于设置特定于组件的安装目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:255
msgid ""
"The :cpack_gen:`CPack WIX Generator` now supports "
":variable:`CPACK_WIX_SKIP_PROGRAM_FOLDER` to allow specification of a "
"custom absolute installation prefix outside of the ProgramFiles folders."
msgstr ""
":cpack_gen:`CPack WIX Generator` 现在支持 "
":variable:`CPACK_WIX_SKIP_PROGRAM_FOLDER` 以允许在 ProgramFiles "
"文件夹之外指定自定义绝对安装前缀。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:260
msgid ""
"The :cpack_gen:`CPack WIX Generator` now supports "
":variable:`CPACK_COMPONENT_<compName>_DISABLED`. This can be used to "
"deselect a component from being installed by default."
msgstr ""
":cpack_gen:`CPack WIX Generator` "
"现在支持 :variable:`CPACK_COMPONENT_<compName>_DISABLED`。这可用于取消选择默认安装的组件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:264
msgid ""
"The :cpack_gen:`CPack WIX Generator` now supports "
":variable:`CPACK_WIX_PATCH_FILE` fragments for Feature elements."
msgstr ""
":cpack_gen:`CPack WIX 生成器` 现在支持特征元素的 :variable:`CPACK_WIX_PATCH_FILE` 片段。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:267
msgid ""
"The :cpack_gen:`CPack WIX Generator` now supports "
":variable:`CPACK_WIX_ROOT_FEATURE_TITLE` and "
":variable:`CPACK_WIX_ROOT_FEATURE_DESCRIPTION` to allow the specification "
"of a custom title and description for the root feature element."
msgstr ""
"CPack WIX Generator 现在支持 CPACK_WIX_ROOT_FEATURE_TITLE 和 "
"CPACK_WIX_ROOT_FEATURE_DESCRIPTION 以允许为根特征元素指定自定义标题和描述。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:275
msgid ""
":manual:`cmake(1)` gained a ``-E capabilities`` option to provide a "
"machine-readable (JSON) description of the capabilities of the cmake tool "
"(available generators, etc.)."
msgstr ""
":manual:`cmake(1)` 获得了一个 ``-E capabilities`` 选项来提供 cmake 工具功能（可用生成器等）的机器可读"
" (JSON) 描述。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:279
msgid ""
"A new :manual:`cmake-server(7)` mode was added to provide semantic "
"information about a CMake-generated buildsystem to clients through a JSON "
"protocol.  Currently all protocols are experimental and subject to change."
msgstr ""
"添加了一个新的 :manual:`cmake-server(7)` 模式，以通过 JSON 协议向客户端提供有关 CMake "
"生成的构建系统的语义信息。目前所有的协议都是实验性的，可能会发生变化。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:284
msgid ""
"The :manual:`cmake(1)` command learned a ``--trace-source=<file>`` option."
msgstr ":manual:`cmake(1)` 命令学习了一个 ``--trace-source=<file>`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:286
msgid ":manual:`ccmake(1)` learned to support vim-like navigation bindings."
msgstr ":manual:`ccmake(1)` 学会了支持类似 vim 的导航绑定。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:288
msgid ""
":manual:`cmake-gui(1)` gained a button to open the generated project file "
"for :ref:`Visual Studio Generators` and the :generator:`Xcode` generator."
msgstr ""
":manual:`cmake-gui(1)` 获得了一个按钮，用于打开为 :ref:`Visual Studio Generators` 和 "
":generator:`Xcode` 生成器生成的项目文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:294
msgid ""
"We no longer provide Linux i386 binaries for download from ``cmake.org`` "
"for new versions of CMake."
msgstr "对于新版本的 CMake，我们不再提供可从 ``cmake.org`` 下载的 Linux i386 二进制文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:297
msgid ""
"Vim support files ``cmake-indent.vim``, ``cmake-syntax.vim``, and ``cmake-"
"help.vim`` have been removed in favor of the files now provided from the "
"`vim-cmake-syntax`_ project."
msgstr ""
"Vim 支持文件 ``cmake-indent.vim``、``cmake-syntax.vim`` 和 ``cmake-help.vim`` "
"已被删除，以支持现在从 `vim-cmake-语法`_项目。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:301
msgid "Support for building CMake itself with some compilers was dropped:"
msgstr "放弃了使用某些编译器构建 CMake 本身的支持："

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:303
msgid "Visual Studio 7.1 and 2005 -- superseded by VS 2008 and above"
msgstr "Visual Studio 7.1 和 2005——被 VS 2008 及更高版本取代"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:304
msgid "MinGW.org mingw32 -- superseded by MSYS2 mingw32 and mingw64"
msgstr "MinGW.org mingw32——被 MSYS2 mingw32 和 mingw64 取代"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:306
msgid ""
"CMake still supports generating build systems for other projects using "
"these compilers."
msgstr "CMake 仍然支持使用这些编译器为其他项目生成构建系统。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:312
msgid ""
"The Fortran dependency scanner learned to support the syntax of `Fortran "
"Submodules`_."
msgstr "Fortran 依赖扫描器学会了支持“Fortran 子模块”的语法。"

#: ../../cmake-prefix/src/cmake/Help/release/3.7.rst:315
msgid ""
"Vim support files ``indent/cmake.vim`` and ``syntax/cmake.vim`` from the "
"`vim-cmake-syntax`_ project are now distributed with CMake."
msgstr ""
"来自 `vim-cmake-syntax`_ 项目的 Vim 支持文件 ``indent/cmake.vim`` 和 "
"``syntax/cmake.vim`` 现在与 CMake 一起分发。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:2
msgid "CMake 3.8 Release Notes"
msgstr "CMake 3.8 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:8
msgid "Changes made since CMake 3.7 include the following."
msgstr "自 CMake 3.7 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:17
msgid "C#"
msgstr "C＃"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:19
msgid ""
"CMake learned to support ``CSharp`` (C#) as a first-class language that "
"can be enabled via the :command:`project` and :command:`enable_language` "
"commands.  It is currently supported by the :ref:`Visual Studio "
"Generators` for VS 2010 and above."
msgstr ""
"CMake 学会了支持 ``CSharp`` (C#) 作为一流的语言，可以通过 :command:`project` 和 "
":command:`enable_language` 命令启用。 VS 2010 及更高版本的 :ref:`Visual Studio "
"Generators` 目前支持它。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:24
msgid ""
"C# assemblies and programs can be added just like common C++ targets using"
" the :command:`add_library` and :command:`add_executable` commands. "
"References between C# targets in the same source tree may be specified by "
":command:`target_link_libraries` like for C++.  References to system or "
"3rd-party assemblies may be specified by the target properties "
":prop_tgt:`VS_DOTNET_REFERENCE_<refname>` and "
":prop_tgt:`VS_DOTNET_REFERENCES`."
msgstr ""
"可以使用 :command:`add_library` 和 :command:`add_executable` 命令像添加普通 C++ 目标一样添加"
" C# 程序集和程序。同一源代码树中 C# 目标之间的引用可以像 C++ 一样由 target_link_libraries 指定。对系统或第 3 "
"方程序集的引用可以由目标属性 :prop_tgt:`VS_DOTNET_REFERENCE_<refname>` 和 "
":prop_tgt:`VS_DOTNET_REFERENCES` 指定。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:32
msgid ""
"More fine tuning of C# targets may be done using target and source file "
"properties.  Specifically the target properties related to Visual Studio "
"(``VS_*``) are worth a look (for setting toolset versions, root "
"namespaces, assembly icons, ...)."
msgstr ""
"可以使用目标和源文件属性对 C# 目标进行更精细的调整。具体来说，与 Visual Studio (``VS_*``) "
"相关的目标属性值得一看（用于设置工具集版本、根命名空间、程序集图标……）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:38
msgid "CUDA"
msgstr "CUDA"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:40
msgid ""
"CMake learned to support ``CUDA`` as a first-class language that can be "
"enabled via the :command:`project` and :command:`enable_language` "
"commands."
msgstr ""
"CMake 学会了支持 CUDA 作为一流语言，可以通过 :command:`project` 和 "
":command:`enable_language` 命令启用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:43
msgid ""
"``CUDA`` is currently supported by the :ref:`Makefile Generators` and the "
":generator:`Ninja` generator on Linux, macOS, and Windows. Support for the"
" Visual Studio IDE is under development but not included in this release."
msgstr ""
"Linux、macOS 和 Windows 上的 Makefile Generators 和 Ninja 生成器目前支持 ``CUDA``。对 "
"Visual Studio IDE 的支持正在开发中，但未包含在此版本中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:48
msgid "The NVIDIA CUDA Toolkit compiler (``nvcc``) is supported."
msgstr "支持 NVIDIA CUDA 工具包编译器 (``nvcc``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:51
msgid "C & C++"
msgstr "C与C++"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:53
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"now offers meta-features that request compiler modes for specific language"
" standard levels (e.g. ``cxx_std_11``).  See "
":prop_gbl:`CMAKE_C_KNOWN_FEATURES` and "
":prop_gbl:`CMAKE_CXX_KNOWN_FEATURES`."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` "
"功能现在提供元特性，请求特定语言标准级别的编译器模式（例如``cxx_std_11``）。请参阅 "
":prop_gbl:`CMAKE_C_KNOWN_FEATURES` 和 :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:58
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of C++ 17.  No specific features are yet enumerated besides "
"the ``cxx_std_17`` meta-feature."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 C++ 17。除了 "
"``cxx_std_17`` 元功能外，尚未列举任何具体功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:62
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of the availability of C99 in gcc since version 3.4."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在知道 gcc 3.4 版以来 "
"C99 的可用性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:68
msgid "A new minimal platform file for ``Fuchsia`` was added."
msgstr "为“Fuchsia”添加了一个新的最小平台文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:73
msgid ""
"The :generator:`CodeBlocks` extra generator may now be used to generate "
"with :generator:`NMake Makefiles JOM`."
msgstr ""
":generator:`CodeBlocks` 额外的生成器现在可以用于生成 :generator:`NMake Makefiles JOM`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:76
msgid ""
"The :ref:`Visual Studio Generators` for VS 2013 and above learned to "
"support a ``host=x64`` option in the :variable:`CMAKE_GENERATOR_TOOLSET` "
"value (e.g.  via the :manual:`cmake(1)` ``-T`` option) to request use of a"
" VS 64-bit toolchain on 64-bit hosts."
msgstr ""
"VS 2013 及更高版本的 Visual Studio Generators 学会了在 CMAKE_GENERATOR_TOOLSET 值中支持 "
"host=x64 选项（例如通过 cmake(1) `` -T`` 选项）请求在 64 位主机上使用 VS 64 位工具链。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:81
msgid ""
"The :ref:`Visual Studio Generators` learned to treat files passed to "
":command:`target_link_libraries` whose names end in ``.targets`` as "
"MSBuild \"targets\" files to be imported into generated project files."
msgstr ""
":ref:`Visual Studio Generators` 学会了将传递给 :command:`target_link_libraries` "
"且名称以 ``.targets`` 结尾的文件视为要导入到生成的项目文件中的 MSBuild“目标”文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:88
msgid ""
"The :command:`add_custom_command` and :command:`add_custom_target` "
"commands learned the option ``COMMAND_EXPAND_LISTS`` which causes lists in"
" the ``COMMAND`` argument to be expanded, including lists created by "
"generator expressions."
msgstr ""
":command:`add_custom_command` 和 :command:`add_custom_target` 命令学习了选项 "
"``COMMAND_EXPAND_LISTS``，这会导致 ``COMMAND`` 参数中的列表被扩展，包括由生成器表达式创建的列表。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:93
msgid ""
"The :command:`execute_process` command gained an ``ENCODING`` option to "
"specify on Windows which encoding is used for output from child process."
msgstr ""
":command:`execute_process` 命令获得了一个 ``ENCODING`` 选项，用于在 Windows "
"上指定哪种编码用于子进程的输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:96
msgid ""
"The :command:`math(EXPR)` command gained support for unary ``+`` and ``-``"
" operators."
msgstr ":command:`math(EXPR)` 命令获得了对一元“+”和“-”运算符的支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:99
msgid ""
"The :command:`source_group` command gained ``TREE`` and ``PREFIX`` options"
" to add groups following source tree directory structure."
msgstr ""
":command:`source_group` 命令获得了 ``TREE`` 和 ``PREFIX`` 选项，可以按照源树目录结构添加组。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:102
#, python-format
msgid ""
"The :command:`string(TIMESTAMP)` command learned to treat ``%%`` as a way "
"to encode plain ``%``."
msgstr ":command:`string(TIMESTAMP)` 命令学会了将 `%%`` 视为一种编码纯文本 ``%`` 的方式。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:105
msgid ""
"The :command:`string(TIMESTAMP)` command will now honor the "
"``SOURCE_DATE_EPOCH`` environment variable and use its value instead of "
"the current time."
msgstr ""
":command:`string(TIMESTAMP)` 命令现在将遵循 ``SOURCE_DATE_EPOCH`` "
"环境变量并使用它的值而不是当前时间。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:109
msgid ""
"The :command:`try_compile` command source file signature gained new "
"options to specify the language standard to use in the generated test "
"project."
msgstr ":command:`try_compile` 命令源文件签名获得了新选项以指定在生成的测试项目中使用的语言标准。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:112
msgid ""
"The :command:`try_compile` command source file signature now honors "
"language standard variables like :variable:`CMAKE_CXX_STANDARD`. See "
"policy :policy:`CMP0067`."
msgstr ""
":command:`try_compile` 命令源文件签名现在支持语言标准变量，例如 "
":variable:`CMAKE_CXX_STANDARD`。请参阅政策:policy:`CMP0067`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:119
msgid ""
"A :variable:`CMAKE_CODELITE_USE_TARGETS` variable was added to tell the "
":generator:`CodeLite` extra generator to change the generated project to "
"have target-centric organization. The ``build``, ``rebuild``, and "
"``clean`` operations within ``CodeLite`` then work on a selected target "
"rather than the whole workspace. (Note that the :generator:`Ninja` clean "
"operation on a target includes its dependencies, though.)"
msgstr ""
"添加了一个 :variable:`CMAKE_CODELITE_USE_TARGETS` 变量来告诉 :generator:`CodeLite` "
"额外的生成器将生成的项目更改为具有以目标为中心的组织。 ``CodeLite`` 中的``build``、``rebuild`` "
"和``clean`` 操作然后作用于选定的目标而不是整个工作区。 （不过请注意，目标上的 :generator:`Ninja` clean "
"操作包括其依赖项。）"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:127
msgid ""
"The :variable:`CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS` variable was added to "
"tell the :generator:`Sublime Text 2` extra generator to place specified "
"environment variables in the generated ``.sublime-project``."
msgstr ""
"添加了 :variable:`CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS` 变量，告诉 "
":generator:`Sublime Text 2` 额外的生成器将指定的环境变量放置在生成的 ``.sublime-project`` 中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:131
msgid ""
"The :variable:`CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE` variable was added"
" to tell the :generator:`Sublime Text 2` extra generator whether to "
"exclude the build tree from the ``.sublime-project`` when it is inside the"
" source tree."
msgstr ""
":variable:`CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE` 变量被添加来告诉 "
":generator:`Sublime Text 2` 额外的生成器当它在源代码树中时是否从 ``.sublime-project`` "
"中排除构建树。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:136
msgid ""
"A :variable:`CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD` variable was added"
" to tell :ref:`Visual Studio Generators` for VS 2010 and above to include "
"the ``PACKAGE`` target in the default build, similar to the existing "
":variable:`CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD` variable for the "
"``INSTALL`` target."
msgstr ""
"添加了一个 CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD 变量，用于告诉 VS 2010 及更高版本的 "
"Visual Studio Generators 在默认构建中包含 `PACKAGE`` 目标，类似于现有的 "
"CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 变量对于 ``INSTALL`` 目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:145
msgid ""
"A :prop_tgt:`BUILD_RPATH` target property and corresponding "
":variable:`CMAKE_BUILD_RPATH` variable were added to support custom "
"``RPATH`` locations to be added to binaries in the build tree."
msgstr ""
"添加了 :prop_tgt:`BUILD_RPATH` 目标属性和相应的 :variable:`CMAKE_BUILD_RPATH` "
"变量以支持要添加到构建树中的二进制文件的自定义 ``RPATH`` 位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:149
msgid ""
"The :prop_sf:`COMPILE_FLAGS` source file property learned to support "
":manual:`generator expressions <cmake-generator-expressions(7)>`."
msgstr ""
":prop_sf:`COMPILE_FLAGS` 源文件属性学会了支持 :manual:`generator expressions <cmake-"
"generator-expressions(7)>`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:152
msgid ""
"The :prop_tgt:`FRAMEWORK` target property may now also be applied to "
"static libraries on Apple targets.  It will result in a proper Framework "
"but with a static library inside."
msgstr ""
":prop_tgt:`FRAMEWORK` 目标属性现在也可以应用于 Apple 目标上的静态库。它将产生一个适当的框架，但内部有一个静态库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:156
msgid ""
":ref:`Imported <Imported Targets>` :ref:`Interface Libraries` learned new "
":prop_tgt:`IMPORTED_LIBNAME` and :prop_tgt:`IMPORTED_LIBNAME_<CONFIG>` "
"target properties to specify a link library name since interface libraries"
" do not build their own library files."
msgstr ""
":ref:`Imported <Imported Targets>` :ref:`Interface Libraries` 学习了新的 "
":prop_tgt:`IMPORTED_LIBNAME` 和 :prop_tgt:`IMPORTED_LIBNAME_<CONFIG>` "
"目标属性指定链接库名称，因为接口库不构建它们的自己的库文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:161
msgid ""
"A :prop_tgt:`<LANG>_CPPLINT` target property and supporting "
":variable:`CMAKE_<LANG>_CPPLINT` variable were introduced to tell the "
":ref:`Makefile Generators` and the :generator:`Ninja` generator to run the"
" ``cpplint`` style checker along with the compiler for ``C`` and ``CXX`` "
"languages."
msgstr ""
":prop_tgt:`<LANG>_CPPLINT` 目标属性和支持 :variable:`CMAKE_<LANG>_CPPLINT` "
"变量被引入来告诉 :ref:`Makefile Generators` 和 :generator:`Ninja` 生成器运行 ` `cpplint``"
" 样式检查器以及用于 ``C`` 和 ``CXX`` 语言的编译器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:167
msgid ""
"A :prop_tgt:`MANUALLY_ADDED_DEPENDENCIES` target property has been added. "
"It provides a read-only list of dependencies that have been added with the"
" :command:`add_dependencies` command."
msgstr ""
"添加了 :prop_tgt:`MANUALLY_ADDED_DEPENDENCIES` 目标属性。它提供了一个只读的依赖项列表，这些依赖项已使用 "
":command:`add_dependencies` 命令添加。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:171
msgid ""
"The :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property learned to "
"interpret empty list elements as referring to the configuration-less "
"imported location specified by :prop_tgt:`IMPORTED_LOCATION`."
msgstr ""
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` 目标属性学会了将空列表元素解释为引用 "
":prop_tgt:`IMPORTED_LOCATION` 指定的无配置导入位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:175
msgid ""
"The :prop_tgt:`NO_SYSTEM_FROM_IMPORTED` target property is now supported "
"on :ref:`Imported <Imported Targets>` :ref:`Interface Libraries`."
msgstr ""
":prop_tgt:`NO_SYSTEM_FROM_IMPORTED` 目标属性现在在 :ref:`Imported <Imported "
"Targets>` :ref:`Interface Libraries` 上受支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:178
msgid ""
"New source file properties :prop_sf:`SKIP_AUTOMOC`, "
":prop_sf:`SKIP_AUTOUIC`, :prop_sf:`SKIP_AUTORCC`, and "
":prop_sf:`SKIP_AUTOGEN` were added to allow source files to be excluded "
"from processing by :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC`, and "
":prop_tgt:`AUTORCC` target properties."
msgstr ""
"添加了新的源文件属性 "
":prop_sf:`SKIP_AUTOMOC`、 :prop_sf:`SKIP_AUTOUIC`、 :prop_sf:`SKIP_AUTORCC` 和 "
":prop_sf:`SKIP_AUTOGEN` 以允许源文件从 :prop_tgt:`AUTOMOC 的处理中排除, "
":prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` 目标属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:183
msgid ""
"A :prop_sf:`VS_COPY_TO_OUT_DIR` source file property was added to tell "
":ref:`Visual Studio Generators` for VS 2010 and above whether or not a "
"file should e copied to the output directory."
msgstr ""
"添加了一个 :prop_sf:`VS_COPY_TO_OUT_DIR` 源文件属性来告诉 :ref:`Visual Studio Generators`"
" 适用于 VS 2010 及更高版本的文件是否应该复制到输出目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:187
msgid ""
"A :prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` target property was added to "
"tell :ref:`Visual Studio Generators` for VS 2010 and above what debugger "
"working directory should be set for the target."
msgstr ""
"添加了一个 :prop_tgt:`VS_DEBUGGER_WORKING_DIRECTORY` 目标属性来告诉 :ref:`Visual Studio"
" Generators` for VS 2010 及更高版本应该为目标设置什么调试器工作目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:191
msgid ""
"A :prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL` target property was added to"
" specify whether to copy referenced assemblies to the output directory."
msgstr ""
"添加了 :prop_tgt:`VS_DOTNET_REFERENCES_COPY_LOCAL` 目标属性以指定是否将引用的程序集复制到输出目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:194
msgid ""
"A :prop_tgt:`VS_DOTNET_REFERENCE_<refname>` target property was added to "
"tell :ref:`Visual Studio Generators` for VS 2010 and above to add a .NET "
"reference with a given hint path."
msgstr ""
"添加了 :prop_tgt:`VS_DOTNET_REFERENCE_<refname>` 目标属性以告诉 :ref:`Visual Studio "
"Generators` for VS 2010 及更高版本添加具有给定提示路径的 .NET 引用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:198
msgid ""
"A :prop_sf:`VS_INCLUDE_IN_VSIX` source file property was added to tell "
":ref:`Visual Studio Generators` for VS 2010 and above whether to include "
"the file in a Visual Studio extension package."
msgstr ""
"添加了一个 :prop_sf:`VS_INCLUDE_IN_VSIX` 源文件属性来告诉 :ref:`Visual Studio "
"Generators` 适用于 VS 2010 及更高版本是否将该文件包含在 Visual Studio 扩展包中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:202
msgid ""
"A :prop_sf:`VS_RESOURCE_GENERATOR` source file property was added to give "
":ref:`Visual Studio Generators` for VS 2010 and above a setting for the "
"resource generator (``C#`` only)."
msgstr ""
"添加了一个 :prop_sf:`VS_RESOURCE_GENERATOR` 源文件属性，以便为 VS 2010 及更高版本的 "
":ref:`Visual Studio Generators 提供资源生成器的设置（仅适用于``C#``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:206
msgid ""
"A :prop_tgt:`VS_USER_PROPS` target property was added to tell :ref:`Visual"
" Studio Generators` for VS 2010 and above to use a custom MSBuild user "
"``.props`` file."
msgstr ""
"添加了一个 :prop_tgt:`VS_USER_PROPS` 目标属性来告诉 :ref:`Visual Studio Generators` for"
" VS 2010 及更高版本使用自定义 MSBuild 用户 ``.props`` 文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:210
msgid ""
"A :prop_gbl:`XCODE_EMIT_EFFECTIVE_PLATFORM_NAME` global property was added"
" to tell the :generator:`Xcode` generator whether to emit the "
"``EFFECTIVE_PLATFORM_NAME`` variable.  This is useful when building with "
"multiple SDKs like ``macosx`` and ``iphoneos`` in parallel."
msgstr ""
"添加了:prop_gbl:`XCODE_EMIT_EFFECTIVE_PLATFORM_NAME` "
"全局属性以告知:generator:`Xcode` 生成器是否发出 ``EFFECTIVE_PLATFORM_NAME`` 变量。这在并行构建多个 "
"SDK（如 ``macosx`` 和 ``iphoneos``）时非常有用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:215
msgid ""
"New :prop_tgt:`XCODE_PRODUCT_TYPE` and "
":prop_tgt:`XCODE_EXPLICIT_FILE_TYPE` target properties were created to "
"tell the :generator:`Xcode` generator to use custom values of the "
"corresponding attributes for a target in the generated Xcode project."
msgstr ""
"新的 :prop_tgt:`XCODE_PRODUCT_TYPE` 和 :prop_tgt:`XCODE_EXPLICIT_FILE_TYPE` "
"目标属性被创建来告诉 :generator:`Xcode` 生成器使用生成的 Xcode 项目中目标的相应属性的自定义值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:223
msgid ""
"A :module:`CSharpUtilities` module was added to aid parameterization of "
"Visual Studio C# targets.  It provides functions to allow automated "
"setting of source file properties to support Windows Forms, WPF/XAML or "
"other technologies as needed."
msgstr ""
"添加了一个 :module:`CSharpUtilities` 模块以帮助 Visual Studio C# "
"目标的参数化。它提供允许自动设置源文件属性的功能，以根据需要支持 Windows 窗体、WPF/XAML 或其他技术。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:228
msgid ""
"The :module:`ExternalData` module learned to support multiple content "
"links for one data file using different hashes, e.g. ``img.png.sha256`` "
"and ``img.png.sha1``.  This allows objects to be fetched from sources "
"indexed by different hash algorithms."
msgstr ""
":module:`ExternalData` 模块学会了使用不同的哈希值支持一个数据文件的多个内容链接，例如``img.png.sha256`` 和"
" ``img.png.sha1``。这允许从由不同哈希算法索引的源中获取对象。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:233
msgid ""
"The :module:`ExternalProject` module gained the ``GIT_PROGRESS`` option to"
" force Git to show progress when cloning repositories."
msgstr ""
":module:`ExternalProject` 模块获得了 ``GIT_PROGRESS`` 选项以强制 Git 在克隆存储库时显示进度。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:236
msgid ""
"The :module:`ExternalProject` module gained a ``GIT_CONFIG`` option to "
"pass ``--config`` options to Git when cloning repositories."
msgstr ""
":module:`ExternalProject` 模块获得了一个 ``GIT_CONFIG`` 选项，可以在克隆存储库时将 "
"``--config`` 选项传递给 Git。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:239
msgid ""
"The :module:`FeatureSummary` module :command:`feature_summary` command now"
" accepts a new ``QUIET_ON_EMPTY`` option that suppresses the output when "
"the list of packages that belong to the selected category is empty."
msgstr ""
":module:`FeatureSummary` 模块 :command:`feature_summary` 命令现在接受一个新的 "
"``QUIET_ON_EMPTY`` 选项，当属于所选类别的包列表为空时，该选项会抑制输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:243
msgid ""
"The :module:`FeatureSummary` module :command:`add_feature_info` command "
"now accepts lists of dependencies for deciding whether a feature is "
"enabled or not."
msgstr ""
":module:`FeatureSummary` 模块 :command:`add_feature_info` "
"命令现在接受依赖项列表来决定是否启用某个功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:247
msgid ""
"The package types accepted by the :module:`FeatureSummary` module can now "
"be tweaked by changing the :variable:`FeatureSummary_PKG_TYPES`, "
":variable:`FeatureSummary_REQUIRED_PKG_TYPES` and "
":variable:`FeatureSummary_DEFAULT_PKG_TYPE` global properties."
msgstr ""
"现在可以通过更改 FeatureSummary_PKG_TYPES、FeatureSummary_REQUIRED_PKG_TYPES 和 "
"FeatureSummary_DEFAULT_PKG_TYPE 全局属性来调整 FeatureSummary 模块接受的包类型。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:252
msgid ""
"The :module:`FindOpenGL` module now provides imported targets "
"``OpenGL::GL`` and ``OpenGL::GLU`` when the libraries are found."
msgstr ""
":module:`FindOpenGL` 模块现在在找到库时提供导入的目标 ``OpenGL::GL`` 和 ``OpenGL::GLU``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:255
msgid ""
"The :module:`UseSWIG` module gained a ``swig_add_library`` command to give"
" more flexibility over the old ``swig_add_module`` command."
msgstr ""
":module:`UseSWIG` 模块获得了一个 ``swig_add_library`` 命令，以提供比旧的 "
"``swig_add_module`` 命令更大的灵活性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:258
msgid ""
"The :module:`UseSWIG` module ``swig_add_source_to_module`` command learned"
" a new ``SWIG_OUTFILE_DIR`` option to control the output file location "
"(``swig -o``)."
msgstr ""
":module:`UseSWIG` 模块 ``swig_add_source_to_module`` 命令学习了一个新的 "
"``SWIG_OUTFILE_DIR`` 选项来控制输出文件位置 (``s​​wig -o``)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:262
msgid ""
"The :module:`WriteCompilerDetectionHeader` module gained the "
"``ALLOW_UNKNOWN_COMPILERS`` and ``ALLOW_UNKNOWN_COMPILER_VERSIONS`` "
"options that allow creation of headers that will work also with unknown or"
" old compilers by simply assuming they do not support any of the requested"
" features."
msgstr ""
":module:`WriteCompilerDetectionHeader` 模块获得了 `ALLOW_UNKNOWN_COMPILERS`` 和 "
"`ALLOW_UNKNOWN_COMPILER_VERSIONS`` "
"选项，这些选项允许创建标头，这些标头也可以与未知或旧的编译器一起工作，只需假设它们不支持任何请求的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:271
msgid ""
"The :command:`ctest_memcheck` command gained a ``DEFECT_COUNT <var>`` "
"option to capture the number of memory defects detected."
msgstr ""
":command:`ctest_memcheck` 命令获得了 ``DEFECT_COUNT <var>`` 选项来捕获检测到的内存缺陷数量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:274
msgid ""
"The :command:`ctest_memcheck` command learned to read the location of "
"suppressions files for sanitizers from the "
":variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE` variable."
msgstr ""
":command:`ctest_memcheck` "
"命令学会了从 :variable:`CTEST_MEMORYCHECK_SUPPRESSIONS_FILE` 变量中读取消毒剂抑制文件的位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:278
msgid ""
"The :command:`ctest_memcheck` command learned to support ``LeakSanitizer``"
" independently from ``AddressSanitizer``."
msgstr ""
":command:`ctest_memcheck` 命令学会了独立于 ``AddressSanitizer`` 来支持 "
"``LeakSanitizer``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:281
msgid ""
"The :command:`ctest_update` command ``CDASH_UPLOAD`` signature was taught "
"to honor the ``RETRY_COUNT``, ``RETRY_DELAY``, and ``QUIET`` options."
msgstr ""
":command:`ctest_update` 命令 ``CDASH_UPLOAD`` 签名被教导要遵守 "
"``RETRY_COUNT``、``RETRY_DELAY`` 和 ``QUIET`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:287
msgid ""
"The :module:`CPackIFWConfigureFile` module was added to define a new "
":command:`cpack_ifw_configure_file` command to configure file templates "
"prepared in QtIFW/SDK/Creator style."
msgstr ""
"添加了 :module:`CPackIFWConfigureFile` "
"模块以定义新的 :command:`cpack_ifw_configure_file` 命令来配置以 QtIFW/SDK/Creator "
"样式准备的文件模板。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:291
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and"
" :command:`cpack_ifw_configure_component_group` commands gained a new "
"``DEFAULT``, ``VIRTUAL``, ``FORCED_INSTALLATION``, "
"``REQUIRES_ADMIN_RIGHTS``, ``DISPLAY_NAME``, ``UPDATE_TEXT``, "
"``DESCRIPTION``, ``RELEASE_DATE``, ``AUTO_DEPEND_ON`` and ``TRANSLATIONS``"
" options to more specific configuration."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` 和 "
":command:`cpack_ifw_configure_component_group` 命令获得了新的 "
"``DEFAULT``、``VIRTUAL``、``FORCED_INSTALLATION``、``REQUIRES_ADMIN_RIGHTS``、`"
" "
"`DISPLAY_NAME``、``UPDATE_TEXT``、``DESCRIPTION``、``RELEASE_DATE``、``AUTO_DEPEND_ON``"
" 和 ``TRANSLATIONS`` 选项用于更具体的配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:298
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` "
"command gained a new ``DEPENDENCIES`` alias for ``DEPENDS`` option."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` 命令为 "
"``DEPENDS`` 选项获得了一个新的 ``DEPENDENCIES`` 别名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:301
msgid ""
"The :module:`CPackIFW` module "
":command:`cpack_ifw_configure_component_group` command gained a new "
"``DEPENDS`` option. The ``DEPENDENCIES`` alias also added."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component_group` "
"命令获得了一个新的 ``DEPENDS`` 选项。还添加了 ``DEPENDENCIES`` 别名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:305
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and"
" :command:`cpack_ifw_configure_component_group` commands ``PRIORITY`` "
"option now is deprecated and will be removed in a future version of CMake."
" Please use new ``SORTING_PRIORITY`` option instead."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` 和 "
":command:`cpack_ifw_configure_component_group` 命令 ``PRIORITY`` "
"选项现已弃用，并将在未来版本的 CMake 中删除。请改用新的 ``SORTING_PRIORITY`` 选项。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:310
msgid ""
"The :cpack_gen:`CPack IFW Generator` gained new "
":variable:`CPACK_IFW_PACKAGE_WATERMARK`, "
":variable:`CPACK_IFW_PACKAGE_BANNER`, "
":variable:`CPACK_IFW_PACKAGE_BACKGROUND`, "
":variable:`CPACK_IFW_PACKAGE_WIZARD_STYLE`, "
":variable:`CPACK_IFW_PACKAGE_WIZARD_DEFAULT_WIDTH`, "
":variable:`CPACK_IFW_PACKAGE_WIZARD_DEFAULT_HEIGHT`, and "
":variable:`CPACK_IFW_PACKAGE_TITLE_COLOR` variables to customize a QtIFW "
"installer look."
msgstr ""
":cpack_gen:`CPack IFW Generator` "
"获得了新的 :variable:`CPACK_IFW_PACKAGE_WATERMARK`, "
":variable:`CPACK_IFW_PACKAGE_BANNER`, "
":variable:`CPACK_IFW_PACKAGE_BACKGROUND`, "
":variable:`CPACK_IFW_PACKAGE_WIZARD_STYLE`, :variable:` "
"CPACK_IFW_PACKAGE_WIZARD_DEFAULT_WIDTH`， :variable:` "
"CPACK_IFW_PACKAGE_WIZARD_DEFAULT_HEIGHT` 和 "
":variable:`CPACK_IFW_PACKAGE_TITLE_COLOR` 变量来自定义 QtIFW 安装程序外观。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:320
msgid ""
"The :cpack_gen:`CPack productbuild Generator` gained options to sign "
"packages. See the variables :variable:`CPACK_PRODUCTBUILD_IDENTITY_NAME`, "
":variable:`CPACK_PRODUCTBUILD_KEYCHAIN_PATH`, "
":variable:`CPACK_PKGBUILD_IDENTITY_NAME`, and "
":variable:`CPACK_PKGBUILD_KEYCHAIN_PATH`."
msgstr ""
":cpack_gen:`CPack productbuild Generator` "
"获得了对包进行签名的选项。请参阅变量 :variable:`CPACK_PRODUCTBUILD_IDENTITY_NAME`、 :variable:`CPACK_PRODUCTBUILD_KEYCHAIN_PATH`、 :variable:`CPACK_PKGBUILD_IDENTITY_NAME`"
" 和 :variable:`CPACK_PKGBUILD_KEYCHAIN_PATH`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:326
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to omit tags that are not "
"supported by provided ``rpmbuild`` tool. If unsupported tags are set they "
"are ignored and a developer warning is printed out."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了忽略所提供的 ``rpmbuild`` "
"工具不支持的标签。如果设置了不受支持的标签，它们将被忽略并打印出开发人员警告。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:330
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to generate main component "
"package which forces generation of a rpm for defined component without "
"component suffix in filename and package name. See "
":variable:`CPACK_RPM_MAIN_COMPONENT` variable."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了生成主要组件包，它强制为定义的组件生成 "
"rpm，文件名和包名称中没有组件后缀。请参阅 :variable:`CPACK_RPM_MAIN_COMPONENT` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:335
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to generate a single "
"``debuginfo`` package on demand even if components packaging is used. See "
":variable:`CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE` variable."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了按需生成单个 ``debuginfo`` "
"包，即使使用组件打包也是如此。请参阅 :variable:`CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:339
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to support multiple "
"directives per file when using :variable:`CPACK_RPM_USER_FILELIST` "
"variable."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了在使用 "
":variable:`CPACK_RPM_USER_FILELIST` 变量时支持每个文件的多个指令。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:346
msgid ""
"CMake functionality using cryptographic hashes now supports SHA-3 "
"algorithms."
msgstr "使用加密哈希的 CMake 功能现在支持 SHA-3 算法。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:348
msgid ""
"A new generator expression ``$<IF:cond,true-value,false-value>`` was "
"added. It resolves to the true-value if the condition is ``1`` and "
"resolves to the false-value if the condition is ``0``."
msgstr ""
"添加了一个新的生成器表达式“$<IF:cond,true-value,false-"
"value>”。如果条件为“1”，则解析为真值；如果条件为“0”，则解析为假值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:355
msgid ""
"The :module:`FeatureSummary` module commands :command:`set_package_info`, "
":command:`set_feature_info`, :command:`print_enabled_features`, and "
":command:`print_disabled_features` are now deprecated."
msgstr ""
":module:`FeatureSummary` "
"模块命令 :command:`set_package_info`、 :command:`set_feature_info`、 :command:`print_enabled_features`"
" 和 :command:`print_disabled_features` 现已弃用。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:359
msgid ""
"The :module:`UseSWIG` module ``swig_add_module`` command is now deprecated"
" in favor of ``swig_add_library``."
msgstr ""
":module:`UseSWIG` 模块 ``swig_add_module`` 命令现已弃用，取而代之的是 "
"``swig_add_library``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:365
msgid ""
"If a command specified by the :prop_tgt:`<LANG>_CLANG_TIDY` target "
"property returns non-zero at build time this is now treated as an error "
"instead of silently ignored."
msgstr ""
"如果 :prop_tgt:`<LANG>_CLANG_TIDY` 目标属性指定的命令在构建时返回非零值，现在这将被视为错误，而不是被忽略。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:369
msgid ""
"The :command:`ctest_memcheck` command no longer automatically adds "
"``leak_check=1`` to the options used by ``AddressSanitizer``. The default "
"behavior of ``AddressSanitizer`` is to run `LeakSanitizer` to check leaks "
"unless ``leak_check=0``."
msgstr ""
":command:`ctest_memcheck` 命令不再自动将 ``leak_check=1`` 添加到 "
"``AddressSanitizer`` 使用的选项中。 ``AddressSanitizer`` 的默认行为是运行 `LeakSanitizer`"
" 来检查泄漏，除非 ``leak_check=0``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:374
msgid ""
"The :command:`ctest_memcheck` command was fixed to correctly append extra "
"sanitizer options read from the "
":variable:`CTEST_MEMORYCHECK_SANITIZER_OPTIONS` variable to the "
"environment variables used internally by the sanitizers."
msgstr ""
":command:`ctest_memcheck` 命令已修复，可以正确地将从 "
"CTEST_MEMORYCHECK_SANITIZER_OPTIONS 变量读取的额外消毒剂选项附加到消毒剂内部使用的环境变量中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:379
msgid ""
"The :module:`FeatureSummary` module :command:`set_package_properties` "
"command no longer forces the package type to ``OPTIONAL`` when the type is"
" not explicitly set."
msgstr ""
":module:`FeatureSummary` 模块 :command:`set_package_properties` "
"命令在未明确设置类型时不再强制包类型为“可选”。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:383
msgid ""
"The :manual:`Compile Features <cmake-compile-features(7)>` functionality "
"is now aware of features supported by Intel C++ compilers versions 12.1 "
"through 17.0 on UNIX and Windows platforms."
msgstr ""
":manual:`Compile Features <cmake-compile-features(7)>` 功能现在可以识别 UNIX 和 "
"Windows 平台上英特尔 C++ 编译器版本 12.1 到 17.0 支持的功能。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:387
msgid ""
"Calls to the :module:`FindPkgConfig` module :command:`pkg_check_modules` "
"command following a successful call learned to re-evaluate the cached "
"values for a given prefix after changes to the parameters to the command "
"for that prefix."
msgstr ""
"调用:module:`FindPkgConfig` 模块 :command:`pkg_check_modules` "
"成功调用后的命令学会了在更改给定前缀命令的参数后重新评估该前缀的缓存值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:392
msgid ""
"When using :prop_tgt:`AUTOMOC` or :prop_tgt:`AUTOUIC`, generated "
"``moc_*``, ``*.moc`` and ``ui_*`` are placed in the "
"``<CMAKE_CURRENT_BINARY_DIR>/<TARGETNAME>_autogen/include`` directory "
"which is automatically added to the target's "
":prop_tgt:`INCLUDE_DIRECTORIES`. It is therefore not necessary anymore to "
"have :variable:`CMAKE_CURRENT_BINARY_DIR` in the target's "
":prop_tgt:`INCLUDE_DIRECTORIES`."
msgstr ""
"当使用 :prop_tgt:`AUTOMOC` 或 :prop_tgt:`AUTOUIC` 时，生成的 ``moc_*``、``*.moc`` 和 "
"``ui_*`` 被放置在 ``<CMAKE_CURRENT_BINARY_DIR>/<TARGETNAME >_autogen/include``"
" 目录自动添加到目标的 :prop_tgt:`INCLUDE_DIRECTORIES`。因此不再需要在目标的 "
":prop_tgt:`INCLUDE_DIRECTORIES` 中包含 :variable:`CMAKE_CURRENT_BINARY_DIR`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:400
msgid ""
"The :generator:`Sublime Text 2` generator no longer runs the native build "
"command (e.g. ``ninja`` or ``make``) with verbose build output enabled."
msgstr ""
":generator:`Sublime Text 2` 生成器不再运行原生构建命令（例如 ``ninja`` 或 "
"``make``）并启用详细构建输出。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:404
msgid ""
"The :command:`try_compile` command source file signature now honors the "
":variable:`CMAKE_WARN_DEPRECATED` variable value in the generated test "
"project."
msgstr ""
":command:`try_compile` 命令源文件签名现在支持生成的测试项目中的 "
":variable:`CMAKE_WARN_DEPRECATED` 变量值。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:408
msgid ""
"The :ref:`Visual Studio Generators` for VS 2010 and above now place per-"
"source file flags after target-wide flags when they are classified as raw "
"flags with no project file setting (``AdditionalOptions``). This behavior "
"is more consistent with the ordering of flags produced by other "
"generators, and allows flags on more-specific properties (per-source) to "
"override those on more general ones (per-target)."
msgstr ""
"VS 2010 及更高版本的 :ref:`Visual Studio Generators` "
"现在将每个源文件标志放在目标范围标志之后，当它们被归类为没有项目文件设置的原始标志时（``AdditionalOptions``）。此行为与其他生成器生成的标志的顺序更加一致，并允许更具体的属性（每个源）上的标志覆盖更通用的（每个目标）上的标志。"

#: ../../cmake-prefix/src/cmake/Help/release/3.8.rst:415
msgid ""
"The precompiled Windows binary MSI package provided on ``cmake.org`` now "
"records the installation directory in the Windows Registry under the key "
"``HKLM\\Software\\Kitware\\CMake`` with a value named ``InstallDir``."
msgstr ""
"``cmake.org`` 上提供的预编译 Windows 二进制 MSI 包现在将安装目录记录在 Windows 注册表中的键 "
"``HKLM\\Software\\Kitware\\CMake`` 下，其值名为 ``InstallDir``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:2
msgid "CMake 3.9 Release Notes"
msgstr "CMake 3.9 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:8
msgid "Changes made since CMake 3.8 include the following."
msgstr "自 CMake 3.8 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:16
msgid ""
"``CUDA`` is now supported by the :ref:`Visual Studio Generators` for VS "
"2010 and above.  This complements the existing support by the "
":ref:`Makefile Generators` and the :generator:`Ninja` generator. CUDA "
"8.0.61 or higher is recommended due to known bugs in the VS integration by"
" earlier versions."
msgstr ""
"VS 2010 及更高版本的 Visual Studio Generators 现在支持 ``CUDA``。这补充了 Makefile "
"Generators 和 Ninja 生成器的现有支持。由于早期版本的 VS 集成中存在已知错误，建议使用 CUDA 8.0.61 或更高版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:22
msgid ""
"CMake is now aware of the :prop_tgt:`C++ standards <CXX_STANDARD>` and "
":prop_tgt:`C standards <C_STANDARD>` and their associated meta-features "
"for the following :variable:`compiler ids <CMAKE_<LANG>_COMPILER_ID>`: "
"``Cray``, ``PGI``, and ``XL``."
msgstr ""
"CMake 现在知道:prop_tgt:`C++ 标准 <CXX_STANDARD>` 和:prop_tgt:`C 标准 <C_STANDARD>`"
" 及其相关的元特性，用于以下 :variable:`编译器 ID <CMAKE_<LANG>_COMPILER_ID>` ：``Cray``、``PGI`` 和 "
"``XL``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:30
msgid ""
":ref:`Visual Studio Generators` for VS 2010 and above learned to support "
"the ``ASM_NASM`` language when ``nasm`` is installed."
msgstr ""
":ref: VS 2010 及更高版本的 Visual Studio Generators 学会了在安装 nasm 时支持 `ASM_NASM`` "
"语言。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:33
msgid ""
"The :generator:`Xcode` generator learned to create Xcode schema files. "
"This is an experimental feature and can be activated by setting the "
":variable:`CMAKE_XCODE_GENERATE_SCHEME` variable to a ``TRUE`` value."
msgstr ""
":generator:`Xcode` 生成器学会了创建 Xcode 模式文件。这是一项实验性功能，可以通过将 "
":variable:`CMAKE_XCODE_GENERATE_SCHEME` 变量设置为 ``TRUE`` 值来激活。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:40
msgid ""
"The :command:`add_library` command ``IMPORTED`` option learned to support "
":ref:`Object Libraries`."
msgstr ""
":command:`add_library` 命令 ``IMPORTED`` 选项学会了支持 :ref:`Object Libraries`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:43
msgid ""
"The :command:`find_library` command learned to search ``libx32`` paths "
"when the build targets the ``x32`` ABI.  See the "
":prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` global property."
msgstr ""
":command:`find_library` 命令学会了在构建目标为 ``x32`` ABI 时搜索 ``libx32`` 路径。请参阅 "
":prop_gbl:`FIND_LIBRARY_USE_LIBX32_PATHS` 全局属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:47
msgid ""
"The :command:`include_external_msproject` command learned to use the "
":prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` target property to map current "
"configurations to the external configurations."
msgstr ""
":command:`include_external_msproject` "
"命令学会了使用 :prop_tgt:`MAP_IMPORTED_CONFIG_<CONFIG>` 目标属性将当前配置映射到外部配置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:51
msgid ""
"The :command:`install(TARGETS)` command learned a new ``OBJECTS`` option "
"to specify where to install :ref:`Object Libraries`."
msgstr ""
":command:`install(TARGETS)` 命令学习了一个新的 ``OBJECTS`` 选项来指定安装 :ref:`Object "
"Libraries` 的位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:54
msgid ""
"The :command:`install(EXPORT)` command learned how to export :ref:`Object "
"Libraries`."
msgstr ":command:`install(EXPORT)` 命令学会了如何导出 :ref:`Object Libraries`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:57
msgid ""
"The :command:`project` command learned an optional ``DESCRIPTION`` "
"parameter to set the :variable:`PROJECT_DESCRIPTION` variable."
msgstr ""
":command:`project` 命令学习了一个可选的 ``DESCRIPTION`` 参数来设置 "
":variable:`PROJECT_DESCRIPTION` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:60
msgid ""
"The :command:`separate_arguments` command gained a ``NATIVE_COMMAND`` mode"
" that performs argument separation depending on the host operating system."
msgstr ""
":command:`separate_arguments` 命令获得了一种 ``NATIVE_COMMAND`` "
"模式，该模式根据主机操作系统执行参数分离。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:66
msgid ""
"A :variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS` variable was added for "
"use when :ref:`Cross Compiling for Android with the NDK` to request use of"
" the deprecated headers even when unified headers are available. The "
"default is now to use unified headers if available."
msgstr ""
"添加了一个 :variable:`CMAKE_ANDROID_NDK_DEPRECATED_HEADERS` 变量，以便在 :ref:`使用 NDK"
" 为 Android 进行交叉编译时请求使用已弃用的标头，即使在统一标头可用时也是如此。如果可用，现在默认使用统一标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:71
msgid ""
"A :variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` variable was introduced to "
"allow :variable:`CMAKE_AUTOMOC` to extract additional dependency file "
"names for ``moc`` from the contents of source files."
msgstr ""
"引入了一个 :variable:`CMAKE_AUTOMOC_DEPEND_FILTERS` 变量以允许 "
":variable:`CMAKE_AUTOMOC` 从源文件的内容中提取 ``moc`` 的附加依赖文件名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:75
msgid ""
"A :variable:`CMAKE_AUTOUIC_SEARCH_PATHS` variable was introduced to allow "
":variable:`CMAKE_AUTOUIC` to search for ``foo.ui`` in more places than the"
" vicinity of the file including ``ui_foo.h``."
msgstr ""
"引入了 :variable:`CMAKE_AUTOUIC_SEARCH_PATHS` 变量，以允许 "
":variable:`CMAKE_AUTOUIC` 在比包含 ``ui_foo.h`` 的文件附近更多的地方搜索 ``foo.ui``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:79
msgid ""
"A :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable was added to "
"tell the :command:`find_library` command to search in a ``lib<suffix>`` "
"directory before each ``lib`` directory that would normally be searched."
msgstr ""
"添加了 :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` 变量，告诉 "
":command:`find_library` 命令在通常搜索的每个 ``lib`` 目录之前搜索 ``lib<suffix>`` 目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:83
msgid ""
"A :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` variable was added to "
"initialize the :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` property on all "
"targets."
msgstr ""
"添加了 :variable:`CMAKE_INTERPROCEDURAL_OPTIMIZATION` 变量以初始化所有目标上的 "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 属性。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:87
msgid ""
"A :variable:`CMAKE_<LANG>_COMPILER_AR` variable was added to hold the path"
" to the GCC/Clang wrapper of ``ar``."
msgstr ""
"添加了一个 :variable:`CMAKE_<LANG>_COMPILER_AR` 变量来保存 ``ar`` 的 GCC/Clang "
"包装器的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:90
msgid ""
"A :variable:`CMAKE_<LANG>_COMPILER_RANLIB` variable was added to hold the "
"path to the GCC/Clang wrapper of ``ranlib``."
msgstr ""
"添加了一个 :variable:`CMAKE_<LANG>_COMPILER_RANLIB` 变量来保存 ``ranlib`` 的 "
"GCC/Clang 包装器的路径。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:93
msgid ""
"The :variable:`CMAKE_SYSROOT_COMPILE` and :variable:`CMAKE_SYSROOT_LINK` "
"variables were added to use separate sysroots for compiling and linking."
msgstr ""
"添加了 :variable:`CMAKE_SYSROOT_COMPILE` 和 :variable:`CMAKE_SYSROOT_LINK` "
"变量以使用单独的 sysroots 进行编译和链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:99
msgid ""
"A new :prop_tgt:`AUTOGEN_BUILD_DIR` target property was introduced to set "
"a custom output directory for :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTOUIC`, "
"and :prop_tgt:`AUTORCC`."
msgstr ""
"引入了一个新的 :prop_tgt:`AUTOGEN_BUILD_DIR` 目标属性来为 "
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTOUIC` 和 :prop_tgt:`AUTORCC` 设置自定义输出目录。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:103
msgid ""
"A new :prop_tgt:`AUTOMOC_DEPEND_FILTERS` target property was introduced to"
" allow :prop_tgt:`AUTOMOC` to extract additional dependency file names for"
" ``moc`` from the contents of source files."
msgstr ""
"引入了一个新的 :prop_tgt:`AUTOMOC_DEPEND_FILTERS` 目标属性以允许 :prop_tgt:`AUTOMOC` "
"从源文件的内容中提取 ``moc`` 的附加依赖文件名。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:107
msgid ""
"A new :prop_tgt:`AUTOUIC_SEARCH_PATHS` target property was introduced to "
"allow :prop_tgt:`AUTOUIC` to search for ``foo.ui`` in more places than the"
" vicinity of the file including ``ui_foo.h``."
msgstr ""
"引入了一个新的 :prop_tgt:`AUTOUIC_SEARCH_PATHS` 目标属性，以允许 :prop_tgt:`AUTOUIC` 在比包括"
" ``ui_foo.h`` 的文件附近更多的地方搜索 ``foo.ui``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:111
msgid ""
"Global properties :prop_gbl:`AUTOGEN_SOURCE_GROUP`, "
":prop_gbl:`AUTOMOC_SOURCE_GROUP` and :prop_gbl:`AUTORCC_SOURCE_GROUP` were"
" introduced to allow files generated by :prop_tgt:`AUTOMOC` or "
":prop_tgt:`AUTORCC` to be placed in a :command:`source_group`."
msgstr ""
"引入了全局属性 :prop_gbl:`AUTOGEN_SOURCE_GROUP`、 :prop_gbl:`AUTOMOC_SOURCE_GROUP` "
"和 :prop_gbl:`AUTORCC_SOURCE_GROUP` 以允许将由 :prop_tgt:`AUTOMOC` 或 "
":prop_tgt:`AUTORCC` 生成的文件放置在 :command:`source_group`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:117
msgid ""
"A :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` target property and "
"corresponding :variable:`CMAKE_BUILD_WITH_INSTALL_NAME_DIR` variable were "
"added to control whether to use the :prop_tgt:`INSTALL_NAME_DIR` target "
"property value for binaries in the build tree.  This is for macOS "
"``install_name`` as :prop_tgt:`BUILD_WITH_INSTALL_RPATH` is for ``RPATH``."
msgstr ""
"添加了 :prop_tgt:`BUILD_WITH_INSTALL_NAME_DIR` 目标属性和相应的 "
":variable:`CMAKE_BUILD_WITH_INSTALL_NAME_DIR` 变量以控制是否使用 "
":prop_tgt:`INSTALL_NAME_DIR` 构建树中二进制文件的目标属性值。这适用于 macOS "
"``install_name``，因为 :prop_tgt:`BUILD_WITH_INSTALL_RPATH` 适用于 ``RPATH``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:123
msgid ""
"A :prop_tgt:`CUDA_PTX_COMPILATION` target property was added to "
":ref:`Object Libraries` to support compiling to ``.ptx`` files instead of "
"host object files."
msgstr ""
":prop_tgt:`CUDA_PTX_COMPILATION` 目标属性已添加到 :ref:`Object Libraries` 以支持编译为 "
"`.ptx`` 文件而不是宿主对象文件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:127
msgid ""
"A :prop_gbl:`GENERATOR_IS_MULTI_CONFIG` global property was added to "
"determine whether the current generator is a multi-configuration generator"
" (such as :ref:`Visual Studio Generators` or :generator:`Xcode`)."
msgstr ""
"添加了 :prop_gbl:`GENERATOR_IS_MULTI_CONFIG` 全局属性以确定当前生成器是否为多配置生成器（例如 "
":ref:`Visual Studio Generators` 或 :generator:`Xcode`）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:131
msgid ""
"The :prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property is now "
"enforced when enabled.  CMake will add IPO flags unconditionally or "
"produce an error if it does not know the flags for the current compiler.  "
"The project is now responsible to use the :module:`CheckIPOSupported` "
"module to check for IPO support before enabling the target property.  See "
"policy :policy:`CMP0069`."
msgstr ""
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 目标属性现在在启用时强制执行。 CMake 将无条件地添加 IPO"
" 标志，或者如果它不知道当前编译器的标志则产生错误。该项目现在负责使用 CheckIPOSupported 模块在启用目标属性之前检查 IPO "
"支持。请参阅政策:policy:`CMP0069`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:137
msgid ""
"The :prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` target property may now be used"
" in combination with explicit ``.def`` files in order to export all "
"symbols from the object files within a target plus an explicit list of "
"symbols that the linker finds in dependencies (e.g. ``msvcrt.lib``)."
msgstr ""
":prop_tgt:`WINDOWS_EXPORT_ALL_SYMBOLS` 目标属性现在可以与显式 `.def`` "
"文件结合使用，以便从目标文件中导出目标文件中的所有符号以及链接器在依赖项中找到的显式符号列表（例如``msvcrt.lib``）。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:146
msgid ""
"A :module:`CheckIPOSupported` module was added to help projects check "
"whether interprocedural optimization (IPO) is supported by the current "
"toolchain and CMake version."
msgstr ""
"添加了 :module:`CheckIPOsupported` 模块以帮助项目检查当前工具链和 CMake 版本是否支持过程间优化 (IPO)。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:150
msgid ""
"The :module:`CMakeFindDependencyMacro` module ``find_dependency`` macro "
"now forwards all arguments to the underlying :command:`find_package` call."
"  Existing uses will continue to function as before, but callers can now "
"access the full suite of arguments that :command:`find_package` accepts."
msgstr ""
":module:`CMakeFindDependencyMacro` 模块 ``find_dependency`` 宏现在将所有参数转发给底层的 "
":command:`find_package` 调用。现有用途将继续像以前一样运行，但调用者现在可以访问 "
":command:`find_package` 接受的全套参数。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:155
msgid ""
"The :module:`FeatureSummary` module :command:`feature_summary` command now"
" accepts the new ``DEFAULT_DESCRIPTION`` option that will print the "
"default title for the selected package type."
msgstr ""
":module:`FeatureSummary` 模块 :command:`feature_summary` 命令现在接受新的 "
"``DEFAULT_DESCRIPTION`` 选项，该选项将打印所选包类型的默认标题。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:159
msgid ""
"The :module:`FeatureSummary` module gained a new "
":variable:`FeatureSummary_<TYPE>_DESCRIPTION` variable that can be defined"
" for each ``<TYPE>`` to replace the type name with the specified string "
"whenever the package type is used in an output string by the module."
msgstr ""
":module:`FeatureSummary` 模块获得了一个新的 "
":variable:`FeatureSummary_<TYPE>_DESCRIPTION` 变量，可以为每个 ``<TYPE>`` "
"定义该变量，以便在使用包类型时用指定的字符串替换类型名称在模块的输出字符串中。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:164
msgid ""
"The :module:`FindDoxygen` module learned to control Doxygen behavior using"
" CMake variables and generate documentation via the newly added "
":command:`doxygen_add_docs` function. The Doxygen input file "
"(``Doxyfile``) is automatically generated and doxygen is run as part of a "
"custom target. Additional components can be specified to find optional "
"tools: ``dot``, ``mscgen`` and ``dia``."
msgstr ""
"FindDoxygen 模块学会了使用 CMake 变量控制 Doxygen 行为，并通过新添加的 doxygen_add_docs 函数生成文档。"
" Doxygen 输入文件 (``Doxyfile``) 是自动生成的，doxygen "
"作为自定义目标的一部分运行。可以指定其他组件以查找可选工具：``dot``、``mscgen`` 和 ``dia``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:171
msgid "The :module:`FindMPI` module now provides imported targets."
msgstr ":module:`FindMPI` 模块现在提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:173
msgid ""
"The :module:`FindProtobuf` module :command:`protobuf_generate_cpp` command"
" gained an ``EXPORT_MACRO`` option to specify the name of a DLL export "
"markup macro."
msgstr ""
":module:`FindProtobuf` 模块 :command:`protobuf_generate_cpp` 命令获得了一个 "
"``EXPORT_MACRO`` 选项来指定 DLL 导出标记宏的名称。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:177
msgid ""
"The :module:`FindProtobuf` module now supports usage of static libraries "
"for Unix via a new ``Protobuf_USE_STATIC_LIBS`` input variable."
msgstr "FindProtobuf 模块现在支持通过新的“Protobuf_USE_STATIC_LIBS”输入变量使用 Unix 静态库。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:180
msgid ""
"The :module:`FindProtobuf` module now provides imported targets when the "
"libraries are found."
msgstr ":module:`FindProtobuf` 模块现在在找到库时提供导入的目标。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:183
msgid ""
"A new :module:`GoogleTest` module was added to provide the "
":command:`gtest_add_tests` function independently of the "
":module:`FindGTest` module. The function was also updated to support "
"keyword arguments, with functionality expanded to allow a test name prefix"
" and suffix to be specified, the dependency on the source files to be "
"optional and the list of discovered test cases to be returned to the "
"caller."
msgstr ""
"添加了一个新的 GoogleTest 模块以提供独立于 FindGTest 模块的:command:`gtest_add_tests` "
"函数。该函数也被更新以支持关键字参数，功能扩展到允许指定测试名称前缀和后缀，对源文件的依赖是可选的，并将发现的测试用例列表返回给调用者。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:193
msgid ""
"The :command:`ctest_submit` command gained a ``HTTPHEADER`` option to "
"specify custom headers to send during submission."
msgstr ":command:`ctest_submit` 命令获得了一个 ``HTTPHEADER`` 选项来指定在提交期间发送的自定义标头。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:196
msgid ""
"The :manual:`ctest(1)` executable gained new options which allow the "
"developer to disable automatically adding tests to the test set to satisfy"
" fixture dependencies. ``-FS`` prevents adding setup tests for fixtures "
"matching the provided regular expression, ``-FC`` prevents adding cleanup "
"tests for matching fixtures and ``-FA`` prevents adding any test for "
"matching fixtures."
msgstr ""
":manual:`ctest(1)` 可执行文件获得了新选项，允许开发人员禁用自动将测试添加到测试集以满足夹具依赖性。 ``-FS`` "
"防止为匹配提供的正则表达式的夹具添加设置测试，``-FC`` 防止为匹配的夹具添加清理测试，``-FA`` 防止为匹配的夹具添加任何测试。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:203
msgid ""
"A :prop_test:`DISABLED` test property was added to mark tests that are "
"configured but explicitly disabled so they do not run."
msgstr "添加了 :prop_test:`DISABLED` 测试属性以标记已配置但显式禁用的测试，因此它们不会运行。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:209
msgid ""
"The :cpack_gen:`CPack Archive Generator` learned to modify the filename "
"per-component.  See the :variable:`CPACK_ARCHIVE_FILE_NAME` variable and "
"its per-component version :variable:`CPACK_ARCHIVE_<component>_FILE_NAME`."
msgstr ""
":cpack_gen:`CPack Archive Generator` "
"学会了修改每个组件的文件名。请参阅 :variable:`CPACK_ARCHIVE_FILE_NAME` "
"变量及其每个组件版本 :variable:`CPACK_ARCHIVE_<component>_FILE_NAME`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:213
msgid ""
"The :module:`CPackComponent` module :command:`cpack_add_component` command"
" gained a new ``PLIST <filename>`` option to specify the ``pkgbuild`` "
"``--component-plist`` argument when using the :module:`productbuild "
"<CPackProductBuild>` generator."
msgstr ""
":module:`CPackComponent` 模块 :command:`cpack_add_component` 命令获得了一个新的 "
"``PLIST <filename>`` 选项，用于在使用 :module 时指定 ``pkgbuild`` ``--component-"
"plist`` 参数 :`productbuild <CPackProductBuild>` 生成器。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:218
msgid ""
"The :module:`CPackIFW` module :command:`cpack_ifw_configure_component` and"
" :command:`cpack_ifw_configure_component_group` commands gained "
"internationalization support for ``DISPLAY_NAME`` and ``DESCRIPTION`` "
"options."
msgstr ""
":module:`CPackIFW` 模块 :command:`cpack_ifw_configure_component` "
"和 :command:`cpack_ifw_configure_component_group` 命令获得了对 ``DISPLAY_NAME`` 和 "
"``DESCRIPTION`` 选项的国际化支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:223
msgid ""
"The :cpack_gen:`CPack IFW Generator` learned the new hint "
":variable:`CPACK_IFW_ROOT` variable for finding the QtIFW tool suite "
"installed in a non-standard place."
msgstr ""
":cpack_gen:`CPack IFW Generator` 学习了新提示 :variable:`CPACK_IFW_ROOT` "
"变量，用于查找安装在非标准位置的 QtIFW 工具套件。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:227
msgid ""
"The :cpack_gen:`CPack productbuild Generator` gained a new "
":variable:`CPACK_PRODUCTBUILD_RESOURCES_DIR` variable to specify resources"
" to be copied into the ``Resources`` directory."
msgstr ""
":cpack_gen:`CPack productbuild Generator` "
"获得了一个新的 :variable:`CPACK_PRODUCTBUILD_RESOURCES_DIR` 变量来指定要复制到 "
"``Resources`` 目录中的资源。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:232
msgid ""
"The :cpack_gen:`CPack RPM Generator` learned to modify the ``debuginfo`` "
"package name.  See the :variable:`CPACK_RPM_DEBUGINFO_FILE_NAME` variable."
msgstr ""
":cpack_gen:`CPack RPM Generator` 学会了修改 ``debuginfo`` "
"包名。请参阅 :variable:`CPACK_RPM_DEBUGINFO_FILE_NAME` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:235
msgid ""
"The :cpack_gen:`CPack WIX Generator` patching system now has the ability "
"to set additional attributes.  This can be done by specifying attributes "
"with the ``CPackWiXFragment`` XML tag after the ``Id`` attribute. See the "
":variable:`CPACK_WIX_PATCH_FILE` variable."
msgstr ""
":cpack_gen:`CPack WIX Generator` 补丁系统现在可以设置额外的属性。这可以通过在 ``Id`` 属性之后使用 "
"``CPackWiXFragment`` XML 标记指定属性来完成。请参阅 :variable:`CPACK_WIX_PATCH_FILE` 变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:240
msgid ""
"The :cpack_gen:`CPack WIX Generator` implemented a new "
":variable:`CPACK_WIX_ROOT_FOLDER_ID` variable which allows using a custom "
"root folder ID instead of the default ``ProgramFilesFolder`` / "
"``ProgramFiles64Folder``."
msgstr ""
":cpack_gen:`CPack WIX Generator` "
"实现了一个新的 :variable:`CPACK_WIX_ROOT_FOLDER_ID` 变量，它允许使用自定义根文件夹 ID 而不是默认的 "
"``ProgramFilesFolder`` / ``ProgramFiles64Folder``。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:248
msgid ""
"Interprocedural optimization (IPO) is now supported for GNU and Clang "
"compilers using link time optimization (LTO) flags.  See the "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` target property and "
":module:`CheckIPOSupported` module."
msgstr ""
"使用链接时间优化 (LTO) 标志的 GNU 和 Clang 编译器现在支持过程间优化 (IPO)。请参阅 "
":prop_tgt:`INTERPROCEDURAL_OPTIMIZATION` 目标属性和 :module:`CheckIPOsupported`"
" 模块。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:253
msgid ""
"The ``TARGET_OBJECTS`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` is now supported by the :command:`add_custom_command` and"
" :command:`file(GENERATE)` commands."
msgstr ""
"``TARGET_OBJECTS`` :manual:`generator expression <cmake-generator-"
"expressions(7)>` 现在由 :command:`add_custom_command` 和 "
":command:`file(GENERATE)` 命令支持。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:258
msgid ""
"Two new informational generator expressions to retrieve Apple Bundle "
"directories have been added. The first one "
":genex:`$<TARGET_BUNDLE_DIR:tgt>` outputs the full path to the Bundle "
"directory, the other one :genex:`$<TARGET_BUNDLE_CONTENT_DIR:tgt>` outputs"
" the full path to the ``Contents`` directory of macOS Bundles and App "
"Bundles. For all other bundle types and SDKs it is identical with "
":genex:`$<TARGET_BUNDLE_DIR:tgt>`. The new expressions are helpful to "
"query Bundle locations independent of the different Bundle types and "
"layouts on macOS and iOS."
msgstr ""
"添加了两个用于检索 Apple Bundle 目录的新信息生成器表达式。第一个 :genex:`$<TARGET_BUNDLE_DIR:tgt>` "
"输出 Bundle 目录的完整路径，另一个 :genex:`$<TARGET_BUNDLE_CONTENT_DIR:tgt>` 输出到 "
"``Contents`` 目录的完整路径macOS 捆绑包和 App 捆绑包。对于所有其他捆绑包类型和 SDK，它与 "
":genex:`$<TARGET_BUNDLE_DIR:tgt>` 相同。新表达式有助于查询独立于 macOS 和 iOS 上不同 Bundle "
"类型和布局的 Bundle 位置。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:270
msgid ""
"An explicit deprecation diagnostic was added for policies ``CMP0036`` and "
"below.  The :manual:`cmake-policies(7)` manual explains that the OLD "
"behaviors of all policies are deprecated and that projects should always "
"port to the NEW behaviors as soon as possible."
msgstr ""
"为策略“CMP0036”及以下添加了明确的弃用诊断。 :manual:`cmake-policies(7)` "
"手册解释说，所有策略的旧行为都已弃用，项目应始终尽快移植到新行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:275
msgid ""
"The :generator:`Visual Studio 8 2005` generator is now deprecated and will"
" be removed in a future version of CMake."
msgstr ":generator:`Visual Studio 8 2005` 生成器现已弃用，并将在未来版本的 CMake 中删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:278
msgid ""
"The :generator:`Visual Studio 7 .NET 2003` generator has been removed."
msgstr ":generator:`Visual Studio 7 .NET 2003` 生成器已被删除。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:280
msgid ""
"The :generator:`Xcode` generator dropped support for Xcode versions older "
"than 3."
msgstr ":generator:`Xcode` 生成器不再支持早于 3 的 Xcode 版本。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:283
msgid "The :module:`FindDoxygen` module has deprecated several variables."
msgstr "FindDoxygen 模块弃用了几个变量。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:285
msgid ""
"The version of curl bundled with CMake no longer accepts URLs of the form "
"``file://c:/...`` on Windows due to a change in upstream curl 7.52.  Use "
"the form ``file:///c:/...`` instead to work on all versions."
msgstr ""
"由于上游 curl 7.52 的更改，与 CMake 捆绑在一起的 curl 版本在 Windows 上不再接受 ``file://c:/...``"
" 形式的 URL。使用形式 ``file:///c:/...`` 而不是在所有版本上工作。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:292
msgid ""
"When using :prop_tgt:`AUTOMOC`, CMake now scans for the presence of the "
"``Q_PLUGIN_METADATA`` macro and reruns moc when the file from the macro's "
"``FILE`` argument changes."
msgstr ""
"使用 :prop_tgt:`AUTOMOC 时，CMake 现在会扫描 ``Q_PLUGIN_METADATA`` 宏的存在，并在来自宏的 "
"``FILE`` 参数的文件发生更改时重新运行 moc。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:296
msgid ""
"When :prop_tgt:`AUTOMOC` detects an include statement of the form "
"``#include \"moc_<basename>.cpp\"`` the search for the respective header "
"file now looks in the :prop_tgt:`INCLUDE_DIRECTORIES` of the target as "
"well."
msgstr ""
"当 :prop_tgt:`AUTOMOC` 检测到形式为``#include \"moc_<basename>.cpp\"`` "
"的包含语句时，搜索相应的头文件现在也会在目标的 :prop_tgt:`INCLUDE_DIRECTORIES` 中查找."

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:300
msgid ""
"When running tests, CTest learned to treat skipped tests (using the "
":prop_test:`SKIP_RETURN_CODE` property) the same as tests with the new "
":prop_test:`DISABLED` property. Due to this change, CTest will not "
"indicate failure when all tests are either skipped or pass."
msgstr ""
"在运行测试时，CTest 学会了将跳过的测试（使用 :prop_test:`SKIP_RETURN_CODE` 属性）处理为与使用新的 "
":prop_test:`DISABLED` 属性的测试相同。由于此更改，当所有测试都被跳过或通过时，CTest 将不会指示失败。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:305
msgid ""
"The :generator:`Ninja` generator has loosened the dependencies of object "
"compilation.  Object compilation now depends only on custom targets and "
"custom commands associated with libraries on which the object's target "
"depends and no longer depends on the libraries themselves.  Source files "
"in dependent targets may now compile without waiting for their targets' "
"dependencies to link."
msgstr ""
":generator:`Ninja` "
"生成器放宽了对象编译的依赖性。对象编译现在仅依赖于与对象目标所依赖的库关联的自定义目标和自定义命令，不再依赖于库本身。依赖目标中的源文件现在可以编译而无需等待其目标的依赖项链接。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:312
msgid ""
"On macOS, ``RPATH`` settings such as :prop_tgt:`BUILD_WITH_INSTALL_RPATH` "
"no longer affect the ``install_name`` field.  See policy "
":policy:`CMP0068`."
msgstr ""
"在 macOS 上，``RPATH`` 设置，例如 :prop_tgt:`BUILD_WITH_INSTALL_RPATH` 不再影响 "
"``install_name`` 字段。请参阅政策:policy:`CMP0068`。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:315
msgid ""
"The :generator:`Visual Studio 14 2015` generator has been taught about a "
"change to the ``v140`` toolset made by a VS 2015 update.  VS changed the "
"set of values it understands for the ``GenerateDebugInformation`` linker "
"setting that produces the ``-DEBUG`` linker flag variants."
msgstr ""
":generator:`Visual Studio 14 2015` 生成器已了解 VS 2015 更新对 ``v140`` 工具集的更改。 VS "
"更改了它理解的生成“-DEBUG”链接器标志变体的“GenerateDebugInformation”链接器设置的值集。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:323
msgid "Changes made since CMake 3.9.0 include the following."
msgstr "自 CMake 3.9.0 以来所做的更改包括以下内容。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:326
msgid "3.9.1"
msgstr "3.9.1"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:328
msgid ""
"The ``find_`` command ``PACKAGE_ROOT`` search path group added by CMake "
"3.9.0 has been removed for the 3.9 series due to regressions caused by new"
" use of ``<PackageName>_ROOT`` variables.  The behavior may be re-"
"introduced in the future in a more-compatible way."
msgstr ""
"CMake 3.9.0 添加的 ``find_`` 命令 ``PACKAGE_ROOT`` 搜索路径组已从 3.9 系列中删除，这是由于新使用 "
"``<PackageName>_ROOT`` 变量导致的回归。将来可能会以更兼容的方式重新引入该行为。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:334
msgid "3.9.2"
msgstr "3.9.2"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:336
msgid ""
"On macOS, the default application bundle ``Info.plist`` file no longer "
"enables Hi-DPI support as it did in 3.9.0 and 3.9.1.  The change had to be"
" reverted because it broke iOS applications."
msgstr ""
"在 macOS 上，默认应用程序捆绑包“Info.plist”文件不再像在 3.9.0 和 3.9.1 中那样启用 Hi-DPI "
"支持。必须恢复更改，因为它破坏了 iOS 应用程序。"

#: ../../cmake-prefix/src/cmake/Help/release/3.9.rst:340
msgid ""
"The Xcode generator no longer adds \"outputPaths\" to custom script build "
"phases as it did in 3.9.0 and 3.9.1.  This was added in an attempt to "
"support Xcode 9's new build system, but broke incremental rebuilds for "
"both the old and new Xcode build systems."
msgstr ""
"Xcode 生成器不再像在 3.9.0 和 3.9.1 中那样将“outputPaths”添加到自定义脚本构建阶段。这是为了支持 Xcode 9 "
"的新构建系统而添加的，但破坏了新旧 Xcode 构建系统的增量重建。"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.26"
msgstr "3.26"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.25"
msgstr "3.25"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.24"
msgstr "3.24"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.23"
msgstr "3.23"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.22"
msgstr "3.22"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.21"
msgstr "3.21"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.20"
msgstr "3.20"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.19"
msgstr "3.19"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.18"
msgstr "3.18"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.17"
msgstr "3.17"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.16"
msgstr "3.16"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.15"
msgstr "3.15"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.14"
msgstr "3.14"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.13"
msgstr "3.13"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.12"
msgstr "3.12"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.11"
msgstr "3.11"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.10"
msgstr "3.10"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.9"
msgstr "3.9"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.8"
msgstr "3.8"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.7"
msgstr "3.7"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.6"
msgstr "3.6"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.5"
msgstr "3.5"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.4"
msgstr "3.4"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.3"
msgstr "3.3"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.2"
msgstr "3.2"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.1"
msgstr "3.1"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:13
msgid "3.0"
msgstr "3.0"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:4
msgid "CMake Release Notes"
msgstr "CMake 发行说明"

#: ../../cmake-prefix/src/cmake/Help/release/index.rst:11
msgid "Releases"
msgstr "发布"
