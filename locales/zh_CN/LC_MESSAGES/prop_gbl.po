# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2000-2023 Kitware, Inc. and Contributors
# This file is distributed under the same license as the CMake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMake 3.26.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-01 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.12.1\n"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.rst:2
msgid "ALLOW_DUPLICATE_CUSTOM_TARGETS"
msgstr "ALLOW_DUPLICATE_CUSTOM_TARGETS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.rst:4
msgid "Allow duplicate custom targets to be created."
msgstr "允许创建重复的自定义目标。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.rst:6
msgid ""
"Normally CMake requires that all targets built in a project have globally "
"unique logical names (see policy :policy:`CMP0002`). This is necessary to "
"generate meaningful project file names in :generator:`Xcode` and "
":ref:`Visual Studio Generators` IDE generators.  It also allows the target"
" names to be referenced unambiguously."
msgstr ""
"通常 CMake 要求项目中构建的所有目标都具有全局唯一的逻辑名称（请参阅策略:policy:`CMP0002`）。这是在 "
":generator:`Xcode` 和 :ref:`Visual Studio Generators` IDE "
"生成器中生成有意义的项目文件名所必需的。它还允许明确引用目标名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ALLOW_DUPLICATE_CUSTOM_TARGETS.rst:13
msgid ""
"Makefile generators are capable of supporting duplicate "
":command:`add_custom_target` names.  For projects that care only about "
":ref:`Makefile Generators` and do not wish to support :generator:`Xcode` "
"or :ref:`Visual Studio Generators` IDE generators, one may set this "
"property to ``True`` to allow duplicate custom targets.  The property "
"allows multiple :command:`add_custom_target` command calls in different "
"directories to specify the same target name.  However, setting this "
"property will cause non-Makefile generators to produce an error and refuse"
" to generate the project."
msgstr ""
"Makefile 生成器能够支持重复的 :command:`add_custom_target` 名称。对于只关心 Makefile "
"Generators 而不希望支持 Xcode 或 Visual Studio Generators IDE 生成器的项目，可以将此属性设置为 "
"True 以允许重复的自定义目标。该属性允许在不同目录中调用多个 :command:`add_custom_target` "
"命令以指定相同的目标名称。但是，设置此属性将导致非 Makefile 生成器产生错误并拒绝生成项目。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_SOURCE_GROUP.rst:2
msgid "AUTOGEN_SOURCE_GROUP"
msgstr "AUTOGEN_SOURCE_GROUP"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_SOURCE_GROUP.rst:6
msgid ""
"Name of the  :command:`source_group` for :prop_tgt:`AUTOMOC`, "
":prop_tgt:`AUTORCC` and :prop_tgt:`AUTOUIC` generated files."
msgstr ""
":prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTORCC` 和 :prop_tgt:`AUTOUIC` 生成文件的 "
":command:`source_group` 的名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_SOURCE_GROUP.rst:9
msgid ""
"Files generated by :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and "
":prop_tgt:`AUTOUIC` are not always known at configure time and therefore "
"can't be passed to :command:`source_group`. ``AUTOGEN_SOURCE_GROUP`` can "
"be used instead to generate or select a source group for "
":prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and :prop_tgt:`AUTOUIC` generated"
" files."
msgstr ""
"由 :prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTORCC` 和 :prop_tgt:`AUTOUIC` "
"生成的文件在配置时并不总是已知的，因此不能传递给 :command:`source_group`。 ``AUTOGEN_SOURCE_GROUP``"
" 可用于为 AUTOMOC、AUTORCC 和 AUTOUIC 生成的文件生成或选择源组。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_SOURCE_GROUP.rst:16
msgid ""
"For :prop_tgt:`AUTOMOC`, :prop_tgt:`AUTORCC` and :prop_tgt:`AUTOUIC` "
"specific overrides see :prop_gbl:`AUTOMOC_SOURCE_GROUP`, "
":prop_gbl:`AUTORCC_SOURCE_GROUP` and :prop_gbl:`AUTOUIC_SOURCE_GROUP` "
"respectively."
msgstr ""
"对于 :prop_tgt:`AUTOMOC`、 :prop_tgt:`AUTORCC` 和 :prop_tgt:`AUTOUIC` "
"特定的覆盖，请分别参见 "
":prop_gbl:`AUTOMOC_SOURCE_GROUP`、 :prop_gbl:`AUTORCC_SOURCE_GROUP` 和 "
":prop_gbl:`AUTOUIC_SOURCE_GROUP`。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_TARGETS_FOLDER.rst:2
msgid "AUTOGEN_TARGETS_FOLDER"
msgstr "AUTOGEN_TARGETS_FOLDER"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_TARGETS_FOLDER.rst:4
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_TARGETS_FOLDER.rst:4
msgid ""
"Name of :prop_tgt:`FOLDER` for ``*_autogen`` targets that are added "
"automatically by CMake for targets for which :prop_tgt:`AUTOMOC` is "
"enabled."
msgstr "CMake 为启用了 AUTOMOC 的目标自动添加的 `*_autogen`` 目标的 FOLDER 名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOGEN_TARGETS_FOLDER.rst:7
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_TARGETS_FOLDER.rst:9
msgid ""
"If not set, CMake uses the :prop_tgt:`FOLDER` property of the parent "
"target as a default value for this property.  See also the documentation "
"for the :prop_tgt:`FOLDER` target property and the :prop_tgt:`AUTOMOC` "
"target property."
msgstr ""
"如果未设置，CMake 使用父目标的 :prop_tgt:`FOLDER` 属性作为该属性的默认值。另请参阅 :prop_tgt:`FOLDER` "
"目标属性和 :prop_tgt:`AUTOMOC` 目标属性的文档。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_SOURCE_GROUP.rst:2
msgid "AUTOMOC_SOURCE_GROUP"
msgstr "AUTOMOC_SOURCE_GROUP"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_SOURCE_GROUP.rst:6
msgid ""
"Name of the  :command:`source_group` for :prop_tgt:`AUTOMOC` generated "
"files."
msgstr ":command:`source_group` 的名称，用于 :prop_tgt:`AUTOMOC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_SOURCE_GROUP.rst:8
msgid ""
"When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for "
"files generated by :prop_tgt:`AUTOMOC`."
msgstr ""
"当设置时，它用于代替 :prop_gbl:`AUTOGEN_SOURCE_GROUP` 用于由 :prop_tgt:`AUTOMOC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_TARGETS_FOLDER.rst:2
msgid "AUTOMOC_TARGETS_FOLDER"
msgstr "AUTOMOC_TARGETS_FOLDER"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOMOC_TARGETS_FOLDER.rst:7
msgid ""
"This property is obsolete.  Use :prop_gbl:`AUTOGEN_TARGETS_FOLDER` "
"instead."
msgstr "此属性已过时。请改用 :prop_gbl:`AUTOGEN_TARGETS_FOLDER`。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTORCC_SOURCE_GROUP.rst:2
msgid "AUTORCC_SOURCE_GROUP"
msgstr "AUTORCC_SOURCE_GROUP"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTORCC_SOURCE_GROUP.rst:6
msgid ""
"Name of the  :command:`source_group` for :prop_tgt:`AUTORCC` generated "
"files."
msgstr ":command:`source_group` 的名称，用于 :prop_tgt:`AUTORCC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTORCC_SOURCE_GROUP.rst:8
msgid ""
"When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for "
"files generated by :prop_tgt:`AUTORCC`."
msgstr ""
"当设置时，它用于代替 :prop_gbl:`AUTOGEN_SOURCE_GROUP` 用于由 :prop_tgt:`AUTORCC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOUIC_SOURCE_GROUP.rst:2
msgid "AUTOUIC_SOURCE_GROUP"
msgstr "AUTOUIC_SOURCE_GROUP"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOUIC_SOURCE_GROUP.rst:6
msgid ""
"Name of the  :command:`source_group` for :prop_tgt:`AUTOUIC` generated "
"files."
msgstr ":command:`source_group` 的名称，用于 :prop_tgt:`AUTOUIC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/AUTOUIC_SOURCE_GROUP.rst:8
msgid ""
"When set this is used instead of :prop_gbl:`AUTOGEN_SOURCE_GROUP` for "
"files generated by :prop_tgt:`AUTOUIC`."
msgstr ""
"当设置时，它用于代替 :prop_gbl:`AUTOGEN_SOURCE_GROUP` 用于 :prop_tgt:`AUTOUIC` 生成的文件。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:2
msgid "CMAKE_CUDA_KNOWN_FEATURES"
msgstr "CMAKE_CUDA_KNOWN_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:6
msgid "List of CUDA features known to this version of CMake."
msgstr "此版本的 CMake 已知的 CUDA 功能列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:8
msgid ""
"The features listed in this global property may be known to be available "
"to the CUDA compiler.  If the feature is available with the C++ compiler, "
"it will be listed in the :variable:`CMAKE_CUDA_COMPILE_FEATURES` variable."
msgstr ""
"此全局属性中列出的功能可能已知可用于 CUDA 编译器。如果该功能适用​​于 C++ 编译器，它将列在 "
":variable:`CMAKE_CUDA_COMPILE_FEATURES` 变量中。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:12
msgid ""
"The features listed here may be used with the "
":command:`target_compile_features` command.  See the :manual:`cmake-"
"compile-features(7)` manual for information on compile features and a list"
" of supported compilers."
msgstr ""
"此处列出的功能可以与 :command:`target_compile_features` "
"命令一起使用。有关编译功能的信息和支持的编译器列表，请参阅 :manual:`cmake-compile-features(7)` 手册。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:17
msgid "The features known to this version of CMake are:"
msgstr "此版本的 CMake 已知的功能是："

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:20
msgid "``cuda_std_03``"
msgstr "``cuda_std_03``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:20
msgid "Compiler mode is at least CUDA/C++ 03."
msgstr "编译器模式至少为 CUDA/C++ 03。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:23
msgid "``cuda_std_11``"
msgstr "``cuda_std_11``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:23
msgid "Compiler mode is at least CUDA/C++ 11."
msgstr "编译器模式至少为 CUDA/C++ 11。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:26
msgid "``cuda_std_14``"
msgstr "``cuda_std_14``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:26
msgid "Compiler mode is at least CUDA/C++ 14."
msgstr "编译器模式至少为 CUDA/C++ 14。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:29
msgid "``cuda_std_17``"
msgstr "``cuda_std_17``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:29
msgid "Compiler mode is at least CUDA/C++ 17."
msgstr "编译器模式至少为 CUDA/C++ 17。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:32
msgid "``cuda_std_20``"
msgstr "``cuda_std_20``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:32
msgid "Compiler mode is at least CUDA/C++ 20."
msgstr "编译器模式至少为 CUDA/C++ 20。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:37
msgid "``cuda_std_23``"
msgstr "``cuda_std_23``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:37
msgid "Compiler mode is at least CUDA/C++ 23."
msgstr "编译器模式至少为 CUDA/C++ 23。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:42
msgid "``cuda_std_26``"
msgstr "``cuda_std_26``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CUDA_KNOWN_FEATURES.rst:42
msgid "Compiler mode is at least CUDA/C++ 26."
msgstr "编译器模式至少为 CUDA/C++ 26。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_LANG_STD_FLAGS.txt:3
msgid ""
"If the compiler's default standard level is at least that of the requested"
" feature, CMake may omit the ``-std=`` flag. The flag may still be added "
"if the compiler's default extensions mode does not match the "
":prop_tgt:`<LANG>_EXTENSIONS` target property, or if the "
":prop_tgt:`<LANG>_STANDARD` target property is set."
msgstr ""
"如果编译器的默认标准级别至少是所请求功能的标准级别，CMake "
"可能会省略“-std=”标志。如果编译器的默认扩展模式与目标属性不匹配，或者如果设置了目标属性，则仍可能添加该标志。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:2
msgid "CMAKE_CXX_KNOWN_FEATURES"
msgstr "CMAKE_CXX_KNOWN_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:6
msgid "List of C++ features known to this version of CMake."
msgstr "此版本的 CMake 已知的 C++ 功能列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:8
msgid ""
"The features listed in this global property may be known to be available "
"to the C++ compiler.  If the feature is available with the C++ compiler, "
"it will be listed in the :variable:`CMAKE_CXX_COMPILE_FEATURES` variable."
msgstr ""
"此全局属性中列出的功能可能已知可用于 C++ 编译器。如果该功能适用​​于 C++ 编译器，它将列在 "
":variable:`CMAKE_CXX_COMPILE_FEATURES` 变量中。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:16
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:16
msgid "The features known to this version of CMake are listed below."
msgstr "下面列出了此版本 CMake 已知的功能。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:19
msgid "High level meta features indicating C++ standard support"
msgstr "指示 C++ 标准支持的高级元功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:23
msgid ""
"The following meta features indicate general support for the associated "
"language standard.  It reflects the language support claimed by the "
"compiler, but it does not necessarily imply complete conformance to that "
"standard."
msgstr "以下元功能表示对相关语言标准的一般支持。它反映了编译器声称的语言支持，但并不一定意味着完全符合该标准。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:28
msgid "``cxx_std_98``"
msgstr "``cxx_std_98``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:28
msgid "Compiler mode is at least C++ 98."
msgstr "编译器模式至少为 C++ 98。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:31
msgid "``cxx_std_11``"
msgstr "``cxx_std_11``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:31
msgid "Compiler mode is at least C++ 11."
msgstr "编译器模式至少为 C++ 11。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:34
msgid "``cxx_std_14``"
msgstr "``cxx_std_14``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:34
msgid "Compiler mode is at least C++ 14."
msgstr "编译器模式至少为 C++ 14。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:37
msgid "``cxx_std_17``"
msgstr "``cxx_std_17``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:37
msgid "Compiler mode is at least C++ 17."
msgstr "编译器模式至少为 C++ 17。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:42
msgid "``cxx_std_20``"
msgstr "``cxx_std_20``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:42
msgid "Compiler mode is at least C++ 20."
msgstr "编译器模式至少为 C++ 20。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:47
msgid "``cxx_std_23``"
msgstr "``cxx_std_23``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:47
msgid "Compiler mode is at least C++ 23."
msgstr "编译器模式至少为 C++ 23。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:52
msgid "``cxx_std_26``"
msgstr "``cxx_std_26``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:52
msgid "Compiler mode is at least C++ 26."
msgstr "编译器模式至少为 C++ 26。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:57
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:45
msgid "Low level individual compile features"
msgstr "低级个人编译功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:59
msgid ""
"For C++ 11 and C++ 14, compilers were sometimes slow to implement certain "
"language features.  CMake provided some individual compile features to "
"help projects determine whether specific features were available.  These "
"individual features are now less relevant and projects should generally "
"prefer to use the high level meta features instead.  Individual compile "
"features are not provided for C++ 17 or later."
msgstr ""
"对于 C++ 11 和 C++ 14，编译器有时在实现某些语言功能时速度很慢。 CMake "
"提供了一些单独的编译功能来帮助项目确定特定功能是否可用。这些单独的功能现在不太相关，项目通常应该更喜欢使用高级元功能。不为 C++ 17 "
"或更高版本提供单独的编译功能。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:66
msgid ""
"See the :manual:`cmake-compile-features(7)` manual for further discussion "
"of the use of individual compile features."
msgstr "请参阅 :manual:`cmake-compile-features(7)` 手册以进一步讨论各个编译功能的使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:70
msgid "Individual features from C++ 98"
msgstr "C++ 98 的个别功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:74
msgid "``cxx_template_template_parameters``"
msgstr "``cxx_template_template_parameters``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:73
msgid "Template template parameters, as defined in ``ISO/IEC 14882:1998``."
msgstr "Template 模板参数，如 ``ISO/IEC 14882:1998`` 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:77
msgid "Individual features from C++ 11"
msgstr "C++ 11 的个别功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:82
msgid "``cxx_alias_templates``"
msgstr "``cxx_alias_templates``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:80
msgid "Template aliases, as defined in N2258_."
msgstr "模板别名，如 N2258_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:87
msgid "``cxx_alignas``"
msgstr "``cxx_alignas``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:85
msgid "Alignment control ``alignas``, as defined in N2341_."
msgstr "对齐控制``alignas``，如 N2341_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:92
msgid "``cxx_alignof``"
msgstr "``cxx_alignof``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:90
msgid "Alignment control ``alignof``, as defined in N2341_."
msgstr "对齐控制 ``alignof``，如 N2341_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:97
msgid "``cxx_attributes``"
msgstr "``cxx_attributes``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:95
msgid "Generic attributes, as defined in N2761_."
msgstr "通用属性，如 N2761_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:102
msgid "``cxx_auto_type``"
msgstr "``cxx_auto_type``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:100
msgid "Automatic type deduction, as defined in N1984_."
msgstr "自动类型推导，如 N1984_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:108
msgid "``cxx_constexpr``"
msgstr "``cxx_constexpr``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:105
msgid "Constant expressions, as defined in N2235_."
msgstr "常量表达式，如 N2235_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:113
msgid "``cxx_decltype_incomplete_return_types``"
msgstr "``cxx_decltype_incomplete_return_types``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:111
msgid "Decltype on incomplete return types, as defined in N3276_."
msgstr "不完整返回类型的 Decltype，如 N3276_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:118
msgid "``cxx_decltype``"
msgstr "``cxx_decltype``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:116
msgid "Decltype, as defined in N2343_."
msgstr "Decltype，如 N2343_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:123
msgid "``cxx_default_function_template_args``"
msgstr "``cxx_default_function_template_args``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:121
msgid ""
"Default template arguments for function templates, as defined in DR226_"
msgstr "函数模板的默认模板参数，如 DR226_ 中所定义"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:128
msgid "``cxx_defaulted_functions``"
msgstr "``cxx_defaulted_functions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:126
msgid "Defaulted functions, as defined in N2346_."
msgstr "默认函数，如 N2346_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:133
msgid "``cxx_defaulted_move_initializers``"
msgstr "``cxx_defaulted_move_initializers``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:131
msgid "Defaulted move initializers, as defined in N3053_."
msgstr "默认移动初始值设定项，如 N3053_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:138
msgid "``cxx_delegating_constructors``"
msgstr "``cxx_delegating_constructors``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:136
msgid "Delegating constructors, as defined in N1986_."
msgstr "委托构造函数，如 N1986_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:143
msgid "``cxx_deleted_functions``"
msgstr "``cxx_deleted_functions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:141
msgid "Deleted functions, as defined in N2346_."
msgstr "已删除的功能，如 N2346_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:148
msgid "``cxx_enum_forward_declarations``"
msgstr "``cxx_enum_forward_declarations``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:146
msgid "Enum forward declarations, as defined in N2764_."
msgstr "枚举前向声明，如 N2764_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:153
msgid "``cxx_explicit_conversions``"
msgstr "``cxx_explicit_conversions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:151
msgid "Explicit conversion operators, as defined in N2437_."
msgstr "显式转换运算符，如 N2437_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:158
msgid "``cxx_extended_friend_declarations``"
msgstr "``cxx_extended_friend_declarations``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:156
msgid "Extended friend declarations, as defined in N1791_."
msgstr "扩展友元声明，如 N1791_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:163
msgid "``cxx_extern_templates``"
msgstr "``cxx_extern_templates``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:161
msgid "Extern templates, as defined in N1987_."
msgstr "外部模板，如 N1987_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:170
msgid "``cxx_final``"
msgstr "``cxx_final``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:166
msgid ""
"Override control ``final`` keyword, as defined in N2928_, N3206_ and "
"N3272_."
msgstr "覆盖控制“final”关键字，如 N2928_、N3206_ 和 N3272_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:175
msgid "``cxx_func_identifier``"
msgstr "``cxx_func_identifier``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:173
msgid "Predefined ``__func__`` identifier, as defined in N2340_."
msgstr "预定义的 ``__func__`` 标识符，如 N2340_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:180
msgid "``cxx_generalized_initializers``"
msgstr "``cxx_generalized_initializers``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:178
msgid "Initializer lists, as defined in N2672_."
msgstr "初始化列表，如 N2672_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:185
msgid "``cxx_inheriting_constructors``"
msgstr "``cxx_inheriting_constructors``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:183
msgid "Inheriting constructors, as defined in N2540_."
msgstr "继承构造函数，如 N2540_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:190
msgid "``cxx_inline_namespaces``"
msgstr "``cxx_inline_namespaces``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:188
msgid "Inline namespaces, as defined in N2535_."
msgstr "内联命名空间，如 N2535_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:195
msgid "``cxx_lambdas``"
msgstr "``cxx_lambdas``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:193
msgid "Lambda functions, as defined in N2927_."
msgstr "Lambda 函数，如 N2927_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:200
msgid "``cxx_local_type_template_args``"
msgstr "``cxx_local_type_template_args``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:198
msgid "Local and unnamed types as template arguments, as defined in N2657_."
msgstr "作为模板参数的本地和未命名类型，如 N2657_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:205
msgid "``cxx_long_long_type``"
msgstr "``cxx_long_long_type``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:203
msgid "``long long`` type, as defined in N1811_."
msgstr "``long long`` 类型，如 N1811_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:210
msgid "``cxx_noexcept``"
msgstr "``cxx_noexcept``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:208
msgid "Exception specifications, as defined in N3050_."
msgstr "异常规范，如 N3050_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:215
msgid "``cxx_nonstatic_member_init``"
msgstr "``cxx_nonstatic_member_init``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:213
msgid "Non-static data member initialization, as defined in N2756_."
msgstr "非静态数据成员初始化，如 N2756_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:220
msgid "``cxx_nullptr``"
msgstr "``cxx_nullptr``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:218
msgid "Null pointer, as defined in N2431_."
msgstr "空指针，如 N2431_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:228
msgid "``cxx_override``"
msgstr "``cxx_override``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:223
msgid ""
"Override control ``override`` keyword, as defined in N2928_, N3206_ and "
"N3272_."
msgstr "覆盖控制“override”关键字，如 N2928_、N3206_ 和 N3272_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:233
msgid "``cxx_range_for``"
msgstr "``cxx_range_for``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:231
msgid "Range-based for, as defined in N2930_."
msgstr "基于范围的，如 N2930_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:238
msgid "``cxx_raw_string_literals``"
msgstr "``cxx_raw_string_literals``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:236
msgid "Raw string literals, as defined in N2442_."
msgstr "原始字符串文字，如 N2442_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:243
msgid "``cxx_reference_qualified_functions``"
msgstr "``cxx_reference_qualified_functions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:241
msgid "Reference qualified functions, as defined in N2439_."
msgstr "引用限定函数，如 N2439_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:248
msgid "``cxx_right_angle_brackets``"
msgstr "``cxx_right_angle_brackets``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:246
msgid "Right angle bracket parsing, as defined in N1757_."
msgstr "右尖括号解析，如 N1757_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:253
msgid "``cxx_rvalue_references``"
msgstr "``cxx_rvalue_references``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:251
msgid "R-value references, as defined in N2118_."
msgstr "R 值参考，如 N2118_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:258
msgid "``cxx_sizeof_member``"
msgstr "``cxx_sizeof_member``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:256
msgid "Size of non-static data members, as defined in N2253_."
msgstr "非静态数据成员的大小，如 N2253_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:263
msgid "``cxx_static_assert``"
msgstr "``cxx_static_assert``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:261
msgid "Static assert, as defined in N1720_."
msgstr "静态断言，如 N1720_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:268
msgid "``cxx_strong_enums``"
msgstr "``cxx_strong_enums``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:266
msgid "Strongly typed enums, as defined in N2347_."
msgstr "强类型枚举，如 N2347_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:273
msgid "``cxx_thread_local``"
msgstr "``cxx_thread_local``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:271
msgid "Thread-local variables, as defined in N2659_."
msgstr "线程局部变量，如 N2659_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:278
msgid "``cxx_trailing_return_types``"
msgstr "``cxx_trailing_return_types``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:276
msgid "Automatic function return type, as defined in N2541_."
msgstr "自动函数返回类型，如 N2541_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:283
msgid "``cxx_unicode_literals``"
msgstr "``cxx_unicode_literals``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:281
msgid "Unicode string literals, as defined in N2442_."
msgstr "Unicode 字符串文字，如 N2442_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:288
msgid "``cxx_uniform_initialization``"
msgstr "``cxx_uniform_initialization``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:286
msgid "Uniform initialization, as defined in N2640_."
msgstr "统一初始化，如 N2640_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:293
msgid "``cxx_unrestricted_unions``"
msgstr "``cxx_unrestricted_unions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:291
msgid "Unrestricted unions, as defined in N2544_."
msgstr "不受限制的联合，如 N2544_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:298
msgid "``cxx_user_literals``"
msgstr "``cxx_user_literals``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:296
msgid "User-defined literals, as defined in N2765_."
msgstr "用户定义的文字，如 N2765_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:303
msgid "``cxx_variadic_macros``"
msgstr "``cxx_variadic_macros``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:301
msgid "Variadic macros, as defined in N1653_."
msgstr "可变参数宏，如 N1653_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:309
msgid "``cxx_variadic_templates``"
msgstr "``cxx_variadic_templates``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:306
msgid "Variadic templates, as defined in N2242_."
msgstr "可变参数模板，如 N2242_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:312
msgid "Individual features from C++ 14"
msgstr "C++ 14 的个别功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:317
msgid "``cxx_aggregate_default_initializers``"
msgstr "``cxx_aggregate_default_initializers``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:315
msgid "Aggregate default initializers, as defined in N3605_."
msgstr "聚合默认初始值设定项，如 N3605_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:322
msgid "``cxx_attribute_deprecated``"
msgstr "``cxx_attribute_deprecated``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:320
msgid "``[[deprecated]]`` attribute, as defined in N3760_."
msgstr "``[[弃用]]`` 属性，如 N3760_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:327
msgid "``cxx_binary_literals``"
msgstr "``cxx_binary_literals``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:325
msgid "Binary literals, as defined in N3472_."
msgstr "二进制文字，如 N3472_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:332
msgid "``cxx_contextual_conversions``"
msgstr "``cxx_contextual_conversions``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:330
msgid "Contextual conversions, as defined in N3323_."
msgstr "上下文转换，如 N3323_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:337
msgid "``cxx_decltype_auto``"
msgstr "``cxx_decltype_auto``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:335
msgid "``decltype(auto)`` semantics, as defined in N3638_."
msgstr "``decltype(auto)`` 语义，如 N3638_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:342
msgid "``cxx_digit_separators``"
msgstr "``cxx_digit_separators``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:340
msgid "Digit separators, as defined in N3781_."
msgstr "数字分隔符，如 N3781_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:347
msgid "``cxx_generic_lambdas``"
msgstr "``cxx_generic_lambdas``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:345
msgid "Generic lambdas, as defined in N3649_."
msgstr "通用 lambda，如 N3649_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:352
msgid "``cxx_lambda_init_captures``"
msgstr "``cxx_lambda_init_captures``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:350
msgid "Initialized lambda captures, as defined in N3648_."
msgstr "已初始化的 lambda 捕获，如 N3648_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:357
msgid "``cxx_relaxed_constexpr``"
msgstr "``cxx_relaxed_constexpr``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:355
msgid "Relaxed constexpr, as defined in N3652_."
msgstr "松弛的 constexpr，如 N3652_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:362
msgid "``cxx_return_type_deduction``"
msgstr "``cxx_return_type_deduction``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:360
msgid "Return type deduction on normal functions, as defined in N3386_."
msgstr "正常函数的返回类型推导，如 N3386_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:366
msgid "``cxx_variable_templates``"
msgstr "``cxx_variable_templates``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.rst:365
msgid "Variable templates, as defined in N3651_."
msgstr "变量模板，如 N3651_ 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:2
msgid "CMAKE_C_KNOWN_FEATURES"
msgstr "CMAKE_C_KNOWN_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:6
msgid "List of C features known to this version of CMake."
msgstr "此版本的 CMake 已知的 C 功能列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:8
msgid ""
"The features listed in this global property may be known to be available "
"to the C compiler.  If the feature is available with the C compiler, it "
"will be listed in the :variable:`CMAKE_C_COMPILE_FEATURES` variable."
msgstr ""
"此全局属性中列出的功能可能已知可用于 C 编译器。如果该功能适用​​于 C 编译器，它将列在 "
":variable:`CMAKE_C_COMPILE_FEATURES` 变量中。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:19
msgid "High level meta features indicating C standard support"
msgstr "指示 C 标准支持的高级元功能"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:24
msgid "``c_std_90``"
msgstr "``c_std_90``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:24
msgid "Compiler mode is at least C 90."
msgstr "编译器模式至少为 C 90。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:27
msgid "``c_std_99``"
msgstr "``c_std_99``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:27
msgid "Compiler mode is at least C 99."
msgstr "编译器模式至少为 C 99。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:30
msgid "``c_std_11``"
msgstr "``c_std_11``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:30
msgid "Compiler mode is at least C 11."
msgstr "编译器模式至少是 C 11。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:35
msgid "``c_std_17``"
msgstr "``c_std_17``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:35
msgid "Compiler mode is at least C 17."
msgstr "编译器模式至少为 C 17。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:40
msgid "``c_std_23``"
msgstr "``c_std_23``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:40
msgid "Compiler mode is at least C 23."
msgstr "编译器模式至少为 C 23。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:48
msgid "``c_function_prototypes``"
msgstr "``c_function_prototypes``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:48
msgid "Function prototypes, as defined in ``ISO/IEC 9899:1990``."
msgstr "函数原型，如 ``ISO/IEC 9899:1990`` 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:51
msgid "``c_restrict``"
msgstr "``c_restrict``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:51
msgid "``restrict`` keyword, as defined in ``ISO/IEC 9899:1999``."
msgstr "``restrict`` 关键字，如 ``ISO/IEC 9899:1999`` 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:54
msgid "``c_static_assert``"
msgstr "``c_static_assert``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:54
msgid "Static assert, as defined in ``ISO/IEC 9899:2011``."
msgstr "静态断言，如“ISO/IEC 9899:2011”中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:56
msgid "``c_variadic_macros``"
msgstr "``c_variadic_macros``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_C_KNOWN_FEATURES.rst:57
msgid "Variadic macros, as defined in ``ISO/IEC 9899:1999``."
msgstr "可变参数宏，如 ``ISO/IEC 9899:1999`` 中所定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:2
msgid "CMAKE_ROLE"
msgstr "CMAKE_ROLE"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:6
msgid ""
"Tells what mode the current running script is in. Could be one of several "
"values:"
msgstr "告诉当前运行的脚本处于什么模式。可以是以下几个值之一："

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:10
msgid "``PROJECT``"
msgstr "``项目``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:10
msgid "Running in project mode (processing a ``CMakeLists.txt`` file)."
msgstr "在项目模式下运行（处理 ``CMakeLists.txt`` 文件）。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:13
msgid "``SCRIPT``"
msgstr "``脚本``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:13
msgid "Running in ``-P`` script mode."
msgstr "在“-P”脚本模式下运行。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:16
msgid "``FIND_PACKAGE``"
msgstr "``FIND_PACKAGE``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:16
msgid "Running in ``--find-package`` mode."
msgstr "在“--find-package”模式下运行。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:19
msgid "``CTEST``"
msgstr "``测试``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:19
msgid "Running in CTest script mode."
msgstr "在 CTest 脚本模式下运行。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:21
msgid "``CPACK``"
msgstr "``CPACK``"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/CMAKE_ROLE.rst:22
msgid "Running in CPack."
msgstr "在 CPack 中运行。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DEBUG_CONFIGURATIONS.rst:2
msgid "DEBUG_CONFIGURATIONS"
msgstr "调试配置"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DEBUG_CONFIGURATIONS.rst:4
msgid "Specify which configurations are for debugging."
msgstr "指定哪些配置用于调试。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DEBUG_CONFIGURATIONS.rst:6
msgid ""
"The value must be a semi-colon separated list of configuration names. "
"Currently this property is used only by the "
":command:`target_link_libraries` command.  Additional uses may be defined "
"in the future."
msgstr ""
"该值必须是以分号分隔的配置名称列表。目前此属性仅由 :command:`target_link_libraries` "
"命令使用。将来可能会定义其他用途。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DEBUG_CONFIGURATIONS.rst:10
msgid ""
"This property must be set at the top level of the project and before the "
"first :command:`target_link_libraries` command invocation.  If any entry "
"in the list does not match a valid configuration for the project the "
"behavior is undefined."
msgstr ""
"此属性必须在项目的顶层和第一个 target_link_libraries "
"命令调用之前设置。如果列表中的任何条目与项目的有效配置不匹配，则行为未定义。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DISABLED_FEATURES.rst:2
msgid "DISABLED_FEATURES"
msgstr "DISABLED_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DISABLED_FEATURES.rst:4
msgid "List of features which are disabled during the CMake run."
msgstr "在 CMake 运行期间禁用的功能列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/DISABLED_FEATURES.rst:6
msgid ""
"List of features which are disabled during the CMake run.  By default it "
"contains the names of all packages which were not found.  This is "
"determined using the ``<NAME>_FOUND`` variables.  Packages which are "
"searched ``QUIET`` are not listed.  A project can add its own features to "
"this list.  This property is used by the macros in "
"``FeatureSummary.cmake``."
msgstr ""
"在 CMake "
"运行期间禁用的功能列表。默认情况下，它包含所有未找到的包的名称。这是使用“<NAME>_FOUND”变量确定的。未列出搜索到“QUIET”的包。项目可以将自己的功能添加到此列表中。此属性由“FeatureSummary.cmake”中的宏使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS.rst:2
msgid "ECLIPSE_EXTRA_CPROJECT_CONTENTS"
msgstr "ECLIPSE_EXTRA_CPROJECT_CONTENTS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS.rst:6
msgid ""
"Additional contents to be inserted into the generated Eclipse cproject "
"file."
msgstr "要插入到生成的 Eclipse cproject 文件中的附加内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS.rst:8
msgid ""
"The cproject file defines the CDT specific information. Some third party "
"IDE's are based on Eclipse with the addition of other information specific"
" to that IDE. Through this property, it is possible to add this additional"
" contents to the generated project. It is expected to contain valid XML."
msgstr ""
"cproject 文件定义了 CDT 特定信息。某些第三方 IDE 基于 Eclipse，并添加了特定于该 IDE "
"的其他信息。通过此属性，可以将此附加内容添加到生成的项目中。它应该包含有效的 XML。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_CPROJECT_CONTENTS.rst:14
msgid "Also see the :prop_gbl:`ECLIPSE_EXTRA_NATURES` property."
msgstr "另请参阅 :prop_gbl:`ECLIPSE_EXTRA_NATURES` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_NATURES.rst:2
msgid "ECLIPSE_EXTRA_NATURES"
msgstr "ECLIPSE_EXTRA_NATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_NATURES.rst:4
msgid "List of natures to add to the generated Eclipse project file."
msgstr "添加到生成的 Eclipse 项目文件的性质列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_NATURES.rst:6
msgid ""
"Eclipse projects specify language plugins by using natures. This property "
"should be set to the unique identifier for a nature (which looks like a "
"Java package name)."
msgstr "Eclipse 项目使用性质指定语言插件。此属性应设置为自然的唯一标识符（看起来像 Java 包名称）。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ECLIPSE_EXTRA_NATURES.rst:10
msgid "Also see the :prop_gbl:`ECLIPSE_EXTRA_CPROJECT_CONTENTS` property."
msgstr "另请参阅 :prop_gbl:`ECLIPSE_EXTRA_CPROJECT_CONTENTS` 属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_FEATURES.rst:2
msgid "ENABLED_FEATURES"
msgstr "ENABLED_FEATURES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_FEATURES.rst:4
msgid "List of features which are enabled during the CMake run."
msgstr "在 CMake 运行期间启用的功能列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_FEATURES.rst:6
msgid ""
"List of features which are enabled during the CMake run.  By default it "
"contains the names of all packages which were found.  This is determined "
"using the ``<NAME>_FOUND`` variables.  Packages which are searched "
"``QUIET`` are not listed.  A project can add its own features to this "
"list.  This property is used by the macros in ``FeatureSummary.cmake``."
msgstr ""
"在 CMake "
"运行期间启用的功能列表。默认情况下，它包含找到的所有包的名称。这是使用“<NAME>_FOUND”变量确定的。未列出搜索到“QUIET”的包。项目可以将自己的功能添加到此列表中。此属性由“FeatureSummary.cmake”中的宏使用。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_LANGUAGES.rst:2
msgid "ENABLED_LANGUAGES"
msgstr "ENABLED_LANGUAGES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_LANGUAGES.rst:4
msgid ""
"Read-only property that contains the list of currently enabled languages"
msgstr "包含当前启用语言列表的只读属性"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/ENABLED_LANGUAGES.rst:6
msgid "Set to list of currently enabled languages."
msgstr "设置为当前启用的语言列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS.rst:2
msgid "FIND_LIBRARY_USE_LIB32_PATHS"
msgstr "FIND_LIBRARY_USE_LIB32_PATHS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS.rst:6
msgid ""
"Whether the :command:`find_library` command should automatically search "
"``lib32`` directories."
msgstr ":command:`find_library` 命令是否应该自动搜索 ``lib32`` 目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS.rst:9
msgid ""
"``FIND_LIBRARY_USE_LIB32_PATHS`` is a boolean specifying whether the "
":command:`find_library` command should automatically search the ``lib32`` "
"variant of directories called ``lib`` in the search path when building "
"32-bit binaries."
msgstr ""
"``FIND_LIBRARY_USE_LIB32_PATHS`` 是一个布尔值，指定在构建 32 "
"位二进制文​​件时， :command:`find_library` 命令是否应该在搜索路径中自动搜索名为 `lib`` 的目录的 ``lib32``"
" 变体。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB32_PATHS.rst:14
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.rst:12
#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS.rst:14
msgid ""
"See also the :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` variable."
msgstr "另请参阅 :variable:`CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.rst:2
msgid "FIND_LIBRARY_USE_LIB64_PATHS"
msgstr "FIND_LIBRARY_USE_LIB64_PATHS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.rst:4
msgid ""
"Whether :command:`find_library` should automatically search lib64 "
"directories."
msgstr ":command:`find_library` 是否应该自动搜索 lib64 目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIB64_PATHS.rst:7
msgid ""
"FIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the "
":command:`find_library` command should automatically search the lib64 "
"variant of directories called lib in the search path when building 64-bit "
"binaries."
msgstr ""
"FIND_LIBRARY_USE_LIB64_PATHS 是一个布尔值，指定在构建 64 "
"位二进制文​​件时， :command:`find_library` 命令是否应自动搜索名为 lib 的目录的 lib64 变体。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS.rst:2
msgid "FIND_LIBRARY_USE_LIBX32_PATHS"
msgstr "FIND_LIBRARY_USE_LIBX32_PATHS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS.rst:6
msgid ""
"Whether the :command:`find_library` command should automatically search "
"``libx32`` directories."
msgstr ":command:`find_library` 命令是否应该自动搜索 ``libx32`` 目录。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_LIBX32_PATHS.rst:9
msgid ""
"``FIND_LIBRARY_USE_LIBX32_PATHS`` is a boolean specifying whether the "
":command:`find_library` command should automatically search the ``libx32``"
" variant of directories called ``lib`` in the search path when building "
"x32-abi binaries."
msgstr ""
"``FIND_LIBRARY_USE_LIBX32_PATHS`` 是一个布尔值，指定在构建 x32-abi "
"二进制文件时， :command:`find_library` 命令是否应该在搜索路径中自动搜索名为 `lib`` 的目录的 ``libx32`` "
"变体。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.rst:2
msgid "FIND_LIBRARY_USE_OPENBSD_VERSIONING"
msgstr "FIND_LIBRARY_USE_OPENBSD_VERSIONING"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.rst:4
msgid ""
"Whether :command:`find_library` should find OpenBSD-style shared "
"libraries."
msgstr ":command:`find_library` 是否应该找到 OpenBSD 风格的共享库。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/FIND_LIBRARY_USE_OPENBSD_VERSIONING.rst:7
msgid ""
"This property is a boolean specifying whether the :command:`find_library` "
"command should find shared libraries with OpenBSD-style versioned "
"extension: \".so.<major>.<minor>\".  The property is set to true on "
"OpenBSD and false on other platforms."
msgstr ""
"此属性是一个布尔值，指定 :command:`find_library` 命令是否应查找具有 OpenBSD "
"样式版本化扩展名的共享库：“.so.<major>.<minor>”。该属性在 OpenBSD 上设置为 true，在其他平台上设置为 false。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:2
msgid "GENERATOR_IS_MULTI_CONFIG"
msgstr "GENERATOR_IS_MULTI_CONFIG"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:6
msgid "Read-only property that is true on multi-configuration generators."
msgstr "在多配置生成器上为 true 的只读属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:8
msgid "True when using a multi-configuration generator such as:"
msgstr "使用多配置生成器时为真，例如："

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:10
msgid ":generator:`Ninja Multi-Config`"
msgstr ":generator:`忍者多配置`"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:11
msgid ":ref:`Visual Studio Generators`"
msgstr ":ref:`Visual Studio 生成器`"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:12
msgid ":generator:`Xcode`"
msgstr ":generator:`Xcode`"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GENERATOR_IS_MULTI_CONFIG.rst:14
msgid ""
"Multi-config generators use :variable:`CMAKE_CONFIGURATION_TYPES` as the "
"set of configurations and ignore :variable:`CMAKE_BUILD_TYPE`."
msgstr ""
"多配置生成器使用 :variable:`CMAKE_CONFIGURATION_TYPES` 作为配置集并忽略 "
":variable:`CMAKE_BUILD_TYPE`。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.rst:2
msgid "GLOBAL_DEPENDS_DEBUG_MODE"
msgstr "GLOBAL_DEPENDS_DEBUG_MODE"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.rst:4
msgid "Enable global target dependency graph debug mode."
msgstr "启用全局目标依赖关系图调试模式。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_DEBUG_MODE.rst:6
msgid ""
"CMake automatically analyzes the global inter-target dependency graph at "
"the beginning of native build system generation.  This property causes it "
"to display details of its analysis to stderr."
msgstr "CMake 在本机构建系统生成开始时自动分析全局目标间依赖关系图。此属性导致它向 stderr 显示其分析的详细信息。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.rst:2
msgid "GLOBAL_DEPENDS_NO_CYCLES"
msgstr "GLOBAL_DEPENDS_NO_CYCLES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.rst:4
msgid "Disallow global target dependency graph cycles."
msgstr "禁止全局目标依赖图循环。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/GLOBAL_DEPENDS_NO_CYCLES.rst:6
msgid ""
"CMake automatically analyzes the global inter-target dependency graph at "
"the beginning of native build system generation.  It reports an error if "
"the dependency graph contains a cycle that does not consist of all STATIC "
"library targets.  This property tells CMake to disallow all cycles "
"completely, even among static libraries."
msgstr ""
"CMake 在本机构建系统生成开始时自动分析全局目标间依赖关系图。如果依赖图包含一个不包含所有 STATIC 库目标的循环，它会报告错误。此属性告诉"
" CMake 完全禁止所有循环，即使在静态库之间也是如此。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/IN_TRY_COMPILE.rst:2
msgid "IN_TRY_COMPILE"
msgstr "IN_TRY_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/IN_TRY_COMPILE.rst:4
msgid "Read-only property that is true during a try-compile configuration."
msgstr "在尝试编译配置期间为 true 的只读属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/IN_TRY_COMPILE.rst:6
msgid ""
"True when building a project inside a :command:`try_compile` or "
":command:`try_run` command."
msgstr "在 :command:`try_compile` 或 :command:`try_run` 命令中构建项目时为真。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:2
msgid "JOB_POOLS"
msgstr "JOB_POOLS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:4
msgid "Ninja only: List of available pools."
msgstr "仅限 Ninja：可用池列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:6
msgid ""
"A pool is a named integer property and defines the maximum number of "
"concurrent jobs which can be started by a rule assigned to the pool. The "
"``JOB_POOLS`` property is a semicolon-separated list of pairs using the "
"syntax ``NAME=integer`` (without a space after the equality sign)."
msgstr ""
"池是一个命名的整数属性，它定义了可以由分配给池的规则启动的并发作业的最大数量。 ``JOB_POOLS`` 属性是以分号分隔的成对列表，使用语法 "
"``NAME=integer``（等号后没有空格）。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:11
msgid "For instance:"
msgstr "例如："

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:17
msgid ""
"Defined pools could be used globally by setting "
":variable:`CMAKE_JOB_POOL_COMPILE` and :variable:`CMAKE_JOB_POOL_LINK` or "
"per target by setting the target properties :prop_tgt:`JOB_POOL_COMPILE` "
"and :prop_tgt:`JOB_POOL_LINK`. :command:`Custom commands "
"<add_custom_command>` and :command:`custom targets <add_custom_target>` "
"can specify pools using the option ``JOB_POOL``. Using a pool that is not "
"defined by ``JOB_POOLS`` causes an error by ninja at build time."
msgstr ""
"定义的池可以通过设置 CMAKE_JOB_POOL_COMPILE 和 CMAKE_JOB_POOL_LINK 全局使用，或者通过设置目标属性 "
"JOB_POOL_COMPILE 和 JOB_POOL_LINK 为每个目标使用。 :command:`Custom commands "
"<add_custom_command>` 和 :command:`custom targets <add_custom_target>` "
"可以使用选项 ``JOB_POOL`` 指定池。使用不是由 JOB_POOLS 定义的池会导致 ninja 在构建时出错。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:27
msgid ""
"If not set, this property uses the value of the "
":variable:`CMAKE_JOB_POOLS` variable."
msgstr "如果未设置，此属性将使用 CMAKE_JOB_POOLS 变量的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/JOB_POOLS.rst:30
msgid ""
"Build targets provided by CMake that are meant for individual interactive "
"use, such as ``install``, are placed in the ``console`` pool "
"automatically."
msgstr "CMake 提供的用于个人交互使用的构建目标（例如“install”）会自动放置在“console”池中。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_FOUND.rst:2
msgid "PACKAGES_FOUND"
msgstr "PACKAGES_FOUND"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_FOUND.rst:4
msgid "List of packages which were found during the CMake run."
msgstr "在 CMake 运行期间找到的包列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_FOUND.rst:6
msgid ""
"List of packages which were found during the CMake run.  Whether a package"
" has been found is determined using the <NAME>_FOUND variables."
msgstr "在 CMake 运行期间找到的包列表。使用 <NAME>_FOUND 变量确定是否已找到包。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_NOT_FOUND.rst:2
msgid "PACKAGES_NOT_FOUND"
msgstr "PACKAGES_NOT_FOUND"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_NOT_FOUND.rst:4
msgid "List of packages which were not found during the CMake run."
msgstr "在 CMake 运行期间未找到的包列表。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PACKAGES_NOT_FOUND.rst:6
msgid ""
"List of packages which were not found during the CMake run.  Whether a "
"package has been found is determined using the <NAME>_FOUND variables."
msgstr "在 CMake 运行期间未找到的包列表。使用 <NAME>_FOUND 变量确定是否已找到包。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PREDEFINED_TARGETS_FOLDER.rst:2
msgid "PREDEFINED_TARGETS_FOLDER"
msgstr "PREDEFINED_TARGETS_FOLDER"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PREDEFINED_TARGETS_FOLDER.rst:4
msgid "Name of FOLDER for targets that are added automatically by CMake."
msgstr "CMake 自动添加的目标的文件夹名称。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/PREDEFINED_TARGETS_FOLDER.rst:6
msgid ""
"If not set, CMake uses \"CMakePredefinedTargets\" as a default value for "
"this property.  Targets such as INSTALL, PACKAGE and RUN_TESTS will be "
"organized into this FOLDER.  See also the documentation for the "
":prop_tgt:`FOLDER` target property."
msgstr ""
"如果未设置，CMake 使用“CMakePredefinedTargets”作为该属性的默认值。 INSTALL、PACKAGE 和 "
"RUN_TESTS 等目标将组织到此文件夹中。另请参阅 :prop_tgt:`FOLDER` 目标属性的文档。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/REPORT_UNDEFINED_PROPERTIES.rst:2
msgid "REPORT_UNDEFINED_PROPERTIES"
msgstr "REPORT_UNDEFINED_PROPERTIES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/REPORT_UNDEFINED_PROPERTIES.rst:4
msgid "If set, report any undefined properties to this file."
msgstr "如果设置，则向该文件报告任何未定义的属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/REPORT_UNDEFINED_PROPERTIES.rst:6
msgid ""
"If this property is set to a filename then when CMake runs it will report "
"any properties or variables that were accessed but not defined into the "
"filename specified in this property."
msgstr "如果此属性设置为文件名，则当 CMake 运行时，它将报告任何已访问但未定义到此属性中指定的文件名中的属性或变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_COMPILE.rst:2
msgid "RULE_LAUNCH_COMPILE"
msgstr "RULE_LAUNCH_COMPILE"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_COMPILE.rst:4
msgid "Specify a launcher for compile rules."
msgstr "为编译规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_COMPILE.rst:7
msgid ""
"This property is intended for internal use by :manual:`ctest(1)`.  "
"Projects and developers should use the "
":prop_tgt:`<LANG>_COMPILER_LAUNCHER` target properties or the associated "
":variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` variables instead."
msgstr ""
"此属性供 :manual:`ctest(1)` "
"内部使用。项目和开发人员应该使用 :prop_tgt:`<LANG>_COMPILER_LAUNCHER` "
"目标属性或相关的 :variable:`CMAKE_<LANG>_COMPILER_LAUNCHER` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_COMPILE.rst:12
msgid ""
":ref:`Makefile Generators` and the :generator:`Ninja` generator prefix "
"compiler commands with the given launcher command line. This is intended "
"to allow launchers to intercept build problems with high granularity.  "
"Other generators ignore this property because their underlying build "
"systems provide no hook to wrap individual commands with a launcher."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` "
"生成器前缀编译器命令与给定的启动器命令行。这是为了允许启动器以高粒度拦截构建问题。其他生成器忽略此属性，因为它们的底层构建系统不提供挂钩来使用启动器包装单个命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_CUSTOM.rst:2
msgid "RULE_LAUNCH_CUSTOM"
msgstr "RULE_LAUNCH_CUSTOM"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_CUSTOM.rst:4
msgid "Specify a launcher for custom rules."
msgstr "为自定义规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_CUSTOM.rst:6
msgid ""
":ref:`Makefile Generators` and the :generator:`Ninja` generator prefix "
"custom commands with the given launcher command line. This is intended to "
"allow launchers to intercept build problems with high granularity.  Other "
"generators ignore this property because their underlying build systems "
"provide no hook to wrap individual commands with a launcher."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` "
"生成器使用给定的启动器命令行为自定义命令添加前缀。这是为了允许启动器以高粒度拦截构建问题。其他生成器忽略此属性，因为它们的底层构建系统不提供挂钩来使用启动器包装单个命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_LINK.rst:2
msgid "RULE_LAUNCH_LINK"
msgstr "RULE_LAUNCH_LINK"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_LINK.rst:4
msgid "Specify a launcher for link rules."
msgstr "为链接规则指定启动器。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_LINK.rst:7
msgid ""
"This property is intended for internal use by :manual:`ctest(1)`.  "
"Projects and developers should use the :prop_tgt:`<LANG>_LINKER_LAUNCHER` "
"target properties or the associated "
":variable:`CMAKE_<LANG>_LINKER_LAUNCHER` variables instead."
msgstr ""
"此属性供 :manual:`ctest(1)` 内部使用。项目和开发人员应该使用 :prop_tgt:`<LANG>_LINKER_LAUNCHER`"
" 目标属性或关联的 :variable:`CMAKE_<LANG>_LINKER_LAUNCHER` 变量。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_LAUNCH_LINK.rst:12
msgid ""
":ref:`Makefile Generators` and the :generator:`Ninja` generator prefix "
"link and archive commands with the given launcher command line. This is "
"intended to allow launchers to intercept build problems with high "
"granularity.  Other generators ignore this property because their "
"underlying build systems provide no hook to wrap individual commands with "
"a launcher."
msgstr ""
":ref:`Makefile Generators` 和 :generator:`Ninja` "
"生成器前缀链接和存档命令与给定的启动器命令行。这是为了允许启动器以高粒度拦截构建问题。其他生成器忽略此属性，因为它们的底层构建系统不提供挂钩来使用启动器包装单个命令。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_MESSAGES.rst:2
msgid "RULE_MESSAGES"
msgstr "规则消息"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_MESSAGES.rst:4
msgid "Specify whether to report a message for each make rule."
msgstr "指定是否为每个 make 规则报告消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/RULE_MESSAGES.rst:6
msgid ""
"This property specifies whether Makefile generators should add a progress "
"message describing what each build rule does.  If the property is not set "
"the default is ON.  Set the property to OFF to disable granular messages "
"and report only as each target completes. This is intended to allow "
"scripted builds to avoid the build time cost of detailed reports.  If a "
":variable:`CMAKE_RULE_MESSAGES` cache entry exists its value initializes "
"the value of this property.  Non-Makefile generators currently ignore this"
" property."
msgstr ""
"此属性指定 Makefile 生成器是否应添加一个进度消息来描述每个构建规则的作用。如果未设置该属性，则默认值为 ON。将该属性设置为 OFF "
"以禁用精细消息并仅在每个目标完成时报告。这是为了允许脚本化构建以避免详细报告的构建时间成本。如果 "
":variable:`CMAKE_RULE_MESSAGES` 缓存条目存在，其值将初始化此属性的值。非 Makefile 生成器当前忽略此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.rst:2
msgid "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS"
msgstr "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.rst:4
msgid "Set if shared libraries may be named like archives."
msgstr "设置共享库是否可以像存档一样命名。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_ARCHIVES_MAY_BE_SHARED_LIBS.rst:6
msgid ""
"On AIX shared libraries may be named \"lib<name>.a\".  This property is "
"set to true on such platforms."
msgstr "在 AIX 上，共享库可能被命名为“lib<name>.a”。此属性在此类平台上设置为 true。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:2
msgid "TARGET_MESSAGES"
msgstr "TARGET_MESSAGES"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:6
msgid "Specify whether to report the completion of each target."
msgstr "指定是否报告每个目标的完成情况。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:8
msgid ""
"This property specifies whether :ref:`Makefile Generators` should add a "
"progress message describing that each target has been completed. If the "
"property is not set the default is ``ON``.  Set the property to ``OFF`` to"
" disable target completion messages."
msgstr ""
"此属性指定 Makefile Generators 是否应添加描述每个目标已完成的进度消息。如果未设置该属性，则默认值为 "
"``ON``。将属性设置为“OFF”以禁用目标完成消息。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:13
msgid ""
"This option is intended to reduce build output when little or no work "
"needs to be done to bring the build tree up to date."
msgstr "当需要做很少或不需要做任何工作来更新构建树时，此选项旨在减少构建输出。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:16
msgid ""
"If a ``CMAKE_TARGET_MESSAGES`` cache entry exists its value initializes "
"the value of this property."
msgstr "如果存在“CMAKE_TARGET_MESSAGES”缓存条目，则其值会初始化此属性的值。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:19
msgid "Non-Makefile generators currently ignore this property."
msgstr "非 Makefile 生成器当前忽略此属性。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_MESSAGES.rst:21
msgid ""
"See the counterpart property :prop_gbl:`RULE_MESSAGES` to disable "
"everything except for target completion messages."
msgstr "请参阅对应属性 :prop_gbl:`RULE_MESSAGES` 以禁用除目标完成消息之外的所有内容。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.rst:2
msgid "TARGET_SUPPORTS_SHARED_LIBS"
msgstr "TARGET_SUPPORTS_SHARED_LIBS"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.rst:4
msgid "Does the target platform support shared libraries."
msgstr "目标平台是否支持共享库。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/TARGET_SUPPORTS_SHARED_LIBS.rst:6
msgid ""
"TARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target "
"platform supports shared libraries.  Basically all current general general"
" purpose OS do so, the exception are usually embedded systems with no or "
"special OSs."
msgstr ""
"TARGET_SUPPORTS_SHARED_LIBS "
"是一个布尔值，指定目标平台是否支持共享库。基本上所有当前的通用操作系统都这样做，通常没有或没有特殊操作系统的嵌入式系统除外。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/USE_FOLDERS.rst:2
msgid "USE_FOLDERS"
msgstr "使用文件夹"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/USE_FOLDERS.rst:4
msgid ""
"Controls whether to use the :prop_tgt:`FOLDER` target property to organize"
" targets into folders.  The value of ``USE_FOLDERS`` at the end of the top"
" level ``CMakeLists.txt`` file is what determines the behavior."
msgstr ""
"控制是否使用 :prop_tgt:`FOLDER` "
"目标属性将目标组织到文件夹中。顶层“CMakeLists.txt”文件末尾的“USE_FOLDERS”值决定了行为。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/USE_FOLDERS.rst:10
msgid ""
"CMake treats this property as ``ON`` by default. See policy "
":policy:`CMP0143`."
msgstr "CMake 默认将此属性视为 ``ON``。请参阅政策:policy:`CMP0143`。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/USE_FOLDERS.rst:13
msgid ""
"Not all CMake generators support recording folder details for targets. The"
" :generator:`Xcode` and :ref:`Visual Studio <Visual Studio Generators>` "
"generators are examples of generators that do.  Similarly, not all IDEs "
"support presenting targets using folder hierarchies, even if the CMake "
"generator used provides the necessary information."
msgstr ""
"并非所有 CMake 生成器都支持记录目标的文件夹详细信息。 :generator:`Xcode` 和 :ref:`Visual Studio "
"<Visual Studio Generators>` 生成器就是这样的生成器示例。同样，并非所有 IDE "
"都支持使用文件夹层次结构呈现目标，即使使用的 CMake 生成器提供了必要的信息。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:2
msgid "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME"
msgstr "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:6
msgid ""
"Control emission of ``EFFECTIVE_PLATFORM_NAME`` by the :generator:`Xcode` "
"generator."
msgstr "通过 Xcode 生成器控制 `EFFECTIVE_PLATFORM_NAME`` 的发射。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:9
msgid ""
"It is required for building the same target with multiple SDKs. A common "
"use case is the parallel use of ``iphoneos`` and ``iphonesimulator`` SDKs."
msgstr ""
"它是使用多个 SDK 构建相同目标所必需的。一个常见的用例是并行使用 ``iphoneos`` 和 ``iphonesimulator`` SDK。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:13
msgid ""
"Three different states possible that control when the :generator:`Xcode` "
"generator emits the ``EFFECTIVE_PLATFORM_NAME`` variable:"
msgstr "三种不同的状态可能控制 Xcode 生成器何时发出 EFFECTIVE_PLATFORM_NAME 变量："

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:16
msgid "If set to ``ON`` it will always be emitted"
msgstr "如果设置为 ``ON`` 它将始终被发射"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:17
msgid "If set to ``OFF`` it will never be emitted"
msgstr "如果设置为 ``OFF`` 它将永远不会被发射"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:18
msgid ""
"If unset (the default) it will only be emitted when the project was "
"configured for an embedded Xcode SDK like iOS, tvOS, watchOS or any of the"
" simulators."
msgstr "如果未设置（默认），则仅当项目配置为嵌入式 Xcode SDK（如 iOS、tvOS、watchOS 或任何模拟器）时才会发出。"

#: ../../cmake-prefix/src/cmake/Help/prop_gbl/XCODE_EMIT_EFFECTIVE_PLATFORM_NAME.rst:24
msgid ""
"When this behavior is enable for generated Xcode projects, the "
"``EFFECTIVE_PLATFORM_NAME`` variable will leak into :manual:`Generator "
"expressions <cmake-generator-expressions(7)>` like ``TARGET_FILE`` and "
"will render those mostly unusable."
msgstr ""
"当为生成的 Xcode 项目启用此行为时，``EFFECTIVE_PLATFORM_NAME`` 变量将泄漏到 :manual:`Generator"
" expressions <cmake-generator-expressions(7)>` 中，如 ``TARGET_FILE`` "
"并将呈现那些大部分无法使用的表达式。"
